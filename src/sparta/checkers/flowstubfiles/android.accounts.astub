package android.accounts;

class AccountManager {
    static AccountManager get(Context arg0);
    @Source(AUTHENTICATE_ACCOUNTS) String getPassword(Account arg0);
    @Source(AUTHENTICATE_ACCOUNTS) String getUserData(Account arg0, String arg1);
    AuthenticatorDescription[] getAuthenticatorTypes();
    Account[] getAccounts();
    Account[] getAccountsByTypeForPackage(String arg0, String arg1);
    Account[] getAccountsByType(String arg0);
    AccountManagerFuture<Boolean> hasFeatures(Account arg0, String[] arg1, AccountManagerCallback<Boolean> arg2, Handler arg3);
    AccountManagerFuture<Account[]> getAccountsByTypeAndFeatures(String arg0, String[] arg1, AccountManagerCallback<Account[]> arg2, Handler arg3);
    boolean addAccountExplicitly(Account arg0, @Sink(AUTHENTICATE_ACCOUNTS) String arg1, @Sink(AUTHENTICATE_ACCOUNTS) Bundle arg2);
    AccountManagerFuture<Boolean> removeAccount(Account arg0, AccountManagerCallback<Boolean> arg1, Handler arg2);
    void invalidateAuthToken(@Sink(MANAGE_ACCOUNTS) String arg0, @Sink(MANAGE_ACCOUNTS) String arg1);
    @Source(AUTHENTICATE_ACCOUNTS) String peekAuthToken(Account arg0, String arg1);
    void setPassword(Account arg0, @Sink(AUTHENTICATE_ACCOUNTS) String arg1);
    void clearPassword(Account arg0);
    void setUserData(Account arg0, @Sink(AUTHENTICATE_ACCOUNTS) String arg1, @Sink(AUTHENTICATE_ACCOUNTS) String arg2);
    void setAuthToken(Account arg0, @Sink(AUTHENTICATE_ACCOUNTS) String arg1, @Sink(AUTHENTICATE_ACCOUNTS) String arg2);
    String blockingGetAuthToken(Account arg0, String arg1, boolean arg2) throws OperationCanceledException,IOException,AuthenticatorException;
    AccountManagerFuture<@Source(USE_CREDENTIALS) Bundle> getAuthToken(Account arg0, String arg1, Bundle arg2, Activity arg3, AccountManagerCallback<Bundle> arg4, Handler arg5);
    AccountManagerFuture<@Source(USE_CREDENTIALS) Bundle> getAuthToken(Account arg0, String arg1, boolean arg2, AccountManagerCallback<Bundle> arg3, Handler arg4);
    AccountManagerFuture<@Source(USE_CREDENTIALS) Bundle> getAuthToken(Account arg0, String arg1, Bundle arg2, boolean arg3, AccountManagerCallback<Bundle> arg4, Handler arg5);
    AccountManagerFuture<@Source(MANAGE_ACCOUNTS) Bundle> addAccount(String arg0, String arg1, String[] arg2, Bundle arg3, Activity arg4, AccountManagerCallback<Bundle> arg5, Handler arg6);
    AccountManagerFuture<@Source(USE_CREDENTIALS) Bundle> confirmCredentials(Account arg0, Bundle arg1, Activity arg2, AccountManagerCallback<Bundle> arg3, Handler arg4);
    AccountManagerFuture<@Source(USE_CREDENTIALS) Bundle> updateCredentials(Account arg0, String arg1, Bundle arg2, Activity arg3, AccountManagerCallback<Bundle> arg4, Handler arg5);
    AccountManagerFuture<@Source(MANAGE_ACCOUNTS) Bundle> editProperties(String arg0, Activity arg1, AccountManagerCallback<Bundle> arg2, Handler arg3);
    AccountManagerFuture<@Source(USE_CREDENTIALS) Bundle> getAuthTokenByFeatures(String arg0, String arg1, String[] arg2, Activity arg3, Bundle arg4, Bundle arg5, AccountManagerCallback<Bundle> arg6, Handler arg7);
    static Intent newChooseAccountIntent(Account arg0, ArrayList<Account> arg1, String[] arg2, boolean arg3, String arg4, String arg5, String[] arg6, Bundle arg7);
    void addOnAccountsUpdatedListener(OnAccountsUpdateListener arg0, Handler arg1, boolean arg2);
    void removeOnAccountsUpdatedListener(OnAccountsUpdateListener arg0);
}

class Account implements Parcelable {
    final String name;
    final String type;
    final Creator<Account> CREATOR;
    @AddsSourceData(2)
    Account(String arg0, @Source(GET_ACCOUNTS) String arg1);
    Account(Parcel arg0);
    boolean equals(Object arg0);
    int hashCode();
    int describeContents();
    void writeToParcel(Parcel arg0, int arg1);
    String toString();
}

class OnAccountsUpdateListener{
    void onAccountsUpdated(@Source({}) Account @Source({}) [] arg0);
}


