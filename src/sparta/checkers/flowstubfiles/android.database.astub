
package android.database;

class DatabaseUtils {
@Source(DATABASE) static long queryNumEntries(@Sink(DATABASE) SQLiteDatabase db, @Sink(DATABASE) String table, @Sink(DATABASE) String selection, @Sink(DATABASE) String[] selectionArgs);
@Source(DATABASE) static long queryNumEntries(@Sink(DATABASE) SQLiteDatabase db, @Sink(DATABASE) String table, @Sink(DATABASE) String selection);
@Source(DATABASE) static long queryNumEntries(@Sink(DATABASE) SQLiteDatabase db, @Sink(DATABASE) String table);
}

class ContentObserver {
ContentObserver(Handler handler);

boolean deliverSelfNotifications();
//Returns true if this observer is interested receiving self-change notifications.

final void dispatchChange(boolean selfChange, Uri uri);
//Dispatches a change notification to the observer.

final void dispatchChange(boolean selfChange);
//This method was deprecated in API level 16. Use dispatchChange(boolean, Uri); instead.

void onChange(boolean selfChange, Uri uri);
//This method is called when a content change occurs.

void onChange(boolean selfChange);
//This method is called when a content change occurs.

    
    
}

interface Cursor {
    static final int FIELD_TYPE_NULL;
    static final int FIELD_TYPE_INTEGER;
    static final int FIELD_TYPE_FLOAT;
    static final int FIELD_TYPE_STRING;
    static final int FIELD_TYPE_BLOB;
    int getCount();
    int getPosition();
    boolean move(int arg0);
    boolean moveToPosition(int arg0);
    boolean moveToFirst();
    boolean moveToLast();
    boolean moveToNext();
    boolean moveToPrevious();
    boolean isFirst();
    boolean isLast();
    boolean isBeforeFirst();
    boolean isAfterLast();
    int getColumnIndex(String arg0);
    int getColumnIndexOrThrow(String arg0) throws IllegalArgumentException;
@PolyFlowReceiver
    String getColumnName(int arg0);
    @PolySourceR @PolySinkR String[] getColumnNames(@PolySourceR @PolySinkR Cursor this);
    int getColumnCount();
    @PolySourceR @PolySinkR byte[] getBlob(@PolySourceR @PolySinkR Cursor this, int arg0);
@PolyFlowReceiver
    String getString(int arg0);
@AddsSourceData(2)
    void copyStringToBuffer(@PolySourceR @PolySinkR Cursor this, int arg0, @PolySourceR @PolySinkR CharArrayBuffer arg1);
@PolyFlowReceiver
    short getShort(int arg0);
@PolyFlowReceiver
    int getInt(int arg0);
@PolyFlowReceiver
    long getLong(int arg0);
@PolyFlowReceiver
    float getFloat(int arg0);
@PolyFlowReceiver
    double getDouble(int arg0);
@PolyFlowReceiver
    int getType(int arg0);
    boolean isNull(int arg0);
    void deactivate();
    boolean requery();
    void close();
    boolean isClosed();
    void registerContentObserver(ContentObserver arg0);
    void unregisterContentObserver(ContentObserver arg0);
    void registerDataSetObserver(DataSetObserver arg0);
    void unregisterDataSetObserver(DataSetObserver arg0);
    void setNotificationUri(ContentResolver arg0, Uri arg1);
@PolyFlowReceiver
    Uri getNotificationUri();
    boolean getWantsAllOnMoveCalls();
@PolyFlowReceiver
    Bundle getExtras();
@PolyFlowReceiver
    Bundle respond(Bundle arg0);
}


class DataSetObserver{
            void onInvalidated();
            void onChanged();
            DataSetObserver();
}
class DataSetObservable {
    
void notifyChanged();
//Invokes onChanged(); on each observer.

void notifyInvalidated();
//Invokes onInvalidated(); on each observer.


}

class MatrixCursor {
    
void addRow(Iterable<?> columnValues);
//Adds a new row to the end with the given column values.

void addRow(Object[] columnValues);
//Adds a new row to the end with the given column values.

byte[] getBlob(int column);
//Returns the value of the requested column as a byte array.

String[] getColumnNames();
//Returns a string array holding the names of all of the columns in the result set in the order in which they were listed in the result.

int getCount();
//Returns the numbers of rows in the cursor.

double getDouble(int column);
//Returns the value of the requested column as a double.

float getFloat(int column);
//Returns the value of the requested column as a float.

int getInt(int column);
//Returns the value of the requested column as an int.

long getLong(int column);
//Returns the value of the requested column as a long.

short getShort(int column);
//Returns the value of the requested column as a short.

String getString(int column);
//Returns the value of the requested column as a String.

int getType(int column);
//Returns data type of the given column's value.

boolean isNull(int column);
//Returns true if the value in the indicated column is null.

MatrixCursor.RowBuilder newRow();
//Adds a new row to the end and returns a builder for that row.



}

class Observable<T> {
            void unregisterObserver(T observer);
            void registerObserver(T observer);
}

package android.database.sqlite;

class SQLiteClosable {
//void acquireReference();
//Acquires a reference to the object.

void close();
//Releases a reference to the object, closing the object if the last reference was released.

//void releaseReference();
//Releases a reference to the object, closing the object if the last reference was released.

//void releaseReferenceFromContainer();
//This method was deprecated in API level 16. Do not use.


//PROTECTED
//abstract void onAllReferencesReleased();
//Called when the last reference to the object was released by a call to releaseReference(); or close();.

//void onAllReferencesReleasedFromContainer();
//This method was deprecated in API level 16. Do not use.

}

class SQLiteDatabase extends SQLiteClosable {
    static final int CONFLICT_ROLLBACK;
    static final int CONFLICT_ABORT;
    static final int CONFLICT_FAIL;
    static final int CONFLICT_IGNORE;
    static final int CONFLICT_REPLACE;
    static final int CONFLICT_NONE;
    static final int SQLITE_MAX_LIKE_PATTERN_LENGTH;
    static final int OPEN_READWRITE;
    static final int OPEN_READONLY;
    static final int NO_LOCALIZED_COLLATORS;
    static final int CREATE_IF_NECESSARY;
    static final int ENABLE_WRITE_AHEAD_LOGGING;
    static final int MAX_SQL_CACHE_SIZE;
    protected void finalize() throws Throwable;
    protected void onAllReferencesReleased();
    static int releaseMemory();
    void setLockingEnabled(boolean arg0);
    void beginTransaction();
    void beginTransactionNonExclusive();
    void beginTransactionWithListener(SQLiteTransactionListener arg0);
    void beginTransactionWithListenerNonExclusive(SQLiteTransactionListener arg0);
    void endTransaction();
    void setTransactionSuccessful();
    boolean inTransaction();
    boolean isDbLockedByCurrentThread();
    boolean isDbLockedByOtherThreads();
    boolean yieldIfContended();
    boolean yieldIfContendedSafely();
    boolean yieldIfContendedSafely(long arg0);
    Map<String,String> getSyncedTables();
@InferParameterizedPermission(DATABASE)
    static @Source(DATABASE) SQLiteDatabase openDatabase(String arg0, CursorFactory arg1, int arg2);

@InferParameterizedPermission(DATABASE)
    static @Source(DATABASE) SQLiteDatabase openDatabase(String arg0, CursorFactory arg1, int arg2, DatabaseErrorHandler arg3);
@InferParameterizedPermission(DATABASE)
    static @Source(DATABASE) SQLiteDatabase openOrCreateDatabase(File arg0, CursorFactory arg1);
@InferParameterizedPermission(DATABASE)
    static @Source(DATABASE) SQLiteDatabase openOrCreateDatabase(String arg0, CursorFactory arg1);

@InferParameterizedPermission(DATABASE)
    static @Source(DATABASE) SQLiteDatabase openOrCreateDatabase(String arg0, CursorFactory arg1, DatabaseErrorHandler arg2);
    static boolean deleteDatabase(File arg0);
    static SQLiteDatabase create(CursorFactory arg0);
    int getVersion();
    void setVersion(int arg0);
    long getMaximumSize();
    long setMaximumSize(long arg0);
    long getPageSize();
    void setPageSize(long arg0);
    void markTableSyncable(String arg0, String arg1);
    void markTableSyncable(String arg0, String arg1, String arg2);
    static String findEditTable(String arg0);
    SQLiteStatement compileStatement(String arg0) throws SQLException;

@InferParameterizedPermission(value=DATABASE, param=2)
    @Source(DATABASE) Cursor query(@Sink(DATABASE) boolean arg0, String arg1, String[] arg2, String arg3, String[] arg4, String arg5, String arg6, String arg7, String arg8);
    Cursor query(boolean arg0, String arg1, String[] arg2, String arg3, String[] arg4, String arg5, String arg6, String arg7, String arg8, CancellationSignal arg9);
    Cursor queryWithFactory(CursorFactory arg0, boolean arg1, String arg2, String[] arg3, String arg4, String[] arg5, String arg6, String arg7, String arg8, String arg9);
    Cursor queryWithFactory(CursorFactory arg0, boolean arg1, String arg2, String[] arg3, String arg4, String[] arg5, String arg6, String arg7, String arg8, String arg9, CancellationSignal arg10);
    @Source(DATABASE) Cursor query(@Sink(DATABASE) String arg0, @Sink(DATABASE) String[] arg1, @Sink(DATABASE) String arg2, @Sink(DATABASE) String[] arg3, @Sink(DATABASE) String arg4, @Sink(DATABASE) String arg5, @Sink(DATABASE) String arg6);
    Cursor query(String arg0, String[] arg1, String arg2, String[] arg3, String arg4, String arg5, String arg6, String arg7);
    Cursor rawQuery(String arg0, String[] arg1);
    Cursor rawQuery(String arg0, String[] arg1, CancellationSignal arg2);
    Cursor rawQueryWithFactory(CursorFactory arg0, String arg1, String[] arg2, String arg3);
    Cursor rawQueryWithFactory(CursorFactory arg0, String arg1, String[] arg2, String arg3, CancellationSignal arg4);
    long insert(String arg0, String arg1, @Sink(DATABASE) ContentValues arg2);
    long insertOrThrow(String arg0, String arg1, @Sink(DATABASE) ContentValues arg2) throws SQLException;
    long replace(String arg0, String arg1, @Sink(DATABASE) ContentValues arg2);
    long replaceOrThrow(String arg0, String arg1, @Sink(DATABASE) ContentValues arg2) throws SQLException;
    long insertWithOnConflict(String arg0, String arg1, @Sink(DATABASE) ContentValues arg2, int arg3);
    int delete(String arg0, String arg1, String[] arg2);
    int update(String arg0, @Sink(DATABASE) ContentValues arg1, String arg2, String[] arg3);
    int updateWithOnConflict(String arg0, @Sink(DATABASE) ContentValues arg1, String arg2, String[] arg3, int arg4);
    void execSQL(String arg0) throws SQLException;
    void execSQL(String arg0, Object[] arg1) throws SQLException;
    boolean isReadOnly();
    boolean isOpen();
    boolean needUpgrade(int arg0);
    String getPath();
    void setLocale(Locale arg0);
    void setMaxSqlCacheSize(int arg0);
    void setForeignKeyConstraintsEnabled(boolean arg0);
    boolean enableWriteAheadLogging();
    void disableWriteAheadLogging();
    boolean isWriteAheadLoggingEnabled();
    List<Pair<String,String>> getAttachedDbs();
    boolean isDatabaseIntegrityOk();
    String toString();
}

class SQLiteException {
    
    
}

class SQLiteOpenHelper {
        SQLiteOpenHelper(Context context, String name, CursorFactory factory, int version);
    
synchronized void close();
//Close any open database object.

@Source(DATABASE) String getDatabaseName();
//Return the name of the SQLite database being opened, as given to the constructor.

@Source(DATABASE) SQLiteDatabase getReadableDatabase();
//Create and/or open a database.

@Source(DATABASE) SQLiteDatabase getWritableDatabase();
//Create and/or open a database that will be used for reading and writing.

void onConfigure(@Source(DATABASE) SQLiteDatabase db);
//Called when the database connection is being configured, to enable features such as write-ahead logging or foreign key support.

abstract void onCreate(@Source(DATABASE) SQLiteDatabase db);
//Called when the database is created for the first time.

void onDowngrade(SQLiteDatabase db, int oldVersion, int newVersion);
//Called when the database needs to be downgraded.

void onOpen(@Source(DATABASE) SQLiteDatabase db);
//Called when the database has been opened.

abstract void onUpgrade(@Source(DATABASE) SQLiteDatabase db, @Sink(WRITE_LOGS) int oldVersion, @Sink(WRITE_LOGS) int newVersion);
//Called when the database needs to be upgraded.

void setWriteAheadLoggingEnabled(boolean enabled);
//Enables or disables the use of write-ahead logging for the database.


}

class SQLiteQueryBuilder {

 @Source(DATABASE) Cursor query(@Sink(DATABASE) SQLiteDatabase db, @Sink(DATABASE) String[] projectionIn, @Sink(DATABASE) String selection, @Sink(DATABASE) String[] selectionArgs, @Sink(DATABASE) String groupBy, @Sink(DATABASE) String having, @Sink(DATABASE) String sortOrder);
            void setProjectionMap(Map<String,String> columnMap);
            
    void appendWhere(@Sink(DATABASE) CharSequence inWhere); 
    @Source(DATABASE) Cursor query( @Sink(DATABASE) SQLiteDatabase db,  @Sink(DATABASE) String  @Sink(DATABASE) [] projectionIn,  @Sink(DATABASE) String selection,  @Sink(DATABASE) String  @Sink(DATABASE) [] selectionArgs,  @Sink(DATABASE) String groupBy,  @Sink(DATABASE) String having,  @Sink(DATABASE) String sortOrder,  @Sink(DATABASE) String limit);
    void setTables(@Sink({}) SQLiteQueryBuilder this, @Sink(DATABASE) String inTables);
    @Source(DATABASE) SQLiteQueryBuilder();

void appendWhereEscapeString(@Sink(DATABASE) String inWhere);

void setDistinct(boolean distinct);
}

class SQLiteStatement {

void execute();
//CSH: need a receiver annotation?
//Execute this SQL statement, if it is not a SELECT / INSERT / DELETE / UPDATE, for example CREATE / DROP table, view, trigger, index etc.

@Source(DATABASE) long executeInsert();
//Execute this SQL statement and return the ID of the row inserted due to this call.

@Source(DATABASE) int executeUpdateDelete();
//Execute this SQL statement, if the the number of rows affected by execution of this SQL statement is of any importance to the caller - for example, UPDATE / DELETE SQL statements.

@Source(DATABASE) ParcelFileDescriptor simpleQueryForBlobFileDescriptor();
//Executes a statement that returns a 1 by 1 table with a blob value.

@Source(DATABASE) long simpleQueryForLong();
//Execute a statement that returns a 1 by 1 table with a numeric value.

@Source(DATABASE) String simpleQueryForString();
//Execute a statement that returns a 1 by 1 table with a text value.

String toString();
//Returns a string containing a concise, human-readable description of this object.



    
}
