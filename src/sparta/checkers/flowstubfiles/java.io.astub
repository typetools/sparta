
package java.io;

@PolyFlowReceiver
class StringWriter {
StringWriter();
String toString();
void write(char[] arg0, int arg1, int arg2);
void write(int arg0);
void write(String arg0, int arg1, int arg2);
void write(String arg0);
}

@PolyFlowReceiver
class PushbackReader {
boolean ready() throws IOException;
int read() throws IOException;
int read(char[] arg0, int arg1, int arg2) throws IOException;
void unread(char[] arg0, int arg1, int arg2) throws IOException;
void unread(char[] arg0) throws IOException;
void unread(int arg0) throws IOException;
}

@PolyFlowReceiver
class PushbackInputStream {
int read() throws IOException;
int read(byte[] arg0, int arg1, int arg2) throws IOException;
}

@PolyFlowReceiver
class BufferedInputStream extends FilterInputStream {
//Added by pbsf
    protected byte[] buf;
    protected int count;
    protected int pos;
    protected int markpos;
    protected int marklimit;
    @PolySource @PolySink BufferedInputStream(@PolySource @PolySink InputStream arg0);
    @PolySource @PolySink BufferedInputStream(@PolySource @PolySink InputStream arg0, int arg1);
    int read() throws IOException;
    int read(byte[] arg0, int arg1, int arg2) throws IOException;
    long skip(long arg0) throws IOException;
    int available() throws IOException;
    void mark(int arg0);
    void reset() throws IOException;
    boolean markSupported();
    void close() throws IOException;
}

@PolyFlowReceiver
class BufferedOutputStream{
            BufferedOutputStream(OutputStream arg0, int arg1);
            void write(byte @PolySource @PolySink[] arg0, int arg1, int arg2) throws IOException;
            void flush() throws IOException;
            BufferedOutputStream(OutputStream arg0);
            void write(int arg0) throws IOException;
}

@PolyFlowReceiver
class BufferedReader extends Reader {
//Added by pbsf
    BufferedReader(Reader arg0, int arg1);
    BufferedReader(Reader arg0);
    int read() throws IOException;
    int read(char[] arg0, int arg1, int arg2) throws IOException;
    String readLine() throws IOException;
    long skip(long arg0) throws IOException;
    boolean ready() throws IOException;
    boolean markSupported();
    void mark(int arg0) throws IOException;
    void reset() throws IOException;
    void close() throws IOException;
    String readLine(boolean arg0) throws IOException;
}

@PolyFlowReceiver
class BufferedWriter extends Writer {
    BufferedWriter(Writer arg0);
    BufferedWriter(Writer arg0, int arg1);
    void write(int arg0) throws IOException;
    void write(char[] arg0, int arg1, int arg2) throws IOException;
    void write(String arg0, int arg1, int arg2) throws IOException;
    void newLine() throws IOException;
    void flush() throws IOException;
    void close() throws IOException;
}

@PolyFlowReceiver
class ByteArrayInputStream extends InputStream {
//Added by pbsf
    protected byte[] buf;
    protected int pos;
    protected int mark;
    protected int count;
    ByteArrayInputStream(byte[] arg0);
    ByteArrayInputStream(byte[] arg0, int arg1, int arg2);
    int read();
    int read(byte[] arg0, int arg1, int arg2);
    long skip(long arg0);
    int available();
    boolean markSupported();
    void mark(int arg0);
    void reset();
    void close() throws IOException;
}

@PolyFlowReceiver
class ByteArrayOutputStream extends OutputStream {
//Added by SOM
     ByteArrayOutputStream();
    @PolySource @PolySink byte @PolySource @PolySink [] toByteArray(@PolySource @PolySink ByteArrayOutputStream this);
    void close(@Source(ANY) @Sink({}) ByteArrayOutputStream this);
    protected byte[] buf;
    protected int count;
    ByteArrayOutputStream(int arg0);
    void write(int arg0);
    void write(byte[] arg0, int arg1, int arg2);
    void writeTo(OutputStream arg0) throws IOException;
    void reset();
    int size();
    String toString();
    String toString(String arg0) throws UnsupportedEncodingException;
    String toString(int arg0);
}
class Closeable{
            void close() throws IOException;
}

@PolyFlowReceiver
interface DataInput {
//Added by pbsf
    void readFully(byte[] arg0) throws IOException;
    void readFully(byte[] arg0, int arg1, int arg2) throws IOException;
    int skipBytes(int arg0) throws IOException;
    boolean readBoolean() throws IOException;
    byte readByte() throws IOException;
    int readUnsignedByte() throws IOException;
    short readShort() throws IOException;
    int readUnsignedShort() throws IOException;
    char readChar() throws IOException;
    int readInt() throws IOException;
    long readLong() throws IOException;
    float readFloat() throws IOException;
    double readDouble() throws IOException;
    String readLine() throws IOException;
    String readUTF() throws IOException;
}

@PolyFlowReceiver
class DataInputStream extends FilterInputStream implements DataInput {
    DataInputStream(InputStream arg0);
    int read(byte[] arg0) throws IOException;
    int read(byte[] arg0, int arg1, int arg2) throws IOException;
    void readFully(byte[] arg0) throws IOException;
    void readFully(byte[] arg0, int arg1, int arg2) throws IOException;
    int skipBytes(int arg0) throws IOException;
    boolean readBoolean() throws IOException;
    byte readByte() throws IOException;
    int readUnsignedByte() throws IOException;
    short readShort() throws IOException;
    int readUnsignedShort() throws IOException;
    char readChar() throws IOException;
    int readInt() throws IOException;
    long readLong() throws IOException;
    float readFloat() throws IOException;
    double readDouble() throws IOException;
    String readLine() throws IOException;
    String readUTF() throws IOException;
    static String readUTF(DataInput arg0) throws IOException;
}

@PolyFlowReceiver
interface DataOutput {
//Added by pbsf
    void write(int arg0) throws IOException;
    void write(byte[] arg0) throws IOException;
    void write(byte[] arg0, int arg1, int arg2) throws IOException;
    void writeBoolean(boolean arg0) throws IOException;
    void writeByte(int arg0) throws IOException;
    void writeShort(int arg0) throws IOException;
    void writeChar(int arg0) throws IOException;
    void writeInt(int arg0) throws IOException;
    void writeLong(long arg0) throws IOException;
    void writeFloat(float arg0) throws IOException;
    void writeDouble(double arg0) throws IOException;
    void writeBytes(String arg0) throws IOException;
    void writeChars(String arg0) throws IOException;
    void writeUTF(String arg0) throws IOException;
}

@PolyFlowReceiver
class DataOutputStream extends FilterOutputStream implements DataOutput {
    protected int written;
    DataOutputStream(OutputStream arg0);
    void write(int arg0) throws IOException;
    void write(byte[] arg0, int arg1, int arg2) throws IOException;
    void flush() throws IOException;
    void writeBoolean(boolean arg0) throws IOException;
    void writeByte(int arg0) throws IOException;
    void writeShort(int arg0) throws IOException;
    void writeChar(int arg0) throws IOException;
    void writeInt(int arg0) throws IOException;
    void writeLong(long arg0) throws IOException;
    void writeFloat(float arg0) throws IOException;
    void writeDouble(double arg0) throws IOException;
    void writeBytes(String arg0) throws IOException;
    void writeChars(String arg0) throws IOException;
    void writeUTF(String arg0) throws IOException;
    int size();
}

class File implements Serializable, Comparable<File> {
//Added by smillst
    final char separatorChar;
     final String separator;
    final char pathSeparatorChar;
    final String pathSeparator;
    
    File( @Sink(FILESYSTEM) String path);
    File( @Sink(FILESYSTEM) String arg0, @Sink(FILESYSTEM) String arg1);
    File( File dir, @Sink(FILESYSTEM) String path);

    File(@Sink(FILESYSTEM) URI arg0);
    @Source(FILESYSTEM) String getName();
    @Source(FILESYSTEM) String getParent();
    File getParentFile();
    @Source(FILESYSTEM) String getPath();
    boolean isAbsolute();
    @Source(FILESYSTEM) String getAbsolutePath();
    File getAbsoluteFile();
     @Source(FILESYSTEM) String getCanonicalPath() throws IOException;
    File getCanonicalFile() throws IOException;
  @Source(FILESYSTEM)  URL toURL() throws MalformedURLException;
   @Source(FILESYSTEM) URI toURI();
    boolean canRead();
    boolean canWrite();
    boolean exists();
    boolean isDirectory();
    boolean isFile();
    boolean isHidden();
    long lastModified();
    long length();
    boolean createNewFile() throws IOException;
    boolean delete();
    void deleteOnExit();
 @Source(FILESYSTEM)   String[] list();
    @Source(FILESYSTEM) String[] list(FilenameFilter arg0);
    File[] listFiles();
     File[] listFiles(FilenameFilter arg0);
    File[] listFiles(FileFilter arg0);
    boolean mkdir();
    boolean mkdirs();
    boolean renameTo(File arg0);
    boolean setLastModified(long arg0);
    boolean setReadOnly();
    boolean setWritable(boolean arg0, boolean arg1);
    boolean setWritable(boolean arg0);
    boolean setReadable(boolean arg0, boolean arg1);
    boolean setReadable(boolean arg0);
    boolean setExecutable(boolean arg0, boolean arg1);
    boolean setExecutable(boolean arg0);
    boolean canExecute();
    static File [] listRoots();
    long getTotalSpace();
    long getFreeSpace();
    long getUsableSpace();
    static File createTempFile(@Sink(FILESYSTEM) String arg0, @Sink(FILESYSTEM) String arg1, File arg2) throws IOException;
    static File createTempFile(@Sink(FILESYSTEM) String arg0, @Sink(FILESYSTEM) String arg1) throws IOException;
    int compareTo(File arg0);
    boolean equals(Object arg0);
    int hashCode();
    @Source(FILESYSTEM) String toString();
    Path toPath();
	
}
class FileDescriptor{
            void sync() throws SyncFailedException;
}

class FileInputStream extends InputStream {
    @Source(FILESYSTEM) FileInputStream(String arg0) throws FileNotFoundException;
    FileInputStream(File arg0) throws FileNotFoundException;
    FileInputStream(FileDescriptor arg0);
    int read() throws IOException;
    int read(@Source(FILESYSTEM) byte@Source(FILESYSTEM)[] arg0) throws IOException;
    int read(@Source(FILESYSTEM) byte@Source(FILESYSTEM)[] arg0, int arg1, int arg2) throws IOException;
    long skip(long arg0) throws IOException;
    int available() throws IOException;
    void close() throws IOException;
    @Source(FILESYSTEM) FileDescriptor getFD(@Source(FILESYSTEM) FileInputStream this) throws IOException;
    @Source(FILESYSTEM) FileChannel getChannel(@Source(FILESYSTEM) FileInputStream this);
    protected void finalize(@Source(FILESYSTEM) FileInputStream this) throws IOException;
}
class FilterInputStream{
            protected @PolySource FilterInputStream(InputStream arg0);
            @PolyFlow
            long skip(long arg0) throws IOException;
            @PolySource @PolySink int read (@PolySource @PolySink byte @PolySource @PolySink[] arg0, int arg1, int arg2) throws IOException;
            @PolySource @PolySink int read(@PolySource @PolySink byte @PolySource @PolySink[] arg0) throws IOException;

            void close() throws IOException;
            int available() throws IOException;
            int read() throws IOException;
}
class IOException{
            IOException(String arg0);
            IOException();
}
class FileReader{
            @Source(FILESYSTEM) FileReader(@Source({FILESYSTEM, READ_EXTERNAL_STORAGE}) File arg0) throws FileNotFoundException;
}
@PolyFlowReceiver
class FilterOutputStream{
            @PolySink FilterOutputStream(OutputStream arg0);
            void close() throws IOException;
            void write(@PolySink byte[] arg0) throws IOException;
                        void write(int arg0) throws IOException;
            void write(byte[] arg0, int arg1, int arg2) throws IOException;

}

class FilenameFilter{
        boolean accept(File arg0, String arg1);
}

class FileOutputStream extends OutputStream {
//Added by SOM
    @Sink(FILESYSTEM) FileOutputStream(@Sink(FILESYSTEM) String arg0) throws FileNotFoundException;
    @Sink(FILESYSTEM) FileOutputStream(@Sink(FILESYSTEM) String arg0, boolean arg1) throws FileNotFoundException;
    @Sink(FILESYSTEM) FileOutputStream(File arg0) throws FileNotFoundException;
    @Sink(FILESYSTEM) FileOutputStream(File arg0, boolean arg1) throws FileNotFoundException;
    @Sink(FILESYSTEM) FileOutputStream(@Sink(FILESYSTEM) FileDescriptor arg0);
@PolyFlowReceiver
    void write( int arg0);
@PolyFlowReceiver
    void write( @PolySource @PolySink byte [] arg0);
@PolyFlowReceiver
    void write( @PolySource @PolySink byte [] arg0, int arg1, int arg2);
    void close();
    @Sink(FILESYSTEM) FileDescriptor getFD(@Sink(FILESYSTEM) FileOutputStream this);
    @Sink(FILESYSTEM) FileChannel getChannel(@Sink(FILESYSTEM) FileOutputStream this);
    protected void finalize(@Sink(FILESYSTEM) FileOutputStream this);
    void write(@Sink(FILESYSTEM) FileOutputStream this, int arg0, boolean arg1);
}

class FileWriter extends OutputStreamWriter {
@InferParameterizedPermission(value=FILESYSTEM, isA="sink")
    @Sink(FILESYSTEM) FileWriter(String arg0) throws IOException;
@InferParameterizedPermission(value=FILESYSTEM, isA="sink")
   @Sink(FILESYSTEM) FileWriter(String arg0, boolean arg1) throws IOException;
@InferParameterizedPermission(value=FILESYSTEM, isA="sink")
    @Sink(FILESYSTEM) FileWriter(File arg0) throws IOException;
@InferParameterizedPermission(value=FILESYSTEM, isA="sink")
    @Sink(FILESYSTEM) FileWriter(File arg0, boolean arg1) throws IOException;
@InferParameterizedPermission(value=FILESYSTEM, isA="sink")
    @Sink(FILESYSTEM) FileWriter(FileDescriptor arg0);
}

@PolyFlowReceiver
class InputStream implements Closeable {
//Added by pbsf
    InputStream();
    int read() throws IOException;
    int read(@PolySource @PolySink byte @PolySource @PolySink [] arg0) throws IOException;
    int read(@PolySource @PolySink byte @PolySource @PolySink [] arg0, int arg1, int arg2) throws IOException;
    long skip(long arg0) throws IOException;
    int available() throws IOException;
    void close() throws IOException;
    void mark(int arg0);
    void reset() throws IOException;
    boolean markSupported();
}

@PolyFlowReceiver
class InputStreamReader extends Reader {
    InputStreamReader(InputStream arg0);
    InputStreamReader(InputStream arg0, String arg1) throws UnsupportedEncodingException;
    InputStreamReader(InputStream arg0, Charset arg1);
    InputStreamReader(InputStream arg0, CharsetDecoder arg1);
    String getEncoding();
    int read() throws IOException;
    int read(char[] arg0, int arg1, int arg2) throws IOException;
    boolean ready() throws IOException;
    void close() throws IOException;
}

@PolyFlowReceiver
class ObjectInput{
        Object readObject() throws ClassNotFoundException,IOException;
        void close() throws IOException;
}

@PolyFlowReceiver
class ObjectInputStream extends InputStream implements ObjectInput, ObjectStreamConstants {
    ObjectInputStream(InputStream arg0) throws IOException;
    protected ObjectInputStream() throws IOException,SecurityException;
    Object readObject() throws IOException,ClassNotFoundException;
    protected Object readObjectOverride() throws IOException,ClassNotFoundException;
    Object readUnshared() throws IOException,ClassNotFoundException;
    void defaultReadObject() throws IOException,ClassNotFoundException;
    GetField readFields() throws IOException,ClassNotFoundException;
    void registerValidation(ObjectInputValidation arg0, int arg1) throws NotActiveException,InvalidObjectException;
    protected Class<?> resolveClass(ObjectStreamClass arg0) throws IOException,ClassNotFoundException;
    protected Class<?> resolveProxyClass(String[] arg0) throws IOException,ClassNotFoundException;
    protected Object resolveObject(Object arg0) throws IOException;
    protected boolean enableResolveObject(boolean arg0) throws SecurityException;
    protected void readStreamHeader() throws IOException,StreamCorruptedException;
    protected ObjectStreamClass readClassDescriptor() throws IOException,ClassNotFoundException;
    int read() throws IOException;
    int read(byte[] arg0, int arg1, int arg2) throws IOException;
    int available() throws IOException;
    void close() throws IOException;
    boolean readBoolean() throws IOException;
    byte readByte() throws IOException;
    int readUnsignedByte() throws IOException;
    char readChar() throws IOException;
    short readShort() throws IOException;
    int readUnsignedShort() throws IOException;
    int readInt() throws IOException;
    long readLong() throws IOException;
    float readFloat() throws IOException;
    double readDouble() throws IOException;
    void readFully(byte[] arg0) throws IOException;
    void readFully(byte[] arg0, int arg1, int arg2) throws IOException;
    int skipBytes(int arg0) throws IOException;
    String readLine() throws IOException;
    String readUTF() throws IOException;
}

@PolyFlowReceiver
class ObjectInputStream$GetField {
    GetField();
    ObjectStreamClass getObjectStreamClass();
    boolean defaulted(String arg0) throws IOException;
    boolean get(String arg0, boolean arg1) throws IOException;
    byte get(String arg0, byte arg1) throws IOException;
    char get(String arg0, char arg1) throws IOException;
    short get(String arg0, short arg1) throws IOException;
    int get(String arg0, int arg1) throws IOException;
    long get(String arg0, long arg1) throws IOException;
    float get(String arg0, float arg1) throws IOException;
    double get(String arg0, double arg1) throws IOException;
    Object get(String arg0, Object arg1) throws IOException;
}

@PolyFlowReceiver
class ObjectOutput{
        void close() throws IOException;
        void writeObject(Object arg0) throws IOException;
        void write(int arg0) throws IOException;
}

@PolyFlowReceiver
class ObjectOutputStream extends OutputStream implements ObjectOutput, ObjectStreamConstants {
//Added by pbsf
    ObjectOutputStream(OutputStream arg0) throws IOException;
    protected ObjectOutputStream() throws IOException,SecurityException;
    void useProtocolVersion(int arg0) throws IOException;
    void writeObject(Object arg0) throws IOException;
    protected void writeObjectOverride(Object arg0) throws IOException;
    void writeUnshared(Object arg0) throws IOException;
    void defaultWriteObject() throws IOException;
    PutField putFields() throws IOException;
    void writeFields() throws IOException;
    void reset() throws IOException;
    protected void annotateClass(Class<?> arg0) throws IOException;
    protected void annotateProxyClass(Class<?> arg0) throws IOException;
    protected Object replaceObject(Object arg0) throws IOException;
    protected boolean enableReplaceObject(boolean arg0) throws SecurityException;
    protected void writeStreamHeader() throws IOException;
    protected void writeClassDescriptor(ObjectStreamClass arg0) throws IOException;
    void write(int arg0) throws IOException;
    void write(byte[] arg0) throws IOException;
    void write(byte[] arg0, int arg1, int arg2) throws IOException;
    void flush() throws IOException;
    protected void drain() throws IOException;
    void close() throws IOException;
    void writeBoolean(boolean arg0) throws IOException;
    void writeByte(int arg0) throws IOException;
    void writeShort(int arg0) throws IOException;
    void writeChar(int arg0) throws IOException;
    void writeInt(int arg0) throws IOException;
    void writeLong(long arg0) throws IOException;
    void writeFloat(float arg0) throws IOException;
    void writeDouble(double arg0) throws IOException;
    void writeBytes(String arg0) throws IOException;
    void writeChars(String arg0) throws IOException;
    void writeUTF(String arg0) throws IOException;
}

@PolyFlowReceiver
class ObjectOutputStream$PutField {
    PutField();
    void put(String arg0, boolean arg1);
    void put(String arg0, byte arg1);
    void put(String arg0, char arg1);
    void put(String arg0, short arg1);
    void put(String arg0, int arg1);
    void put(String arg0, long arg1);
    void put(String arg0, float arg1);
    void put(String arg0, double arg1);
    void put(String arg0, Object arg1);
    void write(ObjectOutput arg0) throws IOException;
}

class OutputStream implements Closeable, Flushable {
//Added by pbsf
    OutputStream();
@PolyFlowReceiver
    void write(int arg0) throws IOException;
    void write(@PolySourceR @PolySinkR OutputStream this, @PolySourceR @PolySinkR byte[] arg0);
    void write(@PolySourceR @PolySinkR OutputStream this, @PolySourceR @PolySinkR byte[] arg0, int arg1, int arg2);
    void flush() throws IOException;
    void close() throws IOException;
}

@PolyFlowReceiver
class ObjectStreamClass{
        String getName();
}

class OutputStreamWriter extends Writer {
@PolyFlow
    OutputStreamWriter(OutputStream arg0, String arg1) throws UnsupportedEncodingException;
    @PolySource @PolySink OutputStreamWriter( @PolySource @PolySink OutputStream arg0);
@PolyFlow
    OutputStreamWriter(OutputStream arg0, Charset arg1);
@PolyFlow
    OutputStreamWriter(OutputStream arg0, CharsetEncoder arg1);
    String getEncoding();
@PolyFlowReceiver
    void write(int arg0) throws IOException;
@PolyFlowReceiver
    void write(@PolySourceR @PolySinkR char[] arg0, int arg1, int arg2) throws IOException;
@PolyFlowReceiver
    void write(String arg0, int arg1, int arg2) throws IOException;
@PolyFlowReceiver
    void write(String arg0) throws IOException;
    void flush() throws IOException;
    void close() throws IOException;
}

@PolyFlowReceiver
class PrintStream extends FilterOutputStream implements Appendable, Closeable {
//Added by pbsf
    PrintStream(OutputStream arg0);
    PrintStream(OutputStream arg0, boolean arg1);
    PrintStream(OutputStream arg0, boolean arg1, String arg2) throws UnsupportedEncodingException;
    PrintStream(String arg0) throws FileNotFoundException;
    PrintStream(String arg0, String arg1) throws FileNotFoundException,UnsupportedEncodingException;
    PrintStream(File arg0) throws FileNotFoundException;
    PrintStream(File arg0, String arg1) throws FileNotFoundException,UnsupportedEncodingException;
    void flush();
    void close();
    boolean checkError();
    protected void setError();
    protected void clearError();
    void write(int arg0);
    void write(byte[] arg0, int arg1, int arg2);
    void print(boolean arg0);
    void print(char arg0);
    void print(int arg0);
    void print(long arg0);
    void print(float arg0);
    void print(double arg0);
    void print(char[] arg0);
    void print(String arg0);
    void print(Object arg0);
    void println();
    void println(boolean arg0);
    void println(char arg0);
    void println(int arg0);
    void println(long arg0);
    void println(float arg0);
    void println(double arg0);
    void println(char[] arg0);
@PolyFlowReceiver
    void println(String arg0);
    void println(Object arg0);
    PrintStream printf(String arg0, Object[] arg1);
    PrintStream printf(Locale arg0, String arg1, Object[] arg2);
    PrintStream format(String arg0, Object[] arg1);
    PrintStream format(Locale arg0, String arg1, Object[] arg2);
    PrintStream append(CharSequence arg0);
    PrintStream append(CharSequence arg0, int arg1, int arg2);
    PrintStream append(char arg0);
}

@PolyFlowReceiver
class PrintWriter extends Writer {
//Added by smillst
    protected Writer out;
    PrintWriter(Writer arg0);
    PrintWriter(Writer arg0, boolean arg1);
    PrintWriter(OutputStream arg0);
    PrintWriter(OutputStream arg0, boolean arg1);
    PrintWriter(String arg0) throws FileNotFoundException;
    PrintWriter(String arg0, String arg1) throws FileNotFoundException,UnsupportedEncodingException;
    PrintWriter(File arg0) throws FileNotFoundException;
    PrintWriter(File arg0, String arg1) throws FileNotFoundException,UnsupportedEncodingException;
    void flush();
    void close();
    boolean checkError();
    protected void setError();
    protected void clearError();
    void write(int arg0);
    void write(char[] arg0, int arg1, int arg2);
    void write(char[] arg0);
    void write(String arg0, int arg1, int arg2);
    void write(String arg0);
    void print(boolean arg0);
    void print(char arg0);
    void print(int arg0);
    void print(long arg0);
    void print(float arg0);
    void print(double arg0);
    void print(char[] arg0);
    void print(String arg0);
    void print(Object arg0);
    void println();
    void println(boolean arg0);
    void println(char arg0);
    void println(int arg0);
    void println(long arg0);
    void println(float arg0);
    void println(double arg0);
    void println(char[] arg0);
    void println(String arg0);
    void println(Object arg0);
    PrintWriter printf(String arg0, Object[] arg1);
    PrintWriter printf(Locale arg0, String arg1, Object[] arg2);
    PrintWriter format(String arg0, Object[] arg1);
    PrintWriter format(Locale arg0, String arg1, Object[] arg2);
    PrintWriter append(CharSequence arg0);
    PrintWriter append(CharSequence arg0, int arg1, int arg2);
    PrintWriter append(char arg0);
}

class RandomAccessFile{
        RandomAccessFile(File arg0, String arg1) throws FileNotFoundException;
        RandomAccessFile(String arg0, String arg1) throws FileNotFoundException;
        void writeBytes(@Sink(FILESYSTEM) String arg0) throws IOException;
        void write(int arg0) throws IOException;
        void close() throws IOException;
        void write(@Sink(FILESYSTEM) byte[] arg0) throws IOException;
        void seek(long arg0) throws IOException;
        void writeInt(@Sink(FILESYSTEM) int arg0) throws IOException;
        void writeShort(@Sink(FILESYSTEM) int arg0) throws IOException;
        void setLength(long arg0) throws IOException;
        long getFilePointer() throws IOException;
        void writeUTF(@Sink(FILESYSTEM) String arg0) throws IOException;
        long length() throws IOException;
        @Source(FILESYSTEM) String readUTF() throws IOException;
}

@PolyFlowReceiver
class Reader implements Readable, Closeable {
    protected Object lock;
    protected Reader();
    protected Reader(Object arg0);
    int read(CharBuffer arg0) throws IOException;
    int read() throws IOException;
    int read(char[] arg0) throws IOException;
    int read(char[] arg0, int arg1, int arg2) throws IOException;
    long skip(long arg0) throws IOException;
    boolean ready() throws IOException;
    boolean markSupported();
    void mark(int arg0) throws IOException;
    void reset() throws IOException;
    void close() throws IOException;
}

class Writer implements Appendable, Closeable, Flushable {
@PolyFlowReceiver
    void write(int arg0) throws IOException;
@PolyFlowReceiver
    void write(int arg0) throws IOException;
@PolyFlowReceiver
    void write(int arg0) throws IOException;
@PolyFlowReceiver
    void write(@PolySourceR @PolySinkR char[] arg0) throws IOException;
@PolyFlowReceiver
    void write(@PolySourceR @PolySinkR char[] arg0, int arg1, int arg2) throws IOException;
    void write(@PolySourceR @PolySinkR Writer this, @PolySourceR @PolySinkR String arg0);
@PolyFlowReceiver
    void write(String arg0, int arg1, int arg2) throws IOException;
@PolyFlowReceiver
    Writer append(CharSequence arg0) throws IOException;
@PolyFlowReceiver
    Writer append(CharSequence arg0, int arg1, int arg2) throws IOException;
@PolyFlowReceiver
    Writer append(char arg0) throws IOException;
    void flush() throws IOException;
    void close() throws IOException;
}
@PolyFlowReceiver

class StringReader{
        int read() throws IOException;
        void close();
        void reset() throws IOException;
            StringReader(String arg0);
}



