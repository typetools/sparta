
package java.util.regex;


class Pattern { 
    // DAM

    @PolyFlowReceiver
    Matcher matcher(CharSequence input) ;

    @PolyFlow
    static Pattern compile(String regex);

    @PolyFlow
    static Pattern compile(String regex, int flags);

    // Flags have same permission as Pattern instance
    @PolyFlowReceiver
    int flags();

    @PolyFlowReceiver
    Pattern pattern();

    @PolySource @PolySink String [] split(@PolySource @PolySink CharSequence input, @Sink({}) int limit);

    @PolyFlow
    static String quote(String s);

    @PolyFlow
    static boolean matches(String regex, CharSequence input);
  
    void compile();

}

class Matcher {
    // DAM


    @PolyFlowReceiver
    String group();
    
    @PolySource @PolySink String group(@PolySource @PolySink Matcher this, @Sink({}) int group);
    
    @PolySource @PolySink String group(@PolySource @PolySink Matcher this, @Sink({}) String name);

    @PolyFlowReceiver
    boolean find();

    @PolySource @PolySink boolean find(@PolySource @PolySink Matcher this, @Sink({}) int start);

    @PolyFlowReceiver
    boolean matches();
 
    @PolyFlowReceiver
    int start();

    @PolySource @PolySink int start(@PolySource @PolySink Matcher this, @Sink({}) int group);

    @PolyFlowReceiver
    int end();

    @PolySource @PolySink int end(@PolySource @PolySink Matcher this, @Sink({}) int group);

    // Don't think this needs one.
    int groupCount();

    @PolyFlowReceiver
    Matcher reset();

    @PolyFlowReceiver
    Matcher reset(CharSequence input);

    @PolyFlowReceiver
    String replaceAll (String replacement);

    @PolyFlowReceiver
    @PolySource @PolySink String replaceFirst (@PolySource @PolySink String replacement);
    
    Matcher appendReplacement(StringBuffer arg0, String arg1);
    StringBuffer appendTail(StringBuffer arg0);
}

class PatternSyntaxException {
String getMessage();
}

