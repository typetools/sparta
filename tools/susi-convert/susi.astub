/*
This file was generated using tools/susiclass GenerateStubFilesFromSuSi*/


package android.filterpacks.videosrc;

class CameraSource{
   @Source(SUSI_NO_CATEGORY)  android.hardware.Camera$Parameters getCameraParameters();
}

package com.android.gallery3d.exif;

class CountedDataInputStream{
    void setByteOrder(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteOrder arg0);
   @Source(SUSI_IMAGE)  int getReadByteCount();
   @Source(SUSI_IMAGE)  java.nio.ByteOrder getByteOrder();
}
class ExifData{
    void setStripBytes(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1);
   @Source(SUSI_IMAGE)  int getStripCount();
   @Source(SUSI_IMAGE)  byte[] getCompressedThumbnail();
   @Source(SUSI_IMAGE)  byte[] getStrip(  int arg0);
   @Source(SUSI_IMAGE)  java.nio.ByteOrder getByteOrder();
   @Source(SUSI_IMAGE)  com.android.gallery3d.exif.ExifTag addTag(  short arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.exif.IfdData getIfdData(  int arg0);
}
class ExifOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
}
class ExifParser{
    void registerForTagValue(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.exif.ExifTag arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.exif.ExifTag getTag();
   @Source(SUSI_IMAGE)  int getStripSize();
   @Source(SUSI_IMAGE)  int getCompressedImageSize();
   @Source(SUSI_IMAGE)  int getCurrentIfd();
   @Source(SUSI_IMAGE)  java.nio.ByteOrder getByteOrder();
   @Source(SUSI_IMAGE)  int getStripIndex();
}
class ExifReader{
   @Source(SUSI_IMAGE)  com.android.gallery3d.exif.ExifData read(  java.io.InputStream arg0);
}
class ExifTag{
    void setValue(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
    void setTimeValue(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setValue(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
    void setValue(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.exif.Rational arg0);
    void setValue(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_IMAGE)  long getUnsignedLong(  int arg0);
   @Source(SUSI_IMAGE)  int getOffset();
   @Source(SUSI_IMAGE)  int getDataSize();
   @Source(SUSI_IMAGE)  int getElementSize(  short arg0);
   @Source(SUSI_IMAGE)  short getTagId();
   @Source(SUSI_IMAGE)  int getUnsignedShort(  int arg0);
   @Source(SUSI_IMAGE)  java.lang.String getString();
   @Source(SUSI_IMAGE)  int getComponentCount();
   @Source(SUSI_IMAGE)  int getLong(  int arg0);
   @Source(SUSI_IMAGE)  int getIfd();
   @Source(SUSI_IMAGE)  short getDataType();
   @Source(SUSI_IMAGE)  int getIfdIdFromTagId(  short arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.exif.Rational getRational(  int arg0);
}
class IfdData{
    void setTag(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.exif.ExifTag arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.exif.ExifTag getTag(  short arg0);
   @Source(SUSI_IMAGE)  int getOffsetToNextIfd();
   @Source(SUSI_IMAGE)  int getTagCount();
   @Source(SUSI_IMAGE)  com.android.gallery3d.exif.ExifTag[] getAllTags();
   @Source(SUSI_IMAGE)  int getId();
}
class OrderedDataOutputStream{
    void writeShort(  @Sink(SUSI_NO_CATEGORY) short arg0);
    void writeInt(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void writeRational(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.exif.Rational arg0);
    void setByteOrder(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteOrder arg0);
}
class Rational{
   @Source(SUSI_IMAGE)  long getNominator();
   @Source(SUSI_IMAGE)  long getDenominator();
}

package android.filterpacks.ui;

class SurfaceRenderFilter{
    void open(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FilterContext arg0);
}

package com.android.internal.telephony.uicc;

class UiccController{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.UiccCardApplication getUiccCardApplication(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IccRecords getIccRecords(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.uicc.UiccController getInstance();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IccFileHandler getIccFileHandler(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.UiccCard getUiccCard();
}

package android.graphics.drawable;

class AnimatedRotateDrawable{
   @Source(SUSI_NO_CATEGORY)  boolean setVisible(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setColorFilter(  @Sink(SUSI_NO_CATEGORY) android.graphics.ColorFilter arg0);
    void draw(  @Sink(SUSI_NO_CATEGORY) android.graphics.Canvas arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getDrawable();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicWidth();
   @Source(SUSI_NO_CATEGORY)  int getOpacity();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable$ConstantState getConstantState();
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicHeight();
}
class AnimatedRotateDrawable$AnimatedRotateState{
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
}
class AnimationDrawable{
    void setOneShot(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setVisible(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  int getDuration(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getNumberOfFrames();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getFrame(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class BitmapDrawable{
    void setTargetDensity(  @Sink(SUSI_NO_CATEGORY) android.graphics.Canvas arg0);
    void setAntiAlias(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setColorFilter(  @Sink(SUSI_NO_CATEGORY) android.graphics.ColorFilter arg0);
    void setFilterBitmap(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setDither(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setTileModeY(  @Sink(SUSI_NO_CATEGORY) android.graphics.Shader$TileMode arg0);
    void setTileModeX(  @Sink(SUSI_NO_CATEGORY) android.graphics.Shader$TileMode arg0);
    void setTargetDensity(  @Sink(SUSI_NO_CATEGORY) android.util.DisplayMetrics arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getBitmap();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable$ConstantState getConstantState();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicWidth();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicHeight();
   @Source(SUSI_NO_CATEGORY)  int getGravity();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Paint getPaint();
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
   @Source(SUSI_NO_CATEGORY)  int getOpacity();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Shader$TileMode getTileModeY();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Shader$TileMode getTileModeX();
}
class BitmapDrawable$BitmapState{
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
}
class ClipDrawable{
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setVisible(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setLayoutDirection(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setColorFilter(  @Sink(SUSI_NO_CATEGORY) android.graphics.ColorFilter arg0);
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicWidth();
   @Source(SUSI_NO_CATEGORY)  int getOpacity();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable$ConstantState getConstantState();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicHeight();
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
}
class ClipDrawable$ClipState{
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
}
class ColorDrawable{
    void setColorFilter(  @Sink(SUSI_NO_CATEGORY) android.graphics.ColorFilter arg0);
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable$ConstantState getConstantState();
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
   @Source(SUSI_NO_CATEGORY)  int getOpacity();
   @Source(SUSI_NO_CATEGORY)  int getColor();
   @Source(SUSI_NO_CATEGORY)  int getAlpha();
}
class ColorDrawable$ColorState{
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
}
class Drawable{
    void setBounds(  @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg0);
    void setDither(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setColorFilter(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.PorterDuff$Mode arg1);
    void setBounds(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setFilterBitmap(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable createFromResourceStream(  @Sink(SUSI_NO_CATEGORY) android.content.res.Resources arg0, @Sink(SUSI_NO_CATEGORY) android.util.TypedValue arg1, @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect copyBounds();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Insets getLayoutInsets();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable$ConstantState getConstantState();
   @Source(SUSI_NO_CATEGORY)  int getMinimumHeight();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable createFromXml(  @Sink(SUSI_NO_CATEGORY) android.content.res.Resources arg0, @Sink(SUSI_NO_CATEGORY) org.xmlpull.v1.XmlPullParser arg1);
   @Source(SUSI_NO_CATEGORY)  int getLevel();
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getCurrent();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getBounds();
   @Source(SUSI_NO_CATEGORY)  int getMinimumWidth();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicHeight();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Region getTransparentRegion();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable$Callback getCallback();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicWidth();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable createFromStream(  @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int[] getState();
   @Source(SUSI_NO_CATEGORY)  int getLayoutDirection();
   @Source(SUSI_NO_CATEGORY)  boolean getPadding(  @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable mutate();
}
class DrawableContainer{
   @Source(SUSI_NO_CATEGORY)  boolean setVisible(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicHeight();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicWidth();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Insets getLayoutInsets();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable$ConstantState getConstantState();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getCurrent();
   @Source(SUSI_NO_CATEGORY)  int getMinimumWidth();
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
   @Source(SUSI_NO_CATEGORY)  int getOpacity();
   @Source(SUSI_NO_CATEGORY)  int getMinimumHeight();
}
class DrawableContainer$DrawableContainerState{
   @Source(SUSI_NO_CATEGORY)  int getExitFadeDuration();
   @Source(SUSI_NO_CATEGORY)  int getOpacity();
   @Source(SUSI_NO_CATEGORY)  int getChildCount();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable[] getChildren();
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
   @Source(SUSI_NO_CATEGORY)  int getConstantMinimumHeight();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getConstantPadding();
   @Source(SUSI_NO_CATEGORY)  int getConstantWidth();
   @Source(SUSI_NO_CATEGORY)  int getConstantMinimumWidth();
   @Source(SUSI_NO_CATEGORY)  int getConstantHeight();
   @Source(SUSI_NO_CATEGORY)  int getEnterFadeDuration();
}
class GradientDrawable{
    void setColor(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setGradientRadius(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setShape(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSize(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setGradientType(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setCornerRadii(  @Sink(SUSI_NO_CATEGORY) float[] arg0);
    void setCornerRadius(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setGradientCenter(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setStroke(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setStroke(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) float arg3);
    void setUseLevel(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setColors(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
   @Source(SUSI_NO_CATEGORY)  int getOpacity();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicWidth();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicHeight();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable$ConstantState getConstantState();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.GradientDrawable$Orientation getOrientation();
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
}
class GradientDrawable$GradientState{
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
}
class InsetDrawable{
    void setColorFilter(  @Sink(SUSI_NO_CATEGORY) android.graphics.ColorFilter arg0);
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setVisible(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicWidth();
   @Source(SUSI_NO_CATEGORY)  int getOpacity();
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicHeight();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable$ConstantState getConstantState();
}
class InsetDrawable$InsetState{
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
}
class LayerDrawable{
    void setColorFilter(  @Sink(SUSI_NO_CATEGORY) android.graphics.ColorFilter arg0);
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setLayoutDirection(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setVisible(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setDither(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicWidth();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicHeight();
   @Source(SUSI_NO_CATEGORY)  int getNumberOfLayers();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getDrawable(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
   @Source(SUSI_NO_CATEGORY)  int getId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getOpacity();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable$ConstantState getConstantState();
}
class LayerDrawable$LayerState{
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
}
class NinePatchDrawable{
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setTargetDensity(  @Sink(SUSI_NO_CATEGORY) android.util.DisplayMetrics arg0);
    void setTargetDensity(  @Sink(SUSI_NO_CATEGORY) android.graphics.Canvas arg0);
    void setColorFilter(  @Sink(SUSI_NO_CATEGORY) android.graphics.ColorFilter arg0);
    void setFilterBitmap(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setDither(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Region getTransparentRegion();
   @Source(SUSI_NO_CATEGORY)  int getOpacity();
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicWidth();
   @Source(SUSI_NO_CATEGORY)  int getMinimumHeight();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Paint getPaint();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicHeight();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable$ConstantState getConstantState();
   @Source(SUSI_NO_CATEGORY)  int getMinimumWidth();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Insets getLayoutInsets();
}
class NinePatchDrawable$NinePatchState{
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
}
class PaintDrawable{
    void setCornerRadii(  @Sink(SUSI_NO_CATEGORY) float[] arg0);
    void setCornerRadius(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class RotateDrawable{
   @Source(SUSI_NO_CATEGORY)  boolean setVisible(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void draw(  @Sink(SUSI_NO_CATEGORY) android.graphics.Canvas arg0);
    void setColorFilter(  @Sink(SUSI_NO_CATEGORY) android.graphics.ColorFilter arg0);
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicHeight();
   @Source(SUSI_NO_CATEGORY)  int getOpacity();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicWidth();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable$ConstantState getConstantState();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getDrawable();
}
class RotateDrawable$RotateState{
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
}
class ScaleDrawable{
   @Source(SUSI_NO_CATEGORY)  boolean setVisible(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setColorFilter(  @Sink(SUSI_NO_CATEGORY) android.graphics.ColorFilter arg0);
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicWidth();
   @Source(SUSI_NO_CATEGORY)  int getOpacity();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getDrawable();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicHeight();
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable$ConstantState getConstantState();
}
class ScaleDrawable$ScaleState{
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
}
class ShapeDrawable{
    void setPadding(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setDither(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setPadding(  @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg0);
    void setColorFilter(  @Sink(SUSI_NO_CATEGORY) android.graphics.ColorFilter arg0);
    void draw(  @Sink(SUSI_NO_CATEGORY) android.graphics.Canvas arg0);
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicWidth();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.shapes.Shape getShape();
   @Source(SUSI_NO_CATEGORY)  int getOpacity();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicHeight();
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable$ConstantState getConstantState();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Paint getPaint();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.ShapeDrawable$ShaderFactory getShaderFactory();
}
class ShapeDrawable$ShapeState{
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
}
class StateListDrawable{
    void setLayoutDirection(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int[] getStateSet(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getStateCount();
   @Source(SUSI_NO_CATEGORY)  int getStateDrawableIndex(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.StateListDrawable$StateListState getStateListState();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getStateDrawable(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class TransitionDrawable$TransitionState{
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
}

package com.google.android.mms.util;

class AbstractCache{
   @Source(SUSI_SMS_MMS)  boolean put(  @Sink(SUSI_SMS_MMS) java.lang.Object arg0, @Sink(SUSI_SMS_MMS) java.lang.Object arg1);
   @Source(SUSI_SMS_MMS)  java.lang.Object get(  @Sink(SUSI_SMS_MMS) java.lang.Object arg0);
}
class DownloadDrmHelper{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getOriginalMimeType(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
}
class DrmConvertSession{
   @Source(SUSI_SMS_MMS)  byte[] convert(  @Sink(SUSI_SMS_MMS) byte[] arg0, @Sink(SUSI_SMS_MMS) int arg1);
}
class PduCache{
   @Source(SUSI_SMS_MMS)  boolean put(  @Sink(SUSI_SMS_MMS) java.lang.Object arg0, @Sink(SUSI_SMS_MMS) java.lang.Object arg1);
   @Source(SUSI_SMS_MMS)  boolean put(  @Sink(SUSI_SMS_MMS) android.net.Uri arg0, @Sink(SUSI_SMS_MMS) com.google.android.mms.util.PduCacheEntry arg1);
   @Source(SUSI_SMS_MMS)  com.google.android.mms.util.PduCache getInstance();
}
class PduCacheEntry{
   @Source(SUSI_SMS_MMS)  long getThreadId();
   @Source(SUSI_SMS_MMS)  int getMessageBox();
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.GenericPdu getPdu();
}
class SqliteWrapper{
   @Source(SUSI_SMS_MMS)  android.database.Cursor query(  @Sink(SUSI_SMS_MMS) android.content.Context arg0, @Sink(SUSI_SMS_MMS) android.content.ContentResolver arg1, @Sink(SUSI_SMS_MMS) android.net.Uri arg2, @Sink(SUSI_SMS_MMS) java.lang.String[] arg3, @Sink(SUSI_SMS_MMS) java.lang.String arg4, @Sink(SUSI_SMS_MMS) java.lang.String[] arg5, @Sink(SUSI_SMS_MMS) java.lang.String arg6);
   @Source(SUSI_SMS_MMS)  android.net.Uri insert(  @Sink(SUSI_SMS_MMS) android.content.Context arg0, @Sink(SUSI_SMS_MMS) android.content.ContentResolver arg1, @Sink(SUSI_SMS_MMS) android.net.Uri arg2, @Sink(SUSI_SMS_MMS) android.content.ContentValues arg3);
}

package com.android.phone;

class AnimationUtils$CrossFadeDrawable{
   @Source(SUSI_NO_CATEGORY)  android.animation.ObjectAnimator getAnimator();
}
class BluetoothPhoneService$3{
   @Source(SUSI_NO_CATEGORY)  boolean sendDtmf(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNetworkOperator();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSubscriberNumber();
}
class CallCard{
    void onQueryComplete(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1, @Sink(SUSI_NO_CATEGORY) com.android.internal.telephony.CallerInfo arg2);
    void setSecondaryCallClickable(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class CallFeaturesSetting{
    boolean onPreferenceChange(  @Sink(SUSI_LOG) android.preference.Preference arg0, @Sink(SUSI_LOG) java.lang.Object arg1);
    void startActivityForResult(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void onActivityResult(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2);
   @Source(SUSI_NO_CATEGORY)  boolean onPreferenceTreeClick(  @Sink(SUSI_NO_CATEGORY) android.preference.PreferenceScreen arg0, @Sink(SUSI_NO_CATEGORY) android.preference.Preference arg1);
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog onCreateDialog(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class CallLogAsync{
   @Source(SUSI_NO_CATEGORY)  android.os.AsyncTask getLastOutgoingCall(  @Sink(SUSI_NO_CATEGORY) com.android.phone.CallLogAsync$GetLastOutgoingCallArgs arg0);
}
class CallNotifier{
    void sendMwiChangedDelayed(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void onQueryComplete(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1, @Sink(SUSI_NO_CATEGORY) com.android.internal.telephony.CallerInfo arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.internal.telephony.Call$State getPreviousCdmaCallState();
   @Source(SUSI_NO_CATEGORY)  boolean getVoicePrivacyState();
   @Source(SUSI_NO_CATEGORY)  boolean getIsCdmaRedialCall();
}
class CallTime{
   @Source(SUSI_NO_CATEGORY)  long getCallDuration(  @Sink(SUSI_NO_CATEGORY) com.android.internal.telephony.Call arg0);
}
class CallerInfoCache{
   @Source(SUSI_NO_CATEGORY)  com.android.phone.CallerInfoCache$CacheEntry getCacheEntry(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class CdmaPhoneCallState{
   @Source(SUSI_NO_CATEGORY)  com.android.phone.CdmaPhoneCallState$PhoneCallState getCurrentCallState();
   @Source(SUSI_NO_CATEGORY)  com.android.phone.CdmaPhoneCallState$PhoneCallState getPreviousCallState();
   @Source(SUSI_NO_CATEGORY)  boolean getAddCallMenuStateAfterCallWaiting();
}
class ContactsAsyncHelper$ImageTracker{
   @Source(SUSI_CONTACT_INFORMATION)  int getPhotoState();
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getPhotoUri();
}
class DTMFTwelveKeyDialer{
    void startTone(  @Sink(SUSI_NO_CATEGORY) char arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void startLocalToneIfNeeded(  @Sink(SUSI_NO_CATEGORY) char arg0);
    void setDialpadContext(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class DTMFTwelveKeyDialer$DTMFKeyListener{
   @Source(SUSI_NO_CATEGORY)  char[] getAcceptedChars();
}
class EditPhoneNumberPreference{
    void setValueFromString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPhoneNumber();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getStringValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getSummaryOn();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRawPhoneNumber();
}
class EmergencyCallbackModeService{
   @Source(SUSI_NETWORK_INFORMATION)  boolean getEmergencyCallbackModeCallState();
   @Source(SUSI_NETWORK_INFORMATION)  long getEmergencyCallbackModeTimeout();
}
class EmergencyCallbackModeService$LocalBinder{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.phone.EmergencyCallbackModeService getService();
}
class EmergencyDialer{
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog onCreateDialog(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class InCallScreen{
   @Source(SUSI_NO_CATEGORY)  com.android.phone.InCallControlState getUpdatedInCallControlState();
   @Source(SUSI_NO_CATEGORY)  com.android.phone.InCallTouchUi getInCallTouchUi();
}
class InCallTouchUi{
   @Source(SUSI_NO_CATEGORY)  int getTouchUiHeight();
}
class InCallUiState{
    void setProviderInfo(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.phone.Constants$CallStatusCode getPendingCallStatusCode();
   @Source(SUSI_NO_CATEGORY)  com.android.phone.InCallUiState$ProgressIndicationType getProgressIndication();
}
class ManageConferenceUtils{
    void setPanelVisible(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void updateManageConferenceRow(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) com.android.internal.telephony.Connection arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  int getNumCallersInConference();
}
class MobileNetworkSettings{
   @Source(SUSI_NO_CATEGORY)  boolean onPreferenceChange(  @Sink(SUSI_NO_CATEGORY) android.preference.Preference arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
}
class NotificationMgr{
    void notifyMissedCall(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg3, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg4, @Sink(SUSI_NO_CATEGORY) long arg5);
}
class NotificationMgr$QueryHandler{
    void onQueryComplete(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1, @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg2);
}
class OtaUtils{
    boolean maybeDoOtaCall(  @Sink(SUSI_LOG) android.content.Context arg0, @Sink(SUSI_LOG) android.os.Handler arg1, @Sink(SUSI_LOG) int arg2);
    void setupOtaspCall(  @Sink(SUSI_LOG) android.content.Intent arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.phone.OtaUtils$CdmaOtaInCallScreenUiState$State getCdmaOtaInCallScreenUiState();
}
class OutgoingCallBroadcaster{
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog onCreateDialog(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class PhoneGlobals{
   @Source(SUSI_NO_CATEGORY)  com.android.phone.Ringer getRinger();
   @Source(SUSI_NO_CATEGORY)  com.android.phone.PhoneGlobals getInstanceIfPrimary();
   @Source(SUSI_NO_CATEGORY)  boolean getRestoreMuteOnInCallResume();
   @Source(SUSI_NO_CATEGORY)  android.app.KeyguardManager getKeyguardManager();
   @Source(SUSI_NO_CATEGORY)  com.android.phone.PhoneGlobals getInstance();
   @Source(SUSI_NO_CATEGORY)  com.android.internal.telephony.Phone getPhone();
   @Source(SUSI_NO_CATEGORY)  android.content.Intent createInCallIntent(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent createPhoneEndIntentUsingCallOrigin();
   @Source(SUSI_NO_CATEGORY)  android.bluetooth.IBluetoothHeadsetPhone getBluetoothPhoneService();
   @Source(SUSI_NO_CATEGORY)  android.app.PendingIntent getCallBackPendingIntent(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.internal.telephony.PhoneConstants$State getPhoneState();
   @Source(SUSI_NO_CATEGORY)  android.app.PendingIntent getSendSmsFromNotificationPendingIntent(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.os.UpdateLock getUpdateLock();
   @Source(SUSI_NO_CATEGORY)  android.app.Activity getPUKEntryActivity();
}
class PhoneGlobals$PhoneAppBroadcastReceiver{
    void onReceive(  @Sink(SUSI_LOG) android.content.Context arg0, @Sink(SUSI_LOG) android.content.Intent arg1);
}
class PhoneInterfaceManager{
   @Source(SUSI_NO_CATEGORY)  boolean handlePinMmi(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  boolean supplyPuk(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  boolean setRadio(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  boolean supplyPin(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int enableApnType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_LOCATION_INFORMATION)  android.os.Bundle getCellLocation();
   @Source(SUSI_LOCATION_INFORMATION)  int getNetworkType();
   @Source(SUSI_NO_CATEGORY)  int getVoiceMessageCount();
   @Source(SUSI_NO_CATEGORY)  int getActivePhoneType();
   @Source(SUSI_NO_CATEGORY)  int getDataActivity();
   @Source(SUSI_NO_CATEGORY)  int getCdmaEriIconMode();
   @Source(SUSI_NO_CATEGORY)  boolean isDataConnectivityPossible();
   @Source(SUSI_NO_CATEGORY)  int disableApnType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getLteOnCdmaMode();
   @Source(SUSI_NO_CATEGORY)  java.util.List getNeighboringCellInfo();
   @Source(SUSI_NO_CATEGORY)  int getCdmaEriIconIndex();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCdmaEriText();
   @Source(SUSI_NO_CATEGORY)  int getCallState();
   @Source(SUSI_NO_CATEGORY)  java.util.List getAllCellInfo();
   @Source(SUSI_NO_CATEGORY)  int getDataState();
}
class PhoneUtils{
    void setMute(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) com.android.internal.telephony.Connection arg1, @Sink(SUSI_NO_CATEGORY) com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener arg2, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg3);
   @Source(SUSI_FILE_INFORMATION)  com.android.internal.telephony.Phone getSipPhoneFromUri(  com.android.internal.telephony.CallManager arg0, java.lang.String arg1);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getProviderGatewayUri(  android.content.Intent arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getProviderIcon(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1);
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog displayMMIInitiate(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) com.android.internal.telephony.MmiCode arg1, @Sink(SUSI_NO_CATEGORY) android.os.Message arg2, @Sink(SUSI_NO_CATEGORY) android.app.Dialog arg3);
   @Source(SUSI_NO_CATEGORY)  boolean getMute();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getProviderLabel(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCompactNameFromCallerInfo(  @Sink(SUSI_NO_CATEGORY) com.android.internal.telephony.CallerInfo arg0, @Sink(SUSI_NO_CATEGORY) android.content.Context arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInitialNumber(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.internal.telephony.CallerInfo getCallerInfo(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) com.android.internal.telephony.Connection arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPresentationString(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class PhoneUtils$ConnectionHandler{
    void handleMessage(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
}
class RespondViaSmsManager$RespondViaSmsItemClickListener{
    void onItemClick(  @Sink(SUSI_NO_CATEGORY) android.widget.AdapterView arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) long arg3);
}
class Ringer$Worker{
   @Source(SUSI_NO_CATEGORY)  android.os.Looper getLooper();
}
class SipCallOptionHandler{
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog onCreateDialog(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class TelephonyDebugService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
}

package org.apache.james.mime4j.field.address.parser;

class AddressListParser{
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.james.mime4j.field.address.parser.Token getToken(  int arg0);
}
class AddressListParserTokenManager{
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.james.mime4j.field.address.parser.Token jjFillToken();
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.james.mime4j.field.address.parser.Token getNextToken();
}
class ParseException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
}
class SimpleCharStream{
   @Source(SUSI_NO_CATEGORY)  int getBeginLine();
   @Source(SUSI_NO_CATEGORY)  int getEndColumn();
   @Source(SUSI_NO_CATEGORY)  int getEndLine();
   @Source(SUSI_NO_CATEGORY)  int getBeginColumn();
}
class TokenMgrError{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
}

package com.adobe.xmp.impl.xpath;

class XMPPath{
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.impl.xpath.XMPPathSegment getSegment(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class XMPPathSegment{
   @Source(SUSI_NO_CATEGORY)  int getKind();
   @Source(SUSI_NO_CATEGORY)  int getAliasForm();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
}

package com.android.internal.database;

class SortCursor{
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getColumnNames();
   @Source(SUSI_NO_CATEGORY)  long getLong(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  double getDouble(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getFloat(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  short getShort(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getBlob(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getCount();
}

package android.filterpacks.performance;

class Throughput{
   @Source(SUSI_NO_CATEGORY)  int getTotalFrameCount();
   @Source(SUSI_NO_CATEGORY)  int getPeriodTime();
   @Source(SUSI_NO_CATEGORY)  float getNanosPerPixel();
   @Source(SUSI_NO_CATEGORY)  int getPeriodFrameCount();
   @Source(SUSI_NO_CATEGORY)  float getFramesPerSecond();
}
class ThroughputFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}

package com.android.email.view;

class CertificateSelector{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCertificate();
}
class CertificateSelector$SavedState{
    void writeToParcel(  @Sink(SUSI_EMAIL) android.os.Parcel arg0, @Sink(SUSI_EMAIL) int arg1);
}

package com.android.exchange.provider;

class ExchangeDirectoryProvider{
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor buildGalResultCursor(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0, @Sink(SUSI_NO_CATEGORY) com.android.exchange.provider.GalResult arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
   @Source(SUSI_NO_CATEGORY)  long getAccountIdByName(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class ExchangeDirectoryProvider$GalContactRow{
    void addNameRow(  @Sink(SUSI_CONTACT_INFORMATION) android.database.MatrixCursor arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.exchange.provider.ExchangeDirectoryProvider$GalProjection arg1, @Sink(SUSI_CONTACT_INFORMATION) long arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg5, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg6, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg7);
    void addEmailAddress(  @Sink(SUSI_CONTACT_INFORMATION) android.database.MatrixCursor arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.exchange.provider.ExchangeDirectoryProvider$GalProjection arg1, @Sink(SUSI_CONTACT_INFORMATION) long arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg5, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg6);
    void addPhoneRow(  @Sink(SUSI_CONTACT_INFORMATION) android.database.MatrixCursor arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.exchange.provider.ExchangeDirectoryProvider$GalProjection arg1, @Sink(SUSI_CONTACT_INFORMATION) long arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg5, @Sink(SUSI_CONTACT_INFORMATION) int arg6, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg7);
    void put(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.Object arg1);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Object[] getRow();
}
class GalResult$GalData{
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class MailboxUtilities{
    void checkMailboxConsistency(  @Sink(SUSI_LOG) android.content.Context arg0, @Sink(SUSI_LOG) long arg1);
    void setFlagsAndChildrensParentKey(  @Sink(SUSI_LOG) android.content.Context arg0, @Sink(SUSI_LOG) android.database.Cursor arg1, @Sink(SUSI_LOG) java.lang.String arg2);
    void setFlagsAndChildrensParentKey(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
}

package android.security;

class Credentials{
    void install(  @Sink(SUSI_LOG) android.content.Context arg0, @Sink(SUSI_LOG) java.security.KeyPair arg1);
    void install(  @Sink(SUSI_LOG) android.content.Context arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) byte[] arg2);
   @Source(SUSI_NO_CATEGORY)  byte[] convertToPem(  @Sink(SUSI_NO_CATEGORY) java.security.cert.Certificate[] arg0);
   @Source(SUSI_NO_CATEGORY)  android.security.Credentials getInstance();
}
class IKeyChainAliasCallback$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IKeyChainAliasCallback$Stub$Proxy{
    void alias(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IKeyChainService$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IKeyChainService$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  boolean hasGrant(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  boolean deleteCaCertificate(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void installCaCertificate(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
    void setGrant(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String requestPrivateKey(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getCertificate(  java.lang.String arg0);
}
class KeyChain{
    void choosePrivateKeyAlias(  @Sink(SUSI_NO_CATEGORY) android.app.Activity arg0, @Sink(SUSI_NO_CATEGORY) android.security.KeyChainAliasCallback arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg2, @Sink(SUSI_NO_CATEGORY) java.security.Principal[] arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) java.lang.String arg6);
   @Source(SUSI_NO_CATEGORY)  java.security.cert.X509Certificate[] getCertificateChain(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.security.PrivateKey getPrivateKey(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class KeyChain$KeyChainConnection{
   @Source(SUSI_NO_CATEGORY)  android.security.IKeyChainService getService();
}
class KeyStore{
   @Source(SUSI_NO_CATEGORY)  boolean put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getLastError();
   @Source(SUSI_NO_CATEGORY)  android.security.KeyStore getInstance();
   @Source(SUSI_NO_CATEGORY)  byte[] sign(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] getPubkey(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  long getmtime(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class SystemKeyStore{
    byte[] generateNewKey(  @Sink(SUSI_FILE) int arg0, @Sink(SUSI_FILE) java.lang.String arg1, @Sink(SUSI_FILE) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  android.security.SystemKeyStore getInstance();
   @Source(SUSI_NO_CATEGORY)  byte[] retrieveKey(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}

package android.hardware;

class Camera{
    void setParameters(  @Sink(SUSI_NO_CATEGORY) android.hardware.Camera$Parameters arg0);
   @Source(SUSI_NO_CATEGORY)  android.hardware.Camera$Parameters getParameters();
   @Source(SUSI_NO_CATEGORY)  android.hardware.Camera$Parameters getEmptyParameters();
}
class Camera$Parameters{
    void set(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1);
    void setSceneMode(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setZoom(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setPictureSize(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setFocusMode(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setGpsProcessingMethod(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setPreviewFpsRange(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setPreviewSize(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setGpsLatitude(  @Sink(SUSI_NO_CATEGORY) double arg0);
    void setRotation(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setPreviewFrameRate(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setAntibanding(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setPictureFormat(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void set(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setGpsAltitude(  @Sink(SUSI_NO_CATEGORY) double arg0);
    void setJpegQuality(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setWhiteBalance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setGpsTimestamp(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setAutoExposureLock(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setExposureCompensation(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setPreviewFormat(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setFlashMode(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setGpsLongitude(  @Sink(SUSI_NO_CATEGORY) double arg0);
    void setAutoWhiteBalanceLock(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setVideoStabilization(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setJpegThumbnailSize(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setJpegThumbnailQuality(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setRecordingHint(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setColorEffect(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.hardware.Camera$Size getJpegThumbnailSize();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFocusMode();
   @Source(SUSI_NO_CATEGORY)  boolean getAutoExposureLock();
   @Source(SUSI_NO_CATEGORY)  float getVerticalViewAngle();
   @Source(SUSI_NO_CATEGORY)  int getMaxExposureCompensation();
   @Source(SUSI_NO_CATEGORY)  android.hardware.Camera$Size getPictureSize();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAntibanding();
   @Source(SUSI_NO_CATEGORY)  java.util.List getSupportedPreviewFpsRange();
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getJpegThumbnailQuality();
   @Source(SUSI_NO_CATEGORY)  java.util.List getSupportedPictureSizes();
   @Source(SUSI_NO_CATEGORY)  int getMinExposureCompensation();
   @Source(SUSI_NO_CATEGORY)  float getFocalLength();
   @Source(SUSI_NO_CATEGORY)  java.util.List getSupportedFlashModes();
   @Source(SUSI_NO_CATEGORY)  int getExposureCompensation();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getColorEffect();
   @Source(SUSI_NO_CATEGORY)  java.util.List getSupportedSceneModes();
   @Source(SUSI_NO_CATEGORY)  android.hardware.Camera$Size getPreferredPreviewSizeForVideo();
   @Source(SUSI_NO_CATEGORY)  int getZoom();
   @Source(SUSI_NO_CATEGORY)  int getJpegQuality();
   @Source(SUSI_NO_CATEGORY)  boolean getAutoWhiteBalanceLock();
   @Source(SUSI_NO_CATEGORY)  java.util.List getSupportedVideoSizes();
   @Source(SUSI_NO_CATEGORY)  java.util.List getFocusAreas();
   @Source(SUSI_NO_CATEGORY)  java.util.List getMeteringAreas();
   @Source(SUSI_NO_CATEGORY)  java.util.List getZoomRatios();
   @Source(SUSI_NO_CATEGORY)  float getExposureCompensationStep();
   @Source(SUSI_NO_CATEGORY)  java.util.List getSupportedFocusModes();
   @Source(SUSI_NO_CATEGORY)  boolean getVideoStabilization();
   @Source(SUSI_NO_CATEGORY)  java.util.List getSupportedWhiteBalance();
   @Source(SUSI_NO_CATEGORY)  java.lang.String get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getMaxZoom();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getWhiteBalance();
   @Source(SUSI_NO_CATEGORY)  java.util.List getSupportedJpegThumbnailSizes();
   @Source(SUSI_NO_CATEGORY)  java.util.List getSupportedPictureFormats();
   @Source(SUSI_NO_CATEGORY)  int getMaxNumFocusAreas();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFlashMode();
   @Source(SUSI_NO_CATEGORY)  java.util.List getSupportedPreviewFrameRates();
   @Source(SUSI_NO_CATEGORY)  int getPreviewFrameRate();
   @Source(SUSI_NO_CATEGORY)  java.util.List getSupportedColorEffects();
   @Source(SUSI_NO_CATEGORY)  int getPreviewFormat();
   @Source(SUSI_NO_CATEGORY)  int getPictureFormat();
   @Source(SUSI_NO_CATEGORY)  int getMaxNumDetectedFaces();
   @Source(SUSI_NO_CATEGORY)  int getMaxNumMeteringAreas();
   @Source(SUSI_NO_CATEGORY)  android.hardware.Camera$Size getPreviewSize();
   @Source(SUSI_NO_CATEGORY)  java.util.List getSupportedPreviewSizes();
   @Source(SUSI_NO_CATEGORY)  float getHorizontalViewAngle();
   @Source(SUSI_NO_CATEGORY)  java.util.List getSupportedPreviewFormats();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSceneMode();
   @Source(SUSI_NO_CATEGORY)  java.util.List getSupportedAntibanding();
}
class ISerialManager$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class ISerialManager$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  android.os.ParcelFileDescriptor openSerialPort(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getSerialPorts();
}
class LegacySensorManager{
   @Source(SUSI_NO_CATEGORY)  int getSensors();
   @Source(SUSI_NO_CATEGORY)  int getRotation();
}
class Sensor{
   @Source(SUSI_NO_CATEGORY)  int getVersion();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  int getHandle();
   @Source(SUSI_NO_CATEGORY)  int getType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getVendor();
   @Source(SUSI_NO_CATEGORY)  float getMaximumRange();
   @Source(SUSI_NO_CATEGORY)  int getMinDelay();
   @Source(SUSI_NO_CATEGORY)  float getResolution();
   @Source(SUSI_NO_CATEGORY)  float getPower();
}
class SensorManager{
   @Source(SUSI_NO_CATEGORY)  int getSensors();
   @Source(SUSI_NO_CATEGORY)  float[] getOrientation(  @Sink(SUSI_NO_CATEGORY) float[] arg0, @Sink(SUSI_NO_CATEGORY) float[] arg1);
   @Source(SUSI_NO_CATEGORY)  android.hardware.Sensor getDefaultSensor(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getAltitude(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void getRotationMatrixFromVector(  @Sink(SUSI_NO_CATEGORY) float[] arg0, @Sink(SUSI_NO_CATEGORY) float[] arg1);
    void getQuaternionFromVector(  @Sink(SUSI_NO_CATEGORY) float[] arg0, @Sink(SUSI_NO_CATEGORY) float[] arg1);
   @Source(SUSI_NO_CATEGORY)  float getInclination(  @Sink(SUSI_NO_CATEGORY) float[] arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getRotationMatrix(  @Sink(SUSI_NO_CATEGORY) float[] arg0, @Sink(SUSI_NO_CATEGORY) float[] arg1, @Sink(SUSI_NO_CATEGORY) float[] arg2, @Sink(SUSI_NO_CATEGORY) float[] arg3);
   @Source(SUSI_NO_CATEGORY)  java.util.List getSensorList(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void getAngleChange(  @Sink(SUSI_NO_CATEGORY) float[] arg0, @Sink(SUSI_NO_CATEGORY) float[] arg1, @Sink(SUSI_NO_CATEGORY) float[] arg2);
}
class SensorManager$SensorEventPool{
   @Source(SUSI_NO_CATEGORY)  android.hardware.SensorEvent getFromPool();
}
class SerialManager{
    android.hardware.SerialPort openSerialPort(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getSerialPorts();
}
class SerialPort{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
}
class SystemSensorManager{
   @Source(SUSI_NO_CATEGORY)  java.util.List getFullSensorList();
}
class SystemSensorManager$ListenerDelegate{
    void addSensor(  @Sink(SUSI_NO_CATEGORY) android.hardware.Sensor arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getListener();
   @Source(SUSI_NO_CATEGORY)  java.util.List getSensors();
}

package android.view;

class AbsSavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.os.Parcelable getSuperState();
}
class AccessibilityInteractionController$PrivateHandler{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessageName(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
}
class AccessibilityIterators$AbstractTextSegmentIterator{
   @Source(SUSI_NO_CATEGORY)  int[] getRange(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class AccessibilityIterators$CharacterTextSegmentIterator{
   @Source(SUSI_NO_CATEGORY)  android.view.AccessibilityIterators$CharacterTextSegmentIterator getInstance(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
}
class AccessibilityIterators$ParagraphTextSegmentIterator{
   @Source(SUSI_NO_CATEGORY)  android.view.AccessibilityIterators$ParagraphTextSegmentIterator getInstance();
}
class AccessibilityIterators$WordTextSegmentIterator{
   @Source(SUSI_NO_CATEGORY)  android.view.AccessibilityIterators$WordTextSegmentIterator getInstance(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
}
class ActionMode{
   @Source(SUSI_NO_CATEGORY)  boolean getTitleOptionalHint();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getTag();
}
class Choreographer{
   @Source(SUSI_NO_CATEGORY)  android.view.Choreographer getInstance();
   @Source(SUSI_NO_CATEGORY)  long getFrameDelay();
   @Source(SUSI_NO_CATEGORY)  long getFrameTimeNanos();
   @Source(SUSI_NO_CATEGORY)  long getFrameTime();
}
class CompatibilityInfoHolder{
   @Source(SUSI_NO_CATEGORY)  android.content.res.CompatibilityInfo get();
   @Source(SUSI_NO_CATEGORY)  android.content.res.CompatibilityInfo getIfNeeded();
}
class ContextThemeWrapper{
   @Source(SUSI_NO_CATEGORY)  android.content.res.Resources$Theme getTheme();
   @Source(SUSI_NO_CATEGORY)  android.content.res.Resources getResources();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getSystemService(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getThemeResId();
}
class Display{
   @Source(SUSI_NO_CATEGORY)  int getLayerStack();
   @Source(SUSI_NO_CATEGORY)  float getRefreshRate();
   @Source(SUSI_NO_CATEGORY)  android.view.CompatibilityInfoHolder getCompatibilityInfo();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  int getMaximumSizeDimension();
   @Source(SUSI_NO_CATEGORY)  int getOrientation();
   @Source(SUSI_NO_CATEGORY)  int getType();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  int getRotation();
   @Source(SUSI_NO_CATEGORY)  int getDisplayId();
   @Source(SUSI_NO_CATEGORY)  int getPixelFormat();
   @Source(SUSI_NO_CATEGORY)  int getFlags();
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAddress();
}
class DisplayInfo{
   @Source(SUSI_NO_CATEGORY)  int getNaturalHeight();
   @Source(SUSI_NO_CATEGORY)  int getNaturalWidth();
}
class DragEvent{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean getResult();
   @Source(SUSI_NO_CATEGORY)  android.content.ClipData getClipData();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getLocalState();
   @Source(SUSI_NO_CATEGORY)  int getAction();
   @Source(SUSI_NO_CATEGORY)  android.content.ClipDescription getClipDescription();
   @Source(SUSI_NO_CATEGORY)  float getY();
   @Source(SUSI_NO_CATEGORY)  float getX();
}
class FocusFinder{
   @Source(SUSI_NO_CATEGORY)  android.view.View findNextFocusInAbsoluteDirection(  @Sink(SUSI_NO_CATEGORY) java.util.ArrayList arg0, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg1, @Sink(SUSI_NO_CATEGORY) android.view.View arg2, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
   @Source(SUSI_NO_CATEGORY)  int getWeightedDistanceFor(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.View findNextFocusFromRect(  @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  android.view.FocusFinder getInstance();
}
class GLES20Canvas{
   @Source(SUSI_NO_CATEGORY)  int saveLayer(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) float arg3, @Sink(SUSI_NO_CATEGORY) android.graphics.Paint arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
    void setMatrix(  @Sink(SUSI_NO_CATEGORY) android.graphics.Matrix arg0);
   @Source(SUSI_NO_CATEGORY)  int saveLayer(  @Sink(SUSI_NO_CATEGORY) android.graphics.RectF arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Paint arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void restoreToCount(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  int getMaximumBitmapHeight();
   @Source(SUSI_NO_CATEGORY)  int getMaximumBitmapWidth();
   @Source(SUSI_NO_CATEGORY)  int getRenderer();
   @Source(SUSI_NO_CATEGORY)  int saveLayerAlpha(  @Sink(SUSI_NO_CATEGORY) android.graphics.RectF arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getDisplayList(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getSaveCount();
   @Source(SUSI_NO_CATEGORY)  android.graphics.DrawFilter getDrawFilter();
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  int saveLayerAlpha(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) float arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
}
class GLES20DisplayList{
    void setTranslationY(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setTranslationX(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setStaticMatrix(  @Sink(SUSI_NO_CATEGORY) android.graphics.Matrix arg0);
    void setCaching(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setTransformationInfo(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) float arg3, @Sink(SUSI_NO_CATEGORY) float arg4, @Sink(SUSI_NO_CATEGORY) float arg5, @Sink(SUSI_NO_CATEGORY) float arg6, @Sink(SUSI_NO_CATEGORY) float arg7);
    void setRotation(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setRotationY(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setRotationX(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setScaleX(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setScaleY(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setClipChildren(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setHasOverlappingRendering(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setLeftTopRightBottom(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setTop(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setLeft(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setPivotY(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setPivotX(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setBottom(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setAnimationMatrix(  @Sink(SUSI_NO_CATEGORY) android.graphics.Matrix arg0);
    void setCameraDistance(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setRight(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setLeftTop(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getSize();
   @Source(SUSI_NO_CATEGORY)  int getNativeDisplayList();
}
class GLES20Layer{
    void setLayerPaint(  @Sink(SUSI_NO_CATEGORY) android.graphics.Paint arg0);
   @Source(SUSI_NO_CATEGORY)  int getLayer();
}
class GLES20RecordingCanvas{
    void setNextPoolable(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.GLES20RecordingCanvas getNextPoolable();
}
class GLES20RenderLayer{
    void setTransform(  @Sink(SUSI_NO_CATEGORY) android.graphics.Matrix arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.HardwareCanvas getCanvas();
}
class GLES20TextureLayer{
    void setOpaque(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setTransform(  @Sink(SUSI_NO_CATEGORY) android.graphics.Matrix arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.SurfaceTexture getSurfaceTexture();
   @Source(SUSI_NO_CATEGORY)  android.view.HardwareCanvas getCanvas();
}
class Gravity{
   @Source(SUSI_NO_CATEGORY)  int getAbsoluteGravity(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class HardwareCanvas{
    void setBitmap(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0);
}
class HardwareLayer{
    void setLayerPaint(  @Sink(SUSI_NO_CATEGORY) android.graphics.Paint arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.DisplayList getDisplayList();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  int getHeight();
}
class HardwareRenderer{
    void setupDiskCache(  @Sink(SUSI_NO_CATEGORY) java.io.File arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.HardwareRenderer createGlRenderer(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  boolean initializeIfNeeded(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.view.Surface arg2);
}
class HardwareRenderer$Gl20Renderer{
    void setup(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setSurfaceTexture(  @Sink(SUSI_NO_CATEGORY) android.view.HardwareLayer arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.SurfaceTexture arg1);
   @Source(SUSI_NO_CATEGORY)  int[] getConfig(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class HardwareRenderer$GlRenderer{
   @Source(SUSI_NO_CATEGORY)  long getFrameCount();
   @Source(SUSI_NO_CATEGORY)  android.view.HardwareCanvas getCanvas();
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
}
class IApplicationToken$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IApplicationToken$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  long getKeyDispatchingTimeout();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IDisplayContentChangeListener$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IDisplayContentChangeListener$Stub$Proxy{
    void onWindowLayersChanged(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void onWindowTransition(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.view.WindowInfo arg2);
    void onRotationChanged(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void onRectangleOnScreenRequested(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IInputFilter$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IInputFilter$Stub$Proxy{
    void filterInputEvent(  @Sink(SUSI_NO_CATEGORY) android.view.InputEvent arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void install(  @Sink(SUSI_NO_CATEGORY) android.view.IInputFilterHost arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IInputFilterHost$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IInputFilterHost$Stub$Proxy{
    void sendInputEvent(  @Sink(SUSI_NO_CATEGORY) android.view.InputEvent arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IOnKeyguardExitResult$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IOnKeyguardExitResult$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IRotationWatcher$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IRotationWatcher$Stub$Proxy{
    void onRotationChanged(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IWindow$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IWindow$Stub$Proxy{
    void dispatchWallpaperCommand(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg4, @Sink(SUSI_NO_CATEGORY) boolean arg5);
    void moved(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void executeCommand(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg2);
    void dispatchSystemUiVisibilityChanged(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void dispatchWallpaperOffsets(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) float arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4);
    void closeSystemDialogs(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IWindowManager$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IWindowManager$Stub$Proxy{
    void setNewConfiguration(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.res.Configuration arg0);
    void disableKeyguard(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void stopAppFreezingScreen(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.IWindowSession openSession(  @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputMethodClient arg0, @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputContext arg1);
    void overridePendingAppTransition(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.os.IRemoteCallback arg3);
    void removeAppToken(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
    void freezeRotation(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setAppWillBeHidden(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
    void clearForcedDisplaySize(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setAppStartingWindow(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.content.res.CompatibilityInfo arg3, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) int arg6, @Sink(SUSI_NO_CATEGORY) int arg7, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg8, @Sink(SUSI_NO_CATEGORY) boolean arg9);
    void setForcedDisplaySize(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int watchRotation(  @Sink(SUSI_NO_CATEGORY) android.view.IRotationWatcher arg0);
    void resumeKeyDispatching(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
    void magnifyDisplay(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) float arg3);
    void setAppOrientation(  @Sink(SUSI_NO_CATEGORY) android.view.IApplicationToken arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void reenableKeyguard(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
    void setForcedDisplayDensity(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean waitForWindowDrawn(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) android.os.IRemoteCallback arg1);
    void overridePendingAppTransitionThumb(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.os.IRemoteCallback arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4);
    void addDisplayContentChangeListener(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.IDisplayContentChangeListener arg1);
    void addAppToken(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.view.IApplicationToken arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) boolean arg5, @Sink(SUSI_NO_CATEGORY) boolean arg6);
    void setAppGroupId(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void pauseKeyDispatching(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
    void overridePendingAppTransitionScaleUp(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void startFreezingScreen(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setAnimationScale(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void startAppFreezingScreen(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setAnimationScales(  @Sink(SUSI_NO_CATEGORY) float[] arg0);
    void prepareAppTransition(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setInTouchMode(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setFocusedApp(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setStrictModeVisualIndicatorPreference(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void removeWindowToken(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
    void setAppVisibility(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setEventDispatching(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void closeSystemDialogs(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void clearForcedDisplayDensity(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void addWindowToken(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean inputMethodClientHasFocus(  @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputMethodClient arg0);
    void removeDisplayContentChangeListener(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.IDisplayContentChangeListener arg1);
    void setInputFilter(  @Sink(SUSI_NO_CATEGORY) android.view.IInputFilter arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.res.Configuration updateOrientationFromAppTokens(  @Sink(SUSI_NO_CATEGORY) android.content.res.Configuration arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1);
    void statusBarVisibilityChanged(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean startViewServer(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void moveAppToken(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1);
   @Source(SUSI_NO_CATEGORY)  float[] getAnimationScales();
   @Source(SUSI_NO_CATEGORY)  float getAnimationScale(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NO_CATEGORY)  android.view.WindowInfo getWindowInfo(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
   @Source(SUSI_NO_CATEGORY)  int getRotation();
   @Source(SUSI_NO_CATEGORY)  int getPreferredOptionsPanelGravity();
   @Source(SUSI_NO_CATEGORY)  int getPendingAppTransition();
   @Source(SUSI_NO_CATEGORY)  int getAppOrientation(  @Sink(SUSI_NO_CATEGORY) android.view.IApplicationToken arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap screenshotApplications(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void getVisibleWindowsForDisplay(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.util.List arg1);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder getFocusedWindowToken();
   @Source(SUSI_NO_CATEGORY)  float getWindowCompatibilityScale(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
}
class IWindowSession$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IWindowSession$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  boolean outOfMemory(  @Sink(SUSI_NO_CATEGORY) android.view.IWindow arg0);
    void dragRecipientExited(  @Sink(SUSI_NO_CATEGORY) android.view.IWindow arg0);
    void wallpaperCommandComplete(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
   @Source(SUSI_NO_CATEGORY)  int addToDisplayWithoutInputChannel(  @Sink(SUSI_NO_CATEGORY) android.view.IWindow arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.view.WindowManager$LayoutParams arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg5);
    void dragRecipientEntered(  @Sink(SUSI_NO_CATEGORY) android.view.IWindow arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle sendWallpaperCommand(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg5, @Sink(SUSI_NO_CATEGORY) boolean arg6);
    void setWallpaperPosition(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) float arg3, @Sink(SUSI_NO_CATEGORY) float arg4);
    void setInsets(  @Sink(SUSI_NO_CATEGORY) android.view.IWindow arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg2, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg3, @Sink(SUSI_NO_CATEGORY) android.graphics.Region arg4);
    void finishDrawing(  @Sink(SUSI_NO_CATEGORY) android.view.IWindow arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder prepareDrag(  @Sink(SUSI_NO_CATEGORY) android.view.IWindow arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.view.Surface arg4);
   @Source(SUSI_NO_CATEGORY)  int add(  @Sink(SUSI_NO_CATEGORY) android.view.IWindow arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.view.WindowManager$LayoutParams arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg4, @Sink(SUSI_NO_CATEGORY) android.view.InputChannel arg5);
    void remove(  @Sink(SUSI_NO_CATEGORY) android.view.IWindow arg0);
    void reportDropResult(  @Sink(SUSI_NO_CATEGORY) android.view.IWindow arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  int relayout(  @Sink(SUSI_NO_CATEGORY) android.view.IWindow arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.view.WindowManager$LayoutParams arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) int arg6, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg7, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg8, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg9, @Sink(SUSI_NO_CATEGORY) android.content.res.Configuration arg10, @Sink(SUSI_NO_CATEGORY) android.view.Surface arg11);
   @Source(SUSI_NO_CATEGORY)  boolean performDrag(  @Sink(SUSI_NO_CATEGORY) android.view.IWindow arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) float arg3, @Sink(SUSI_NO_CATEGORY) float arg4, @Sink(SUSI_NO_CATEGORY) float arg5, @Sink(SUSI_NO_CATEGORY) android.content.ClipData arg6);
    void onRectangleOnScreenRequested(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void wallpaperOffsetsComplete(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
    void setTransparentRegion(  @Sink(SUSI_NO_CATEGORY) android.view.IWindow arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Region arg1);
   @Source(SUSI_NO_CATEGORY)  int addWithoutInputChannel(  @Sink(SUSI_NO_CATEGORY) android.view.IWindow arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.view.WindowManager$LayoutParams arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg4);
    void performDeferredDestroy(  @Sink(SUSI_NO_CATEGORY) android.view.IWindow arg0);
   @Source(SUSI_NO_CATEGORY)  boolean performHapticFeedback(  @Sink(SUSI_NO_CATEGORY) android.view.IWindow arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void setUniverseTransform(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) float arg3, @Sink(SUSI_NO_CATEGORY) float arg4, @Sink(SUSI_NO_CATEGORY) float arg5, @Sink(SUSI_NO_CATEGORY) float arg6, @Sink(SUSI_NO_CATEGORY) float arg7);
    void setInTouchMode(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int addToDisplay(  @Sink(SUSI_NO_CATEGORY) android.view.IWindow arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.view.WindowManager$LayoutParams arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg5, @Sink(SUSI_NO_CATEGORY) android.view.InputChannel arg6);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
    void getDisplayFrame(  @Sink(SUSI_NO_CATEGORY) android.view.IWindow arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg1);
}
class InputChannel{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
}
class InputDevice{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int[] getDeviceIds();
   @Source(SUSI_NO_CATEGORY)  android.view.InputDevice getDevice(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getMotionRanges();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  int getSources();
   @Source(SUSI_NO_CATEGORY)  android.view.InputDevice$MotionRange getMotionRange(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.os.Vibrator getVibrator();
   @Source(SUSI_NO_CATEGORY)  int getKeyboardType();
   @Source(SUSI_NO_CATEGORY)  int getGeneration();
   @Source(SUSI_NO_CATEGORY)  android.view.KeyCharacterMap getKeyCharacterMap();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDescriptor();
   @Source(SUSI_NO_CATEGORY)  android.view.InputDevice$MotionRange getMotionRange(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getId();
}
class InputDevice$MotionRange{
   @Source(SUSI_NO_CATEGORY)  float getFlat();
   @Source(SUSI_NO_CATEGORY)  float getMin();
   @Source(SUSI_NO_CATEGORY)  float getMax();
   @Source(SUSI_NO_CATEGORY)  int getAxis();
   @Source(SUSI_NO_CATEGORY)  float getFuzz();
   @Source(SUSI_NO_CATEGORY)  float getRange();
   @Source(SUSI_NO_CATEGORY)  int getSource();
}
class InputEvent{
   @Source(SUSI_NO_CATEGORY)  int getSequenceNumber();
   @Source(SUSI_NO_CATEGORY)  android.view.InputDevice getDevice();
}
class InputFilter{
    void sendInputEvent(  @Sink(SUSI_NO_CATEGORY) android.view.InputEvent arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class InputQueue{
   @Source(SUSI_NO_CATEGORY)  android.view.InputChannel getInputChannel();
}
class KeyCharacterMap{
   @Source(SUSI_NO_CATEGORY)  android.view.KeyEvent[] getEvents(  @Sink(SUSI_NO_CATEGORY) char[] arg0);
   @Source(SUSI_NO_CATEGORY)  char getMatch(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) char[] arg1);
   @Source(SUSI_NO_CATEGORY)  int getModifierBehavior();
   @Source(SUSI_NO_CATEGORY)  int get(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  char getNumber(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getKeyboardType();
   @Source(SUSI_NO_CATEGORY)  char getMatch(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) char[] arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  char getDisplayLabel(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.KeyCharacterMap$FallbackAction getFallbackAction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class KeyEvent{
    void setTainted(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  long getEventTimeNano();
   @Source(SUSI_NO_CATEGORY)  int getModifierMetaStateMask();
   @Source(SUSI_NO_CATEGORY)  long getEventTime();
   @Source(SUSI_NO_CATEGORY)  long getDownTime();
   @Source(SUSI_NO_CATEGORY)  int getRepeatCount();
   @Source(SUSI_NO_CATEGORY)  int getMaxKeyCode();
   @Source(SUSI_NO_CATEGORY)  char getMatch(  @Sink(SUSI_NO_CATEGORY) char[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getUnicodeChar(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getDeviceId();
   @Source(SUSI_NO_CATEGORY)  int getMetaState();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCharacters();
   @Source(SUSI_NO_CATEGORY)  int getScanCode();
   @Source(SUSI_NO_CATEGORY)  char getMatch(  @Sink(SUSI_NO_CATEGORY) char[] arg0);
   @Source(SUSI_NO_CATEGORY)  int getKeyboardDevice();
   @Source(SUSI_NO_CATEGORY)  int getModifiers();
   @Source(SUSI_NO_CATEGORY)  int getKeyCode();
   @Source(SUSI_NO_CATEGORY)  int getSource();
   @Source(SUSI_NO_CATEGORY)  int getUnicodeChar();
   @Source(SUSI_NO_CATEGORY)  android.view.KeyCharacterMap getKeyCharacterMap();
   @Source(SUSI_NO_CATEGORY)  char getNumber();
   @Source(SUSI_NO_CATEGORY)  int getAction();
   @Source(SUSI_NO_CATEGORY)  char getDisplayLabel();
   @Source(SUSI_NO_CATEGORY)  int getFlags();
}
class LayoutInflater{
   @Source(SUSI_NO_CATEGORY)  android.view.View createView(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.util.AttributeSet arg2);
   @Source(SUSI_NO_CATEGORY)  android.view.LayoutInflater$Factory getFactory();
   @Source(SUSI_NO_CATEGORY)  android.view.View createViewFromTag(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.util.AttributeSet arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
   @Source(SUSI_NO_CATEGORY)  android.view.View onCreateView(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.util.AttributeSet arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.View inflate(  @Sink(SUSI_NO_CATEGORY) org.xmlpull.v1.XmlPullParser arg0, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  android.view.LayoutInflater$Factory2 getFactory2();
   @Source(SUSI_NO_CATEGORY)  android.view.View onCreateView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.util.AttributeSet arg2);
   @Source(SUSI_NO_CATEGORY)  android.view.LayoutInflater$Filter getFilter();
}
class MotionEvent{
    void setAction(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setTainted(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setSource(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setEdgeFlags(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDownTime(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setLocation(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_NO_CATEGORY)  float getHistoricalToolMajor(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getActionIndex();
   @Source(SUSI_NO_CATEGORY)  float getTouchMajor();
   @Source(SUSI_NO_CATEGORY)  float getY(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getX(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getSource();
   @Source(SUSI_NO_CATEGORY)  float getYPrecision();
   @Source(SUSI_NO_CATEGORY)  float getPressure(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getEventTime();
   @Source(SUSI_NO_CATEGORY)  long getHistoricalEventTimeNano(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getFlags();
   @Source(SUSI_NO_CATEGORY)  int getAction();
   @Source(SUSI_NO_CATEGORY)  int getToolType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getTouchMajor(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getAxisValue(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getHistoricalTouchMajor(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getY();
   @Source(SUSI_NO_CATEGORY)  float getX();
   @Source(SUSI_NO_CATEGORY)  float getHistoricalPressure(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getHistoricalTouchMinor(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getHistorySize();
   @Source(SUSI_NO_CATEGORY)  float getSize();
   @Source(SUSI_NO_CATEGORY)  int getPointerCount();
   @Source(SUSI_NO_CATEGORY)  int getMetaState();
   @Source(SUSI_NO_CATEGORY)  int getDeviceId();
   @Source(SUSI_NO_CATEGORY)  float getHistoricalPressure(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  float getHistoricalTouchMinor(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getToolMajor(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getToolMinor(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getDownTime();
   @Source(SUSI_NO_CATEGORY)  float getPressure();
   @Source(SUSI_NO_CATEGORY)  float getHistoricalToolMinor(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  float getRawY();
   @Source(SUSI_NO_CATEGORY)  float getRawX();
   @Source(SUSI_NO_CATEGORY)  float getHistoricalTouchMajor(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  float getHistoricalAxisValue(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  long getHistoricalEventTime(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getOrientation(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getEventTimeNano();
   @Source(SUSI_NO_CATEGORY)  float getHistoricalOrientation(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getHistoricalToolMinor(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getTouchMinor(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getHistoricalX(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  float getHistoricalY(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  float getAxisValue(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  float getHistoricalSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getXPrecision();
   @Source(SUSI_NO_CATEGORY)  float getToolMajor();
   @Source(SUSI_NO_CATEGORY)  int getActionMasked();
   @Source(SUSI_NO_CATEGORY)  float getHistoricalToolMajor(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getHistoricalOrientation(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getPointerId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getHistoricalAxisValue(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  float getToolMinor();
   @Source(SUSI_NO_CATEGORY)  float getHistoricalY(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getHistoricalX(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getEdgeFlags();
   @Source(SUSI_NO_CATEGORY)  float getTouchMinor();
   @Source(SUSI_NO_CATEGORY)  float getOrientation();
   @Source(SUSI_NO_CATEGORY)  int getButtonState();
   @Source(SUSI_NO_CATEGORY)  int getPointerIdBits();
   @Source(SUSI_NO_CATEGORY)  float getHistoricalSize(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class MotionEvent$PointerCoords{
   @Source(SUSI_NO_CATEGORY)  float getAxisValue(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class PointerIcon{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.PointerIcon getNullIcon();
   @Source(SUSI_NO_CATEGORY)  float getHotSpotY();
   @Source(SUSI_NO_CATEGORY)  float getHotSpotX();
   @Source(SUSI_NO_CATEGORY)  android.view.PointerIcon getDefaultIcon(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getBitmap();
   @Source(SUSI_NO_CATEGORY)  android.view.PointerIcon getSystemIcon(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.PointerIcon load(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  int getStyle();
}
class PointerIcon$1{
   @Source(SUSI_NO_CATEGORY)  android.view.PointerIcon createFromParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0);
}
class ScaleGestureDetector{
   @Source(SUSI_NO_CATEGORY)  float getPreviousSpan();
   @Source(SUSI_NO_CATEGORY)  float getPreviousSpanX();
   @Source(SUSI_NO_CATEGORY)  float getPreviousSpanY();
   @Source(SUSI_NO_CATEGORY)  float getCurrentSpan();
   @Source(SUSI_NO_CATEGORY)  float getCurrentSpanY();
   @Source(SUSI_NO_CATEGORY)  float getCurrentSpanX();
   @Source(SUSI_NO_CATEGORY)  float getFocusX();
   @Source(SUSI_NO_CATEGORY)  float getFocusY();
   @Source(SUSI_NO_CATEGORY)  long getTimeDelta();
   @Source(SUSI_NO_CATEGORY)  float getScaleFactor();
   @Source(SUSI_NO_CATEGORY)  long getEventTime();
}
class Surface{
    void setLayerStack(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setPosition(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setTransparentRegionHint(  @Sink(SUSI_NO_CATEGORY) android.graphics.Region arg0);
    void setMatrix(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) float arg3);
    void setFlags(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setCompatibilityTranslator(  @Sink(SUSI_NO_CATEGORY) android.content.res.CompatibilityInfo$Translator arg0);
    void setWindowCrop(  @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg0);
    void setPosition(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setLayer(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  int getGenerationId();
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder getBuiltInDisplay(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Surface$CompatibleCanvas{
    void setMatrix(  @Sink(SUSI_NO_CATEGORY) android.graphics.Matrix arg0);
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  int getHeight();
}
class SurfaceView{
   @Source(SUSI_NO_CATEGORY)  boolean setFrame(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setZOrderOnTop(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setZOrderMediaOverlay(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setVisibility(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSecure(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.SurfaceHolder getHolder();
}
class SurfaceView$4{
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getSurfaceFrame();
   @Source(SUSI_NO_CATEGORY)  android.view.Surface getSurface();
}
class TextureView{
    void setTransform(  @Sink(SUSI_NO_CATEGORY) android.graphics.Matrix arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.SurfaceTexture getSurfaceTexture();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getBitmap(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getBitmap(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Matrix getTransform(  @Sink(SUSI_NO_CATEGORY) android.graphics.Matrix arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.HardwareLayer getHardwareLayer();
   @Source(SUSI_NO_CATEGORY)  int getLayerType();
   @Source(SUSI_NO_CATEGORY)  android.view.TextureView$SurfaceTextureListener getSurfaceTextureListener();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getBitmap();
}
class VelocityTracker{
    void setNextPoolable(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  float getXVelocity(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.VelocityTracker getNextPoolable();
   @Source(SUSI_NO_CATEGORY)  float getYVelocity(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getYVelocity();
   @Source(SUSI_NO_CATEGORY)  float getXVelocity();
}
class VelocityTracker$Estimator{
   @Source(SUSI_NO_CATEGORY)  float getXCoeff(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getYCoeff(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class View{
    boolean startDrag(  @Sink(SUSI_LOG) android.content.ClipData arg0, @Sink(SUSI_LOG) android.view.View$DragShadowBuilder arg1, @Sink(SUSI_LOG) java.lang.Object arg2, @Sink(SUSI_LOG) int arg3);
    void setHasTransientState(  @Sink(SUSI_LOG) boolean arg0);
    void setVerticalFadingEdgeEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setBackground(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
    void setHapticFeedbackEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setLongClickable(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setVisibility(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSaveEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setClickable(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setTextDirection(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void draw(  @Sink(SUSI_NO_CATEGORY) android.graphics.Canvas arg0);
    void setScrollBarStyle(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setImportantForAccessibility(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setLayerPaint(  @Sink(SUSI_NO_CATEGORY) android.graphics.Paint arg0);
    void sendAccessibilityEventInternal(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setIsRootNamespace(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setWillNotCacheDrawing(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setKeepScreenOn(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setActivated(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setLayoutDirection(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setHorizontalFadingEdgeEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setFocusableInTouchMode(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setFilterTouchesWhenObscured(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setCameraDistance(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setTextAlignment(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSoundEffectsEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setHovered(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setVerticalScrollBarEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setScrollContainer(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setTagInternal(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void setEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setHorizontalScrollBarEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setScrollX(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setScrollY(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDrawingCacheQuality(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean performAccessibilityAction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void setBackgroundColor(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setBackgroundResource(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void dispatchAttachedToWindow(  @Sink(SUSI_NO_CATEGORY) android.view.View$AttachInfo arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean performHapticFeedback(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setY(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setX(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setSelected(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setTag(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void setDuplicateParentStateEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void dispatchCollectViewAttributes(  @Sink(SUSI_NO_CATEGORY) android.view.View$AttachInfo arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void sendAccessibilityEvent(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setWillNotDraw(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setPressed(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setSaveFromParentEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  boolean performHapticFeedback(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDrawingCacheEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setFocusable(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setFitsSystemWindows(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void sendAccessibilityEventUnchecked(  @Sink(SUSI_NO_CATEGORY) android.view.accessibility.AccessibilityEvent arg0);
   @Source(SUSI_NO_CATEGORY)  int getScrollBarSize();
   @Source(SUSI_NO_CATEGORY)  float getTopFadingEdgeStrength();
   @Source(SUSI_NO_CATEGORY)  android.view.Display getDisplay();
   @Source(SUSI_NO_CATEGORY)  int getSystemUiVisibility();
   @Source(SUSI_NO_CATEGORY)  int getAccessibilityWindowId();
   @Source(SUSI_NO_CATEGORY)  int getVerticalFadingEdgeLength();
   @Source(SUSI_NO_CATEGORY)  int getSuggestedMinimumWidth();
   @Source(SUSI_NO_CATEGORY)  int getBottom();
   @Source(SUSI_NO_CATEGORY)  int getPaddingBottom();
   @Source(SUSI_NO_CATEGORY)  android.view.View$ListenerInfo getListenerInfo();
   @Source(SUSI_NO_CATEGORY)  int getScrollBarStyle();
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getTouchables();
   @Source(SUSI_NO_CATEGORY)  int getLabelFor();
   @Source(SUSI_NO_CATEGORY)  boolean getGlobalVisibleRect(  @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Point arg1);
   @Source(SUSI_NO_CATEGORY)  float getAlpha();
   @Source(SUSI_NO_CATEGORY)  int getSuggestedMinimumHeight();
   @Source(SUSI_NO_CATEGORY)  int getFadeHeight(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.ContextMenu$ContextMenuInfo getContextMenuInfo();
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  android.view.animation.Animation getAnimation();
   @Source(SUSI_NO_CATEGORY)  int getNextFocusRightId();
   @Source(SUSI_NO_CATEGORY)  float getLeftFadingEdgeStrength();
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder getWindowToken();
   @Source(SUSI_NO_CATEGORY)  int getRawTextAlignment();
   @Source(SUSI_NO_CATEGORY)  int getFadeTop(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int getHorizontalScrollbarHeight();
   @Source(SUSI_NO_CATEGORY)  float getBottomFadingEdgeStrength();
   @Source(SUSI_NO_CATEGORY)  float getRotation();
   @Source(SUSI_NO_CATEGORY)  int getTextAlignment();
   @Source(SUSI_NO_CATEGORY)  android.view.HardwareLayer getHardwareLayer();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  android.view.ViewParent getParentForAccessibility();
   @Source(SUSI_NO_CATEGORY)  android.view.ViewParent getParent();
   @Source(SUSI_NO_CATEGORY)  android.view.ViewTreeObserver getViewTreeObserver();
   @Source(SUSI_NO_CATEGORY)  int getLayoutDirection();
   @Source(SUSI_NO_CATEGORY)  int getMeasuredState();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap createSnapshot(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap$Config arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  int getWindowAttachCount();
   @Source(SUSI_NO_CATEGORY)  android.view.IWindowSession getWindowSession();
   @Source(SUSI_NO_CATEGORY)  android.os.Handler getHandler();
   @Source(SUSI_NO_CATEGORY)  long getDrawingTime();
   @Source(SUSI_NO_CATEGORY)  boolean draw(  @Sink(SUSI_NO_CATEGORY) android.graphics.Canvas arg0, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
   @Source(SUSI_NO_CATEGORY)  int getTextDirection();
   @Source(SUSI_NO_CATEGORY)  int getWindowSystemUiVisibility();
   @Source(SUSI_NO_CATEGORY)  int getAccessibilityCursorPosition();
   @Source(SUSI_NO_CATEGORY)  int getVerticalScrollbarWidth();
   @Source(SUSI_NO_CATEGORY)  android.view.AccessibilityIterators$TextSegmentIterator getIteratorForGranularity(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getBaseline();
   @Source(SUSI_NO_CATEGORY)  int getScrollBarDefaultDelayBeforeFade();
   @Source(SUSI_NO_CATEGORY)  int getDrawingCacheQuality();
   @Source(SUSI_NO_CATEGORY)  int getMeasuredHeightAndState();
   @Source(SUSI_NO_CATEGORY)  int getRight();
   @Source(SUSI_NO_CATEGORY)  int getPaddingStart();
   @Source(SUSI_NO_CATEGORY)  int getTopPaddingOffset();
   @Source(SUSI_NO_CATEGORY)  int getRightPaddingOffset();
   @Source(SUSI_NO_CATEGORY)  int getImportantForAccessibility();
   @Source(SUSI_NO_CATEGORY)  int getAccessibilityViewId();
   @Source(SUSI_NO_CATEGORY)  int getVerticalScrollbarPosition();
   @Source(SUSI_NO_CATEGORY)  float getRightFadingEdgeStrength();
   @Source(SUSI_NO_CATEGORY)  float getHorizontalScrollFactor();
   @Source(SUSI_NO_CATEGORY)  int getLayerType();
   @Source(SUSI_NO_CATEGORY)  float getRotationY();
   @Source(SUSI_NO_CATEGORY)  float getRotationX();
   @Source(SUSI_NO_CATEGORY)  android.view.HardwareRenderer getHardwareRenderer();
   @Source(SUSI_NO_CATEGORY)  int getVisibility();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Matrix getMatrix();
   @Source(SUSI_NO_CATEGORY)  android.view.TouchDelegate getTouchDelegate();
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getFocusables(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getDrawingCache(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder getApplicationWindowToken();
   @Source(SUSI_NO_CATEGORY)  int getTop();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getTag();
   @Source(SUSI_NO_CATEGORY)  float getVerticalScrollFactor();
   @Source(SUSI_NO_CATEGORY)  int getBottomPaddingOffset();
   @Source(SUSI_NO_CATEGORY)  int getPaddingLeft();
   @Source(SUSI_NO_CATEGORY)  int getRawLayoutDirection();
   @Source(SUSI_NO_CATEGORY)  android.view.View getRootView();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getDrawingCache();
   @Source(SUSI_NO_CATEGORY)  int[] getDrawableState();
   @Source(SUSI_NO_CATEGORY)  int getRawTextDirection();
   @Source(SUSI_NO_CATEGORY)  int getMeasuredWidthAndState();
   @Source(SUSI_NO_CATEGORY)  int getPaddingRight();
   @Source(SUSI_NO_CATEGORY)  int getPaddingTop();
   @Source(SUSI_NO_CATEGORY)  float getY();
   @Source(SUSI_NO_CATEGORY)  float getX();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Insets getOpticalInsets();
   @Source(SUSI_NO_CATEGORY)  int getId();
   @Source(SUSI_NO_CATEGORY)  int getMeasuredWidth();
   @Source(SUSI_NO_CATEGORY)  android.content.res.Resources getResources();
   @Source(SUSI_NO_CATEGORY)  int getNextFocusForwardId();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Matrix getInverseMatrix();
   @Source(SUSI_NO_CATEGORY)  int getLeft();
   @Source(SUSI_NO_CATEGORY)  int getDrawingCacheBackgroundColor();
   @Source(SUSI_NO_CATEGORY)  android.view.ViewGroup$LayoutParams getLayoutParams();
   @Source(SUSI_NO_CATEGORY)  int getScrollBarFadeDuration();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getIterableTextForAccessibility();
   @Source(SUSI_NO_CATEGORY)  android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo();
   @Source(SUSI_NO_CATEGORY)  int getMeasuredHeight();
   @Source(SUSI_NO_CATEGORY)  android.view.KeyEvent$DispatcherState getKeyDispatcherState();
   @Source(SUSI_NO_CATEGORY)  int getHorizontalFadingEdgeLength();
   @Source(SUSI_NO_CATEGORY)  int getSolidColor();
   @Source(SUSI_NO_CATEGORY)  int getPaddingEnd();
   @Source(SUSI_NO_CATEGORY)  float getTranslationY();
   @Source(SUSI_NO_CATEGORY)  float getTranslationX();
   @Source(SUSI_NO_CATEGORY)  int getOverScrollMode();
   @Source(SUSI_NO_CATEGORY)  android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider();
   @Source(SUSI_NO_CATEGORY)  int getWindowVisibility();
   @Source(SUSI_NO_CATEGORY)  float getScaleY();
   @Source(SUSI_NO_CATEGORY)  float getScaleX();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getTag(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getMinimumHeight();
   @Source(SUSI_NO_CATEGORY)  int getLeftPaddingOffset();
   @Source(SUSI_NO_CATEGORY)  float getPivotY();
   @Source(SUSI_NO_CATEGORY)  float getPivotX();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getContentDescription();
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
   @Source(SUSI_NO_CATEGORY)  int getNextFocusUpId();
   @Source(SUSI_NO_CATEGORY)  android.view.View$OnFocusChangeListener getOnFocusChangeListener();
   @Source(SUSI_NO_CATEGORY)  int getNextFocusDownId();
   @Source(SUSI_NO_CATEGORY)  float getCameraDistance();
   @Source(SUSI_NO_CATEGORY)  android.view.DisplayList getDisplayList();
   @Source(SUSI_NO_CATEGORY)  int getScrollY();
   @Source(SUSI_NO_CATEGORY)  int getScrollX();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getBackground();
   @Source(SUSI_NO_CATEGORY)  int getNextFocusLeftId();
   @Source(SUSI_NO_CATEGORY)  int getMinimumWidth();
   @Source(SUSI_NO_CATEGORY)  android.view.ViewRootImpl getViewRootImpl();
   @Source(SUSI_NO_CATEGORY)  android.view.View$AccessibilityDelegate getAccessibilityDelegate();
}
class View$10{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setValue(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
}
class View$11{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setValue(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
}
class View$12{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setValue(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
}
class View$3{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setValue(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
}
class View$4{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setValue(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
}
class View$5{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setValue(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
}
class View$6{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setValue(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
}
class View$7{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setValue(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
}
class View$8{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setValue(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
}
class View$9{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setValue(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
}
class View$AccessibilityDelegate{
   @Source(SUSI_NO_CATEGORY)  boolean performAccessibilityAction(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
    void sendAccessibilityEvent(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void sendAccessibilityEventUnchecked(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) android.view.accessibility.AccessibilityEvent arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
}
class View$AttachInfo$InvalidateInfo{
    void setNextPoolable(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View$AttachInfo$InvalidateInfo getNextPoolable();
}
class View$DragShadowBuilder{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView();
}
class View$MeasureSpec{
   @Source(SUSI_NO_CATEGORY)  int getSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ViewConfiguration{
   @Source(SUSI_NO_CATEGORY)  int getScaledMaximumDrawingCacheSize();
   @Source(SUSI_NO_CATEGORY)  int getWindowTouchSlop();
   @Source(SUSI_NO_CATEGORY)  int getMaximumFlingVelocity();
   @Source(SUSI_NO_CATEGORY)  int getKeyRepeatDelay();
   @Source(SUSI_NO_CATEGORY)  long getZoomControlsTimeout();
   @Source(SUSI_NO_CATEGORY)  float getScrollFriction();
   @Source(SUSI_NO_CATEGORY)  long getGlobalActionKeyTimeout();
   @Source(SUSI_NO_CATEGORY)  int getEdgeSlop();
   @Source(SUSI_NO_CATEGORY)  android.view.ViewConfiguration get(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  int getScaledScrollBarSize();
   @Source(SUSI_NO_CATEGORY)  int getScaledOverscrollDistance();
   @Source(SUSI_NO_CATEGORY)  int getPressedStateDuration();
   @Source(SUSI_NO_CATEGORY)  int getHoverTapSlop();
   @Source(SUSI_NO_CATEGORY)  int getMaximumDrawingCacheSize();
   @Source(SUSI_NO_CATEGORY)  int getScaledFadingEdgeLength();
   @Source(SUSI_NO_CATEGORY)  int getScaledPagingTouchSlop();
   @Source(SUSI_NO_CATEGORY)  int getHoverTapTimeout();
   @Source(SUSI_NO_CATEGORY)  int getJumpTapTimeout();
   @Source(SUSI_NO_CATEGORY)  int getTouchSlop();
   @Source(SUSI_NO_CATEGORY)  int getKeyRepeatTimeout();
   @Source(SUSI_NO_CATEGORY)  int getTapTimeout();
   @Source(SUSI_NO_CATEGORY)  int getScaledDoubleTapTouchSlop();
   @Source(SUSI_NO_CATEGORY)  int getScrollBarFadeDuration();
   @Source(SUSI_NO_CATEGORY)  int getScaledOverflingDistance();
   @Source(SUSI_NO_CATEGORY)  int getScrollBarSize();
   @Source(SUSI_NO_CATEGORY)  int getMinimumFlingVelocity();
   @Source(SUSI_NO_CATEGORY)  int getScaledMinimumFlingVelocity();
   @Source(SUSI_NO_CATEGORY)  int getScaledTouchSlop();
   @Source(SUSI_NO_CATEGORY)  int getDoubleTapTimeout();
   @Source(SUSI_NO_CATEGORY)  int getFadingEdgeLength();
   @Source(SUSI_NO_CATEGORY)  int getDoubleTapSlop();
   @Source(SUSI_NO_CATEGORY)  int getScaledDoubleTapSlop();
   @Source(SUSI_NO_CATEGORY)  long getSendRecurringAccessibilityEventsInterval();
   @Source(SUSI_NO_CATEGORY)  int getScaledMaximumFlingVelocity();
   @Source(SUSI_NO_CATEGORY)  int getScrollDefaultDelay();
   @Source(SUSI_NO_CATEGORY)  int getScaledWindowTouchSlop();
   @Source(SUSI_NO_CATEGORY)  int getLongPressTimeout();
   @Source(SUSI_NO_CATEGORY)  int getScaledEdgeSlop();
}
class ViewDebug{
   @Source(SUSI_NO_CATEGORY)  long getViewInstanceCount();
   @Source(SUSI_NO_CATEGORY)  long getViewRootImplCount();
}
class ViewGroup{
    void setChildrenDrawingCacheEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setAnimationCacheEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setAlwaysDrawnWithCacheEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setChildrenDrawnWithCacheEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.ActionMode startActionModeForChild(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) android.view.ActionMode$Callback arg1);
    void setPersistentDrawingCache(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setMotionEventSplittingEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setClipToPadding(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setDescendantFocusability(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean dispatchTouchEvent(  @Sink(SUSI_NO_CATEGORY) android.view.MotionEvent arg0);
    void setStaticTransformationsEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setChildrenDrawingOrderEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setAddStatesFromChildren(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setClipChildren(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void dispatchDraw(  @Sink(SUSI_NO_CATEGORY) android.graphics.Canvas arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.ViewGroup$LayoutParams generateDefaultLayoutParams();
   @Source(SUSI_NO_CATEGORY)  android.view.View findViewByAccessibilityIdTraversal(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.animation.LayoutAnimationController getLayoutAnimation();
   @Source(SUSI_NO_CATEGORY)  int getDescendantFocusability();
   @Source(SUSI_NO_CATEGORY)  int getChildDrawingOrder(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getLayoutMode();
   @Source(SUSI_NO_CATEGORY)  android.view.animation.Animation$AnimationListener getLayoutAnimationListener();
   @Source(SUSI_NO_CATEGORY)  android.view.View findFrontmostDroppableChildAt(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) android.graphics.PointF arg2);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap createSnapshot(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap$Config arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  android.view.ViewGroup$LayoutParams generateLayoutParams(  @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup$LayoutParams arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList access$400(  @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getFocusedChild();
   @Source(SUSI_NO_CATEGORY)  boolean getChildVisibleRect(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg1, @Sink(SUSI_NO_CATEGORY) android.graphics.Point arg2);
   @Source(SUSI_NO_CATEGORY)  android.view.View focusSearch(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean getChildStaticTransformation(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) android.view.animation.Transformation arg1);
   @Source(SUSI_NO_CATEGORY)  int getChildCount();
   @Source(SUSI_NO_CATEGORY)  android.view.View getChildAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getChildMeasureSpec(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  android.view.View findFocus();
   @Source(SUSI_NO_CATEGORY)  android.animation.LayoutTransition getLayoutTransition();
   @Source(SUSI_NO_CATEGORY)  int getPersistentDrawingCache();
}
class ViewGroup$ChildListForAccessibility{
   @Source(SUSI_NO_CATEGORY)  android.view.View getChildAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getChildCount();
   @Source(SUSI_NO_CATEGORY)  int getChildIndex(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
}
class ViewGroup$LayoutParams{
    void setBaseAttributes(  @Sink(SUSI_NO_CATEGORY) android.content.res.TypedArray arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class ViewGroup$MarginLayoutParams{
   @Source(SUSI_NO_CATEGORY)  int getMarginStart();
   @Source(SUSI_NO_CATEGORY)  int getLayoutDirection();
   @Source(SUSI_NO_CATEGORY)  int getMarginEnd();
}
class ViewPropertyAnimator{
   @Source(SUSI_NO_CATEGORY)  long getStartDelay();
   @Source(SUSI_NO_CATEGORY)  long getDuration();
}
class ViewRootImpl{
   @Source(SUSI_NO_CATEGORY)  boolean performHapticFeedback(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void dispatchInvalidateRectDelayed(  @Sink(SUSI_NO_CATEGORY) android.view.View$AttachInfo$InvalidateInfo arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
    void dispatchInvalidateDelayed(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.ViewParent getParent();
   @Source(SUSI_NO_CATEGORY)  int getHostVisibility();
   @Source(SUSI_NO_CATEGORY)  android.view.ViewRootImpl$RunQueue getRunQueue();
   @Source(SUSI_NO_CATEGORY)  android.view.View getAccessibilityFocusedHost();
   @Source(SUSI_NO_CATEGORY)  android.view.WindowLeaked getLocation();
   @Source(SUSI_NO_CATEGORY)  android.view.ViewParent getParentForAccessibility();
   @Source(SUSI_NO_CATEGORY)  android.view.accessibility.AccessibilityNodeInfo getAccessibilityFocusedVirtualView();
   @Source(SUSI_NO_CATEGORY)  android.view.AccessibilityInteractionController getAccessibilityInteractionController();
   @Source(SUSI_NO_CATEGORY)  android.view.View getView();
}
class ViewRootImpl$2{
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getSurfaceFrame();
   @Source(SUSI_NO_CATEGORY)  android.view.Surface getSurface();
}
class ViewRootImpl$AccessibilityInteractionConnection{
    void performAccessibilityAction(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.view.accessibility.IAccessibilityInteractionConnectionCallback arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) int arg6, @Sink(SUSI_NO_CATEGORY) long arg7);
}
class ViewRootImpl$TakenSurfaceHolder{
    void setType(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setFixedSize(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setFormat(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setKeepScreenOn(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class ViewRootImpl$ViewRootHandler{
    void handleMessage(  @Sink(SUSI_LOG) android.os.Message arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessageName(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
}
class ViewRootImpl$W{
    void dispatchSystemUiVisibilityChanged(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void dispatchWallpaperCommand(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg4, @Sink(SUSI_NO_CATEGORY) boolean arg5);
    void dispatchAppVisibility(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void dispatchScreenState(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class ViewStub{
    void setVisibility(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getInflatedId();
   @Source(SUSI_NO_CATEGORY)  int getLayoutResource();
   @Source(SUSI_NO_CATEGORY)  android.view.LayoutInflater getLayoutInflater();
}
class ViewTreeObserver$CopyOnWriteArray$Access{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ViewTreeObserver$InternalInsetsInfo{
    void set(  @Sink(SUSI_NO_CATEGORY) android.view.ViewTreeObserver$InternalInsetsInfo arg0);
}
class Window{
    void setUiOptions(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setAttributes(  @Sink(SUSI_NO_CATEGORY) android.view.WindowManager$LayoutParams arg0);
    void setFlags(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setUiOptions(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setBackgroundDrawableResource(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.Window$Callback getCallback();
   @Source(SUSI_NO_CATEGORY)  int getLocalFeatures();
   @Source(SUSI_NO_CATEGORY)  android.content.res.TypedArray getWindowStyle();
   @Source(SUSI_NO_CATEGORY)  android.view.WindowManager getWindowManager();
   @Source(SUSI_NO_CATEGORY)  int getForcedWindowFlags();
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
   @Source(SUSI_NO_CATEGORY)  android.view.Window getContainer();
   @Source(SUSI_NO_CATEGORY)  int getFeatures();
   @Source(SUSI_NO_CATEGORY)  android.view.WindowManager$LayoutParams getAttributes();
}
class WindowManager$LayoutParams{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTitle();
}
class WindowManagerGlobal{
    void dumpGfxInfo(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0);
    void startTrimMemory(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.IWindowManager getWindowManagerService();
   @Source(SUSI_NO_CATEGORY)  android.view.IWindowSession getWindowSession(  @Sink(SUSI_NO_CATEGORY) android.os.Looper arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.WindowManagerGlobal getInstance();
}
class WindowManagerImpl{
    void updateViewLayout(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup$LayoutParams arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.Display getDefaultDisplay();
}
class WindowOrientationListener{
   @Source(SUSI_NO_CATEGORY)  int getProposedRotation();
}
class WindowOrientationListener$SensorEventListenerImpl{
   @Source(SUSI_NO_CATEGORY)  int getProposedRotation();
}

package java.util.concurrent;

class AbstractExecutorService{
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List invokeAll(  java.util.Collection arg0, long arg1, java.util.concurrent.TimeUnit arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List invokeAll(  java.util.Collection arg0);
}
class ConcurrentHashMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object put(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object putIfAbsent(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void setEntryAt(  @Sink(SUSI_NO_CATEGORY) java.util.concurrent.ConcurrentHashMap$HashEntry[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.util.concurrent.ConcurrentHashMap$HashEntry arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class ConcurrentHashMap$HashEntry{
    void setNext(  @Sink(SUSI_NO_CATEGORY) java.util.concurrent.ConcurrentHashMap$HashEntry arg0);
}
class ConcurrentHashMap$WriteThroughEntry{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class ConcurrentLinkedQueue$Node{
    void lazySetNext(  @Sink(SUSI_NO_CATEGORY) java.util.concurrent.ConcurrentLinkedQueue$Node arg0);
}
class CopyOnWriteArrayList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] getArray();
}
class CopyOnWriteArrayList$CowIterator{
    void set(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class CopyOnWriteArrayList$CowSubList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class CountDownLatch{
   @Source(SUSI_NO_CATEGORY)  long getCount();
}
class CountDownLatch$Sync{
   @Source(SUSI_NO_CATEGORY)  int getCount();
}
class ExecutorCompletionService{
   @Source(SUSI_NETWORK_INFORMATION)  java.util.concurrent.Future poll(  long arg0, java.util.concurrent.TimeUnit arg1);
}
class FutureTask{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) java.util.concurrent.TimeUnit arg1);
}
class ScheduledThreadPoolExecutor{
   @Source(SUSI_NO_CATEGORY)  java.util.List shutdownNow();
   @Source(SUSI_NO_CATEGORY)  boolean getExecuteExistingDelayedTasksAfterShutdownPolicy();
   @Source(SUSI_NO_CATEGORY)  boolean getRemoveOnCancelPolicy();
   @Source(SUSI_NO_CATEGORY)  boolean getContinueExistingPeriodicTasksAfterShutdownPolicy();
   @Source(SUSI_NO_CATEGORY)  java.util.concurrent.BlockingQueue getQueue();
}
class ScheduledThreadPoolExecutor$DelayedWorkQueue{
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class ScheduledThreadPoolExecutor$ScheduledFutureTask{
   @Source(SUSI_NO_CATEGORY)  long getDelay(  @Sink(SUSI_NO_CATEGORY) java.util.concurrent.TimeUnit arg0);
}
class Semaphore{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getQueuedThreads();
   @Source(SUSI_NO_CATEGORY)  int getQueueLength();
}
class Semaphore$Sync{
   @Source(SUSI_NO_CATEGORY)  int getPermits();
}
class ThreadPoolExecutor{
    void setKeepAliveTime(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) java.util.concurrent.TimeUnit arg1);
   @Source(SUSI_NO_CATEGORY)  long getKeepAliveTime(  @Sink(SUSI_NO_CATEGORY) java.util.concurrent.TimeUnit arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler();
   @Source(SUSI_NO_CATEGORY)  java.util.List shutdownNow();
   @Source(SUSI_NO_CATEGORY)  int getCorePoolSize();
   @Source(SUSI_NO_CATEGORY)  long getCompletedTaskCount();
   @Source(SUSI_NO_CATEGORY)  int getPoolSize();
   @Source(SUSI_NO_CATEGORY)  int getActiveCount();
   @Source(SUSI_NO_CATEGORY)  int getMaximumPoolSize();
   @Source(SUSI_NO_CATEGORY)  long getTaskCount();
   @Source(SUSI_NO_CATEGORY)  java.util.concurrent.BlockingQueue getQueue();
   @Source(SUSI_NO_CATEGORY)  int getLargestPoolSize();
   @Source(SUSI_NO_CATEGORY)  java.util.concurrent.ThreadFactory getThreadFactory();
}

package com.android.commands.pm;

class Pm{
    void run(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
}

package com.android.server.power;

class DisplayPowerController{
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0);
}
class DisplayPowerState{
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0);
   @Source(SUSI_NO_CATEGORY)  float getElectronBeamLevel();
   @Source(SUSI_NO_CATEGORY)  int getScreenBrightness();
}
class DisplayPowerState$1{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setValue(  @Sink(SUSI_NO_CATEGORY) com.android.server.power.DisplayPowerState arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
}
class DisplayPowerState$2{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setValue(  @Sink(SUSI_NO_CATEGORY) com.android.server.power.DisplayPowerState arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class DisplayPowerState$PhotonicModulator{
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0);
}
class ElectronBeam{
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0);
}
class PowerManagerService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void setButtonBrightnessOverrideFromWindowManager(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setScreenBrightnessOverrideFromWindowManager(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setStayOnSetting(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setMaximumScreenOffTimeoutFromDeviceAdmin(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setTemporaryScreenBrightnessSettingOverride(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setTemporaryScreenAutoBrightnessAdjustmentSettingOverride(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setAttentionLight(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setUserActivityTimeoutOverrideFromWindowManager(  @Sink(SUSI_NO_CATEGORY) long arg0);
}
class PowerManagerService$WakeLock{
    void updateProperties(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.os.WorkSource arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
}
class WirelessChargerDetector{
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0);
}

package com.android.gallery3d.app;

class AbstractGalleryActivity{
    void setContentView(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.DataManager getDataManager();
   @Source(SUSI_IMAGE)  com.android.gallery3d.app.GalleryActionBar getGalleryActionBar();
   @Source(SUSI_IMAGE)  android.content.Context getAndroidContext();
   @Source(SUSI_IMAGE)  com.android.gallery3d.util.LightCycleHelper$PanoramaViewHelper getPanoramaViewHelper();
   @Source(SUSI_IMAGE)  com.android.gallery3d.app.StateManager getStateManager();
   @Source(SUSI_IMAGE)  com.android.gallery3d.ui.GLRoot getGLRoot();
   @Source(SUSI_IMAGE)  com.android.gallery3d.app.TransitionStore getTransitionStore();
   @Source(SUSI_IMAGE)  com.android.gallery3d.app.OrientationManager getOrientationManager();
   @Source(SUSI_IMAGE)  com.android.gallery3d.util.ThreadPool getThreadPool();
}
class ActivityState{
   @Source(SUSI_IMAGE)  float[] getBackgroundColor();
   @Source(SUSI_IMAGE)  android.view.MenuInflater getSupportMenuInflater();
   @Source(SUSI_IMAGE)  int getBackgroundColorId();
   @Source(SUSI_IMAGE)  android.os.Bundle getData();
}
class AlbumDataLoader{
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaItem get(  int arg0);
}
class AlbumPage{
    void doCluster(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_IMAGE)  int getBackgroundColorId();
}
class AlbumPage$MyDetailsSource{
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaDetails getDetails();
}
class AlbumSetDataLoader{
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaSet getMediaSet(  int arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaItem getCoverItem(  int arg0);
   @Source(SUSI_IMAGE)  int getTotalCount(  int arg0);
}
class AlbumSetPage{
    void doCluster(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_IMAGE)  int getBackgroundColorId();
}
class AlbumSetPage$MyDetailsSource{
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaDetails getDetails();
}
class Bookmarker{
    void setBookmark(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_IMAGE)  java.lang.Integer getBookmark(  android.net.Uri arg0);
}
class CommonControllerOverlay{
    void setTimes(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_IMAGE)  android.view.View getView();
}
class Config$AlbumPage{
   @Source(SUSI_IMAGE)  com.android.gallery3d.app.Config$AlbumPage get(  android.content.Context arg0);
}
class Config$AlbumSetPage{
   @Source(SUSI_IMAGE)  com.android.gallery3d.app.Config$AlbumSetPage get(  android.content.Context arg0);
}
class Config$ManageCachePage{
   @Source(SUSI_IMAGE)  com.android.gallery3d.app.Config$ManageCachePage get(  android.content.Context arg0);
}
class FilterUtils{
    void setupMenuItems(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.app.GalleryActionBar arg0, @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.data.Path arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
}
class Gallery{
    void onCreate(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
}
class GalleryActionBar{
   @Source(SUSI_NO_CATEGORY)  boolean setSelectedAction(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setTitle(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setTitle(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSubtitle(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setDisplayOptions(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_IMAGE)  int getClusterTypeAction();
   @Source(SUSI_IMAGE)  android.view.Menu getMenu();
   @Source(SUSI_IMAGE)  int getHeight();
   @Source(SUSI_IMAGE)  java.lang.String getClusterByTypeString(  android.content.Context arg0, int arg1);
}
class GalleryActionBar$AlbumModeAdapter{
   @Source(SUSI_IMAGE)  int getCount();
   @Source(SUSI_IMAGE)  java.lang.Object getItem(  int arg0);
   @Source(SUSI_IMAGE)  android.view.View getDropDownView(  int arg0, android.view.View arg1, android.view.ViewGroup arg2);
   @Source(SUSI_IMAGE)  android.view.View getView(  int arg0, android.view.View arg1, android.view.ViewGroup arg2);
   @Source(SUSI_IMAGE)  long getItemId(  int arg0);
}
class GalleryActionBar$ClusterAdapter{
   @Source(SUSI_IMAGE)  java.lang.Object getItem(  int arg0);
   @Source(SUSI_IMAGE)  int getCount();
   @Source(SUSI_IMAGE)  android.view.View getView(  int arg0, android.view.View arg1, android.view.ViewGroup arg2);
   @Source(SUSI_IMAGE)  long getItemId(  int arg0);
}
class ManageCachePage{
   @Source(SUSI_IMAGE)  int getBackgroundColorId();
}
class OrientationManager{
   @Source(SUSI_IMAGE)  int getDisplayRotation();
   @Source(SUSI_IMAGE)  int getCompensation();
}
class PackagesMonitor{
    void onReceive(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1);
   @Source(SUSI_IMAGE)  int getPackagesVersion(  android.content.Context arg0);
}
class PhotoDataAdapter{
   @Source(SUSI_IMAGE)  int getImageRotation(  int arg0);
   @Source(SUSI_IMAGE)  int getLevelCount();
   @Source(SUSI_IMAGE)  com.android.gallery3d.ui.ScreenNail getScreenNail();
   @Source(SUSI_IMAGE)  int getImageWidth();
   @Source(SUSI_IMAGE)  android.graphics.Bitmap getTile(  int arg0, int arg1, int arg2, int arg3, int arg4, com.android.gallery3d.data.BitmapPool arg5);
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaItem getMediaItem(  int arg0);
   @Source(SUSI_IMAGE)  int getLoadingState(  int arg0);
   @Source(SUSI_IMAGE)  int getCurrentIndex();
   @Source(SUSI_IMAGE)  int getImageHeight();
   @Source(SUSI_IMAGE)  com.android.gallery3d.ui.ScreenNail getScreenNail(  int arg0);
}
class PhotoPage{
    void setSwipingEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void onCreate(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void playVideo(  @Sink(SUSI_NO_CATEGORY) android.app.Activity arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_IMAGE)  android.content.Intent access$2600(  android.net.Uri arg0);
   @Source(SUSI_IMAGE)  android.content.Intent access$2700(  com.android.gallery3d.data.MediaObject arg0);
   @Source(SUSI_IMAGE)  int getBackgroundColorId();
}
class PhotoPage$MyDetailsSource{
   @Source(SUSI_IMAGE)  int setIndex();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaDetails getDetails();
}
class PhotoPageProgressBar{
    void setProgress(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class SinglePhotoDataAdapter{
    void setFocusHintDirection(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setCurrentPhoto(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.data.Path arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setFocusHintPath(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.data.Path arg0);
    void setNeedFullImage(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_IMAGE)  int getLoadingState(  int arg0);
   @Source(SUSI_IMAGE)  int getCurrentIndex();
   @Source(SUSI_IMAGE)  com.android.gallery3d.ui.ScreenNail getScreenNail(  int arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaItem getMediaItem(  int arg0);
   @Source(SUSI_IMAGE)  int getImageRotation(  int arg0);
}
class SlideshowPage{
   @Source(SUSI_IMAGE)  int getBackgroundColorId();
}
class SlideshowPage$SequentialSource{
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaItem getMediaItem(  int arg0);
}
class SlideshowPage$ShuffleSource{
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaItem getMediaItem(  int arg0);
}
class StateManager{
    void startStateForResult(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
    void notifyActivityResult(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2);
    void restoreFromState(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
   @Source(SUSI_IMAGE)  int getStateCount();
   @Source(SUSI_IMAGE)  com.android.gallery3d.app.ActivityState getTopState();
}
class StitchingProgressManager{
   @Source(SUSI_IMAGE)  java.lang.Integer getProgress(  android.net.Uri arg0);
   @Source(SUSI_IMAGE)  java.util.ArrayList access$100(  com.android.gallery3d.app.StitchingProgressManager arg0);
}
class StitchingProgressManager$AddItemCallback{
    void onStitchingQueued(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1);
}
class StitchingProgressManager$UpdateProgressCallback{
    void onProgress(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class TimeBar{
   @Source(SUSI_IMAGE)  int getPreferredHeight();
   @Source(SUSI_IMAGE)  int getBarHeight();
}
class TransitionStore{
    void putIfNotPresent(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_IMAGE)  java.lang.Object get(  java.lang.Object arg0);
   @Source(SUSI_IMAGE)  java.lang.Object get(  java.lang.Object arg0, java.lang.Object arg1);
}
class TrimControllerOverlay{
    void setTimes(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
}

package com.android.browser;

class AddBookmarkPage{
    void setAccount(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class AddBookmarkPage$1{
    void onLoadFinished(  @Sink(SUSI_NO_CATEGORY) android.content.Loader arg0, @Sink(SUSI_NO_CATEGORY) com.android.browser.AddBookmarkPage$EditBookmarkInfo arg1);
}
class AutoFillProfileDatabase{
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.AutoFillProfileDatabase getInstance(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.database.Cursor getProfile(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
}
class AutofillHandler{
   @Source(SUSI_BROWSER_INFORMATION)  android.webkit.WebSettingsClassic$AutoFillProfile getAutoFillProfile();
}
class AutofillHandler$AutoFillProfileDbTask{
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.Object doInBackground(  @Sink(SUSI_BROWSER_INFORMATION) java.lang.Object[] arg0);
}
class BackgroundHandler{
   @Source(SUSI_BROWSER_INFORMATION)  android.os.Looper getLooper();
}
class BaseUi{
    void setFullscreen(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setUrlTitle(  @Sink(SUSI_NO_CATEGORY) com.android.browser.Tab arg0);
    void showComboView(  @Sink(SUSI_NO_CATEGORY) com.android.browser.UI$ComboViews arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void setFavicon(  @Sink(SUSI_NO_CATEGORY) com.android.browser.Tab arg0);
    void setActiveTab(  @Sink(SUSI_NO_CATEGORY) com.android.browser.Tab arg0);
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.TitleBar getTitleBar();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.Tab getActiveTab();
   @Source(SUSI_BROWSER_INFORMATION)  boolean isTitleBarShowing();
   @Source(SUSI_BROWSER_INFORMATION)  android.webkit.WebView getWebView();
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getVideoLoadingProgressView();
   @Source(SUSI_BROWSER_INFORMATION)  android.graphics.drawable.Drawable getFaviconDrawable(  @Sink(SUSI_BROWSER_INFORMATION) android.graphics.Bitmap arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.app.Activity getActivity();
   @Source(SUSI_BROWSER_INFORMATION)  android.graphics.Bitmap getDefaultVideoPoster();
}
class BookmarkItem{
    void setFavicon(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0);
    void setFaviconBackground(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getName();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getUrl();
}
class BookmarkUtils{
   @Source(SUSI_BROWSER_INFORMATION)  android.content.Intent createAddToHomeIntent(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg1, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg2, @Sink(SUSI_BROWSER_INFORMATION) android.graphics.Bitmap arg3, @Sink(SUSI_BROWSER_INFORMATION) android.graphics.Bitmap arg4);
   @Source(SUSI_BROWSER_INFORMATION)  android.graphics.drawable.Drawable createListFaviconBackground(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.graphics.Bitmap createIcon(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0, @Sink(SUSI_BROWSER_INFORMATION) android.graphics.Bitmap arg1, @Sink(SUSI_BROWSER_INFORMATION) android.graphics.Bitmap arg2, @Sink(SUSI_BROWSER_INFORMATION) com.android.browser.BookmarkUtils$BookmarkIconType arg3);
   @Source(SUSI_BROWSER_INFORMATION)  android.net.Uri getBookmarksUri(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0);
}
class Bookmarks{
   @Source(SUSI_BROWSER_INFORMATION)  android.database.Cursor queryCombinedForUrl(  @Sink(SUSI_BROWSER_INFORMATION) android.content.ContentResolver arg0, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg1, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg2);
}
class BookmarksLoader{
    void setUri(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
}
class BreadCrumbView{
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.BreadCrumbView$Crumb getTopCrumb();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.Object getTopData();
   @Source(SUSI_BROWSER_INFORMATION)  int getBaseline();
}
class BrowserActivity{
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.Controller getController();
}
class BrowserBackupAgent{
    void onBackup(  @Sink(SUSI_FILE) android.os.ParcelFileDescriptor arg0, @Sink(SUSI_FILE) android.app.backup.BackupDataOutput arg1, @Sink(SUSI_FILE) android.os.ParcelFileDescriptor arg2);
    void onRestore(  @Sink(SUSI_LOG) android.app.backup.BackupDataInput arg0, @Sink(SUSI_LOG) int arg1, @Sink(SUSI_LOG) android.os.ParcelFileDescriptor arg2);
    void addBookmark(  @Sink(SUSI_NO_CATEGORY) com.android.browser.BrowserBackupAgent$Bookmark arg0);
}
class BrowserBookmarksAdapter{
    void bindView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void bindView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) com.android.browser.BrowserBookmarksAdapterItem arg1);
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.BrowserBookmarksAdapterItem getRowObject(  @Sink(SUSI_BROWSER_INFORMATION) android.database.Cursor arg0, @Sink(SUSI_BROWSER_INFORMATION) com.android.browser.BrowserBookmarksAdapterItem arg1);
   @Source(SUSI_BROWSER_INFORMATION)  long getItemId(  @Sink(SUSI_BROWSER_INFORMATION) android.database.Cursor arg0);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.CharSequence getTitle(  @Sink(SUSI_BROWSER_INFORMATION) android.database.Cursor arg0);
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.BrowserBookmarksAdapterItem getLoadingObject();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.Object getRowObject(  @Sink(SUSI_BROWSER_INFORMATION) android.database.Cursor arg0, @Sink(SUSI_BROWSER_INFORMATION) java.lang.Object arg1);
}
class BrowserBookmarksPage{
    void onLoadFinished(  @Sink(SUSI_NO_CATEGORY) android.content.Loader arg0, @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg1);
   @Source(SUSI_BROWSER_INFORMATION)  android.content.Intent createShortcutIntent(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0, @Sink(SUSI_BROWSER_INFORMATION) android.database.Cursor arg1);
   @Source(SUSI_BROWSER_INFORMATION)  android.graphics.Bitmap getBitmap(  @Sink(SUSI_BROWSER_INFORMATION) android.database.Cursor arg0, @Sink(SUSI_BROWSER_INFORMATION) int arg1);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getUrl(  @Sink(SUSI_BROWSER_INFORMATION) android.database.Cursor arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.graphics.Bitmap getBitmap(  @Sink(SUSI_BROWSER_INFORMATION) android.database.Cursor arg0, @Sink(SUSI_BROWSER_INFORMATION) int arg1, @Sink(SUSI_BROWSER_INFORMATION) android.graphics.Bitmap arg2);
}
class BrowserBookmarksPage$OpenAllInTabsTask{
   @Source(SUSI_BROWSER_INFORMATION)  android.database.Cursor doInBackground(  @Sink(SUSI_BROWSER_INFORMATION) java.lang.Void[] arg0);
}
class BrowserHistoryPage{
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getTargetView(  @Sink(SUSI_BROWSER_INFORMATION) android.view.ContextMenu$ContextMenuInfo arg0);
}
class BrowserHistoryPage$HistoryAdapter{
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getChildView(  @Sink(SUSI_BROWSER_INFORMATION) int arg0, @Sink(SUSI_BROWSER_INFORMATION) int arg1, @Sink(SUSI_BROWSER_INFORMATION) boolean arg2, @Sink(SUSI_BROWSER_INFORMATION) android.view.View arg3, @Sink(SUSI_BROWSER_INFORMATION) android.view.ViewGroup arg4);
   @Source(SUSI_BROWSER_INFORMATION)  long getChildId(  @Sink(SUSI_BROWSER_INFORMATION) int arg0, @Sink(SUSI_BROWSER_INFORMATION) int arg1);
   @Source(SUSI_BROWSER_INFORMATION)  android.database.Cursor getCursor(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getGroupView(  @Sink(SUSI_BROWSER_INFORMATION) int arg0, @Sink(SUSI_BROWSER_INFORMATION) boolean arg1, @Sink(SUSI_BROWSER_INFORMATION) android.view.View arg2, @Sink(SUSI_BROWSER_INFORMATION) android.view.ViewGroup arg3);
   @Source(SUSI_BROWSER_INFORMATION)  int getGroupCount();
}
class BrowserHistoryPage$HistoryChildWrapper{
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getView(  @Sink(SUSI_BROWSER_INFORMATION) int arg0, @Sink(SUSI_BROWSER_INFORMATION) android.view.View arg1, @Sink(SUSI_BROWSER_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_BROWSER_INFORMATION)  int getCount();
   @Source(SUSI_BROWSER_INFORMATION)  long getItemId(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.Object getItem(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
}
class BrowserHistoryPage$HistoryGroupWrapper{
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.Object getItem(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  long getItemId(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getCount();
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getView(  @Sink(SUSI_BROWSER_INFORMATION) int arg0, @Sink(SUSI_BROWSER_INFORMATION) android.view.View arg1, @Sink(SUSI_BROWSER_INFORMATION) android.view.ViewGroup arg2);
}
class BrowserSettings{
    void setLastRecovered(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setAutofillEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setDebugEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setTextZoom(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setAutoFillProfile(  @Sink(SUSI_NO_CATEGORY) android.webkit.WebSettingsClassic$AutoFillProfile arg0, @Sink(SUSI_NO_CATEGORY) android.os.Message arg1);
    void toggleDesktopUseragent(  @Sink(SUSI_NO_CATEGORY) android.webkit.WebView arg0);
    void setLastRunPaused(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setHomePage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getPageCacheCapacity();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getJsEngineFlags();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getHomePage();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getDefaultTextEncoding();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.WebStorageSizeManager getWebStorageSizeManager();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getDefaultLinkPrefetchSetting();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getDefaultPreloadSetting();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getLinkPrefetchEnabled();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getPreloadAlwaysPreferenceString(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.webkit.WebSettings$PluginState getPluginState();
   @Source(SUSI_BROWSER_INFORMATION)  android.webkit.WebSettings$ZoomDensity getDefaultZoom();
   @Source(SUSI_BROWSER_INFORMATION)  android.webkit.WebSettingsClassic$AutoFillProfile getAutoFillProfile();
   @Source(SUSI_BROWSER_INFORMATION)  int getRawTextZoom(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getAdjustedTextZoom(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.BrowserSettings getInstance();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getFactoryResetHomeUrl(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.search.SearchEngine getSearchEngine();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getSearchEngineName();
   @Source(SUSI_BROWSER_INFORMATION)  int getUserAgent();
   @Source(SUSI_BROWSER_INFORMATION)  android.content.SharedPreferences getPreferences();
   @Source(SUSI_BROWSER_INFORMATION)  int getTextZoom();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getLinkPrefetchOnWifiOnlyPreferenceString(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getPreloadOnWifiOnlyPreferenceString(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0);
   @Source(SUSI_BROWSER_INFORMATION)  float getInvertedContrast();
   @Source(SUSI_BROWSER_INFORMATION)  long getLastRecovered();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getPreloadEnabled();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getLinkPrefetchAlwaysPreferenceString(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getAdjustedDoubleTapZoom(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getAdjustedMinimumFontSize(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getDoubleTapZoom();
   @Source(SUSI_BROWSER_INFORMATION)  int getMinimumFontSize();
}
class BrowserSnapshotPage{
    void setupGrid(  @Sink(SUSI_NO_CATEGORY) android.view.LayoutInflater arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.graphics.Bitmap getBitmap(  @Sink(SUSI_BROWSER_INFORMATION) android.database.Cursor arg0, @Sink(SUSI_BROWSER_INFORMATION) int arg1);
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View onCreateView(  @Sink(SUSI_BROWSER_INFORMATION) android.view.LayoutInflater arg0, @Sink(SUSI_BROWSER_INFORMATION) android.view.ViewGroup arg1, @Sink(SUSI_BROWSER_INFORMATION) android.os.Bundle arg2);
}
class BrowserSnapshotPage$SnapshotAdapter{
   @Source(SUSI_BROWSER_INFORMATION)  android.database.Cursor getItem(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
}
class BrowserWebView{
   @Source(SUSI_BROWSER_INFORMATION)  int getTitleHeight();
}
class ComboViewActivity{
    void openSnapshot(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void openInNewTab(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
    void openUrl(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class ComboViewActivity$TabsAdapter{
   @Source(SUSI_BROWSER_INFORMATION)  int getCount();
   @Source(SUSI_BROWSER_INFORMATION)  android.app.Fragment getItem(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
}
class Controller{
    void setActiveTab(  @Sink(SUSI_BROWSER_INFORMATION) com.android.browser.Tab arg0);
    void start(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Intent arg0);
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.Tab openTab(  @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg0, @Sink(SUSI_BROWSER_INFORMATION) boolean arg1, @Sink(SUSI_BROWSER_INFORMATION) boolean arg2, @Sink(SUSI_BROWSER_INFORMATION) boolean arg3, @Sink(SUSI_BROWSER_INFORMATION) com.android.browser.Tab arg4);
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.Tab openTab(  @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg0, @Sink(SUSI_BROWSER_INFORMATION) com.android.browser.Tab arg1, @Sink(SUSI_BROWSER_INFORMATION) boolean arg2, @Sink(SUSI_BROWSER_INFORMATION) boolean arg3);
    void onReceivedTitle(  @Sink(SUSI_NO_CATEGORY) com.android.browser.Tab arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void updateMenuState(  @Sink(SUSI_NO_CATEGORY) com.android.browser.Tab arg0, @Sink(SUSI_NO_CATEGORY) android.view.Menu arg1);
    void sharePage(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg3, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg4);
   @Source(SUSI_BROWSER_INFORMATION)  android.graphics.Bitmap getDefaultVideoPoster();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.Tab getCurrentTab();
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getVideoLoadingProgressView();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.Tab openTab(  @Sink(SUSI_BROWSER_INFORMATION) com.android.browser.IntentHandler$UrlData arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.app.Activity getActivity();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.BrowserSettings getSettings();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.WebViewFactory getWebViewFactory();
   @Source(SUSI_BROWSER_INFORMATION)  int getDesiredThumbnailHeight(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0);
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.SnapshotTab createNewSnapshotTab(  @Sink(SUSI_BROWSER_INFORMATION) long arg0, @Sink(SUSI_BROWSER_INFORMATION) boolean arg1);
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.TabControl getTabControl();
   @Source(SUSI_BROWSER_INFORMATION)  android.content.Context getContext();
   @Source(SUSI_BROWSER_INFORMATION)  android.webkit.WebView getCurrentWebView();
   @Source(SUSI_BROWSER_INFORMATION)  android.webkit.WebView getCurrentTopWebView();
   @Source(SUSI_BROWSER_INFORMATION)  int getDesiredThumbnailWidth(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getMaxTabs();
   @Source(SUSI_BROWSER_INFORMATION)  android.content.Intent createBookmarkCurrentPageIntent(  @Sink(SUSI_BROWSER_INFORMATION) boolean arg0);
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.UI getUi();
   @Source(SUSI_BROWSER_INFORMATION)  android.graphics.Bitmap createScreenshot(  @Sink(SUSI_BROWSER_INFORMATION) android.webkit.WebView arg0, @Sink(SUSI_BROWSER_INFORMATION) int arg1, @Sink(SUSI_BROWSER_INFORMATION) int arg2);
   @Source(SUSI_BROWSER_INFORMATION)  android.os.Bundle createSaveState();
   @Source(SUSI_BROWSER_INFORMATION)  java.util.List getTabs();
}
class Controller$SaveSnapshotTask{
    void onPostExecute(  @Sink(SUSI_NO_CATEGORY) java.lang.Long arg0);
}
class DataController{
    void updateVisitedHistory(  @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg0);
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.DataController getInstance(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0);
}
class DataUri{
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getMimeType();
   @Source(SUSI_BROWSER_INFORMATION)  byte[] getData();
}
class DateSortedExpandableListAdapter{
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.Object getChild(  @Sink(SUSI_BROWSER_INFORMATION) int arg0, @Sink(SUSI_BROWSER_INFORMATION) int arg1);
   @Source(SUSI_BROWSER_INFORMATION)  long getGroupId(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  long getCombinedGroupId(  @Sink(SUSI_BROWSER_INFORMATION) long arg0);
   @Source(SUSI_BROWSER_INFORMATION)  long getCombinedChildId(  @Sink(SUSI_BROWSER_INFORMATION) long arg0, @Sink(SUSI_BROWSER_INFORMATION) long arg1);
   @Source(SUSI_BROWSER_INFORMATION)  long getChildId(  @Sink(SUSI_BROWSER_INFORMATION) int arg0, @Sink(SUSI_BROWSER_INFORMATION) int arg1);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.Object getGroup(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.content.Context getContext();
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getChildView(  @Sink(SUSI_BROWSER_INFORMATION) int arg0, @Sink(SUSI_BROWSER_INFORMATION) int arg1, @Sink(SUSI_BROWSER_INFORMATION) boolean arg2, @Sink(SUSI_BROWSER_INFORMATION) android.view.View arg3, @Sink(SUSI_BROWSER_INFORMATION) android.view.ViewGroup arg4);
   @Source(SUSI_BROWSER_INFORMATION)  int getChildrenCount(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getGroupView(  @Sink(SUSI_BROWSER_INFORMATION) int arg0, @Sink(SUSI_BROWSER_INFORMATION) boolean arg1, @Sink(SUSI_BROWSER_INFORMATION) android.view.View arg2, @Sink(SUSI_BROWSER_INFORMATION) android.view.ViewGroup arg3);
   @Source(SUSI_BROWSER_INFORMATION)  long getLong(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getGroupCount();
}
class DeviceAccountLogin{
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String[] getAccountNames();
   @Source(SUSI_BROWSER_INFORMATION)  int getState();
}
class ErrorConsoleView{
   @Source(SUSI_BROWSER_INFORMATION)  int getShowState();
}
class ErrorConsoleView$ErrorConsoleListView$ErrorConsoleMessageList{
   @Source(SUSI_BROWSER_INFORMATION)  int getCount();
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getView(  @Sink(SUSI_BROWSER_INFORMATION) int arg0, @Sink(SUSI_BROWSER_INFORMATION) android.view.View arg1, @Sink(SUSI_BROWSER_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_BROWSER_INFORMATION)  long getItemId(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.Object getItem(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
}
class HistoryItem{
    void setIsBookmark(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class IntentHandler{
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.IntentHandler$UrlData getUrlDataFromIntent(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Intent arg0);
}
class IntentHandler$UrlData{
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.PreloadedTabControl getPreloadedTab();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getSearchBoxQueryToSubmit();
}
class LogTag{
    void logBookmarkAdded(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void logPageFinishedLoading(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
}
class NavScreen{
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.NavTabView getTabView(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
}
class NavScreen$TabAdapter{
   @Source(SUSI_BROWSER_INFORMATION)  long getItemId(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getCount();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.Tab getItem(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getView(  @Sink(SUSI_BROWSER_INFORMATION) int arg0, @Sink(SUSI_BROWSER_INFORMATION) android.view.View arg1, @Sink(SUSI_BROWSER_INFORMATION) android.view.ViewGroup arg2);
}
class NavTabScroller{
    void setScrollValue(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
    void setOrientation(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.NavTabView getTabView(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getGap();
   @Source(SUSI_BROWSER_INFORMATION)  int getScrollValue();
}
class NavigationBarBase{
    void setLock(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
    void setDisplayTitle(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setFavicon(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0);
    void setFocusState(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setCurrentUrlIsBookmark(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void onAction(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void setIncognitoMode(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class NavigationBarPhone{
    void setDisplayTitle(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class NavigationBarTablet{
    void setFocusState(  @Sink(SUSI_BROWSER_INFORMATION) boolean arg0);
    void setCurrentUrlIsBookmark(  @Sink(SUSI_BROWSER_INFORMATION) boolean arg0);
    void setFavicon(  @Sink(SUSI_BROWSER_INFORMATION) android.graphics.Bitmap arg0);
    void setTitleBar(  @Sink(SUSI_BROWSER_INFORMATION) com.android.browser.TitleBar arg0);
}
class NfcHandler{
   @Source(SUSI_BROWSER_INFORMATION)  android.nfc.NdefMessage createNdefMessage(  @Sink(SUSI_BROWSER_INFORMATION) android.nfc.NfcEvent arg0);
}
class PageDialogsHandler{
    void setHttpAuthUsernamePassword(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
}
class PhoneUi{
    void setActiveTab(  @Sink(SUSI_LOG) com.android.browser.Tab arg0);
}
class PhoneUi$AnimScreen{
    void set(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0);
    void set(  @Sink(SUSI_NO_CATEGORY) com.android.browser.TitleBar arg0, @Sink(SUSI_NO_CATEGORY) android.webkit.WebView arg1);
}
class PieControl{
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.view.PieItem makeItem(  @Sink(SUSI_BROWSER_INFORMATION) int arg0, @Sink(SUSI_BROWSER_INFORMATION) int arg1);
}
class PieControl$TabAdapter{
   @Source(SUSI_BROWSER_INFORMATION)  int getCount();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.Tab getItem(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  long getItemId(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getView(  @Sink(SUSI_BROWSER_INFORMATION) int arg0, @Sink(SUSI_BROWSER_INFORMATION) android.view.View arg1, @Sink(SUSI_BROWSER_INFORMATION) android.view.ViewGroup arg2);
}
class PreloadController{
    void setupAutoFill(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.TabControl getTabControl();
   @Source(SUSI_BROWSER_INFORMATION)  android.content.Context getContext();
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getVideoLoadingProgressView();
   @Source(SUSI_BROWSER_INFORMATION)  android.app.Activity getActivity();
   @Source(SUSI_BROWSER_INFORMATION)  android.graphics.Bitmap getDefaultVideoPoster();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.WebViewFactory getWebViewFactory();
}
class PreloadedTabControl{
    void setQuery(  @Sink(SUSI_LOG) java.lang.String arg0);
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.Tab getTab();
}
class Preloader{
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.Preloader getInstance();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.PreloadedTabControl getPreloadedTab(  @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg0);
}
class Preloader$PreloaderSession{
   @Source(SUSI_BROWSER_INFORMATION)  android.webkit.WebView getWebView();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.PreloadedTabControl getTabControl();
}
class SnapshotBar{
    void setFavicon(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0);
}
class SnapshotTab{
   @Source(SUSI_BROWSER_INFORMATION)  boolean saveViewState(  @Sink(SUSI_BROWSER_INFORMATION) android.content.ContentValues arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.content.ContentValues createSnapshotValues();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.Tab getParent();
   @Source(SUSI_BROWSER_INFORMATION)  byte[] compressBitmap(  @Sink(SUSI_BROWSER_INFORMATION) android.graphics.Bitmap arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.graphics.Bitmap getScreenshot();
   @Source(SUSI_BROWSER_INFORMATION)  long getDateCreated();
   @Source(SUSI_BROWSER_INFORMATION)  long getId();
}
class SnapshotTab$LoadData{
   @Source(SUSI_BROWSER_INFORMATION)  android.database.Cursor doInBackground(  @Sink(SUSI_BROWSER_INFORMATION) java.lang.Void[] arg0);
}
class SuggestionsAdapter{
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getSuggestionTitle(  @Sink(SUSI_BROWSER_INFORMATION) com.android.browser.SuggestionsAdapter$SuggestItem arg0);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getSuggestionUrl(  @Sink(SUSI_BROWSER_INFORMATION) com.android.browser.SuggestionsAdapter$SuggestItem arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getView(  @Sink(SUSI_BROWSER_INFORMATION) int arg0, @Sink(SUSI_BROWSER_INFORMATION) android.view.View arg1, @Sink(SUSI_BROWSER_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_BROWSER_INFORMATION)  int getCount();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.SuggestionsAdapter$SuggestionResults buildSuggestionResults();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.SuggestionsAdapter$SuggestItem getItem(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  long getItemId(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.widget.Filter getFilter();
}
class SuggestionsAdapter$CombinedCursor{
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.SuggestionsAdapter$SuggestItem getItem();
}
class SuggestionsAdapter$CursorSource{
   @Source(SUSI_BROWSER_INFORMATION)  int getCount();
}
class SuggestionsAdapter$SuggestCursor{
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.SuggestionsAdapter$SuggestItem getItem();
}
class SuggestionsAdapter$SuggestionResults{
   @Source(SUSI_BROWSER_INFORMATION)  int getLineCount();
}
class Tab{
    void setParent(  @Sink(SUSI_BROWSER_INFORMATION) com.android.browser.Tab arg0);
    void setWebView(  @Sink(SUSI_BROWSER_INFORMATION) android.webkit.WebView arg0);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getTitle();
   @Source(SUSI_BROWSER_INFORMATION)  android.graphics.Bitmap getFavicon();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.Tab$SecurityState getSecurityState();
   @Source(SUSI_BROWSER_INFORMATION)  android.webkit.WebView getWebView();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.ErrorConsoleView getErrorConsole(  @Sink(SUSI_BROWSER_INFORMATION) boolean arg0);
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.DeviceAccountLogin getDeviceAccountLogin();
   @Source(SUSI_BROWSER_INFORMATION)  android.webkit.WebView getTopWindow();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.Tab getParent();
   @Source(SUSI_BROWSER_INFORMATION)  android.webkit.WebViewClassic getWebViewClassic();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getUrl();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.GeolocationPermissionsPrompt getGeolocationPermissionsPrompt();
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getSubViewContainer();
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getViewContainer();
   @Source(SUSI_BROWSER_INFORMATION)  long getId();
   @Source(SUSI_BROWSER_INFORMATION)  int getLoadProgress();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getOriginalUrl();
   @Source(SUSI_BROWSER_INFORMATION)  android.graphics.Bitmap getScreenshot();
   @Source(SUSI_BROWSER_INFORMATION)  android.webkit.WebView getSubWebView();
   @Source(SUSI_BROWSER_INFORMATION)  android.net.http.SslError getSslCertificateError();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getAppId();
}
class Tab$3{
    void setupAutoFill(  @Sink(SUSI_BROWSER_INFORMATION) android.os.Message arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getVideoLoadingProgressView();
   @Source(SUSI_BROWSER_INFORMATION)  android.graphics.Bitmap getDefaultVideoPoster();
}
class TabBar$TabView{
    void setDisplayTitle(  @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg0);
    void setFavicon(  @Sink(SUSI_BROWSER_INFORMATION) android.graphics.drawable.Drawable arg0);
    void dispatchDraw(  @Sink(SUSI_BROWSER_INFORMATION) android.graphics.Canvas arg0);
}
class TabControl{
    void restoreState(  @Sink(SUSI_BROWSER_INFORMATION) android.os.Bundle arg0, @Sink(SUSI_BROWSER_INFORMATION) long arg1, @Sink(SUSI_BROWSER_INFORMATION) boolean arg2, @Sink(SUSI_BROWSER_INFORMATION) boolean arg3);
   @Source(SUSI_BROWSER_INFORMATION)  boolean setCurrentTab(  @Sink(SUSI_BROWSER_INFORMATION) com.android.browser.Tab arg0);
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.Tab getTab(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getTabCount();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.Tab getLeastUsedTab(  @Sink(SUSI_BROWSER_INFORMATION) com.android.browser.Tab arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.webkit.WebView getCurrentSubWindow();
   @Source(SUSI_BROWSER_INFORMATION)  int getCurrentPosition();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.Tab createNewTab(  @Sink(SUSI_BROWSER_INFORMATION) android.os.Bundle arg0, @Sink(SUSI_BROWSER_INFORMATION) boolean arg1);
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.Tab getTabFromView(  @Sink(SUSI_BROWSER_INFORMATION) android.webkit.WebView arg0);
   @Source(SUSI_BROWSER_INFORMATION)  long getNextId();
   @Source(SUSI_BROWSER_INFORMATION)  int getTabPosition(  @Sink(SUSI_BROWSER_INFORMATION) com.android.browser.Tab arg0);
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.Tab getTabFromAppId(  @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.webkit.WebView getCurrentTopWebView();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.TabControl$OnThumbnailUpdatedListener getOnThumbnailUpdatedListener();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.Tab getCurrentTab();
   @Source(SUSI_BROWSER_INFORMATION)  android.webkit.WebView getCurrentWebView();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.Tab createNewTab(  @Sink(SUSI_BROWSER_INFORMATION) boolean arg0);
   @Source(SUSI_BROWSER_INFORMATION)  java.util.List getTabs();
}
class TabScrollView{
    void setScroll(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getChildIndex(  @Sink(SUSI_BROWSER_INFORMATION) android.view.View arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getSelectedTab();
   @Source(SUSI_BROWSER_INFORMATION)  int getScroll();
}
class TabScrollView$TabLayout{
   @Source(SUSI_BROWSER_INFORMATION)  int getChildDrawingOrder(  @Sink(SUSI_BROWSER_INFORMATION) int arg0, @Sink(SUSI_BROWSER_INFORMATION) int arg1);
}
class TitleBar{
    void setProgress(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void updateAutoLogin(  @Sink(SUSI_NO_CATEGORY) com.android.browser.Tab arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.BaseUi getUi();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.UiController getUiController();
   @Source(SUSI_BROWSER_INFORMATION)  int getEmbeddedHeight();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.PageProgressView getProgressView();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.NavigationBarBase getNavigationBar();
   @Source(SUSI_BROWSER_INFORMATION)  android.webkit.WebView getCurrentWebView();
}
class UrlHandler{
   @Source(SUSI_BROWSER_INFORMATION)  boolean startActivityForUrl(  @Sink(SUSI_BROWSER_INFORMATION) com.android.browser.Tab arg0, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg1);
}
class UrlHandler$RLZTask{
    void onPostExecute(  @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg0);
}
class UrlInputView{
   @Source(SUSI_BROWSER_INFORMATION)  int getState();
   @Source(SUSI_BROWSER_INFORMATION)  android.widget.ListAdapter getAdapter();
}
class WebStorageSizeManager{
    void onExceededDatabaseQuota(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) long arg3, @Sink(SUSI_NO_CATEGORY) long arg4, @Sink(SUSI_NO_CATEGORY) android.webkit.WebStorage$QuotaUpdater arg5);
   @Source(SUSI_BROWSER_INFORMATION)  long getAppCacheMaxSize();
}
class WebStorageSizeManager$StatFsDiskInfo{
   @Source(SUSI_BROWSER_INFORMATION)  long getTotalSizeBytes();
   @Source(SUSI_BROWSER_INFORMATION)  long getFreeSpaceSizeBytes();
}
class WebStorageSizeManager$WebKitAppCacheInfo{
   @Source(SUSI_BROWSER_INFORMATION)  long getAppCacheSizeBytes();
}
class WebViewTimersControl{
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.WebViewTimersControl getInstance();
}
class XLargeUi{
    void setActiveTab(  @Sink(SUSI_LOG) com.android.browser.Tab arg0);
    void setFavicon(  @Sink(SUSI_NO_CATEGORY) com.android.browser.Tab arg0);
    void setUseQuickControls(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setUrlTitle(  @Sink(SUSI_NO_CATEGORY) com.android.browser.Tab arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.graphics.drawable.Drawable getFaviconDrawable(  @Sink(SUSI_BROWSER_INFORMATION) android.graphics.Bitmap arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getContentWidth();
}

package com.android.uiautomator.testrunner;

class TestCaseCollector{
   @Source(SUSI_NO_CATEGORY)  java.util.List getTestCases();
}
class UiAutomatorTestCase{
   @Source(SUSI_NO_CATEGORY)  com.android.uiautomator.testrunner.IAutomationSupport getAutomationSupport();
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle getParams();
   @Source(SUSI_NO_CATEGORY)  com.android.uiautomator.core.UiDevice getUiDevice();
}
class UiAutomatorTestRunner{
   @Source(SUSI_NO_CATEGORY)  com.android.uiautomator.testrunner.TestCaseCollector getTestCaseCollector(  @Sink(SUSI_NO_CATEGORY) java.lang.ClassLoader arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter getTestCaseFilter();
}
class UiAutomatorTestRunner$2{
    void uncaughtException(  @Sink(SUSI_LOG) java.lang.Thread arg0, @Sink(SUSI_LOG) java.lang.Throwable arg1);
}
class UiAutomatorTestRunner$FakeInstrumentationWatcher{
    void instrumentationStatus(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
    void instrumentationFinished(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
}
class UiAutomatorTestRunner$WatcherResultPrinter{
    void print(  @Sink(SUSI_NO_CATEGORY) junit.framework.TestResult arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
    void addFailure(  @Sink(SUSI_NO_CATEGORY) junit.framework.Test arg0, @Sink(SUSI_NO_CATEGORY) junit.framework.AssertionFailedError arg1);
    void addError(  @Sink(SUSI_NO_CATEGORY) junit.framework.Test arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Throwable arg1);
    void startTest(  @Sink(SUSI_NO_CATEGORY) junit.framework.Test arg0);
}

package android.sax;

class BadXmlException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
}
class Children{
   @Source(SUSI_NO_CATEGORY)  android.sax.Element get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.sax.Element getOrCreate(  @Sink(SUSI_NO_CATEGORY) android.sax.Element arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
}
class Element{
   @Source(SUSI_NO_CATEGORY)  android.sax.Element getChild(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.sax.Element getChild(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class RootElement{
   @Source(SUSI_NO_CATEGORY)  org.xml.sax.ContentHandler getContentHandler();
}
class RootElement$Handler{
    void startElement(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) org.xml.sax.Attributes arg3);
}

package android.filterpacks.imageproc;

class AlphaBlendFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Program getNativeProgram(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FilterContext arg0);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Program getShaderProgram(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FilterContext arg0);
}
class AutoFixFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class BitmapOverlayFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class BlackWhiteFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class BlendFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Program getNativeProgram(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FilterContext arg0);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Program getShaderProgram(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FilterContext arg0);
}
class BrightnessFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Program getShaderProgram(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FilterContext arg0);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Program getNativeProgram(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FilterContext arg0);
}
class ColorTemperatureFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class ContrastFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Program getNativeProgram(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FilterContext arg0);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Program getShaderProgram(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FilterContext arg0);
}
class CropFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class CrossProcessFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class DocumentaryFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class DrawOverlayFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class DrawRectFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class DuotoneFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class FillLightFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class FisheyeFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class FixedRotationFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class FlipFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class GrainFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class ImageCombineFilter{
    void process(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FilterContext arg0);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class ImageSlicer{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class ImageStitcher{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class Invert{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Program getShaderProgram(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FilterContext arg0);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Program getNativeProgram(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FilterContext arg0);
}
class LomoishFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class NegativeFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class PosterizeFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class RedEyeFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class ResizeFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class SaturateFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class SepiaFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class SharpenFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class SimpleImageFilter{
    void process(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FilterContext arg0);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class TintFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class ToGrayFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Program getShaderProgram(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FilterContext arg0);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Program getNativeProgram(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FilterContext arg0);
}
class ToPackedGrayFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class ToRGBAFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getConvertedFormat(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg0);
}
class ToRGBFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getConvertedFormat(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg0);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class VignetteFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}

package com.android.internal.telephony.test;

class LineReader{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNextLineCtrlZ();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNextLine();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNextLine(  boolean arg0);
}
class ModelInterpreter{
    void print(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
    void setNextCallFailCause(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
    void sendUnsolicited(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
    void println(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
    void setNextDialFailImmediately(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void setAutoProgressConnectingCall(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
}
class SimulatedCommands{
    void setCdmaSubscriptionSource(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setRadioPower(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setMute(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void sendEnvelopeWithStatus(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setNetworkSelectionModeManual(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void sendTerminalResponse(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setAutoProgressConnectingCall(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void setCallForward(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg3, @Sink(SUSI_SYSTEM_SETTINGS) int arg4, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg5);
    void sendCdmaSms(  @Sink(SUSI_SYSTEM_SETTINGS) byte[] arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setupDataCall(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg3, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg4, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg5, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg6, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg7);
    void setCallWaiting(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void sendCDMAFeatureCode(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setPreferredVoicePrivacy(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setFacilityLock(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2, @Sink(SUSI_SYSTEM_SETTINGS) int arg3, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg4);
    void setSmscAddress(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setGsmBroadcastConfig(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[] arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setCdmaRoamingPreference(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void sendSMS(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void sendDtmf(  @Sink(SUSI_SYSTEM_SETTINGS) char arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setCLIR(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setLocationUpdates(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setNetworkSelectionModeAutomatic(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void setGsmBroadcastActivation(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setPhoneType(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
    void setBandMode(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setNextDialFailImmediately(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void setTTYMode(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setCdmaBroadcastActivation(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void sendBurstDtmf(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg3);
    void sendUSSD(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setCdmaBroadcastConfig(  @Sink(SUSI_SYSTEM_SETTINGS) int[] arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void sendEnvelope(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
}
class SimulatedGsmCallState{
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getDriverCalls();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getClccLines();
}

package com.android.launcher2;

class Alarm{
    void setAlarm(  @Sink(SUSI_NO_CATEGORY) long arg0);
}
class AppWidgetResizeFrame{
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getWidgetSizeRanges(  @Sink(SUSI_NO_CATEGORY) com.android.launcher2.Launcher arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg3);
}
class ApplicationInfo{
    void setActivity(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class AppsCustomizePagedView{
    void setContentType(  @Sink(SUSI_NO_CATEGORY) com.android.launcher2.AppsCustomizePagedView$ContentType arg0);
   @Source(SUSI_NO_CATEGORY)  int getPageForComponent(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getPageAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle getDefaultOptionsForWidget(  @Sink(SUSI_NO_CATEGORY) com.android.launcher2.Launcher arg0, @Sink(SUSI_NO_CATEGORY) com.android.launcher2.PendingAddWidgetInfo arg1);
   @Source(SUSI_NO_CATEGORY)  int getPageContentWidth();
   @Source(SUSI_NO_CATEGORY)  int getAssociatedUpperPageBound(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getContent();
   @Source(SUSI_NO_CATEGORY)  int getAssociatedLowerPageBound(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getSaveInstanceStateIndex();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCurrentPageDescription();
}
class AppsCustomizeTabHost{
    void setCurrentTabFromContent(  @Sink(SUSI_NO_CATEGORY) com.android.launcher2.AppsCustomizePagedView$ContentType arg0);
    void setContentTypeImmediate(  @Sink(SUSI_NO_CATEGORY) com.android.launcher2.AppsCustomizePagedView$ContentType arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTabTagForContentType(  @Sink(SUSI_NO_CATEGORY) com.android.launcher2.AppsCustomizePagedView$ContentType arg0);
   @Source(SUSI_NO_CATEGORY)  int getDescendantFocusability();
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.AppsCustomizePagedView$ContentType getContentTypeForTabTag(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getContent();
}
class BubbleTextView{
    void setTag(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setFrame(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  int getPressedOrFocusedBackgroundPadding();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getPressedOrFocusedBackground();
}
class ButtonDropTarget{
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getIconRect(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.DropTarget getDropTargetDelegate(  @Sink(SUSI_NO_CATEGORY) com.android.launcher2.DropTarget$DragObject arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getCurrentDrawable();
}
class CellLayout{
    void setChildrenDrawnWithCacheEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setShortcutAndWidgetAlpha(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setFolderLeaveBehindCell(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean animateChildToPosition(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) boolean arg5, @Sink(SUSI_NO_CATEGORY) boolean arg6);
    void setTagToCellInfoForPoint(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setChildrenDrawingCacheEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int getCountX();
   @Source(SUSI_NO_CATEGORY)  int getCountY();
   @Source(SUSI_NO_CATEGORY)  int getCellHeight();
   @Source(SUSI_NO_CATEGORY)  android.view.View getChildAt(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.CellLayout$CellInfo getTag();
   @Source(SUSI_NO_CATEGORY)  int getDesiredHeight();
   @Source(SUSI_NO_CATEGORY)  int getDesiredWidth();
   @Source(SUSI_NO_CATEGORY)  int getWidthGap();
   @Source(SUSI_NO_CATEGORY)  float getBackgroundAlpha();
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.ShortcutAndWidgetContainer getShortcutsAndWidgets();
   @Source(SUSI_NO_CATEGORY)  boolean getIsDragOverlapping();
   @Source(SUSI_NO_CATEGORY)  int getCellWidth();
   @Source(SUSI_NO_CATEGORY)  float getChildrenScale();
   @Source(SUSI_NO_CATEGORY)  int getHeightGap();
   @Source(SUSI_NO_CATEGORY)  float getDistanceFromCell(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) int[] arg2);
}
class CellLayout$ItemConfiguration{
    void add(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) com.android.launcher2.CellLayout$CellAndSpan arg1);
}
class CellLayout$LayoutParams{
    void setup(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  int getY();
   @Source(SUSI_NO_CATEGORY)  int getX();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
}
class CellLayout$ViewCluster{
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getBoundingRect();
   @Source(SUSI_NO_CATEGORY)  int[] getLeftEdge();
   @Source(SUSI_NO_CATEGORY)  int[] getRightEdge();
   @Source(SUSI_NO_CATEGORY)  int[] getEdge(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int[] getTopEdge();
   @Source(SUSI_NO_CATEGORY)  int[] getBottomEdge();
}
class Cling{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDrawIdentifier();
}
class DeleteDropTarget$3{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class DeleteDropTarget$5{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class DragController{
    void startDrag(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg1, @Sink(SUSI_NO_CATEGORY) com.android.launcher2.DragSource arg2, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg5, @Sink(SUSI_NO_CATEGORY) float arg6);
   @Source(SUSI_NO_CATEGORY)  long getLastGestureUpTime();
}
class DragLayer{
   @Source(SUSI_NO_CATEGORY)  float getDescendantCoordRelativeToSelf(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int[] arg1);
   @Source(SUSI_NO_CATEGORY)  float getLocationInDragLayer(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int[] arg1);
   @Source(SUSI_NO_CATEGORY)  float getDescendantRectRelativeToSelf(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg1);
   @Source(SUSI_NO_CATEGORY)  int getChildDrawingOrder(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.View getAnimatedView();
}
class DragLayer$LayoutParams{
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  int getX();
   @Source(SUSI_NO_CATEGORY)  int getY();
}
class DragView{
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setColor(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getInitialScale();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getDragRegion();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Point getDragVisualizeOffset();
}
class FastBitmapDrawable{
    void setColorFilter(  @Sink(SUSI_NO_CATEGORY) android.graphics.ColorFilter arg0);
    void setFilterBitmap(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int getOpacity();
   @Source(SUSI_NO_CATEGORY)  int getMinimumWidth();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicHeight();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getBitmap();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicWidth();
   @Source(SUSI_NO_CATEGORY)  int getMinimumHeight();
}
class FocusOnlyTabWidget{
   @Source(SUSI_NO_CATEGORY)  int getChildTabIndex(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getSelectedTab();
}
class Folder{
   @Source(SUSI_NO_CATEGORY)  int getItemCount();
   @Source(SUSI_NO_CATEGORY)  float getPivotYForIconAnimation();
   @Source(SUSI_NO_CATEGORY)  float getPivotXForIconAnimation();
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getItemsInReadingOrder();
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.DropTarget getDropTargetDelegate(  @Sink(SUSI_NO_CATEGORY) com.android.launcher2.DropTarget$DragObject arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getEditTextRegion();
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.FolderInfo getInfo();
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getItemsInReadingOrder(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getItemAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class FolderIcon{
    void setTextVisible(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.Folder getFolder();
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.FolderInfo getFolderInfo();
   @Source(SUSI_NO_CATEGORY)  boolean getTextVisible();
}
class FolderIcon$FolderRingAnimator{
   @Source(SUSI_NO_CATEGORY)  float getInnerRingSize();
   @Source(SUSI_NO_CATEGORY)  float getOuterRingSize();
}
class HideFromAccessibilityHelper{
    void restoreImportantForAccessibility(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
    void onChildViewRemoved(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1);
}
class Hotseat{
   @Source(SUSI_NO_CATEGORY)  int getCellYFromOrder(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.CellLayout getLayout();
   @Source(SUSI_NO_CATEGORY)  int getOrderInHotseat(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getCellXFromOrder(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class IconCache{
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getFullResIcon(  @Sink(SUSI_NO_CATEGORY) android.content.res.Resources arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getFullResIcon(  @Sink(SUSI_NO_CATEGORY) android.content.pm.ResolveInfo arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getFullResIcon(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getIcon(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) android.content.pm.ResolveInfo arg1, @Sink(SUSI_NO_CATEGORY) java.util.HashMap arg2);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getFullResDefaultActivityIcon();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getIcon(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getFullResIcon(  @Sink(SUSI_NO_CATEGORY) android.content.pm.ActivityInfo arg0);
}
class InterruptibleInOutAnimator{
   @Source(SUSI_NO_CATEGORY)  android.animation.ValueAnimator getAnimator();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getTag();
}
class ItemInfo{
    void updateValuesWithCoordinates(  @Sink(SUSI_NO_CATEGORY) android.content.ContentValues arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class Launcher{
    void dump(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) java.io.FileDescriptor arg1, @Sink(SUSI_FILE) java.io.PrintWriter arg2, @Sink(SUSI_FILE) java.lang.String[] arg3);
    void startGlobalSearch(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) boolean arg1, @Sink(SUSI_LOG) android.os.Bundle arg2, @Sink(SUSI_LOG) android.graphics.Rect arg3);
    boolean startActivitySafely(  @Sink(SUSI_LOG) android.view.View arg0, @Sink(SUSI_LOG) android.content.Intent arg1, @Sink(SUSI_LOG) java.lang.Object arg2);
    void openFolder(  @Sink(SUSI_LOG) com.android.launcher2.FolderIcon arg0);
    boolean startActivity(  @Sink(SUSI_LOG) android.view.View arg0, @Sink(SUSI_LOG) android.content.Intent arg1, @Sink(SUSI_LOG) java.lang.Object arg2);
    void processShortcut(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
    void startSearch(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
    void addWidgetToAutoAdvanceIfNeeded(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) android.appwidget.AppWidgetProviderInfo arg1);
    void bindFolders(  @Sink(SUSI_NO_CATEGORY) java.util.HashMap arg0);
    void bindAppsUpdated(  @Sink(SUSI_NO_CATEGORY) java.util.ArrayList arg0);
   @Source(SUSI_NO_CATEGORY)  boolean onLongClick(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
    void startActivityForResult(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void addAppWidgetFromDrop(  @Sink(SUSI_NO_CATEGORY) com.android.launcher2.PendingAddWidgetInfo arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int[] arg3, @Sink(SUSI_NO_CATEGORY) int[] arg4, @Sink(SUSI_NO_CATEGORY) int[] arg5);
    void addAppWidgetImpl(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) com.android.launcher2.ItemInfo arg1, @Sink(SUSI_NO_CATEGORY) android.appwidget.AppWidgetHostView arg2, @Sink(SUSI_NO_CATEGORY) android.appwidget.AppWidgetProviderInfo arg3);
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.LauncherModel getModel();
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.CellLayout getCellLayout(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int[] getMinSpanForWidget(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.appwidget.AppWidgetProviderInfo arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.View createShortcut(  @Sink(SUSI_NO_CATEGORY) com.android.launcher2.ShortcutInfo arg0);
   @Source(SUSI_NO_CATEGORY)  int[] getSpanForWidget(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  int getCurrentWorkspaceScreen();
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.DragController getDragController();
   @Source(SUSI_NO_CATEGORY)  int[] getSpanForWidget(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.appwidget.AppWidgetProviderInfo arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.DragLayer getDragLayer();
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.LauncherAppWidgetHost getAppWidgetHost();
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.Hotseat getHotseat();
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.Workspace getWorkspace();
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.SearchDropTargetBar getSearchBar();
}
class LauncherAppWidgetHost{
   @Source(SUSI_NO_CATEGORY)  android.appwidget.AppWidgetHostView onCreateView(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.appwidget.AppWidgetProviderInfo arg2);
}
class LauncherAppWidgetHostView{
    void updateAppWidget(  @Sink(SUSI_NO_CATEGORY) android.widget.RemoteViews arg0);
   @Source(SUSI_NO_CATEGORY)  int getDescendantFocusability();
   @Source(SUSI_NO_CATEGORY)  android.view.View getErrorView();
}
class LauncherAppWidgetInfo{
    void notifyWidgetSizeChanged(  @Sink(SUSI_NO_CATEGORY) com.android.launcher2.Launcher arg0);
}
class LauncherApplication{
   @Source(SUSI_NO_CATEGORY)  int getLongPressTimeout();
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.IconCache getIconCache();
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.LauncherModel getModel();
   @Source(SUSI_NO_CATEGORY)  float getScreenDensity();
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.LauncherProvider getLauncherProvider();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSharedPreferencesKey();
}
class LauncherModel{
    void moveItemInDatabase(  @Sink(SUSI_LOG) android.content.Context arg0, @Sink(SUSI_LOG) com.android.launcher2.ItemInfo arg1, @Sink(SUSI_LOG) long arg2, @Sink(SUSI_LOG) int arg3, @Sink(SUSI_LOG) int arg4, @Sink(SUSI_LOG) int arg5);
    void modifyItemInDatabase(  @Sink(SUSI_LOG) android.content.Context arg0, @Sink(SUSI_LOG) com.android.launcher2.ItemInfo arg1, @Sink(SUSI_LOG) long arg2, @Sink(SUSI_LOG) int arg3, @Sink(SUSI_LOG) int arg4, @Sink(SUSI_LOG) int arg5, @Sink(SUSI_LOG) int arg6, @Sink(SUSI_LOG) int arg7);
   @Source(SUSI_NO_CATEGORY)  boolean queueIconToBeChecked(  @Sink(SUSI_NO_CATEGORY) java.util.HashMap arg0, @Sink(SUSI_NO_CATEGORY) com.android.launcher2.ShortcutInfo arg1, @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void addItemToDatabase(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) com.android.launcher2.ItemInfo arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) boolean arg6);
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.ShortcutInfo infoFromShortcutIntent(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getComponentNameFromResolveInfo(  @Sink(SUSI_NO_CATEGORY) android.content.pm.ResolveInfo arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.ShortcutInfo getShortcutInfo(  @Sink(SUSI_NO_CATEGORY) android.content.pm.PackageManager arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) android.content.Context arg2, @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) java.util.HashMap arg6);
   @Source(SUSI_NO_CATEGORY)  int getCellCountX();
   @Source(SUSI_NO_CATEGORY)  int getCellCountY();
   @Source(SUSI_NO_CATEGORY)  java.util.Comparator getAppNameComparator();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getIconFromCursor(  @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Context arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getItemsInLocalCoordinates(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getFallbackIcon();
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getWorkspaceShortcutItemInfosWithIntent(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
   @Source(SUSI_NO_CATEGORY)  int getCellLayoutChildId(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.ShortcutInfo getShortcutInfo(  @Sink(SUSI_NO_CATEGORY) android.content.pm.PackageManager arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) android.content.Context arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.FolderInfo getFolderById(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.util.HashMap arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
}
class LauncherProvider{
   @Source(SUSI_NO_CATEGORY)  android.net.Uri insert(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) android.content.ContentValues arg1);
    void loadDefaultFavoritesIfNecessary(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int update(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) android.content.ContentValues arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor query(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
}
class LauncherProvider$DatabaseHelper{
    void onUpgrade(  @Sink(SUSI_LOG) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_LOG) int arg1, @Sink(SUSI_LOG) int arg2);
}
class LauncherSettings$Favorites{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getContentUri(  long arg0, boolean arg1);
}
class LauncherViewPropertyAnimator{
    void setTarget(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getListeners();
   @Source(SUSI_NO_CATEGORY)  long getStartDelay();
   @Source(SUSI_NO_CATEGORY)  long getDuration();
}
class PagedView{
   @Source(SUSI_NO_CATEGORY)  boolean performAccessibilityAction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
   @Source(SUSI_NO_CATEGORY)  int getChildOffset(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getScrollProgress(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  float distanceInfluenceForSnapDuration(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  int getAssociatedUpperPageBound(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getPageForView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCurrentPageDescription();
   @Source(SUSI_NO_CATEGORY)  int getChildWidth(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getScrollingIndicator();
   @Source(SUSI_NO_CATEGORY)  int getPageCount();
   @Source(SUSI_NO_CATEGORY)  int getAssociatedLowerPageBound(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getRelativeChildOffset(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getPageAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getScaledMeasuredWidth(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  int getPageNearestToCenterOfScreen();
   @Source(SUSI_NO_CATEGORY)  int getNextPage();
   @Source(SUSI_NO_CATEGORY)  int getCurrentPage();
}
class PagedView$ScrollInterpolator{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class PagedViewCellLayout{
    void setChildrenDrawingCacheEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.PagedViewCellLayoutChildren getChildrenLayout();
   @Source(SUSI_NO_CATEGORY)  int getCellCountX();
   @Source(SUSI_NO_CATEGORY)  int getCellCountY();
   @Source(SUSI_NO_CATEGORY)  int getPageChildCount();
   @Source(SUSI_NO_CATEGORY)  int getContentHeight();
   @Source(SUSI_NO_CATEGORY)  int getWidthBeforeFirstLayout();
   @Source(SUSI_NO_CATEGORY)  android.view.View getChildOnPageAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getContentWidth();
}
class PagedViewCellLayout$LayoutParams{
    void setup(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
}
class PagedViewCellLayoutChildren{
    void setChildrenDrawingCacheEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class PagedViewGridLayout{
   @Source(SUSI_NO_CATEGORY)  int getPageChildCount();
   @Source(SUSI_NO_CATEGORY)  android.view.View getChildOnPageAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getCellCountY();
   @Source(SUSI_NO_CATEGORY)  int getCellCountX();
}
class PagedViewWidget{
   @Source(SUSI_NO_CATEGORY)  int[] getPreviewSize();
}
class SearchDropTargetBar{
    void setup(  @Sink(SUSI_NO_CATEGORY) com.android.launcher2.Launcher arg0, @Sink(SUSI_NO_CATEGORY) com.android.launcher2.DragController arg1);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getSearchBarBounds();
   @Source(SUSI_NO_CATEGORY)  int getTransitionInDuration();
}
class ShortcutAndWidgetContainer{
    void setupLp(  @Sink(SUSI_NO_CATEGORY) com.android.launcher2.CellLayout$LayoutParams arg0);
    void setChildrenDrawingCacheEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setChildrenDrawnWithCacheEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getChildAt(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class ShortcutInfo{
    void onAddToDatabase(  @Sink(SUSI_NO_CATEGORY) android.content.ContentValues arg0);
    void setActivity(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getIcon(  @Sink(SUSI_NO_CATEGORY) com.android.launcher2.IconCache arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPackageName();
}
class SmoothPagedView{
   @Source(SUSI_NO_CATEGORY)  int getScrollMode();
}
class SmoothPagedView$OvershootInterpolator{
    void setDistance(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Utilities{
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap createIconBitmap(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0, @Sink(SUSI_NO_CATEGORY) android.content.Context arg1);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap createIconBitmap(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0, @Sink(SUSI_NO_CATEGORY) android.content.Context arg1);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap resampleIconBitmap(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0, @Sink(SUSI_NO_CATEGORY) android.content.Context arg1);
}
class WallpaperChooserDialogFragment$ImageAdapter{
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class WallpaperChooserDialogFragment$WallpaperDrawable{
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setColorFilter(  @Sink(SUSI_NO_CATEGORY) android.graphics.ColorFilter arg0);
   @Source(SUSI_NO_CATEGORY)  int getOpacity();
}
class WeakReferenceThreadLocal{
    void set(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get();
}
class Workspace{
    void onDrop(  @Sink(SUSI_NO_CATEGORY) com.android.launcher2.DropTarget$DragObject arg0);
    void setFinalScrollForPageChange(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setFinalTransitionTransform(  @Sink(SUSI_NO_CATEGORY) com.android.launcher2.CellLayout arg0);
    void beginDragShared(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) com.android.launcher2.DragSource arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.Folder getFolderForTag(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getCellLayoutMetrics(  @Sink(SUSI_NO_CATEGORY) com.android.launcher2.Launcher arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getScrollMode();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap createWidgetBitmap(  @Sink(SUSI_NO_CATEGORY) com.android.launcher2.ItemInfo arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1);
   @Source(SUSI_NO_CATEGORY)  float getChildrenOutlineAlpha();
   @Source(SUSI_NO_CATEGORY)  android.animation.Animator getChangeStateAnimation(  @Sink(SUSI_NO_CATEGORY) com.android.launcher2.Workspace$State arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.CellLayout getCurrentDropLayout();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap createDragBitmap(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Canvas arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getAllShortcutAndWidgetContainers();
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.CellLayout getParentCellLayoutForView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getWorkspaceAndHotseatCellLayouts();
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.DropTarget getDropTargetDelegate(  @Sink(SUSI_NO_CATEGORY) com.android.launcher2.DropTarget$DragObject arg0);
   @Source(SUSI_NO_CATEGORY)  android.animation.Animator getChangeStateAnimation(  @Sink(SUSI_NO_CATEGORY) com.android.launcher2.Workspace$State arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.launcher2.Folder getOpenFolder();
   @Source(SUSI_NO_CATEGORY)  android.view.View getContent();
   @Source(SUSI_NO_CATEGORY)  int getDescendantFocusability();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCurrentPageDescription();
   @Source(SUSI_NO_CATEGORY)  float getBackgroundAlpha();
   @Source(SUSI_NO_CATEGORY)  android.view.View getViewForTag(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Workspace$InverseZInterpolator{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Workspace$WallpaperOffsetInterpolator{
    void setFinalX(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  float getCurrY();
   @Source(SUSI_NO_CATEGORY)  float getCurrX();
}
class Workspace$ZInterpolator{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Workspace$ZoomInInterpolator{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Workspace$ZoomOutInterpolator{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}

package com.beetstra.jutf7;

class Base64Util{
   @Source(SUSI_NO_CATEGORY)  int getSextet(  @Sink(SUSI_NO_CATEGORY) byte arg0);
   @Source(SUSI_NO_CATEGORY)  byte getChar(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class UTF7StyleCharsetDecoder{
   @Source(SUSI_NO_CATEGORY)  java.nio.charset.CoderResult decodeLoop(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0, @Sink(SUSI_NO_CATEGORY) java.nio.CharBuffer arg1);
}
class UTF7StyleCharsetEncoder{
   @Source(SUSI_NO_CATEGORY)  java.nio.charset.CoderResult encodeLoop(  @Sink(SUSI_NO_CATEGORY) java.nio.CharBuffer arg0, @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg1);
}

package javax.crypto;

class Cipher{
   @Source(SUSI_NO_CATEGORY)  byte[] doFinal(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  byte[] update(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlgorithm();
   @Source(SUSI_NO_CATEGORY)  int getBlockSize();
   @Source(SUSI_NO_CATEGORY)  javax.crypto.ExemptionMechanism getExemptionMechanism();
   @Source(SUSI_NO_CATEGORY)  byte[] getIV();
   @Source(SUSI_NO_CATEGORY)  byte[] doFinal();
   @Source(SUSI_NO_CATEGORY)  byte[] update(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.security.AlgorithmParameters getParameters();
   @Source(SUSI_NO_CATEGORY)  java.security.spec.AlgorithmParameterSpec getMaxAllowedParameterSpec(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.security.Provider getProvider();
   @Source(SUSI_NO_CATEGORY)  byte[] doFinal(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  int getOutputSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class CipherOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class CipherSpi{
   @Source(SUSI_NO_CATEGORY)  int engineDoFinal(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0, @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] engineWrap(  @Sink(SUSI_NO_CATEGORY) java.security.Key arg0);
   @Source(SUSI_NO_CATEGORY)  java.security.Key engineUnwrap(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int engineUpdate(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0, @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg1);
}
class ExemptionMechanism{
   @Source(SUSI_NO_CATEGORY)  java.security.Provider getProvider();
   @Source(SUSI_NO_CATEGORY)  int getOutputSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] genExemptionBlob();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
}
class KeyAgreement{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlgorithm();
   @Source(SUSI_NO_CATEGORY)  byte[] generateSecret();
   @Source(SUSI_NO_CATEGORY)  java.security.Provider getProvider();
}
class KeyGenerator{
   @Source(SUSI_NO_CATEGORY)  java.security.Provider getProvider();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlgorithm();
}
class Mac{
   @Source(SUSI_NO_CATEGORY)  byte[] doFinal();
   @Source(SUSI_NO_CATEGORY)  int getMacLength();
   @Source(SUSI_NO_CATEGORY)  java.security.Provider getProvider();
   @Source(SUSI_NO_CATEGORY)  byte[] doFinal(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlgorithm();
}
class MacSpi{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
}
class SecretKeyFactory{
   @Source(SUSI_NO_CATEGORY)  java.security.spec.KeySpec getKeySpec(  @Sink(SUSI_NO_CATEGORY) javax.crypto.SecretKey arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Class arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlgorithm();
   @Source(SUSI_NO_CATEGORY)  java.security.Provider getProvider();
}

package com.android.nfc.ndefpush;

class NdefPushClient{
   @Source(SUSI_NFC)  boolean push(  @Sink(SUSI_NFC) android.nfc.NdefMessage arg0);
}
class NdefPushProtocol{
   @Source(SUSI_NFC)  byte[] toByteArray();
   @Source(SUSI_NFC)  android.nfc.NdefMessage getImmediate();
}

package com.android.mms;

class MmsApp{
   @Source(SUSI_NO_CATEGORY)  com.android.mms.util.PduLoaderManager getPduLoaderManager();
   @Source(SUSI_NO_CATEGORY)  android.provider.SearchRecentSuggestions getRecentSuggestions();
   @Source(SUSI_NO_CATEGORY)  android.telephony.TelephonyManager getTelephonyManager();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCurrentCountryIso();
   @Source(SUSI_NO_CATEGORY)  com.android.mms.MmsApp getApplication();
   @Source(SUSI_NO_CATEGORY)  com.android.mms.util.ThumbnailManager getThumbnailManager();
   @Source(SUSI_NO_CATEGORY)  android.drm.DrmManagerClient getDrmManagerClient();
}
class MmsConfig{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHttpParamsLine1Key();
   @Source(SUSI_NO_CATEGORY)  int getMaxTextLimit();
   @Source(SUSI_NO_CATEGORY)  int getAliasMaxChars();
   @Source(SUSI_NO_CATEGORY)  int getMinMessageCountPerThread();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUserAgent();
   @Source(SUSI_NO_CATEGORY)  int getAliasMinChars();
   @Source(SUSI_NO_CATEGORY)  int getMaxSubjectLength();
   @Source(SUSI_NO_CATEGORY)  int getMaxImageWidth();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUaProfTagName();
   @Source(SUSI_NO_CATEGORY)  int getMaxMessageCountPerThread();
   @Source(SUSI_NO_CATEGORY)  int getDefaultSMSMessagesPerThread();
   @Source(SUSI_NO_CATEGORY)  int getHttpSocketTimeout();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getEmailGateway();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUaProfUrl();
   @Source(SUSI_NO_CATEGORY)  int getMinimumSlideElementDuration();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHttpParams();
   @Source(SUSI_NO_CATEGORY)  int getRecipientLimit();
   @Source(SUSI_NO_CATEGORY)  int getDefaultMMSMessagesPerThread();
   @Source(SUSI_NO_CATEGORY)  int getSmsToMmsTextThreshold();
   @Source(SUSI_NO_CATEGORY)  int getMaxImageHeight();
   @Source(SUSI_NO_CATEGORY)  int getMaxMessageSize();
   @Source(SUSI_NO_CATEGORY)  int getMaxSizeScaleForPendingMmsAllowed();
}
class TempFileProvider{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getScrapPath(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getScrapPath(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}

package com.android.browser.view;

class BookmarkContainer{
    void setBackgroundDrawable(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
}
class BookmarkExpandableView{
    void setColumnWidthFromLayout(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.BreadCrumbView getBreadCrumbs(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.view.ContextMenu$ContextMenuInfo getContextMenuInfo();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.BrowserBookmarksAdapter getChildAdapter(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
}
class BookmarkExpandableView$BookmarkAccountAdapter{
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.Object getGroup(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getChildrenCount(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  long getGroupId(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.Object getChild(  @Sink(SUSI_BROWSER_INFORMATION) int arg0, @Sink(SUSI_BROWSER_INFORMATION) int arg1);
   @Source(SUSI_BROWSER_INFORMATION)  int getGroupCount();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.BreadCrumbView getBreadCrumbView(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  long getChildId(  @Sink(SUSI_BROWSER_INFORMATION) int arg0, @Sink(SUSI_BROWSER_INFORMATION) int arg1);
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getChildView(  @Sink(SUSI_BROWSER_INFORMATION) int arg0, @Sink(SUSI_BROWSER_INFORMATION) int arg1, @Sink(SUSI_BROWSER_INFORMATION) boolean arg2, @Sink(SUSI_BROWSER_INFORMATION) android.view.View arg3, @Sink(SUSI_BROWSER_INFORMATION) android.view.ViewGroup arg4);
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getGroupView(  @Sink(SUSI_BROWSER_INFORMATION) int arg0, @Sink(SUSI_BROWSER_INFORMATION) boolean arg1, @Sink(SUSI_BROWSER_INFORMATION) android.view.View arg2, @Sink(SUSI_BROWSER_INFORMATION) android.view.ViewGroup arg3);
}
class PieItem{
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_BROWSER_INFORMATION)  float getAlpha();
   @Source(SUSI_BROWSER_INFORMATION)  float getAnimationAngle();
   @Source(SUSI_BROWSER_INFORMATION)  float getSweep();
   @Source(SUSI_BROWSER_INFORMATION)  int getOuterRadius();
   @Source(SUSI_BROWSER_INFORMATION)  float getStartAngle();
   @Source(SUSI_BROWSER_INFORMATION)  java.util.List getItems();
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getView();
   @Source(SUSI_BROWSER_INFORMATION)  int getInnerRadius();
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.view.PieMenu$PieView getPieView();
   @Source(SUSI_BROWSER_INFORMATION)  float getStart();
   @Source(SUSI_BROWSER_INFORMATION)  int getLevel();
}
class PieStackView{
    void setCurrent(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ScrollerView{
    void setOrientation(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getMaxScrollAmount();
   @Source(SUSI_BROWSER_INFORMATION)  float getTopFadingEdgeStrength();
   @Source(SUSI_BROWSER_INFORMATION)  float getBottomFadingEdgeStrength();
}

package com.android.providers.media;

class IMtpService$Stub{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IMtpService$Stub$Proxy{
    void sendObjectRemoved(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void sendObjectAdded(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class MediaProvider{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    int update(  @Sink(SUSI_LOG) android.net.Uri arg0, @Sink(SUSI_LOG) android.content.ContentValues arg1, @Sink(SUSI_LOG) java.lang.String arg2, @Sink(SUSI_LOG) java.lang.String[] arg3);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getAlbumArtOutputUri(  com.android.providers.media.MediaProvider$DatabaseHelper arg0, android.database.sqlite.SQLiteDatabase arg1, long arg2, android.net.Uri arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
   @Source(SUSI_NO_CATEGORY)  int getDatabaseVersion(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor query(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4);
   @Source(SUSI_NO_CATEGORY)  android.os.ParcelFileDescriptor openFile(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class MediaProvider$DatabaseHelper{
   @Source(SUSI_NO_CATEGORY)  android.database.sqlite.SQLiteDatabase getWritableDatabase();
}
class MediaScannerService$1{
    void requestScanFile(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.media.IMediaScannerListener arg2);
}
class MediaThumbRequest{
    android.net.Uri updateDatabase(  @Sink(SUSI_LOG) android.graphics.Bitmap arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Comparator getComparator();
}
class MtpService$3{
    void sendObjectAdded(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void sendObjectRemoved(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class RingtonePickerActivity{
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor access$200(  @Sink(SUSI_NO_CATEGORY) com.android.providers.media.RingtonePickerActivity arg0);
}

package com.android.server.sip;

class SipHelper{
   @Source(SUSI_NO_CATEGORY)  javax.sip.ClientTransaction sendInvite(  @Sink(SUSI_NO_CATEGORY) android.net.sip.SipProfile arg0, @Sink(SUSI_NO_CATEGORY) android.net.sip.SipProfile arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.header.extensions.ReferredByHeader arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5);
    void sendReferNotify(  @Sink(SUSI_NO_CATEGORY) javax.sip.Dialog arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  javax.sip.ServerTransaction sendInviteOk(  @Sink(SUSI_NO_CATEGORY) javax.sip.RequestEvent arg0, @Sink(SUSI_NO_CATEGORY) android.net.sip.SipProfile arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) javax.sip.ServerTransaction arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
   @Source(SUSI_NO_CATEGORY)  javax.sip.ClientTransaction sendOptions(  @Sink(SUSI_NO_CATEGORY) android.net.sip.SipProfile arg0, @Sink(SUSI_NO_CATEGORY) android.net.sip.SipProfile arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  javax.sip.ClientTransaction sendReinvite(  @Sink(SUSI_NO_CATEGORY) javax.sip.Dialog arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void sendBye(  @Sink(SUSI_NO_CATEGORY) javax.sip.Dialog arg0);
    void sendInviteAck(  @Sink(SUSI_NO_CATEGORY) javax.sip.ResponseEvent arg0, @Sink(SUSI_NO_CATEGORY) javax.sip.Dialog arg1);
   @Source(SUSI_NO_CATEGORY)  javax.sip.ServerTransaction sendRinging(  @Sink(SUSI_NO_CATEGORY) javax.sip.RequestEvent arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  javax.sip.ClientTransaction sendRegister(  @Sink(SUSI_NO_CATEGORY) android.net.sip.SipProfile arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  javax.sip.ServerTransaction getServerTransaction(  @Sink(SUSI_NO_CATEGORY) javax.sip.RequestEvent arg0);
}
class SipService{
    void open(  @Sink(SUSI_VOIP) android.net.sip.SipProfile arg0);
    void open3(  @Sink(SUSI_VOIP) android.net.sip.SipProfile arg0, @Sink(SUSI_VOIP) android.app.PendingIntent arg1, @Sink(SUSI_VOIP) android.net.sip.ISipSessionListener arg2);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Looper access$1800();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.sip.ISipSession getPendingSession(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.sip.SipProfile[] getListOfProfiles();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.sip.ISipSession createSession(  android.net.sip.SipProfile arg0, android.net.sip.ISipSessionListener arg1);
}
class SipService$AutoRegistrationProcess{
    void setListener(  @Sink(SUSI_LOG) android.net.sip.ISipSessionListener arg0);
}
class SipService$SipSessionGroupExt{
    void setListener(  @Sink(SUSI_NO_CATEGORY) android.net.sip.ISipSessionListener arg0);
    void setWakeupTimer(  @Sink(SUSI_NO_CATEGORY) com.android.server.sip.SipWakeupTimer arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.sip.SipProfile getLocalProfile();
}
class SipSessionGroup{
   @Source(SUSI_FILE_INFORMATION)  java.lang.String getLocalProfileUri();
   @Source(SUSI_NO_CATEGORY)  com.android.server.sip.SipSessionGroup$SipSessionImpl access$400(  @Sink(SUSI_NO_CATEGORY) com.android.server.sip.SipSessionGroup arg0, @Sink(SUSI_NO_CATEGORY) javax.sip.RequestEvent arg1, @Sink(SUSI_NO_CATEGORY) android.net.sip.ISipSessionListener arg2, @Sink(SUSI_NO_CATEGORY) javax.sip.ServerTransaction arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
   @Source(SUSI_NO_CATEGORY)  android.net.sip.SipProfile getLocalProfile();
}
class SipSessionGroup$MakeCallCommand{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSessionDescription();
   @Source(SUSI_NO_CATEGORY)  int getTimeout();
   @Source(SUSI_NO_CATEGORY)  android.net.sip.SipProfile getPeerProfile();
}
class SipSessionGroup$RegisterCommand{
   @Source(SUSI_NO_CATEGORY)  int getDuration();
}
class SipSessionGroup$SipSessionCallReceiverImpl{
    boolean process(  @Sink(SUSI_LOG) java.util.EventObject arg0);
}
class SipSessionGroup$SipSessionImpl{
    void startKeepAliveProcess(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) com.android.server.sip.SipSessionGroup$KeepAliveProcessCallback arg1);
    void setListener(  @Sink(SUSI_NO_CATEGORY) android.net.sip.ISipSessionListener arg0);
    void startKeepAliveProcess(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.net.sip.SipProfile arg1, @Sink(SUSI_NO_CATEGORY) com.android.server.sip.SipSessionGroup$KeepAliveProcessCallback arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCallId();
   @Source(SUSI_NO_CATEGORY)  android.net.sip.SipProfile getLocalProfile();
   @Source(SUSI_NO_CATEGORY)  android.net.sip.SipProfile getPeerProfile();
   @Source(SUSI_NO_CATEGORY)  int getState();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLocalIp();
}
class SipSessionGroup$SipSessionImpl$2$1{
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String getPassword();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUserName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSipDomain();
}
class SipSessionListenerProxy{
   @Source(SUSI_NO_CATEGORY)  android.net.sip.ISipSessionListener getListener();
}
class SipWakeupTimer{
    void set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Runnable arg1);
}

package com.google.android.apps.lightcycle.xmp;

class XmpUtil{
    boolean writeXMPMeta(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) com.adobe.xmp.XMPMeta arg1);
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.XMPMeta createXMPMeta();
}

package android.net.nsd;

class DnsSdTxtRecord{
    void set(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getRawData();
   @Source(SUSI_NETWORK_INFORMATION)  byte[] access$000(  android.net.nsd.DnsSdTxtRecord arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String get(  java.lang.String arg0);
}
class INsdManager$Stub{
    boolean onTransact(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) android.os.Parcel arg1, @Sink(SUSI_NETWORK) android.os.Parcel arg2, @Sink(SUSI_NETWORK) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class INsdManager$Stub$Proxy{
    void setEnabled(  @Sink(SUSI_NETWORK) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Messenger getMessenger();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class NsdManager{
    void setEnabled(  @Sink(SUSI_NETWORK) boolean arg0);
    void resolveService(  @Sink(SUSI_NETWORK) android.net.nsd.NsdServiceInfo arg0, @Sink(SUSI_NETWORK) android.net.nsd.NsdManager$ResolveListener arg1);
    void registerService(  @Sink(SUSI_NETWORK) android.net.nsd.NsdServiceInfo arg0, @Sink(SUSI_NETWORK) int arg1, @Sink(SUSI_NETWORK) android.net.nsd.NsdManager$RegistrationListener arg2);
    void discoverServices(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) int arg1, @Sink(SUSI_NETWORK) android.net.nsd.NsdManager$DiscoveryListener arg2);
}
class NsdServiceInfo{
    void setTxtRecord(  @Sink(SUSI_NETWORK) android.net.nsd.DnsSdTxtRecord arg0);
    void writeToParcel(  @Sink(SUSI_NETWORK) android.os.Parcel arg0, @Sink(SUSI_NETWORK) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getPort();
   @Source(SUSI_NETWORK_INFORMATION)  java.net.InetAddress getHost();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.nsd.DnsSdTxtRecord getTxtRecord();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getServiceName();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getServiceType();
}

package android.preference;

class DialogPreference{
    void setDialogIcon(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setNegativeButtonText(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDialogTitle(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setPositiveButtonText(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDialogMessage(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getNegativeButtonText();
   @Source(SUSI_NO_CATEGORY)  android.os.Parcelable onSaveInstanceState();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getDialogTitle();
   @Source(SUSI_NO_CATEGORY)  android.view.View onCreateDialogView();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getPositiveButtonText();
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog getDialog();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getDialogIcon();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getDialogMessage();
   @Source(SUSI_NO_CATEGORY)  int getDialogLayoutResource();
}
class DialogPreference$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class EditTextPreference{
   @Source(SUSI_NO_CATEGORY)  android.widget.EditText getEditText();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getText();
}
class EditTextPreference$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class GenericInflater{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object createItem(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.util.AttributeSet arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDefaultPackage();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object onCreateItem(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.util.AttributeSet arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
   @Source(SUSI_NO_CATEGORY)  android.preference.GenericInflater$Factory getFactory();
}
class ListPreference{
    void setEntryValues(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setEntries(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setValueIndex(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getEntry();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence[] getEntryValues();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence[] getEntries();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getSummary();
}
class ListPreference$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class Preference{
    void setTitle(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean persistLong(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setSummary(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean persistInt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean persistBoolean(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  boolean persistString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void notifyDependencyChange(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  boolean persistFloat(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTitle();
   @Source(SUSI_NO_CATEGORY)  android.preference.Preference$OnPreferenceChangeListener getOnPreferenceChangeListener();
   @Source(SUSI_NO_CATEGORY)  int getTitleRes();
   @Source(SUSI_NO_CATEGORY)  android.preference.PreferenceManager getPreferenceManager();
   @Source(SUSI_NO_CATEGORY)  int getOrder();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFragment();
   @Source(SUSI_NO_CATEGORY)  int getPersistedInt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getPersistedLong(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getSummary();
   @Source(SUSI_NO_CATEGORY)  android.content.SharedPreferences getSharedPreferences();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPersistedString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.SharedPreferences$Editor getEditor();
   @Source(SUSI_NO_CATEGORY)  boolean getPersistedBoolean(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getIcon();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDependency();
   @Source(SUSI_NO_CATEGORY)  boolean getShouldDisableView();
   @Source(SUSI_NO_CATEGORY)  int getLayoutResource();
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
   @Source(SUSI_NO_CATEGORY)  float getPersistedFloat(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  long getId();
   @Source(SUSI_NO_CATEGORY)  java.util.Set getPersistedStringSet(  @Sink(SUSI_NO_CATEGORY) java.util.Set arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle getExtras();
   @Source(SUSI_NO_CATEGORY)  java.lang.StringBuilder getFilterableStringBuilder();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getKey();
   @Source(SUSI_NO_CATEGORY)  android.preference.Preference$OnPreferenceClickListener getOnPreferenceClickListener();
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getIntent();
   @Source(SUSI_NO_CATEGORY)  int getWidgetLayoutResource();
}
class PreferenceActivity{
   @Source(SUSI_NO_CATEGORY)  boolean onPreferenceStartFragment(  @Sink(SUSI_NO_CATEGORY) android.preference.PreferenceFragment arg0, @Sink(SUSI_NO_CATEGORY) android.preference.Preference arg1);
    void setPreferenceScreen(  @Sink(SUSI_NO_CATEGORY) android.preference.PreferenceScreen arg0);
    void startWithFragment(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1, @Sink(SUSI_NO_CATEGORY) android.app.Fragment arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void startPreferencePanel(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg3, @Sink(SUSI_NO_CATEGORY) android.app.Fragment arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
    void setListFooter(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
    void startWithFragment(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1, @Sink(SUSI_NO_CATEGORY) android.app.Fragment arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent onBuildStartFragmentIntent(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList access$100(  @Sink(SUSI_NO_CATEGORY) android.preference.PreferenceActivity arg0);
   @Source(SUSI_NO_CATEGORY)  android.preference.PreferenceActivity$Header onGetInitialHeader();
   @Source(SUSI_NO_CATEGORY)  java.util.List getHeaders();
   @Source(SUSI_NO_CATEGORY)  android.preference.PreferenceScreen getPreferenceScreen();
   @Source(SUSI_NO_CATEGORY)  android.preference.PreferenceManager getPreferenceManager();
   @Source(SUSI_NO_CATEGORY)  android.preference.PreferenceActivity$Header onGetNewHeader();
   @Source(SUSI_NO_CATEGORY)  android.widget.Button getNextButton();
}
class PreferenceActivity$Header{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getBreadCrumbTitle(  @Sink(SUSI_NO_CATEGORY) android.content.res.Resources arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getSummary(  @Sink(SUSI_NO_CATEGORY) android.content.res.Resources arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTitle(  @Sink(SUSI_NO_CATEGORY) android.content.res.Resources arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getBreadCrumbShortTitle(  @Sink(SUSI_NO_CATEGORY) android.content.res.Resources arg0);
}
class PreferenceActivity$HeaderAdapter{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
}
class PreferenceFragment{
    void setPreferenceScreen(  @Sink(SUSI_NO_CATEGORY) android.preference.PreferenceScreen arg0);
   @Source(SUSI_NO_CATEGORY)  android.preference.PreferenceScreen getPreferenceScreen();
   @Source(SUSI_NO_CATEGORY)  android.preference.PreferenceManager getPreferenceManager();
   @Source(SUSI_NO_CATEGORY)  android.widget.ListView getListView();
}
class PreferenceGroup{
    void setEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int getPreferenceCount();
   @Source(SUSI_NO_CATEGORY)  android.preference.Preference getPreference(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class PreferenceGroupAdapter{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  android.preference.Preference getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getItemViewType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getViewTypeCount();
}
class PreferenceManager{
    void setDefaultValues(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void setDefaultValues(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4);
   @Source(SUSI_NO_CATEGORY)  android.preference.PreferenceScreen inflateFromResource(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.preference.PreferenceScreen arg2);
   @Source(SUSI_NO_CATEGORY)  android.preference.PreferenceScreen inflateFromIntent(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.preference.PreferenceScreen arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.SharedPreferences getSharedPreferences();
   @Source(SUSI_NO_CATEGORY)  int getSharedPreferencesMode();
   @Source(SUSI_NO_CATEGORY)  android.preference.PreferenceFragment getFragment();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSharedPreferencesName();
   @Source(SUSI_NO_CATEGORY)  android.preference.PreferenceScreen createPreferenceScreen(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.SharedPreferences$Editor getEditor();
   @Source(SUSI_NO_CATEGORY)  android.preference.PreferenceScreen getPreferenceScreen();
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
   @Source(SUSI_NO_CATEGORY)  int getNextRequestCode();
   @Source(SUSI_NO_CATEGORY)  android.preference.PreferenceManager$OnPreferenceTreeClickListener getOnPreferenceTreeClickListener();
   @Source(SUSI_NO_CATEGORY)  android.app.Activity getActivity();
   @Source(SUSI_NO_CATEGORY)  long getNextId();
   @Source(SUSI_NO_CATEGORY)  android.content.SharedPreferences getDefaultSharedPreferences(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class PreferenceScreen{
   @Source(SUSI_NO_CATEGORY)  android.widget.ListAdapter getRootAdapter();
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog getDialog();
}
class PreferenceScreen$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class RingtonePreference{
   @Source(SUSI_NO_CATEGORY)  boolean getShowDefault();
   @Source(SUSI_NO_CATEGORY)  int getRingtoneType();
   @Source(SUSI_NO_CATEGORY)  boolean getShowSilent();
}
class SeekBarDialogPreference{
   @Source(SUSI_NO_CATEGORY)  android.widget.SeekBar getSeekBar(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
}
class TwoStatePreference{
    void setSummaryOff(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSummaryOn(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Parcelable onSaveInstanceState();
   @Source(SUSI_NO_CATEGORY)  boolean getDisableDependentsState();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getSummaryOff();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getSummaryOn();
}
class TwoStatePreference$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class VolumePreference$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.preference.VolumePreference$VolumeStore getVolumeStore();
}
class VolumePreference$SeekBarVolumizer{
   @Source(SUSI_NO_CATEGORY)  android.widget.SeekBar getSeekBar();
}

package java.sql;

class Date{
    void setTime(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setSeconds(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setHours(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setMinutes(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getMinutes();
   @Source(SUSI_NO_CATEGORY)  int getSeconds();
   @Source(SUSI_NO_CATEGORY)  int getHours();
}

package gov.nist.javax.sip.clientauthutils;

class AuthenticationHelperImpl{
   @Source(SUSI_NO_CATEGORY)  javax.sip.ClientTransaction handleChallenge(  @Sink(SUSI_NO_CATEGORY) javax.sip.message.Response arg0, @Sink(SUSI_NO_CATEGORY) javax.sip.ClientTransaction arg1, @Sink(SUSI_NO_CATEGORY) javax.sip.SipProvider arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
}
class CredentialsCache{
    void cacheAuthorizationHeader(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) javax.sip.header.AuthorizationHeader arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getCachedAuthorizationHeaders(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}

package com.android.org.bouncycastle.util.io;

class Streams{
    void pipeAll(  @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg0, @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg1);
   @Source(SUSI_NO_CATEGORY)  long pipeAllLimited(  @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg2);
}

package org.apache.commons.logging;

class LogConfigurationException{
   @Source(SUSI_NO_CATEGORY)  java.lang.Throwable getCause();
}
class LogFactory{
   @Source(SUSI_NO_CATEGORY)  org.apache.commons.logging.Log getLog(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.commons.logging.LogFactory getFactory();
   @Source(SUSI_NO_CATEGORY)  java.lang.ClassLoader getContextClassLoader();
   @Source(SUSI_NO_CATEGORY)  org.apache.commons.logging.Log getLog(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.ClassLoader getClassLoader(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0);
}
class LogFactory$2{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object run();
}

package gov.nist.javax.sip.header.extensions;

class Join{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setToTag(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setFromTag(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFromTag();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.CallIdentifier getCallIdentifer();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getToTag();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCallId();
}
class MinSE{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getExpires();
}
class References{
    void setRel(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCallId();
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator getParameterNames();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRel();
}
class ReferredBy{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class Replaces{
    void setToTag(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setFromTag(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getToTag();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.CallIdentifier getCallIdentifer();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCallId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFromTag();
}
class SessionExpires{
    void setRefresher(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRefresher();
   @Source(SUSI_NO_CATEGORY)  int getExpires();
}

package com.android.internal.policy.impl;

class GlobalActions$GlobalActionsDialog{
   @Source(SUSI_NO_CATEGORY)  android.widget.ListView getListView();
}
class GlobalActions$MyAdapter{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  com.android.internal.policy.impl.GlobalActions$Action getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class GlobalActions$SinglePressAction{
   @Source(SUSI_NO_CATEGORY)  android.view.View create(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2, @Sink(SUSI_NO_CATEGORY) android.view.LayoutInflater arg3);
}
class GlobalActions$ToggleAction{
   @Source(SUSI_NO_CATEGORY)  android.view.View create(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2, @Sink(SUSI_NO_CATEGORY) android.view.LayoutInflater arg3);
}
class IconUtilities{
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable createIconDrawable(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
}
class PhoneFallbackEventHandler{
   @Source(SUSI_NO_CATEGORY)  boolean onKeyDown(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.KeyEvent arg1);
   @Source(SUSI_NO_CATEGORY)  android.media.AudioManager getAudioManager();
   @Source(SUSI_NO_CATEGORY)  android.telephony.TelephonyManager getTelephonyManager();
   @Source(SUSI_NO_CATEGORY)  android.app.SearchManager getSearchManager();
   @Source(SUSI_NO_CATEGORY)  android.app.KeyguardManager getKeyguardManager();
}
class PhoneWindowManager{
    void setRotationLw(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void sendCloseSystemWindows(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setCurrentUserLw(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void notifyLidSwitchChanged(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void dump(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg2);
    void setAttachedWindowFrames(  @Sink(SUSI_NO_CATEGORY) android.view.WindowManagerPolicy$WindowState arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.view.WindowManagerPolicy$WindowState arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg5, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg6, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg7, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg8);
    void enableKeyguard(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setHdmiPlugged(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setUserRotationMode(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  long interceptKeyBeforeDispatching(  @Sink(SUSI_NO_CATEGORY) android.view.WindowManagerPolicy$WindowState arg0, @Sink(SUSI_NO_CATEGORY) android.view.KeyEvent arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  android.media.IAudioService getAudioService();
   @Source(SUSI_NO_CATEGORY)  long[] getLongIntArray(  @Sink(SUSI_NO_CATEGORY) android.content.res.Resources arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int finishPostLayoutPolicyLw();
   @Source(SUSI_NO_CATEGORY)  int getNonDecorDisplayWidth(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  android.view.animation.Animation createForceHideEnterAnimation(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.internal.statusbar.IStatusBarService getStatusBarService();
    void getContentInsetHintLw(  @Sink(SUSI_NO_CATEGORY) android.view.WindowManager$LayoutParams arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.View addStartingWindow(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.content.res.CompatibilityInfo arg3, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) int arg6, @Sink(SUSI_NO_CATEGORY) int arg7);
   @Source(SUSI_NO_CATEGORY)  int getSystemDecorRectLw(  @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.internal.telephony.ITelephony getTelephonyService();
   @Source(SUSI_NO_CATEGORY)  int getMaxWallpaperLayer();
   @Source(SUSI_NO_CATEGORY)  int getNonDecorDisplayHeight(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  boolean isMusicActive();
   @Source(SUSI_NO_CATEGORY)  int getAboveUniverseLayer();
   @Source(SUSI_NO_CATEGORY)  int getConfigDisplayWidth(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getConfigDisplayHeight(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class ShortcutManager{
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getIntent(  @Sink(SUSI_NO_CATEGORY) android.view.KeyCharacterMap arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}

package com.android.videoeditor;

class AlertDialogs{
   @Source(SUSI_NO_CATEGORY)  android.app.AlertDialog createEditDialog(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) android.content.DialogInterface$OnClickListener arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5, @Sink(SUSI_NO_CATEGORY) android.content.DialogInterface$OnClickListener arg6, @Sink(SUSI_NO_CATEGORY) android.content.DialogInterface$OnCancelListener arg7, @Sink(SUSI_NO_CATEGORY) int arg8, @Sink(SUSI_NO_CATEGORY) int arg9, @Sink(SUSI_NO_CATEGORY) java.lang.String arg10);
   @Source(SUSI_NO_CATEGORY)  android.app.AlertDialog createAlert(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) android.content.DialogInterface$OnClickListener arg5, @Sink(SUSI_NO_CATEGORY) java.lang.String arg6, @Sink(SUSI_NO_CATEGORY) android.content.DialogInterface$OnClickListener arg7, @Sink(SUSI_NO_CATEGORY) android.content.DialogInterface$OnCancelListener arg8, @Sink(SUSI_NO_CATEGORY) boolean arg9);
}
class BaseAdapterWithImages{
   @Source(SUSI_NO_CATEGORY)  java.util.List access$100(  @Sink(SUSI_NO_CATEGORY) com.android.videoeditor.BaseAdapterWithImages arg0);
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ExportOptionsDialog{
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog create(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) com.android.videoeditor.ExportOptionsDialog$ExportOptionsListener arg1, @Sink(SUSI_NO_CATEGORY) android.content.DialogInterface$OnClickListener arg2, @Sink(SUSI_NO_CATEGORY) android.content.DialogInterface$OnCancelListener arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
}
class KenBurnsActivity{
    void onCreate(  @Sink(SUSI_LOG) android.os.Bundle arg0);
}
class LoadPreviewBitmapTask{
    void onPostExecute(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap doInBackground(  @Sink(SUSI_NO_CATEGORY) java.lang.Void[] arg0);
}
class OverlayTitleTemplatePicker{
    void onListItemClick(  @Sink(SUSI_NO_CATEGORY) android.widget.ListView arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) long arg3);
}
class OverlayType{
   @Source(SUSI_NO_CATEGORY)  int getType();
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.OverlayType[] getOverlays(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
}
class OverlaysAdapter{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap loadImage(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
}
class ProjectPickerAdapter{
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
}
class ProjectsActivity{
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog onCreateDialog(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
}
class TransitionType{
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.TransitionType[] getTransitions(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  int getType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
}
class TransitionsActivity{
    void onListItemClick(  @Sink(SUSI_NO_CATEGORY) android.widget.ListView arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) long arg3);
}
class TransitionsAdapter{
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.TransitionType[] getTransitions();
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
}
class VideoEditorActivity{
    void setAspectRatio(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.widgets.AudioTrackLinearLayout getAudioTrackLayout();
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog onCreateDialog(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.widgets.MediaLinearLayout getMediaLayout();
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.widgets.OverlayLinearLayout getOverlayLayout();
}
class VideoEditorBaseActivity$ServiceListener{
   @Source(SUSI_NO_CATEGORY)  boolean onTransitionThumbnails(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap[] arg2, @Sink(SUSI_NO_CATEGORY) java.lang.Exception arg3);
   @Source(SUSI_NO_CATEGORY)  boolean onMediaItemThumbnail(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) java.lang.Exception arg5);
    void onAudioTrackBoundariesSet(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) long arg3, @Sink(SUSI_NO_CATEGORY) java.lang.Exception arg4);
    void onOverlayUserAttributesSet(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg3, @Sink(SUSI_NO_CATEGORY) java.lang.Exception arg4);
    void onEffectAdded(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) com.android.videoeditor.service.MovieEffect arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.Exception arg3);
    void onTransitionDurationSet(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) java.lang.Exception arg3);
    void onEffectRemoved(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.Exception arg3);
    void onVideoEditorLoaded(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) com.android.videoeditor.service.VideoEditorProject arg1, @Sink(SUSI_NO_CATEGORY) java.util.List arg2, @Sink(SUSI_NO_CATEGORY) java.util.List arg3, @Sink(SUSI_NO_CATEGORY) java.lang.Exception arg4);
    void onMediaItemDurationSet(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) java.lang.Exception arg3);
    void onMediaItemBoundariesSet(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) long arg3, @Sink(SUSI_NO_CATEGORY) java.lang.Exception arg4);
}

package junit.runner;

class BaseTestRunner{
    void setPreference(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPreference(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  junit.framework.Test getTest(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  junit.runner.TestSuiteLoader getLoader();
   @Source(SUSI_NO_CATEGORY)  java.lang.Class loadSuiteClass(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Properties getPreferences();
   @Source(SUSI_NO_CATEGORY)  int getPreference(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFilteredTrace(  @Sink(SUSI_NO_CATEGORY) java.lang.Throwable arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFilteredTrace(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String processArguments(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
}
class StandardTestSuiteLoader{
   @Source(SUSI_NO_CATEGORY)  java.lang.Class load(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}

package com.android.inputmethod.keyboard.internal;

class AlphabetShiftState{
    void setShifted(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setShiftLocked(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class GestureStrokeWithPreviewPoints{
    void setKeyboardGeometry(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getGestureStrokeId();
}
class KeySpecParser{
   @Source(SUSI_NO_CATEGORY)  int getIntValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getCode(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.internal.KeyboardCodesSet arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getOutputText(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLabel(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class KeyStylesSet{
    void parseKeyStyleAttributes(  @Sink(SUSI_NO_CATEGORY) android.content.res.TypedArray arg0, @Sink(SUSI_NO_CATEGORY) android.content.res.TypedArray arg1, @Sink(SUSI_NO_CATEGORY) org.xmlpull.v1.XmlPullParser arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.internal.KeyStyle getKeyStyle(  @Sink(SUSI_NO_CATEGORY) android.content.res.TypedArray arg0, @Sink(SUSI_NO_CATEGORY) org.xmlpull.v1.XmlPullParser arg1);
}
class KeyStylesSet$DeclaredKeyStyle{
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getStringArray(  @Sink(SUSI_NO_CATEGORY) android.content.res.TypedArray arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) android.content.res.TypedArray arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getFlag(  @Sink(SUSI_NO_CATEGORY) android.content.res.TypedArray arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) android.content.res.TypedArray arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class KeyStylesSet$EmptyKeyStyle{
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getStringArray(  @Sink(SUSI_NO_CATEGORY) android.content.res.TypedArray arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) android.content.res.TypedArray arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class KeyboardCodesSet{
    void setLanguage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getCode(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class KeyboardIconsSet{
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getIconDrawable(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getIconId(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getIconName(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class KeyboardRow{
   @Source(SUSI_NO_CATEGORY)  float getKeyX(  @Sink(SUSI_NO_CATEGORY) android.content.res.TypedArray arg0);
   @Source(SUSI_NO_CATEGORY)  int getKeyY();
   @Source(SUSI_NO_CATEGORY)  float getKeyWidth(  @Sink(SUSI_NO_CATEGORY) android.content.res.TypedArray arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_NO_CATEGORY)  int getDefaultKeyLabelFlags();
   @Source(SUSI_NO_CATEGORY)  float getDefaultKeyWidth();
   @Source(SUSI_NO_CATEGORY)  int getDefaultBackgroundType();
   @Source(SUSI_NO_CATEGORY)  float getKeyWidth(  @Sink(SUSI_NO_CATEGORY) android.content.res.TypedArray arg0);
}
class KeyboardTextsSet{
    void setLanguage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void loadStringResourcesInternal(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getText(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class KeysCache{
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.Key get(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.Key arg0);
}
class PointerTrackerQueue{
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.internal.PointerTrackerQueue$Element getOldestElement();
}
class PreviewPlacerView{
    void invalidatePointer(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.PointerTracker arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class TouchPositionCorrection{
   @Source(SUSI_NO_CATEGORY)  int getRows();
   @Source(SUSI_NO_CATEGORY)  float getRadius(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getX(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getY(  @Sink(SUSI_NO_CATEGORY) int arg0);
}

package com.android.internal.telephony.cdma;

class CDMALTEPhone{
    void sendDtmf(  @Sink(SUSI_PHONE_CONNECTION) char arg0);
    com.android.internal.telephony.Connection dial(  @Sink(SUSI_VOIP) java.lang.String arg0);
    void notifyDataConnection(  @Sink(SUSI_PHONE_STATE) java.lang.String arg0, @Sink(SUSI_PHONE_STATE) java.lang.String arg1);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void setSmscAddress(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void enableEnhancedVoicePrivacy(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setBandMode(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setCdmaSubscription(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getImei();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getMsisdn();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getDeviceSvn();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getSubscriberId();
    void getPreferredNetworkType(  @Sink(SUSI_LOCATION_INFORMATION) android.os.Message arg0);
    void getAvailableNetworks(  android.os.Message arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.ims.IsimRecords getIsimRecords();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(  java.lang.String arg0);
    void getSmscAddress(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void getEnhancedVoicePrivacy(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
}
class CDMAPhone{
    void sendDtmf(  @Sink(SUSI_PHONE_CONNECTION) char arg0);
    void startDtmf(  @Sink(SUSI_PHONE_CONNECTION) char arg0);
    void sendBurstDtmf(  @Sink(SUSI_PHONE_CONNECTION) java.lang.String arg0, @Sink(SUSI_PHONE_CONNECTION) int arg1, @Sink(SUSI_PHONE_CONNECTION) int arg2, @Sink(SUSI_PHONE_CONNECTION) android.os.Message arg3);
    com.android.internal.telephony.Connection dial(  @Sink(SUSI_VOIP) java.lang.String arg0);
    void notifyDataConnection(  @Sink(SUSI_PHONE_STATE) java.lang.String arg0, @Sink(SUSI_PHONE_STATE) java.lang.String arg1);
    void notifyDisconnect(  @Sink(SUSI_PHONE_STATE) com.android.internal.telephony.Connection arg0);
    void notifyNewRingingConnection(  @Sink(SUSI_PHONE_STATE) com.android.internal.telephony.Connection arg0);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void sendUssdResponse(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
    void setOnPostDialCharacter(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void setSmscAddress(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void enableEnhancedVoicePrivacy(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setSystemProperty(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1);
    void setRadioPower(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean handlePinMmi(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
    void setNetworkSelectionModeAutomatic(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.Connection dial(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.UUSInfo arg1);
    void setOutgoingCallerIdDisplay(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void notifyServiceStateChanged(  @Sink(SUSI_SYSTEM_SETTINGS) android.telephony.ServiceState arg0);
    void setOnEcbModeExitResponse(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void setCellBroadcastSmsConfig(  @Sink(SUSI_SYSTEM_SETTINGS) int[] arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void restoreSavedNetworkSelection(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean updateCurrentCarrierInProvider(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
    void setCallWaiting(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setCallForwardingOption(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2, @Sink(SUSI_SYSTEM_SETTINGS) int arg3, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg4);
    void setDataRoamingEnabled(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void setLine1Number(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void setMute(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void setCdmaSubscription(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getDeviceId();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getVoiceMailNumber();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getSubscriberId();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getLine1Number();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getPhoneName();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getCdmaMin();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getCdmaPrlVersion();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getDeviceSvn();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getLine1AlphaTag();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getImei();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getMeid();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getEsn();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getVoiceMailAlphaTag();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getCdmaEriText();
    void getPreferredNetworkType(  @Sink(SUSI_LOCATION_INFORMATION) android.os.Message arg0);
   @Source(SUSI_LOCATION_INFORMATION)  android.telephony.CellLocation getCellLocation();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.ServiceStateTracker getServiceStateTracker();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getCallForwardingIndicator();
   @Source(SUSI_NETWORK_INFORMATION)  int getCdmaEriIconMode();
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.ServiceState getServiceState();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getMute();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.CallTracker getCallTracker();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Call getBackgroundCall();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getPendingMmiCodes();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Call getRingingCall();
   @Source(SUSI_NETWORK_INFORMATION)  int getCdmaEriIconIndex();
   @Source(SUSI_NETWORK_INFORMATION)  int getPhoneType();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getMessageWaitingIndicator();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Call getForegroundCall();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.Phone$DataActivityState getDataActivityState();
    void getSmscAddress(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.PhoneConstants$State getState();
    void getEnhancedVoicePrivacy(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getDataRoamingEnabled();
    void getDataCallList(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  int getVoiceMessageCount();
    void getCallWaiting(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo();
}
class CdmaCall{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Call$State getState();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getConnections();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Phone getPhone();
}
class CdmaCallTracker{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.internal.telephony.Connection dial(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.internal.telephony.Connection dial(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.cdma.CdmaConnection getConnectionByIndex(  com.android.internal.telephony.cdma.CdmaCall arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  boolean getMute();
}
class CdmaConnection{
   @Source(SUSI_NETWORK_INFORMATION)  long getCreateTime();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Call getCall();
   @Source(SUSI_NETWORK_INFORMATION)  int getCDMAIndex();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAddress();
   @Source(SUSI_NETWORK_INFORMATION)  long getHoldDurationMillis();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.UUSInfo getUUSInfo();
   @Source(SUSI_NETWORK_INFORMATION)  int getNumberPresentation();
   @Source(SUSI_NETWORK_INFORMATION)  long getDurationMillis();
   @Source(SUSI_NETWORK_INFORMATION)  long getConnectTime();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getRemainingPostDialString();
   @Source(SUSI_NETWORK_INFORMATION)  long getDisconnectTime();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getOrigDialString();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Connection$DisconnectCause getDisconnectCause();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Connection$PostDialState getPostDialState();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Call$State getState();
}
class CdmaDataConnection{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
}
class CdmaDataConnectionTracker{
    void onDisconnectDone(  @Sink(SUSI_PHONE_CONNECTION) int arg0, @Sink(SUSI_PHONE_CONNECTION) android.os.AsyncResult arg1);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void onDataSetupComplete(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.AsyncResult arg0);
    void setDataOnRoamingEnabled(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.DctConstants$State getOverallState();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getActionIntentReconnectAlarm();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.DctConstants$State getState(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getActionIntentDataStallAlarm();
}
class CdmaLteServiceStateTracker{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void fixTimeZone(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
    void setCdmaTechnology(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getAllCellInfo();
}
class CdmaMmiCode{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.CharSequence getMessage();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.MmiCode$State getState();
}
class CdmaSMSDispatcher{
    void dispatch(  @Sink(SUSI_SMS_MMS) android.content.Intent arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1);
    void sendSubmitPdu(  @Sink(SUSI_SMS_MMS) com.android.internal.telephony.cdma.SmsMessage$SubmitPdu arg0, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg1, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg2, @Sink(SUSI_SMS_MMS) java.lang.String arg3);
    void sendText(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) java.lang.String arg2, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg3, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg4);
    void sendData(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) int arg2, @Sink(SUSI_SMS_MMS) byte[] arg3, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg4, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg5);
   @Source(SUSI_SMS_MMS)  int dispatchMessage(  @Sink(SUSI_SMS_MMS) com.android.internal.telephony.SmsMessageBase arg0);
    void sendSms(  @Sink(SUSI_SMS_MMS) com.android.internal.telephony.SMSDispatcher$SmsTracker arg0);
    void sendNewSubmitPdu(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) java.lang.String arg2, @Sink(SUSI_SMS_MMS) com.android.internal.telephony.SmsHeader arg3, @Sink(SUSI_SMS_MMS) int arg4, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg5, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg6, @Sink(SUSI_SMS_MMS) boolean arg7);
   @Source(SUSI_SMS_MMS)  int processMessagePart(  @Sink(SUSI_SMS_MMS) byte[] arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) int arg2, @Sink(SUSI_SMS_MMS) int arg3, @Sink(SUSI_SMS_MMS) int arg4, @Sink(SUSI_SMS_MMS) long arg5, @Sink(SUSI_SMS_MMS) int arg6, @Sink(SUSI_SMS_MMS) boolean arg7);
    void dispatch(  @Sink(SUSI_SMS_MMS) android.content.Intent arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) android.content.BroadcastReceiver arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getFormat();
}
class CdmaServiceStateTracker{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void fixTimeZone(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getAllCellInfo();
   @Source(SUSI_NETWORK_INFORMATION)  int getOtasp();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Phone getPhone();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPrlVersion();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getImsi();
   @Source(SUSI_NETWORK_INFORMATION)  int getCurrentDataConnectionState();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getMdnNumber();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getCdmaMin();
}
class CdmaSubscriptionSourceManager{
   @Source(SUSI_NETWORK_INFORMATION)  int getCdmaSubscriptionSource();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager getInstance(  android.content.Context arg0, com.android.internal.telephony.CommandsInterface arg1, android.os.Handler arg2, int arg3, java.lang.Object arg4);
}
class EriManager{
   @Source(SUSI_NETWORK_INFORMATION)  int getEriFileVersion();
   @Source(SUSI_NETWORK_INFORMATION)  int getCdmaEriIconIndex(  int arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getCdmaEriIconMode(  int arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getCdmaEriText(  int arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getEriNumberOfEntries();
   @Source(SUSI_NETWORK_INFORMATION)  int getEriFileType();
}
class RuimFileHandler{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEFPath(  int arg0);
}
class RuimPhoneBookInterfaceManager{
   @Source(SUSI_CONTACT_INFORMATION)  boolean onTransact(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.os.Parcel arg1, @Sink(SUSI_CONTACT_INFORMATION) android.os.Parcel arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3);
   @Source(SUSI_CONTACT_INFORMATION)  int[] getAdnRecordsSize(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.util.List getAdnRecordsInEf(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class RuimRecords{
    void setVoiceMailNumber(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void setMsisdnNumber(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
   @Source(SUSI_NETWORK_INFORMATION)  boolean getCsimSpnDisplayCondition();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getMdnNumber();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getMdn();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getMin();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNid();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getSid();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getCdmaMin();
   @Source(SUSI_NETWORK_INFORMATION)  byte[] access$100(  com.android.internal.telephony.cdma.RuimRecords arg0);
   @Source(SUSI_NETWORK_INFORMATION)  byte[] access$000(  com.android.internal.telephony.cdma.RuimRecords arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPrlVersion();
   @Source(SUSI_NETWORK_INFORMATION)  int getDisplayRule(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getIMSI();
   @Source(SUSI_NETWORK_INFORMATION)  byte[] access$102(  com.android.internal.telephony.cdma.RuimRecords arg0, byte[] arg1);
   @Source(SUSI_NETWORK_INFORMATION)  byte[] access$002(  com.android.internal.telephony.cdma.RuimRecords arg0, byte[] arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getRUIMOperatorNumeric();
}
class RuimRecords$EfCsimCdmaHomeLoaded{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEfName();
}
class RuimRecords$EfCsimEprlLoaded{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEfName();
}
class RuimRecords$EfCsimImsimLoaded{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEfName();
}
class RuimRecords$EfCsimLiLoaded{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEfName();
}
class RuimRecords$EfCsimMdnLoaded{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEfName();
}
class RuimRecords$EfCsimSpnLoaded{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEfName();
}
class RuimRecords$EfPlLoaded{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEfName();
}
class RuimSmsInterfaceManager{
    void sendData(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) int arg2, @Sink(SUSI_SMS_MMS) byte[] arg3, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg4, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg5);
   @Source(SUSI_SMS_MMS)  boolean enableCellBroadcast(  @Sink(SUSI_SMS_MMS) int arg0);
   @Source(SUSI_SMS_MMS)  boolean copyMessageToIccEf(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) byte[] arg1, @Sink(SUSI_SMS_MMS) byte[] arg2);
   @Source(SUSI_SMS_MMS)  boolean enableCellBroadcastRange(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) int arg1);
   @Source(SUSI_SMS_MMS)  boolean updateMessageOnIccEf(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) int arg1, @Sink(SUSI_SMS_MMS) byte[] arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.ArrayList access$300(  com.android.internal.telephony.cdma.RuimSmsInterfaceManager arg0, java.util.ArrayList arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getAllMessagesFromIccEf();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List access$202(  com.android.internal.telephony.cdma.RuimSmsInterfaceManager arg0, java.util.List arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List access$200(  com.android.internal.telephony.cdma.RuimSmsInterfaceManager arg0);
}
class SmsMessage{
   @Source(SUSI_NETWORK_INFORMATION)  int getNumOfVoicemails();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(  java.lang.String arg0, java.lang.String arg1, java.lang.String arg2, boolean arg3, com.android.internal.telephony.SmsHeader arg4);
   @Source(SUSI_NETWORK_INFORMATION)  int getStatus();
   @Source(SUSI_NETWORK_INFORMATION)  int getMessageType();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(  java.lang.String arg0, java.lang.String arg1, int arg2, byte[] arg3, boolean arg4);
   @Source(SUSI_NETWORK_INFORMATION)  int getProtocolIdentifier();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.ArrayList getSmsCbProgramData();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.SmsConstants$MessageClass getMessageClass();
   @Source(SUSI_NETWORK_INFORMATION)  int getNextMessageId();
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getIncomingSmsFingerprint();
   @Source(SUSI_NETWORK_INFORMATION)  int getTeleService();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(  java.lang.String arg0, com.android.internal.telephony.cdma.sms.UserData arg1, boolean arg2);
}

package gov.nist.core.net;

class DefaultNetworkLayer{
   @Source(SUSI_NO_CATEGORY)  javax.net.ssl.SSLSocket createSSLSocket(  @Sink(SUSI_NO_CATEGORY) java.net.InetAddress arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.net.Socket createSocket(  @Sink(SUSI_NO_CATEGORY) java.net.InetAddress arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.net.InetAddress arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  javax.net.ssl.SSLServerSocket createSSLServerSocket(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.net.InetAddress arg2);
   @Source(SUSI_NO_CATEGORY)  javax.net.ssl.SSLSocket createSSLSocket(  @Sink(SUSI_NO_CATEGORY) java.net.InetAddress arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.net.InetAddress arg2);
}
class SslNetworkLayer{
   @Source(SUSI_SYSTEM_SETTINGS)  javax.net.ssl.SSLSocket createSSLSocket(  @Sink(SUSI_SYSTEM_SETTINGS) java.net.InetAddress arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  javax.net.ssl.SSLSocket createSSLSocket(  @Sink(SUSI_SYSTEM_SETTINGS) java.net.InetAddress arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.net.InetAddress arg2);
   @Source(SUSI_SYSTEM_SETTINGS)  java.net.Socket createSocket(  @Sink(SUSI_SYSTEM_SETTINGS) java.net.InetAddress arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.net.InetAddress arg2, @Sink(SUSI_SYSTEM_SETTINGS) int arg3);
   @Source(SUSI_SYSTEM_SETTINGS)  javax.net.ssl.SSLServerSocket createSSLServerSocket(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.net.InetAddress arg2);
}

package com.android.email.widget;

class EmailWidget{
   @Source(SUSI_NO_CATEGORY)  int getViewTypeCount();
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  android.widget.RemoteViews getLoadingView();
   @Source(SUSI_NO_CATEGORY)  android.widget.RemoteViews getViewAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class EmailWidgetLoader{
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor loadInBackground();
}
class EmailWidgetLoader$WidgetCursor{
   @Source(SUSI_EMAIL)  java.lang.String getMailboxName();
   @Source(SUSI_NO_CATEGORY)  int getMessageCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAccountName();
}
class WidgetManager{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.email.widget.WidgetManager getInstance();
   @Source(SUSI_EMAIL)  long loadMailboxIdPref(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) int arg1);
   @Source(SUSI_NO_CATEGORY)  long loadAccountIdPref(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.email.widget.EmailWidget getOrCreateWidget(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}

package com.android.internal.widget;

class AbsActionBarView{
    void setVisibility(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getAnimatedVisibility();
   @Source(SUSI_NO_CATEGORY)  int getContentHeight();
}
class ActionBarContainer{
    void setVisibility(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getTabContainer();
}
class ActionBarContextView{
    void setSplitActionBar(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTitle();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getSubtitle();
}
class ActionBarOverlayLayout{
    void setShowingForActionMode(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class ActionBarView{
    void setDropdownSelectedPosition(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSplitActionBar(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setLogo(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setHomeButtonEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setIcon(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setMenu(  @Sink(SUSI_NO_CATEGORY) android.view.Menu arg0, @Sink(SUSI_NO_CATEGORY) com.android.internal.view.menu.MenuPresenter$Callback arg1);
   @Source(SUSI_NO_CATEGORY)  int getDropdownSelectedPosition();
   @Source(SUSI_NO_CATEGORY)  android.view.View getCustomNavigationView();
   @Source(SUSI_NO_CATEGORY)  android.widget.SpinnerAdapter getDropdownAdapter();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTitle();
   @Source(SUSI_NO_CATEGORY)  int getDisplayOptions();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getSubtitle();
   @Source(SUSI_NO_CATEGORY)  int getNavigationMode();
}
class ActionBarView$ExpandedActionViewMenuPresenter{
   @Source(SUSI_NO_CATEGORY)  int getId();
   @Source(SUSI_NO_CATEGORY)  com.android.internal.view.menu.MenuView getMenuView(  @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg0);
}
class ActionBarView$HomeView{
    void setUp(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setIcon(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
   @Source(SUSI_NO_CATEGORY)  int getStartOffset();
}
class ActionBarView$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class DrawableHolder{
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.BitmapDrawable getDrawable();
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  float getY();
   @Source(SUSI_NO_CATEGORY)  float getX();
   @Source(SUSI_NO_CATEGORY)  float getAlpha();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  float getScaleY();
   @Source(SUSI_NO_CATEGORY)  float getScaleX();
}
class EditableInputConnection{
   @Source(SUSI_NO_CATEGORY)  android.text.Editable getEditable();
   @Source(SUSI_NO_CATEGORY)  android.view.inputmethod.ExtractedText getExtractedText(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.ExtractedTextRequest arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class ILockSettings$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_SYSTEM_SETTINGS)  android.os.IBinder asBinder();
}
class ILockSettings$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  boolean checkPassword(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean havePattern(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean checkPattern(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setBoolean(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setLong(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void removeUser(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setLockPattern(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean havePassword(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setLockPassword(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getBoolean(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String getString(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_SYSTEM_SETTINGS)  long getLong(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) long arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
}
class IRemoteViewsAdapterConnection$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IRemoteViewsAdapterConnection$Stub$Proxy{
    void onServiceConnected(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IRemoteViewsFactory$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IRemoteViewsFactory$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  int getViewTypeCount();
   @Source(SUSI_NO_CATEGORY)  android.widget.RemoteViews getViewAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.widget.RemoteViews getLoadingView();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class LockPatternUtils{
    void saveLockPassword(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) int arg1, @Sink(SUSI_LOG) boolean arg2, @Sink(SUSI_LOG) int arg3);
    void setBiometricWeakLivelinessEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setCurrentUser(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setVisiblePatternEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void saveLockPassword(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setPermanentlyLocked(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setLockScreenDisabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void updateEmergencyCallButtonState(  @Sink(SUSI_NO_CATEGORY) android.widget.Button arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void saveLockPassword(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void setPowerButtonInstantlyLocks(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void writeFallbackAppWidgetId(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setLockPatternEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  int getRequestedMinimumPasswordLength();
   @Source(SUSI_SYSTEM_SETTINGS)  byte[] passwordToHash(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  int getRequestedPasswordMinimumLetters();
   @Source(SUSI_SYSTEM_SETTINGS)  int getRequestedPasswordMinimumNumeric();
   @Source(SUSI_SYSTEM_SETTINGS)  int getRequestedPasswordMinimumSymbols();
   @Source(SUSI_SYSTEM_SETTINGS)  int getRequestedPasswordMinimumUpperCase();
   @Source(SUSI_SYSTEM_SETTINGS)  int getRequestedPasswordMinimumLowerCase();
   @Source(SUSI_SYSTEM_SETTINGS)  int getRequestedPasswordQuality();
   @Source(SUSI_SYSTEM_SETTINGS)  int getActivePasswordQuality();
   @Source(SUSI_SYSTEM_SETTINGS)  int getRequestedPasswordHistoryLength();
   @Source(SUSI_SYSTEM_SETTINGS)  int getRequestedPasswordMinimumNonLetter();
   @Source(SUSI_SYSTEM_SETTINGS)  int getKeyguardStoredPasswordQuality();
   @Source(SUSI_NO_CATEGORY)  int[] getAppWidgets();
   @Source(SUSI_NO_CATEGORY)  boolean getPowerButtonInstantlyLocks();
   @Source(SUSI_NO_CATEGORY)  int getCurrentUser();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNextAlarm();
   @Source(SUSI_NO_CATEGORY)  int getFallbackAppWidgetId();
   @Source(SUSI_NO_CATEGORY)  android.app.admin.DevicePolicyManager getDevicePolicyManager();
   @Source(SUSI_NO_CATEGORY)  long getLockoutAttemptDeadline();
}
class LockPatternView{
    void setPattern(  @Sink(SUSI_NO_CATEGORY) com.android.internal.widget.LockPatternView$DisplayMode arg0, @Sink(SUSI_NO_CATEGORY) java.util.List arg1);
   @Source(SUSI_NO_CATEGORY)  int getSuggestedMinimumWidth();
   @Source(SUSI_NO_CATEGORY)  int getSuggestedMinimumHeight();
}
class LockPatternView$Cell{
   @Source(SUSI_NO_CATEGORY)  int getColumn();
   @Source(SUSI_NO_CATEGORY)  int getRow();
}
class LockPatternView$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getDisplayMode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSerializedPattern();
}
class LockSettingsService{
    void setBoolean(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setLockPassword(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void access$000(  @Sink(SUSI_NO_CATEGORY) com.android.internal.widget.LockSettingsService arg0, @Sink(SUSI_NO_CATEGORY) android.database.sqlite.SQLiteDatabase arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
    void setString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setLong(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setLockPattern(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getString(  java.lang.String arg0, java.lang.String arg1, int arg2);
   @Source(SUSI_SYSTEM_SETTINGS)  long getLong(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) long arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
}
class PasswordEntryKeyboard{
   @Source(SUSI_NO_CATEGORY)  boolean setShifted(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class PasswordEntryKeyboardHelper{
    void setVibratePattern(  @Sink(SUSI_LOG) int arg0);
    void sendDownUpKeyEvents(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class PasswordEntryKeyboardView{
   @Source(SUSI_NO_CATEGORY)  boolean setShifted(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class RotarySelector{
    void setLeftHandleResource(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setRightHandleResource(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ScrollingTabContainerView{
   @Source(SUSI_NO_CATEGORY)  com.android.internal.widget.ScrollingTabContainerView$TabView access$300(  @Sink(SUSI_NO_CATEGORY) com.android.internal.widget.ScrollingTabContainerView arg0, @Sink(SUSI_NO_CATEGORY) android.app.ActionBar$Tab arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
}
class ScrollingTabContainerView$TabAdapter{
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
}
class ScrollingTabContainerView$TabView{
   @Source(SUSI_NO_CATEGORY)  android.app.ActionBar$Tab getTab();
}
class SizeAdaptiveLayout{
   @Source(SUSI_NO_CATEGORY)  android.view.View getModestyPanel();
   @Source(SUSI_NO_CATEGORY)  android.animation.Animator getTransitionAnimation();
}
class SlidingTab{
    void setRightTabResources(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setRightHintText(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setLeftTabResources(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setVisibility(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setLeftHintText(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class SlidingTab$Slider{
    void startAnimation(  @Sink(SUSI_NO_CATEGORY) android.view.animation.Animation arg0, @Sink(SUSI_NO_CATEGORY) android.view.animation.Animation arg1);
    void setHintText(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setIcon(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setTarget(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setBarBackgroundResource(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setTabBackgroundResource(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getTabWidth();
   @Source(SUSI_NO_CATEGORY)  int getTabHeight();
}
class TransportControlView$IRemoteControlDisplayWeak{
    void setCurrentClientId(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.app.PendingIntent arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void setTransportControlFlags(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setMetadata(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void setPlaybackState(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
    void setAllMetadata(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg2);
    void setArtwork(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg1);
}
class TransportControlView$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class WaveView{
   @Source(SUSI_NO_CATEGORY)  int getSuggestedMinimumWidth();
   @Source(SUSI_NO_CATEGORY)  int getSuggestedMinimumHeight();
}

package com.android.exchange;

class AbstractSyncService{
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.lang.Object getSynchronizer();
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle validate(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0, @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.provider.HostAuth arg1, @Sink(SUSI_NO_CATEGORY) android.content.Context arg2);
}
class Eas{
   @Source(SUSI_NO_CATEGORY)  java.lang.Double getProtocolVersionDouble(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class EasAccountService{
   @Source(SUSI_NO_CATEGORY)  com.android.exchange.EasResponse sendPing(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean tryProvision(  @Sink(SUSI_NO_CATEGORY) com.android.exchange.EasSyncService arg0);
}
class EasOutboxService{
   @Source(SUSI_NO_CATEGORY)  int sendMessage(  @Sink(SUSI_NO_CATEGORY) java.io.File arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  boolean tryProvision(  @Sink(SUSI_NO_CATEGORY) com.android.exchange.EasSyncService arg0);
    void sendMessage(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.provider.EmailContent$Message arg2);
}
class EasOutboxService$SendMailEntity{
    void writeTo(  @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg0);
   @Source(SUSI_NETWORK_INFORMATION)  long getContentLength();
}
class EasOutboxService$SendMailParser{
   @Source(SUSI_NETWORK_INFORMATION)  int getStatus();
}
class EasResponse{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.Header getHeader(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getStatus();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInputStream();
   @Source(SUSI_NO_CATEGORY)  int getLength();
}
class EasSyncService{
    void sync(  @Sink(SUSI_SYNCHRONIZATION_DATA) com.android.exchange.adapter.AbstractSyncAdapter arg0);
    void setupProtocolVersion(  @Sink(SUSI_LOG) com.android.exchange.EasSyncService arg0, @Sink(SUSI_LOG) org.apache.http.Header arg1);
    void messageMoveRequest(  @Sink(SUSI_NO_CATEGORY) com.android.exchange.MessageMoveRequest arg0);
   @Source(SUSI_NO_CATEGORY)  boolean tryProvision(  @Sink(SUSI_NO_CATEGORY) com.android.exchange.EasSyncService arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.exchange.EasSyncService setupServiceForAccount(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.provider.Account arg1);
    void sendMeetingResponse(  @Sink(SUSI_NO_CATEGORY) com.android.exchange.MeetingResponseRequest arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.exchange.EasResponse sendPing(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.exchange.EasResponse sendHttpClientPost(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.exchange.EasResponse sendHttpClientPost(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.HttpEntity arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setConnectionParameters(  @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.provider.HostAuth arg0);
    void setHeaders(  @Sink(SUSI_NO_CATEGORY) org.apache.http.client.methods.HttpRequestBase arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.exchange.EasSyncService getServiceForMailbox(  android.content.Context arg0, com.android.emailcommon.provider.Mailbox arg1);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.exchange.provider.GalResult searchGal(  android.content.Context arg0, long arg1, java.lang.String arg2, int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getTargetCollectionClassFromCursor(  android.database.Cursor arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Bundle tryAutodiscover(  java.lang.String arg0, java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.exchange.EasResponse sendHttpClientOptions();
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle validateAccount(  @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.provider.HostAuth arg0, @Sink(SUSI_NO_CATEGORY) android.content.Context arg1);
   @Source(SUSI_NO_CATEGORY)  boolean getValidateRedirect(  @Sink(SUSI_NO_CATEGORY) com.android.exchange.EasResponse arg0, @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.provider.HostAuth arg1);
}
class ExchangeService{
    void startManualSync(  @Sink(SUSI_SYNCHRONIZATION_DATA) long arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) int arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) com.android.exchange.Request arg2);
    void sendMessageRequest(  @Sink(SUSI_NO_CATEGORY) com.android.exchange.Request arg0);
    void setWatchdogAlarm(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
    void serviceRequest(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void done(  @Sink(SUSI_NO_CATEGORY) com.android.exchange.AbstractSyncService arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getStatusType(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getStatusChangeCount(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEasAccountSelector();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.exchange.ExchangeService$AccountList access$600(  android.content.Context arg0, com.android.exchange.ExchangeService$AccountList arg1);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.emailcommon.utility.EmailClientConnectionManager getClientConnectionManager(  boolean arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.Context getContext();
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.provider.Account getAccountById(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDeviceId(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class ExchangeService$1{
    void sendMessageStatus(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
}
class ExchangeService$2{
    void loadAttachment(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setLogging(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void sendMeetingResponse(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class ExchangeService$AccountList{
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.provider.Account getById(  @Sink(SUSI_NO_CATEGORY) long arg0);
}
class ExchangeService$AccountObserver{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAccountKeyWhere();
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.lang.String getSyncableEasMailboxWhere();
}

package libcore.internal;

class StringPool{
   @Source(SUSI_NO_CATEGORY)  java.lang.String get(  @Sink(SUSI_NO_CATEGORY) char[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}

package com.android.browser.search;

class DefaultSearchEngine{
    void startSearch(  @Sink(SUSI_LOG) android.content.Context arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) android.os.Bundle arg2, @Sink(SUSI_LOG) java.lang.String arg3);
   @Source(SUSI_BROWSER_INFORMATION)  android.database.Cursor getSuggestions(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg1);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.CharSequence getLabel();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getName();
}
class OpenSearchSearchEngine{
    void startSearch(  @Sink(SUSI_LOG) android.content.Context arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) android.os.Bundle arg2, @Sink(SUSI_LOG) java.lang.String arg3);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getName();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.CharSequence getLabel();
   @Source(SUSI_BROWSER_INFORMATION)  android.database.Cursor getSuggestions(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg1);
}
class OpenSearchSearchEngine$SuggestionsCursor{
   @Source(SUSI_BROWSER_INFORMATION)  float getFloat(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getInt(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String[] getColumnNames();
   @Source(SUSI_BROWSER_INFORMATION)  short getShort(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  double getDouble(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getCount();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getString(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  long getLong(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
}
class SearchEngineInfo{
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getSearchUriForQuery(  @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg0);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getName();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getLabel();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getSuggestUriForQuery(  @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg0);
}
class SearchEngines{
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.search.SearchEngine getDefaultSearchEngine(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0);
   @Source(SUSI_BROWSER_INFORMATION)  java.util.List getSearchEngineInfos(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0);
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.search.SearchEngineInfo getSearchEngineInfo(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg1);
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.search.SearchEngine get(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg1);
}

package com.android.videoeditor.service;

class ApiService{
    void onIntentProcessed(  @Sink(SUSI_FILE) android.content.Intent arg0, @Sink(SUSI_FILE) android.media.videoeditor.VideoEditor arg1, @Sink(SUSI_FILE) java.lang.Object arg2, @Sink(SUSI_FILE) java.lang.Object arg3, @Sink(SUSI_FILE) java.lang.Exception arg4, @Sink(SUSI_FILE) boolean arg5);
    void insertAlphaTransition(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) long arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) int arg6, @Sink(SUSI_NO_CATEGORY) int arg7, @Sink(SUSI_NO_CATEGORY) boolean arg8);
    void insertCrossfadeTransition(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) long arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
    void insertSlidingTransition(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) long arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) int arg6);
    void removeAudioTrack(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void setMediaItemBoundaries(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) long arg3, @Sink(SUSI_NO_CATEGORY) long arg4);
    void removeEffect(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
    void extractMediaItemAudioWaveform(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void getTransitionThumbnails(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void createVideoEditor(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5);
    void setMediaItemMute(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
    void saveVideoEditor(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void removeOverlay(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
    void setAudioTrackDuck(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
    void setAudioTrackBoundaries(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) long arg3, @Sink(SUSI_NO_CATEGORY) long arg4);
    void exportVideoEditor(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
    void setOverlayStartTime(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) long arg4);
    void setAudioTrackVolume(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void loadMediaItem(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
    void insertFadeBlackTransition(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) long arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
    void moveMediaItem(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4);
    void deleteProject(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void extractAudioTrackAudioWaveform(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void setAspectRatio(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setTransitionDuration(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) long arg3);
    void addMediaItemVideoUri(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) java.lang.String arg6);
    void cancelExportVideoEditor(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void setMediaItemDuration(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) long arg3);
    void removeTransition(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void setAudioTrackMute(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
    void setOverlayUserAttributes(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg4);
    void removeMediaItem(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
    void addMediaItemImageUri(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) long arg6, @Sink(SUSI_NO_CATEGORY) java.lang.String arg7);
    void setMediaItemVolume(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setOverlayDuration(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) long arg4);
    void getMediaItemThumbnails(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) long arg5, @Sink(SUSI_NO_CATEGORY) long arg6, @Sink(SUSI_NO_CATEGORY) int arg7, @Sink(SUSI_NO_CATEGORY) int arg8, @Sink(SUSI_NO_CATEGORY) int[] arg9);
    void addAudioTrack(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4);
    void setMediaItemRenderingMode(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void addEffectColor(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) long arg4, @Sink(SUSI_NO_CATEGORY) long arg5, @Sink(SUSI_NO_CATEGORY) int arg6, @Sink(SUSI_NO_CATEGORY) int arg7);
    void releaseVideoEditor(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void addEffectKenBurns(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) long arg4, @Sink(SUSI_NO_CATEGORY) long arg5, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg6, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg7);
    void addOverlay(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg4, @Sink(SUSI_NO_CATEGORY) long arg5, @Sink(SUSI_NO_CATEGORY) long arg6);
    void setAudioTrackLoop(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
    void applyTheme(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void loadVideoEditor(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class ApiService$8{
    void onProgress(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ApiService$9{
    void onProgress(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ApiService$IntentProcessor{
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator getIntentQueueIterator();
}
class ApiService$ServiceMediaProcessingProgressListener{
    void onProgress(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class IntentPool{
   @Source(SUSI_NO_CATEGORY)  android.content.Intent get();
   @Source(SUSI_NO_CATEGORY)  android.content.Intent get(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Class arg1);
}
class MovieAudioTrack{
   @Source(SUSI_NO_CATEGORY)  long getBoundaryEndTime();
   @Source(SUSI_NO_CATEGORY)  long getStartTime();
   @Source(SUSI_NO_CATEGORY)  int getAudioSamplingFrequency();
   @Source(SUSI_NO_CATEGORY)  long getTimelineDuration();
   @Source(SUSI_NO_CATEGORY)  int getAudioBitrate();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFilename();
   @Source(SUSI_NO_CATEGORY)  long getDuration();
   @Source(SUSI_NO_CATEGORY)  int getAudioType();
   @Source(SUSI_NO_CATEGORY)  int getVolume();
   @Source(SUSI_NO_CATEGORY)  long getAppStartTime();
   @Source(SUSI_NO_CATEGORY)  int getRawResourceId();
   @Source(SUSI_NO_CATEGORY)  int getAudioChannels();
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.WaveformData getWaveformData();
   @Source(SUSI_NO_CATEGORY)  int getAppVolume();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getId();
   @Source(SUSI_NO_CATEGORY)  long getBoundaryBeginTime();
}
class MovieEffect{
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getStartRect();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getId();
   @Source(SUSI_NO_CATEGORY)  long getDuration();
   @Source(SUSI_NO_CATEGORY)  int getType();
   @Source(SUSI_NO_CATEGORY)  long getStartTime();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getEndRect();
}
class MovieMediaItem{
   @Source(SUSI_NO_CATEGORY)  int getRenderingMode();
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.service.MovieTransition getEndTransition();
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.WaveformData getWaveformData();
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.service.MovieOverlay getOverlay();
   @Source(SUSI_NO_CATEGORY)  long getAppTimelineDuration();
   @Source(SUSI_NO_CATEGORY)  long getAppBoundaryBeginTime();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getId();
   @Source(SUSI_NO_CATEGORY)  int getVolume();
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  int getAppRenderingMode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFilename();
   @Source(SUSI_NO_CATEGORY)  int getAppVolume();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.service.MovieTransition getBeginTransition();
   @Source(SUSI_NO_CATEGORY)  long getAppBoundaryEndTime();
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.service.MovieEffect getEffect();
   @Source(SUSI_NO_CATEGORY)  long getBoundaryBeginTime();
   @Source(SUSI_NO_CATEGORY)  long getBoundaryEndTime();
   @Source(SUSI_NO_CATEGORY)  int getAspectRatio();
   @Source(SUSI_NO_CATEGORY)  long getDuration();
}
class MovieOverlay{
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle buildUserAttributes(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  int getType();
   @Source(SUSI_NO_CATEGORY)  long getDuration();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getId();
   @Source(SUSI_NO_CATEGORY)  long getAppStartTime();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSubtitle();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTitle();
   @Source(SUSI_NO_CATEGORY)  long getStartTime();
   @Source(SUSI_NO_CATEGORY)  java.lang.Class getAttributeType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSubtitle(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTitle(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
   @Source(SUSI_NO_CATEGORY)  long getAppDuration();
}
class MovieTheme{
   @Source(SUSI_NO_CATEGORY)  int getNameResId();
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.service.MovieTransition getEndTransition();
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.service.MovieAudioTrack getAudioTrack();
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.service.MovieTheme getTheme(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getPreviewImageResId();
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.service.MovieOverlay getOverlay();
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.service.MovieTransition getBeginTransition();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getId();
   @Source(SUSI_NO_CATEGORY)  int getPreviewMovieResId();
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.service.MovieTransition getMidTransition();
}
class MovieTransition{
   @Source(SUSI_NO_CATEGORY)  int getBehavior();
   @Source(SUSI_NO_CATEGORY)  int getType();
   @Source(SUSI_NO_CATEGORY)  int getAlphaMaskResId();
   @Source(SUSI_NO_CATEGORY)  int getSlidingDirection();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlphaMaskFilename();
   @Source(SUSI_NO_CATEGORY)  java.lang.Class getTypeClass();
   @Source(SUSI_NO_CATEGORY)  long getAppDuration();
   @Source(SUSI_NO_CATEGORY)  long getDuration();
   @Source(SUSI_NO_CATEGORY)  int getAlphaMaskBlendingPercent();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getId();
}
class VideoEditorProject{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getExportedMovieUri();
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.service.MovieOverlay getOverlay(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  long getPlayheadPos();
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.service.MovieMediaItem getInsertAfterMediaItem(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  int getZoomLevel();
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.service.MovieMediaItem getLastMediaItem();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPath();
   @Source(SUSI_NO_CATEGORY)  java.util.List getAudioTracks();
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.service.MovieEffect getEffect(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.service.MovieMediaItem getFirstMediaItem();
   @Source(SUSI_NO_CATEGORY)  java.util.List getDownloads();
   @Source(SUSI_NO_CATEGORY)  int getAspectRatio();
   @Source(SUSI_NO_CATEGORY)  java.util.List getMediaItems();
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.service.MovieMediaItem getNextMediaItem(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTheme();
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.service.MovieMediaItem getMediaItem(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  long getLastSaved();
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getUniqueAspectRatiosList();
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.service.MovieAudioTrack getAudioTrack(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.service.MovieMediaItem getNextMediaItem(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.service.MovieTransition getTransition(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.service.MovieMediaItem getPreviousMediaItem(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  long getMediaItemBeginTime(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLastMediaItemId();
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.service.MovieMediaItem getPreviousMediaItem(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.service.MovieMediaItem getPreviousMediaItem(  @Sink(SUSI_NO_CATEGORY) com.android.videoeditor.service.MovieTransition arg0);
   @Source(SUSI_NO_CATEGORY)  long getProjectDuration();
   @Source(SUSI_NO_CATEGORY)  int getMediaItemCount();
}
class VideoEditorProject$Download{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMimeType();
   @Source(SUSI_NO_CATEGORY)  long getTime();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMediaUri();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFilename();
}

package java.util.concurrent.atomic;

class AtomicBoolean{
    void set(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class AtomicInteger{
    void lazySet(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int get();
   @Source(SUSI_NO_CATEGORY)  int getAndDecrement();
   @Source(SUSI_NO_CATEGORY)  int getAndAdd(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getAndIncrement();
   @Source(SUSI_NO_CATEGORY)  int getAndSet(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class AtomicLong{
    void lazySet(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  long getAndAdd(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  long getAndDecrement();
   @Source(SUSI_NO_CATEGORY)  long get();
   @Source(SUSI_NO_CATEGORY)  long getAndSet(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  long getAndIncrement();
}
class AtomicReference{
    void lazySet(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getAndSet(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class AtomicReferenceArray{
    void lazySet(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getAndSet(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
}

package android.widget;

class AbsListView{
    void setItemChecked(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setFriction(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setFilterText(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void sendAccessibilityEvent(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setOverScrollMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setFastScrollAlwaysVisible(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  boolean performAccessibilityAction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void setVerticalScrollbarPosition(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean onTouchEvent(  @Sink(SUSI_NO_CATEGORY) android.view.MotionEvent arg0);
   @Source(SUSI_NO_CATEGORY)  boolean performItemClick(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
    void setVisibleRangeHint(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void dispatchDraw(  @Sink(SUSI_NO_CATEGORY) android.graphics.Canvas arg0);
    void setSelector(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setRemoteViewsAdapter(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
    void setRemoteViewsOnClickHandler(  @Sink(SUSI_NO_CATEGORY) android.widget.RemoteViews$OnClickHandler arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setFrame(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  int findClosestMotionRow(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.util.SparseBooleanArray getCheckedItemPositions();
   @Source(SUSI_NO_CATEGORY)  android.view.ContextMenu$ContextMenuInfo getContextMenuInfo();
   @Source(SUSI_NO_CATEGORY)  int getCacheColorHint();
   @Source(SUSI_NO_CATEGORY)  int getChoiceMode();
   @Source(SUSI_NO_CATEGORY)  android.view.ViewGroup$LayoutParams generateDefaultLayoutParams();
   @Source(SUSI_NO_CATEGORY)  boolean performLongPress(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getSelector();
   @Source(SUSI_NO_CATEGORY)  android.os.Parcelable onSaveInstanceState();
   @Source(SUSI_NO_CATEGORY)  int getLeftPaddingOffset();
   @Source(SUSI_NO_CATEGORY)  int getListPaddingTop();
   @Source(SUSI_NO_CATEGORY)  int getHeaderViewsCount();
   @Source(SUSI_NO_CATEGORY)  int getTopPaddingOffset();
   @Source(SUSI_NO_CATEGORY)  int getListPaddingRight();
   @Source(SUSI_NO_CATEGORY)  int getVerticalScrollbarWidth();
   @Source(SUSI_NO_CATEGORY)  int getTranscriptMode();
   @Source(SUSI_NO_CATEGORY)  android.view.View obtainView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean[] arg1);
   @Source(SUSI_NO_CATEGORY)  int getCheckedItemCount();
   @Source(SUSI_NO_CATEGORY)  int getListPaddingBottom();
   @Source(SUSI_NO_CATEGORY)  long[] getCheckedItemIds();
   @Source(SUSI_NO_CATEGORY)  int getCheckedItemPosition();
   @Source(SUSI_NO_CATEGORY)  int getListPaddingLeft();
   @Source(SUSI_NO_CATEGORY)  int getDistance(  @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getFooterViewsCount();
   @Source(SUSI_NO_CATEGORY)  int getRightPaddingOffset();
   @Source(SUSI_NO_CATEGORY)  float getTopFadingEdgeStrength();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTextFilter();
   @Source(SUSI_NO_CATEGORY)  android.view.View getSelectedView();
   @Source(SUSI_NO_CATEGORY)  float getBottomFadingEdgeStrength();
   @Source(SUSI_NO_CATEGORY)  int getSolidColor();
   @Source(SUSI_NO_CATEGORY)  int getBottomPaddingOffset();
   @Source(SUSI_NO_CATEGORY)  android.view.ContextMenu$ContextMenuInfo createContextMenuInfo(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
}
class AbsListView$FlingRunnable{
    void startScroll(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
}
class AbsListView$ListItemAccessibilityDelegate{
   @Source(SUSI_NO_CATEGORY)  boolean performAccessibilityAction(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
}
class AbsListView$PositionScroller{
    void startWithOffset(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void start(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class AbsListView$RecycleBin{
    void addScrapView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setCacheColorHint(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getActiveView(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getScrapView(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getTransientStateView(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class AbsListView$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class AbsSeekBar{
    void setMax(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean performAccessibilityAction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
   @Source(SUSI_NO_CATEGORY)  int getKeyProgressIncrement();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getThumb();
   @Source(SUSI_NO_CATEGORY)  int getThumbOffset();
}
class AbsSpinner{
    void setSelection(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSelectionInt(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setSelection(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  int getChildHeight(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  android.view.View getSelectedView();
   @Source(SUSI_NO_CATEGORY)  android.view.ViewGroup$LayoutParams generateDefaultLayoutParams();
   @Source(SUSI_NO_CATEGORY)  android.os.Parcelable onSaveInstanceState();
   @Source(SUSI_NO_CATEGORY)  android.widget.Adapter getAdapter();
   @Source(SUSI_NO_CATEGORY)  int getChildWidth(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
}
class AbsSpinner$RecycleBin{
    void put(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.View get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class AbsSpinner$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class AccessibilityIterators$LineTextSegmentIterator{
   @Source(SUSI_NO_CATEGORY)  android.widget.AccessibilityIterators$LineTextSegmentIterator getInstance();
   @Source(SUSI_NO_CATEGORY)  int getLineEdgeIndex(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class AccessibilityIterators$PageTextSegmentIterator{
   @Source(SUSI_NO_CATEGORY)  android.widget.AccessibilityIterators$PageTextSegmentIterator getInstance();
}
class ActivityChooserModel{
    void setDefaultActivity(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getIntent();
   @Source(SUSI_NO_CATEGORY)  int getHistorySize();
   @Source(SUSI_NO_CATEGORY)  int getHistoryMaxSize();
   @Source(SUSI_NO_CATEGORY)  int getActivityCount();
   @Source(SUSI_NO_CATEGORY)  android.widget.ActivityChooserModel get(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent chooseActivity(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ResolveInfo getActivity(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getActivityIndex(  @Sink(SUSI_NO_CATEGORY) android.content.pm.ResolveInfo arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ResolveInfo getDefaultActivity();
}
class ActivityChooserModel$DefaultSorter{
    void sort(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) java.util.List arg1, @Sink(SUSI_NO_CATEGORY) java.util.List arg2);
}
class ActivityChooserView{
    void setActivityChooserModel(  @Sink(SUSI_NO_CATEGORY) android.widget.ActivityChooserModel arg0);
    void setExpandActivityOverflowButtonContentDescription(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setExpandActivityOverflowButtonDrawable(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
   @Source(SUSI_NO_CATEGORY)  android.widget.ActivityChooserModel getDataModel();
}
class ActivityChooserView$ActivityChooserViewAdapter{
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ResolveInfo getDefaultActivity();
   @Source(SUSI_NO_CATEGORY)  android.widget.ActivityChooserModel getDataModel();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  int getItemViewType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getActivityCount();
   @Source(SUSI_NO_CATEGORY)  int getMaxActivityCount();
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  int getHistorySize();
   @Source(SUSI_NO_CATEGORY)  int getViewTypeCount();
}
class AdapterView<T>{
   @Source(SUSI_NO_CATEGORY)  int getSelectedItemPosition();
   @Source(SUSI_NO_CATEGORY)  long getItemIdAtPosition(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getItemAtPosition(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getSelectedItem();
   @Source(SUSI_NO_CATEGORY)  int getFirstVisiblePosition();
   @Source(SUSI_NO_CATEGORY)  android.widget.AdapterView$OnItemLongClickListener getOnItemLongClickListener();
   @Source(SUSI_NO_CATEGORY)  android.widget.AdapterView$OnItemClickListener getOnItemClickListener();
   @Source(SUSI_NO_CATEGORY)  android.view.View getEmptyView();
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  long getSelectedItemId();
   @Source(SUSI_NO_CATEGORY)  android.widget.AdapterView$OnItemSelectedListener getOnItemSelectedListener();
   @Source(SUSI_NO_CATEGORY)  int getLastVisiblePosition();
   @Source(SUSI_NO_CATEGORY)  int getPositionForView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
}
class AdapterViewAnimator{
    void setInAnimation(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setOutAnimation(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setSelection(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setRemoteViewsOnClickHandler(  @Sink(SUSI_NO_CATEGORY) android.widget.RemoteViews$OnClickHandler arg0);
    void setRemoteViewsAdapter(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
    void setDisplayedChild(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getDisplayedChild();
   @Source(SUSI_NO_CATEGORY)  android.view.View getViewAtRelativeIndex(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.animation.ObjectAnimator getInAnimation();
   @Source(SUSI_NO_CATEGORY)  int getNumActiveViews();
   @Source(SUSI_NO_CATEGORY)  android.os.Parcelable onSaveInstanceState();
   @Source(SUSI_NO_CATEGORY)  android.animation.ObjectAnimator getDefaultOutAnimation();
   @Source(SUSI_NO_CATEGORY)  int getBaseline();
   @Source(SUSI_NO_CATEGORY)  android.animation.ObjectAnimator getDefaultInAnimation();
   @Source(SUSI_NO_CATEGORY)  int getWindowSize();
   @Source(SUSI_NO_CATEGORY)  android.widget.FrameLayout getFrameForChild();
   @Source(SUSI_NO_CATEGORY)  android.animation.ObjectAnimator getOutAnimation();
   @Source(SUSI_NO_CATEGORY)  android.view.View getCurrentView();
   @Source(SUSI_NO_CATEGORY)  android.view.View getSelectedView();
   @Source(SUSI_NO_CATEGORY)  android.widget.Adapter getAdapter();
   @Source(SUSI_NO_CATEGORY)  android.view.ViewGroup$LayoutParams createOrReuseLayoutParams(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
}
class AdapterViewAnimator$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class ArrayAdapter{
   @Source(SUSI_NO_CATEGORY)  android.widget.Filter getFilter();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
   @Source(SUSI_NO_CATEGORY)  int getPosition(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getDropDownView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class AutoCompleteTextView{
    void setDropDownAlwaysVisible(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setDropDownHorizontalOffset(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void onCommitCompletion(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.CompletionInfo arg0);
    void setListSelection(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDropDownVerticalOffset(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setFrame(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setForceIgnoreOutsideTouch(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setDropDownHeight(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDropDownBackgroundDrawable(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
    void setDropDownAnimationStyle(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDropDownWidth(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDropDownBackgroundResource(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.widget.AdapterView$OnItemClickListener getOnItemClickListener();
   @Source(SUSI_NO_CATEGORY)  int getDropDownVerticalOffset();
   @Source(SUSI_NO_CATEGORY)  android.widget.AutoCompleteTextView$Validator getValidator();
   @Source(SUSI_NO_CATEGORY)  int getListSelection();
   @Source(SUSI_NO_CATEGORY)  android.widget.ListAdapter getAdapter();
   @Source(SUSI_NO_CATEGORY)  int getDropDownAnchor();
   @Source(SUSI_NO_CATEGORY)  int getThreshold();
   @Source(SUSI_NO_CATEGORY)  int getDropDownHorizontalOffset();
   @Source(SUSI_NO_CATEGORY)  int getDropDownWidth();
   @Source(SUSI_NO_CATEGORY)  android.widget.Filter getFilter();
   @Source(SUSI_NO_CATEGORY)  android.widget.AdapterView$OnItemSelectedListener getItemSelectedListener();
   @Source(SUSI_NO_CATEGORY)  int getDropDownAnimationStyle();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getCompletionHint();
   @Source(SUSI_NO_CATEGORY)  android.widget.AdapterView$OnItemSelectedListener getOnItemSelectedListener();
   @Source(SUSI_NO_CATEGORY)  android.widget.AdapterView$OnItemClickListener getItemClickListener();
   @Source(SUSI_NO_CATEGORY)  int getDropDownHeight();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getDropDownBackground();
}
class BaseAdapter{
   @Source(SUSI_NO_CATEGORY)  int getItemViewType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getDropDownView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  int getViewTypeCount();
}
class BaseExpandableListAdapter{
   @Source(SUSI_NO_CATEGORY)  int getGroupType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getChildTypeCount();
   @Source(SUSI_NO_CATEGORY)  int getGroupTypeCount();
   @Source(SUSI_NO_CATEGORY)  int getChildType(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  long getCombinedGroupId(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  long getCombinedChildId(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
}
class CalendarView{
    void setDate(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void setSelectedDateVerticalBar(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDate(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setMinDate(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setMaxDate(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getDateTextAppearance();
   @Source(SUSI_CALENDAR_INFORMATION)  int getWeekDayTextAppearance();
   @Source(SUSI_CALENDAR_INFORMATION)  int getSelectedWeekBackgroundColor();
   @Source(SUSI_CALENDAR_INFORMATION)  int getUnfocusedMonthDateColor();
   @Source(SUSI_CALENDAR_INFORMATION)  int getFocusedMonthDateColor();
   @Source(SUSI_CALENDAR_INFORMATION)  long getMaxDate();
   @Source(SUSI_CALENDAR_INFORMATION)  android.graphics.drawable.Drawable getSelectedDateVerticalBar();
   @Source(SUSI_CALENDAR_INFORMATION)  int getFirstDayOfWeek();
   @Source(SUSI_CALENDAR_INFORMATION)  long getDate();
   @Source(SUSI_CALENDAR_INFORMATION)  int getWeekNumberColor();
   @Source(SUSI_CALENDAR_INFORMATION)  int getWeekSeparatorLineColor();
   @Source(SUSI_CALENDAR_INFORMATION)  long getMinDate();
   @Source(SUSI_CALENDAR_INFORMATION)  int getShownWeekCount();
   @Source(SUSI_CALENDAR_INFORMATION)  boolean getShowWeekNumber();
}
class CalendarView$WeekView{
   @Source(SUSI_CALENDAR_INFORMATION)  java.util.Calendar getFirstDay();
   @Source(SUSI_CALENDAR_INFORMATION)  int getMonthOfLastWeekDay();
   @Source(SUSI_CALENDAR_INFORMATION)  int getMonthOfFirstWeekDay();
}
class CalendarView$WeeksAdapter{
    void setSelectedDay(  @Sink(SUSI_NO_CATEGORY) java.util.Calendar arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  android.view.View getView(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.view.View arg1, @Sink(SUSI_CALENDAR_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  long getItemId(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.Object getItem(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getCount();
   @Source(SUSI_CALENDAR_INFORMATION)  java.util.Calendar getSelectedDay();
}
class CheckedTextView{
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getCheckMarkDrawable();
}
class Chronometer{
   @Source(SUSI_NO_CATEGORY)  long getBase();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFormat();
   @Source(SUSI_NO_CATEGORY)  android.widget.Chronometer$OnChronometerTickListener getOnChronometerTickListener();
}
class CompoundButton{
   @Source(SUSI_NO_CATEGORY)  int[] onCreateDrawableState(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Parcelable onSaveInstanceState();
   @Source(SUSI_NO_CATEGORY)  int getHorizontalOffsetForDrawables();
   @Source(SUSI_NO_CATEGORY)  int getCompoundPaddingLeft();
   @Source(SUSI_NO_CATEGORY)  int getCompoundPaddingRight();
}
class CompoundButton$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class CursorAdapter{
   @Source(SUSI_NO_CATEGORY)  android.view.View newDropDownView(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor runQueryOnBackgroundThread(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg0);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor swapCursor(  @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor getCursor();
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.widget.Filter getFilter();
   @Source(SUSI_NO_CATEGORY)  android.view.View getDropDownView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  android.widget.FilterQueryProvider getFilterQueryProvider();
}
class CursorTreeAdapter{
    void setChildrenCursor(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg1);
    void notifyDataSetChanged(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.widget.CursorTreeAdapter$MyCursorHelper getChildrenCursorHelper(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor getGroup(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor getCursor();
   @Source(SUSI_NO_CATEGORY)  int getGroupCount();
   @Source(SUSI_NO_CATEGORY)  long getGroupId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor runQueryOnBackgroundThread(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg0);
   @Source(SUSI_NO_CATEGORY)  int getChildrenCount(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.widget.FilterQueryProvider getFilterQueryProvider();
   @Source(SUSI_NO_CATEGORY)  long getChildId(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor getChild(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.View getChildView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) android.view.View arg3, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg4);
   @Source(SUSI_NO_CATEGORY)  android.view.View getGroupView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) android.view.View arg2, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg3);
   @Source(SUSI_NO_CATEGORY)  android.widget.Filter getFilter();
}
class CursorTreeAdapter$MyCursorHelper{
   @Source(SUSI_NO_CATEGORY)  long getId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor getCursor();
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor moveTo(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class DatePicker{
    void setMaxDate(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setCalendarViewShown(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setMinDate(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setSpinnersShown(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int getDayOfMonth();
   @Source(SUSI_NO_CATEGORY)  long getMaxDate();
   @Source(SUSI_NO_CATEGORY)  boolean getSpinnersShown();
   @Source(SUSI_NO_CATEGORY)  boolean getCalendarViewShown();
   @Source(SUSI_NO_CATEGORY)  int getMonth();
   @Source(SUSI_NO_CATEGORY)  android.widget.CalendarView getCalendarView();
   @Source(SUSI_NO_CATEGORY)  long getMinDate();
   @Source(SUSI_NO_CATEGORY)  int getYear();
}
class DatePicker$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class DateTimeView{
    void setTime(  @Sink(SUSI_NO_CATEGORY) long arg0);
}
class EdgeEffect{
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getBounds(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class EditText{
    void setSelection(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setEllipsize(  @Sink(SUSI_NO_CATEGORY) android.text.TextUtils$TruncateAt arg0);
    void setSelection(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getDefaultEditable();
   @Source(SUSI_NO_CATEGORY)  android.text.method.MovementMethod getDefaultMovementMethod();
   @Source(SUSI_NO_CATEGORY)  android.text.Editable getText();
}
class Editor{
    void sendOnTextChanged(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.widget.Editor$SelectionModifierCursorController getSelectionController();
   @Source(SUSI_NO_CATEGORY)  android.widget.Editor$InsertionPointCursorController getInsertionController();
   @Source(SUSI_NO_CATEGORY)  android.text.method.WordIterator getWordIterator();
}
class Editor$ActionPopupWindow{
   @Source(SUSI_NO_CATEGORY)  int getVerticalLocalPosition(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getTextOffset();
}
class Editor$EasyEditPopupWindow{
   @Source(SUSI_NO_CATEGORY)  int getTextOffset();
   @Source(SUSI_NO_CATEGORY)  int getVerticalLocalPosition(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Editor$ErrorPopup{
    void update(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4);
}
class Editor$InsertionHandleView{
   @Source(SUSI_NO_CATEGORY)  int getHotspotX(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class Editor$PinnedPopupWindow{
    void updatePosition(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
}
class Editor$PositionListener{
   @Source(SUSI_NO_CATEGORY)  int getPositionX();
   @Source(SUSI_NO_CATEGORY)  int getPositionY();
}
class Editor$SelectionEndHandleView{
   @Source(SUSI_NO_CATEGORY)  int getHotspotX(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class Editor$SelectionModifierCursorController{
   @Source(SUSI_NO_CATEGORY)  int getMinTouchOffset();
   @Source(SUSI_NO_CATEGORY)  int getMaxTouchOffset();
}
class Editor$SelectionStartHandleView{
   @Source(SUSI_NO_CATEGORY)  int getHotspotX(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  android.widget.Editor$ActionPopupWindow getActionPopupWindow();
}
class Editor$SuggestionsPopupWindow{
   @Source(SUSI_NO_CATEGORY)  int getVerticalLocalPosition(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getTextOffset();
}
class Editor$SuggestionsPopupWindow$SuggestionAdapter{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getCount();
}
class ExpandableListConnector{
   @Source(SUSI_NO_CATEGORY)  android.widget.ExpandableListConnector$PositionMetadata getUnflattenedPos(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.widget.Filter getFilter();
   @Source(SUSI_NO_CATEGORY)  int getViewTypeCount();
   @Source(SUSI_NO_CATEGORY)  int getItemViewType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getExpandedGroupMetadataList();
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  android.widget.ExpandableListAdapter getAdapter();
   @Source(SUSI_NO_CATEGORY)  android.widget.ExpandableListConnector$PositionMetadata getFlattenedPos(  @Sink(SUSI_NO_CATEGORY) android.widget.ExpandableListPosition arg0);
}
class ExpandableListPosition{
   @Source(SUSI_NO_CATEGORY)  long getPackedPosition();
}
class ExpandableListView{
    void setSelectedGroup(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean performItemClick(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
   @Source(SUSI_NO_CATEGORY)  boolean setSelectedChild(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void dispatchDraw(  @Sink(SUSI_NO_CATEGORY) android.graphics.Canvas arg0);
   @Source(SUSI_NO_CATEGORY)  long getSelectedPosition();
   @Source(SUSI_NO_CATEGORY)  long getSelectedId();
   @Source(SUSI_NO_CATEGORY)  android.widget.Adapter getAdapter();
   @Source(SUSI_NO_CATEGORY)  long getPackedPositionForChild(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  long getExpandableListPosition(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getPackedPositionForGroup(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.widget.ExpandableListAdapter getExpandableListAdapter();
   @Source(SUSI_NO_CATEGORY)  int getFlatListPosition(  @Sink(SUSI_NO_CATEGORY) long arg0);
}
class ExpandableListView$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class FastScroller{
   @Source(SUSI_NO_CATEGORY)  android.widget.SectionIndexer getSectionIndexer();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] getSections();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  int getState();
}
class FastScroller$ScrollFade{
   @Source(SUSI_NO_CATEGORY)  int getAlpha();
}
class FrameLayout{
   @Source(SUSI_FILE_INFORMATION)  boolean getConsiderGoneChildrenWhenMeasuring();
   @Source(SUSI_NO_CATEGORY)  boolean getMeasureAllChildren();
   @Source(SUSI_NO_CATEGORY)  int getForegroundGravity();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getForeground();
}
class Gallery{
   @Source(SUSI_NO_CATEGORY)  boolean performAccessibilityAction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void setSelectedPositionInt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_IMAGE)  android.view.ContextMenu$ContextMenuInfo getContextMenuInfo();
   @Source(SUSI_IMAGE)  int getChildDrawingOrder(  int arg0, int arg1);
   @Source(SUSI_IMAGE)  int getLimitedMotionScrollAmount(  boolean arg0, int arg1);
   @Source(SUSI_IMAGE)  int getChildHeight(  android.view.View arg0);
}
class GridLayout{
    void setRowOrderPreserved(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setRowCount(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setColumnOrderPreserved(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setColumnCount(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getRowCount();
   @Source(SUSI_NO_CATEGORY)  int getMargin1(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  int getMeasurementIncludingMargin(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  android.widget.GridLayout$Alignment getAlignment(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  android.widget.GridLayout$Alignment getAlignment(  @Sink(SUSI_NO_CATEGORY) android.widget.GridLayout$Alignment arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  android.widget.GridLayout$LayoutParams getLayoutParams(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  int getOrientation();
   @Source(SUSI_NO_CATEGORY)  int getAlignmentMode();
   @Source(SUSI_NO_CATEGORY)  boolean getUseDefaultMargins();
   @Source(SUSI_NO_CATEGORY)  int getColumnCount();
}
class GridLayout$3{
   @Source(SUSI_NO_CATEGORY)  int getGravityOffset(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class GridLayout$4{
   @Source(SUSI_NO_CATEGORY)  int getAlignmentValue(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getGravityOffset(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class GridLayout$5{
   @Source(SUSI_NO_CATEGORY)  int getGravityOffset(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class GridLayout$6{
   @Source(SUSI_NO_CATEGORY)  android.widget.GridLayout$Bounds getBounds();
}
class GridLayout$Alignment{
   @Source(SUSI_NO_CATEGORY)  int getSizeInCell(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  android.widget.GridLayout$Bounds getBounds();
}
class GridLayout$Axis{
   @Source(SUSI_NO_CATEGORY)  android.widget.GridLayout$PackedMap getGroupBounds();
   @Source(SUSI_NO_CATEGORY)  android.widget.GridLayout$Arc[] getArcs();
   @Source(SUSI_NO_CATEGORY)  int[] getLocations();
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  int[] getTrailingMargins();
   @Source(SUSI_NO_CATEGORY)  int[] getLeadingMargins();
}
class GridLayout$Bounds{
   @Source(SUSI_NO_CATEGORY)  int getOffset(  @Sink(SUSI_NO_CATEGORY) android.widget.GridLayout arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.widget.GridLayout$Alignment arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4);
}
class GridLayout$LayoutParams{
    void setBaseAttributes(  @Sink(SUSI_NO_CATEGORY) android.content.res.TypedArray arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setGravity(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class GridLayout$PackedMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class GridLayout$Spec{
   @Source(SUSI_NO_CATEGORY)  int getFlexibility();
}
class GridView{
    void setSelectionInt(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setRemoteViewsAdapter(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
   @Source(SUSI_NO_CATEGORY)  int getRequestedHorizontalSpacing();
   @Source(SUSI_NO_CATEGORY)  int getColumnWidth();
   @Source(SUSI_NO_CATEGORY)  int getStretchMode();
   @Source(SUSI_NO_CATEGORY)  int getVerticalSpacing();
   @Source(SUSI_NO_CATEGORY)  android.widget.Adapter getAdapter();
   @Source(SUSI_NO_CATEGORY)  int getRequestedColumnWidth();
   @Source(SUSI_NO_CATEGORY)  int getNumColumns();
   @Source(SUSI_NO_CATEGORY)  int getGravity();
   @Source(SUSI_NO_CATEGORY)  int getHorizontalSpacing();
}
class HeaderViewListAdapter{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getItemViewType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  android.widget.ListAdapter getWrappedAdapter();
   @Source(SUSI_NO_CATEGORY)  android.widget.Filter getFilter();
   @Source(SUSI_NO_CATEGORY)  int getFootersCount();
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  int getHeadersCount();
   @Source(SUSI_NO_CATEGORY)  int getViewTypeCount();
}
class HorizontalScrollView{
    void setOverScrollMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean performAccessibilityAction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void draw(  @Sink(SUSI_NO_CATEGORY) android.graphics.Canvas arg0);
   @Source(SUSI_NO_CATEGORY)  float getLeftFadingEdgeStrength();
   @Source(SUSI_NO_CATEGORY)  int getMaxScrollAmount();
   @Source(SUSI_NO_CATEGORY)  float getRightFadingEdgeStrength();
}
class ImageSwitcher{
    void setImageDrawable(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
    void setImageURI(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
    void setImageResource(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ImageView{
    void setImageAlpha(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setVisibility(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setColorFilter(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSelected(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setColorFilter(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.PorterDuff$Mode arg1);
    void setImageMatrix(  @Sink(SUSI_NO_CATEGORY) android.graphics.Matrix arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setFrame(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setImageBitmap(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0);
    void setImageDrawable(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
   @Source(SUSI_NO_CATEGORY)  android.widget.ImageView$ScaleType getScaleType();
   @Source(SUSI_NO_CATEGORY)  int getImageAlpha();
   @Source(SUSI_NO_CATEGORY)  int getBaseline();
   @Source(SUSI_NO_CATEGORY)  int getMaxWidth();
   @Source(SUSI_NO_CATEGORY)  boolean getCropToPadding();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Matrix getImageMatrix();
   @Source(SUSI_NO_CATEGORY)  android.graphics.ColorFilter getColorFilter();
   @Source(SUSI_NO_CATEGORY)  boolean getBaselineAlignBottom();
   @Source(SUSI_NO_CATEGORY)  int getMaxHeight();
   @Source(SUSI_NO_CATEGORY)  boolean getAdjustViewBounds();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getDrawable();
}
class LinearLayout{
    void setHorizontalGravity(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setVerticalGravity(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setWeightSum(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  int getShowDividers();
   @Source(SUSI_NO_CATEGORY)  int getOrientation();
   @Source(SUSI_NO_CATEGORY)  int getVirtualChildCount();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getDividerDrawable();
   @Source(SUSI_NO_CATEGORY)  android.view.View getVirtualChildAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getBaseline();
   @Source(SUSI_NO_CATEGORY)  int getBaselineAlignedChildIndex();
   @Source(SUSI_NO_CATEGORY)  int getDividerPadding();
   @Source(SUSI_NO_CATEGORY)  float getWeightSum();
   @Source(SUSI_NO_CATEGORY)  int getLocationOffset(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  int getNextLocationOffset(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  int getChildrenSkipCount(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getDividerWidth();
}
class ListPopupWindow{
    void setModal(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setBackgroundDrawable(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
    void setInputMethodMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setAnimationStyle(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSelection(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSoftInputMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setContentWidth(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getPromptPosition();
   @Source(SUSI_NO_CATEGORY)  android.widget.ListView getListView();
   @Source(SUSI_NO_CATEGORY)  int getSoftInputMode();
   @Source(SUSI_NO_CATEGORY)  int getAnimationStyle();
   @Source(SUSI_NO_CATEGORY)  android.view.View getAnchorView();
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getSelectedItem();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  int getVerticalOffset();
   @Source(SUSI_NO_CATEGORY)  android.view.View getSelectedView();
   @Source(SUSI_NO_CATEGORY)  int getHorizontalOffset();
   @Source(SUSI_NO_CATEGORY)  int getInputMethodMode();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getBackground();
   @Source(SUSI_NO_CATEGORY)  int getSelectedItemPosition();
   @Source(SUSI_NO_CATEGORY)  long getSelectedItemId();
}
class ListView{
    void setCacheColorHint(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSelectionInt(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSelection(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setRemoteViewsAdapter(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
   @Source(SUSI_NO_CATEGORY)  android.widget.Adapter getAdapter();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getOverscrollFooter();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getDivider();
   @Source(SUSI_NO_CATEGORY)  int getMaxScrollAmount();
   @Source(SUSI_NO_CATEGORY)  long[] getCheckItemIds();
   @Source(SUSI_NO_CATEGORY)  boolean getItemsCanFocus();
   @Source(SUSI_NO_CATEGORY)  int getHeaderViewsCount();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getOverscrollHeader();
   @Source(SUSI_NO_CATEGORY)  int getDividerHeight();
   @Source(SUSI_NO_CATEGORY)  int getFooterViewsCount();
}
class ListView$ArrowScrollFocusResult{
   @Source(SUSI_NO_CATEGORY)  int getAmountToScroll();
   @Source(SUSI_NO_CATEGORY)  int getSelectedPosition();
}
class MediaController{
    void setEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class NumberPicker{
    void setValue(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int getMinValue();
   @Source(SUSI_NO_CATEGORY)  float getBottomFadingEdgeStrength();
   @Source(SUSI_NO_CATEGORY)  android.widget.NumberPicker$Formatter getTwoDigitFormatter();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getDisplayedValues();
   @Source(SUSI_NO_CATEGORY)  float getTopFadingEdgeStrength();
   @Source(SUSI_NO_CATEGORY)  int getMaxValue();
   @Source(SUSI_NO_CATEGORY)  int getSolidColor();
   @Source(SUSI_NO_CATEGORY)  boolean getWrapSelectorWheel();
   @Source(SUSI_NO_CATEGORY)  android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider();
   @Source(SUSI_NO_CATEGORY)  int getValue();
}
class NumberPicker$AccessibilityNodeProviderImpl{
    void sendAccessibilityEventForVirtualView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean performAction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
   @Source(SUSI_NO_CATEGORY)  android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class NumberPicker$InputTextFilter{
   @Source(SUSI_NO_CATEGORY)  char[] getAcceptedChars();
   @Source(SUSI_NO_CATEGORY)  int getInputType();
}
class OverScroller{
    void setFinalX(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setFinalY(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void startScroll(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
    void notifyVerticalEdgeReached(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setFriction(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void notifyHorizontalEdgeReached(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void startScroll(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  int getCurrY();
   @Source(SUSI_NO_CATEGORY)  int getCurrX();
   @Source(SUSI_NO_CATEGORY)  float getCurrVelocity();
   @Source(SUSI_NO_CATEGORY)  int getStartX();
   @Source(SUSI_NO_CATEGORY)  int getStartY();
   @Source(SUSI_NO_CATEGORY)  int getDuration();
   @Source(SUSI_NO_CATEGORY)  int getFinalX();
   @Source(SUSI_NO_CATEGORY)  int getFinalY();
}
class OverScroller$SplineOverScroller{
    void notifyEdgeReached(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class PopupMenu{
   @Source(SUSI_NO_CATEGORY)  android.view.MenuInflater getMenuInflater();
   @Source(SUSI_NO_CATEGORY)  android.view.Menu getMenu();
}
class PopupWindow{
    void setSplitTouchEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void update(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
    void update(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void update(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4);
    void update(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void update(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setTouchModal(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int getSoftInputMode();
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  int getMaxAvailableHeight(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.View getContentView();
   @Source(SUSI_NO_CATEGORY)  int getMaxAvailableHeight(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getBackground();
   @Source(SUSI_NO_CATEGORY)  int getMaxAvailableHeight(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  int getWindowLayoutType();
   @Source(SUSI_NO_CATEGORY)  int getAnimationStyle();
   @Source(SUSI_NO_CATEGORY)  int getInputMethodMode();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
}
class PopupWindow$PopupViewContainer{
   @Source(SUSI_NO_CATEGORY)  boolean dispatchKeyEvent(  @Sink(SUSI_NO_CATEGORY) android.view.KeyEvent arg0);
    void sendAccessibilityEvent(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ProgressBar{
    void setVisibility(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setInterpolator(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setProgress(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.shapes.Shape getDrawableShape();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getProgressDrawable();
   @Source(SUSI_NO_CATEGORY)  int getProgress();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getIndeterminateDrawable();
   @Source(SUSI_NO_CATEGORY)  int getMax();
   @Source(SUSI_NO_CATEGORY)  int getSecondaryProgress();
   @Source(SUSI_NO_CATEGORY)  android.view.animation.Interpolator getInterpolator();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getCurrentDrawable();
}
class ProgressBar$RefreshData{
    void setNextPoolable(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  android.widget.ProgressBar$RefreshData getNextPoolable();
}
class ProgressBar$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class QuickContactBadge{
    void setMode(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class RadioGroup{
   @Source(SUSI_NO_CATEGORY)  int getCheckedRadioButtonId();
}
class RadioGroup$LayoutParams{
    void setBaseAttributes(  @Sink(SUSI_NO_CATEGORY) android.content.res.TypedArray arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class RelativeLayout{
    void setVerticalGravity(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setHorizontalGravity(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getGravity();
   @Source(SUSI_NO_CATEGORY)  int getBaseline();
}
class RelativeLayout$DependencyGraph{
    void add(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
}
class RelativeLayout$DependencyGraph$Node{
    void setNextPoolable(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  android.widget.RelativeLayout$DependencyGraph$Node getNextPoolable();
}
class RelativeLayout$LayoutParams{
   @Source(SUSI_NO_CATEGORY)  int[] getRules(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int[] getRules();
}
class RemoteViews{
    void setLabelFor(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setDouble(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) double arg2);
    void setRemoteAdapter(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2);
    void setOnClickPendingIntent(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.app.PendingIntent arg1);
    void setRemoteAdapter(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1);
    void setImageViewResource(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setFloat(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) float arg2);
    void setBoolean(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void setContentDescription(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1);
    void setProgressBar(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
    void setRelativeScrollPosition(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setTextViewText(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1);
    void setScrollPosition(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setChronometer(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
    void setByte(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) byte arg2);
    void setShort(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) short arg2);
    void setTextColor(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setTextViewCompoundDrawablesRelative(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
    void setImageViewBitmap(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg1);
    void setChar(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) char arg2);
    void setLong(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
    void setInt(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setUri(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg2);
    void setImageViewUri(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1);
    void setDrawableParameters(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.graphics.PorterDuff$Mode arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
    void setTextViewTextSize(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) float arg2);
    void setBitmap(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg2);
    void setCharSequence(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg2);
    void reapply(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.widget.RemoteViews$OnClickHandler arg2);
    void setString(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void setViewVisibility(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setBundle(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
    void setIntent(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2);
    void setDisplayedChild(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setViewPadding(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
    void setTextViewCompoundDrawables(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
    void setPendingIntentTemplate(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.app.PendingIntent arg1);
    void setOnClickFillInIntent(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1);
    void setEmptyView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.View apply(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg1, @Sink(SUSI_NO_CATEGORY) android.widget.RemoteViews$OnClickHandler arg2);
   @Source(SUSI_NO_CATEGORY)  int getLayoutId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPackage();
}
class RemoteViews$Action{
    void setBitmapCache(  @Sink(SUSI_NO_CATEGORY) android.widget.RemoteViews$BitmapCache arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUniqueKey();
}
class RemoteViews$BitmapCache{
    void writeBitmapsToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getBitmapForId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getBitmapId(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0);
}
class RemoteViews$BitmapReflectionAction{
    void setBitmapCache(  @Sink(SUSI_NO_CATEGORY) android.widget.RemoteViews$BitmapCache arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getActionName();
}
class RemoteViews$MemoryUsageCounter{
   @Source(SUSI_NO_CATEGORY)  int getMemoryUsage();
}
class RemoteViews$ReflectionAction{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getActionName();
}
class RemoteViews$ReflectionActionWithoutParams{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getActionName();
}
class RemoteViews$SetDrawableParameters{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getActionName();
}
class RemoteViews$SetEmptyView{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getActionName();
}
class RemoteViews$SetOnClickFillInIntent{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getActionName();
}
class RemoteViews$SetOnClickPendingIntent{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getActionName();
}
class RemoteViews$SetPendingIntentTemplate{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getActionName();
}
class RemoteViews$SetRemoteViewsAdapterIntent{
    void apply(  @Sink(SUSI_LOG) android.view.View arg0, @Sink(SUSI_LOG) android.view.ViewGroup arg1, @Sink(SUSI_LOG) android.widget.RemoteViews$OnClickHandler arg2);
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getActionName();
}
class RemoteViews$TextViewDrawableAction{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getActionName();
}
class RemoteViews$TextViewSizeAction{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getActionName();
}
class RemoteViews$ViewGroupAction{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setBitmapCache(  @Sink(SUSI_NO_CATEGORY) android.widget.RemoteViews$BitmapCache arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getActionName();
}
class RemoteViews$ViewPaddingAction{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getActionName();
}
class RemoteViewsAdapter{
   @Source(SUSI_NO_CATEGORY)  int getViewTypeCount();
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getRemoteViewsServiceIntent();
   @Source(SUSI_NO_CATEGORY)  int getItemViewType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class RemoteViewsAdapter$FixedSizeRemoteViewsCache{
    void insert(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.widget.RemoteViews arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) java.util.ArrayList arg3);
   @Source(SUSI_NO_CATEGORY)  int[] getNextIndexToLoad();
   @Source(SUSI_NO_CATEGORY)  android.widget.RemoteViews getRemoteViewsAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.widget.RemoteViewsAdapter$RemoteViewsMetaData getMetaData();
   @Source(SUSI_NO_CATEGORY)  android.widget.RemoteViewsAdapter$RemoteViewsMetaData getTemporaryMetaData();
   @Source(SUSI_NO_CATEGORY)  android.widget.RemoteViewsAdapter$RemoteViewsIndexMetaData getMetaDataAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class RemoteViewsAdapter$RemoteViewsAdapterServiceConnection{
    void bind(  @Sink(SUSI_LOG) android.content.Context arg0, @Sink(SUSI_LOG) int arg1, @Sink(SUSI_LOG) android.content.Intent arg2);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.widget.IRemoteViewsFactory getRemoteViewsFactory();
}
class RemoteViewsAdapter$RemoteViewsFrameLayoutRefSet{
    void add(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout arg1);
}
class RemoteViewsAdapter$RemoteViewsMetaData{
    void set(  @Sink(SUSI_NO_CATEGORY) android.widget.RemoteViewsAdapter$RemoteViewsMetaData arg0);
   @Source(SUSI_NO_CATEGORY)  int getMappedViewType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout access$1900(  @Sink(SUSI_NO_CATEGORY) android.widget.RemoteViewsAdapter$RemoteViewsMetaData arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.view.View arg2, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg3, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg4, @Sink(SUSI_NO_CATEGORY) android.view.LayoutInflater arg5, @Sink(SUSI_NO_CATEGORY) android.widget.RemoteViews$OnClickHandler arg6);
}
class RemoteViewsService{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder onBind(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object access$000();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.HashMap access$100();
}
class RemoteViewsService$RemoteViewsFactoryAdapter{
   @Source(SUSI_NETWORK_INFORMATION)  int getCount();
   @Source(SUSI_NETWORK_INFORMATION)  android.widget.RemoteViews getViewAt(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getViewTypeCount();
   @Source(SUSI_NETWORK_INFORMATION)  android.widget.RemoteViews getLoadingView();
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ResourceCursorAdapter{
   @Source(SUSI_NO_CATEGORY)  android.view.View newView(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  android.view.View newDropDownView(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
}
class ScrollBarDrawable{
    void setColorFilter(  @Sink(SUSI_NO_CATEGORY) android.graphics.ColorFilter arg0);
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getAlwaysDrawVerticalTrack();
   @Source(SUSI_NO_CATEGORY)  int getOpacity();
   @Source(SUSI_NO_CATEGORY)  boolean getAlwaysDrawHorizontalTrack();
   @Source(SUSI_NO_CATEGORY)  int getSize(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class ScrollView{
    void setOverScrollMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void draw(  @Sink(SUSI_NO_CATEGORY) android.graphics.Canvas arg0);
   @Source(SUSI_NO_CATEGORY)  boolean performAccessibilityAction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
   @Source(SUSI_NO_CATEGORY)  float getTopFadingEdgeStrength();
   @Source(SUSI_NO_CATEGORY)  int getMaxScrollAmount();
   @Source(SUSI_NO_CATEGORY)  float getBottomFadingEdgeStrength();
}
class Scroller{
    void startScroll(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  float getCurrVelocity();
   @Source(SUSI_NO_CATEGORY)  int getDuration();
   @Source(SUSI_NO_CATEGORY)  int getCurrX();
   @Source(SUSI_NO_CATEGORY)  int getCurrY();
   @Source(SUSI_NO_CATEGORY)  int getStartY();
   @Source(SUSI_NO_CATEGORY)  int getStartX();
   @Source(SUSI_NO_CATEGORY)  int getFinalY();
   @Source(SUSI_NO_CATEGORY)  int getFinalX();
}
class SearchView{
    void setIconifiedByDefault(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setImeOptions(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setInputType(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setIconified(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getQuery();
   @Source(SUSI_NO_CATEGORY)  android.widget.CursorAdapter getSuggestionsAdapter();
   @Source(SUSI_NO_CATEGORY)  int getMaxWidth();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getQueryHint();
   @Source(SUSI_NO_CATEGORY)  int getInputType();
   @Source(SUSI_NO_CATEGORY)  int getImeOptions();
}
class ShareActionProvider{
    void setShareIntent(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
}
class SimpleAdapter{
    void setViewImage(  @Sink(SUSI_NO_CATEGORY) android.widget.ImageView arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setViewImage(  @Sink(SUSI_NO_CATEGORY) android.widget.ImageView arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setViewText(  @Sink(SUSI_NO_CATEGORY) android.widget.TextView arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.widget.SimpleAdapter$ViewBinder getViewBinder();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  android.widget.Filter getFilter();
   @Source(SUSI_NO_CATEGORY)  android.view.View getDropDownView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getCount();
}
class SimpleCursorAdapter{
    void setViewText(  @Sink(SUSI_NO_CATEGORY) android.widget.TextView arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setViewImage(  @Sink(SUSI_NO_CATEGORY) android.widget.ImageView arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.widget.SimpleCursorAdapter$ViewBinder getViewBinder();
   @Source(SUSI_NO_CATEGORY)  android.widget.SimpleCursorAdapter$CursorToStringConverter getCursorToStringConverter();
   @Source(SUSI_NO_CATEGORY)  int getStringConversionColumn();
}
class Spinner{
    void setPopupBackgroundDrawable(  @Sink(SUSI_LOG) android.graphics.drawable.Drawable arg0);
    void setEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setPromptId(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDropDownHorizontalOffset(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDropDownVerticalOffset(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setPopupBackgroundResource(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getBaseline();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getPopupBackground();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getPrompt();
   @Source(SUSI_NO_CATEGORY)  int getDropDownVerticalOffset();
   @Source(SUSI_NO_CATEGORY)  int getDropDownHorizontalOffset();
   @Source(SUSI_NO_CATEGORY)  int getDropDownWidth();
   @Source(SUSI_NO_CATEGORY)  int getGravity();
}
class Spinner$DialogPopup{
    void setHorizontalOffset(  @Sink(SUSI_LOG) int arg0);
    void setBackgroundDrawable(  @Sink(SUSI_LOG) android.graphics.drawable.Drawable arg0);
    void setVerticalOffset(  @Sink(SUSI_LOG) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getBackground();
   @Source(SUSI_NO_CATEGORY)  int getHorizontalOffset();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getHintText();
   @Source(SUSI_NO_CATEGORY)  int getVerticalOffset();
}
class Spinner$DropDownAdapter{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  android.view.View getDropDownView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  int getViewTypeCount();
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  int getItemViewType(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Spinner$DropdownPopup{
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getHintText();
}
class SuggestionsAdapter{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  int getQueryRefinement();
}
class Switch{
    void setSwitchTypeface(  @Sink(SUSI_NO_CATEGORY) android.graphics.Typeface arg0);
    void setThumbResource(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSwitchTypeface(  @Sink(SUSI_NO_CATEGORY) android.graphics.Typeface arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setSwitchTextAppearance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setChecked(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setTrackResource(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getSwitchPadding();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getTrackDrawable();
   @Source(SUSI_NO_CATEGORY)  int getThumbTextPadding();
   @Source(SUSI_NO_CATEGORY)  int getCompoundPaddingLeft();
   @Source(SUSI_NO_CATEGORY)  int getSwitchMinWidth();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTextOn();
   @Source(SUSI_NO_CATEGORY)  int getCompoundPaddingRight();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getThumbDrawable();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTextOff();
}
class TabHost{
    void setCurrentTabByTag(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void sendAccessibilityEvent(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getCurrentView();
   @Source(SUSI_NO_CATEGORY)  android.view.View getCurrentTabView();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCurrentTabTag();
   @Source(SUSI_NO_CATEGORY)  android.widget.FrameLayout getTabContentView();
   @Source(SUSI_NO_CATEGORY)  int getCurrentTab();
   @Source(SUSI_NO_CATEGORY)  android.widget.TabWidget getTabWidget();
}
class TabHost$FactoryContentStrategy{
   @Source(SUSI_NO_CATEGORY)  android.view.View getContentView();
}
class TabHost$IntentContentStrategy{
   @Source(SUSI_NO_CATEGORY)  android.view.View getContentView();
}
class TabHost$TabSpec{
   @Source(SUSI_NO_CATEGORY)  android.widget.TabHost$TabSpec setIndicator(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  android.widget.TabHost$TabSpec setContent(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
   @Source(SUSI_NO_CATEGORY)  android.widget.TabHost$TabSpec setContent(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTag();
}
class TabHost$ViewIdContentStrategy{
   @Source(SUSI_NO_CATEGORY)  android.view.View getContentView();
}
class TabWidget{
    void setDividerDrawable(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void sendAccessibilityEventUnchecked(  @Sink(SUSI_NO_CATEGORY) android.view.accessibility.AccessibilityEvent arg0);
    void setRightStripDrawable(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setLeftStripDrawable(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDividerDrawable(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
    void setEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int getTabCount();
   @Source(SUSI_NO_CATEGORY)  int getChildDrawingOrder(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.View getChildTabViewAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class TableLayout{
    void setColumnStretchable(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setColumnShrinkable(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setColumnCollapsed(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class TableLayout$LayoutParams{
    void setBaseAttributes(  @Sink(SUSI_NO_CATEGORY) android.content.res.TypedArray arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class TableRow{
   @Source(SUSI_NO_CATEGORY)  int[] getColumnsWidths(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getNextLocationOffset(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  int getLocationOffset(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  int getVirtualChildCount();
   @Source(SUSI_NO_CATEGORY)  int getChildrenSkipCount(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.View getVirtualChildAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class TableRow$LayoutParams{
    void setBaseAttributes(  @Sink(SUSI_NO_CATEGORY) android.content.res.TypedArray arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class TextView{
    void setInputType(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setTextSize(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setCursorPosition_internal(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setAllCaps(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setHintTextColor(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setCompoundDrawablesWithIntrinsicBounds(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg1, @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg2, @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg3);
    void setTextScaleX(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setTextLocale(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
    void setTextColor(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void sendAccessibilityEvent(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setCompoundDrawablesWithIntrinsicBounds(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setText(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setPadding(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setSpan_internal(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setSingleLine(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setAccessibilityCursorPosition(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSelected(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setPaddingRelative(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setPaintFlags(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setCompoundDrawablesRelativeWithIntrinsicBounds(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setTextSize(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setTextAppearance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setCompoundDrawablesRelativeWithIntrinsicBounds(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg1, @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg2, @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg3);
    void setInputExtras(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setLinkTextColor(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setTypeface(  @Sink(SUSI_NO_CATEGORY) android.graphics.Typeface arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setText(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.widget.TextView$BufferType arg1);
    void setHint(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setText(  @Sink(SUSI_NO_CATEGORY) char[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setTypeface(  @Sink(SUSI_NO_CATEGORY) android.graphics.Typeface arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setFrame(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setExtractedText(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.ExtractedText arg0);
    void setEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_FILE_INFORMATION)  android.text.TextDirectionHeuristic getTextDirectionHeuristic();
   @Source(SUSI_NO_CATEGORY)  int getTopPaddingOffset();
   @Source(SUSI_NO_CATEGORY)  int getGravity();
   @Source(SUSI_NO_CATEGORY)  int getTotalPaddingLeft();
   @Source(SUSI_NO_CATEGORY)  android.text.InputFilter[] getFilters();
   @Source(SUSI_NO_CATEGORY)  int getTotalPaddingBottom();
   @Source(SUSI_NO_CATEGORY)  android.text.TextUtils$TruncateAt getEllipsize();
   @Source(SUSI_NO_CATEGORY)  float getLineSpacingMultiplier();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getError();
   @Source(SUSI_NO_CATEGORY)  boolean getHorizontallyScrolling();
   @Source(SUSI_NO_CATEGORY)  android.text.TextPaint getPaint();
   @Source(SUSI_NO_CATEGORY)  boolean getDefaultEditable();
   @Source(SUSI_NO_CATEGORY)  int getAccessibilityCursorPosition();
   @Source(SUSI_NO_CATEGORY)  int getMinHeight();
   @Source(SUSI_NO_CATEGORY)  float getShadowRadius();
   @Source(SUSI_NO_CATEGORY)  int getRightPaddingOffset();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getText();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPrivateImeOptions();
   @Source(SUSI_NO_CATEGORY)  int getMinLines();
   @Source(SUSI_NO_CATEGORY)  android.text.method.TransformationMethod getTransformationMethod();
   @Source(SUSI_NO_CATEGORY)  float getLineSpacingExtra();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getHint();
   @Source(SUSI_NO_CATEGORY)  int getLeftPaddingOffset();
   @Source(SUSI_NO_CATEGORY)  android.text.method.WordIterator getWordIterator();
   @Source(SUSI_NO_CATEGORY)  int getExtendedPaddingTop();
   @Source(SUSI_NO_CATEGORY)  int getFadeHeight(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTextForAccessibility();
   @Source(SUSI_NO_CATEGORY)  int getBaseline();
   @Source(SUSI_NO_CATEGORY)  int getCurrentHintTextColor();
   @Source(SUSI_NO_CATEGORY)  android.text.method.MovementMethod getMovementMethod();
   @Source(SUSI_NO_CATEGORY)  float getLeftFadingEdgeStrength();
   @Source(SUSI_NO_CATEGORY)  int getTotalPaddingStart();
   @Source(SUSI_NO_CATEGORY)  android.text.style.URLSpan[] getUrls();
   @Source(SUSI_NO_CATEGORY)  int getLineCount();
   @Source(SUSI_NO_CATEGORY)  int getInputType();
   @Source(SUSI_NO_CATEGORY)  int getHighlightColor();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTransformedText(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getCompoundPaddingStart();
   @Source(SUSI_NO_CATEGORY)  android.text.method.KeyListener getKeyListener();
   @Source(SUSI_NO_CATEGORY)  android.text.Layout getHintLayout();
   @Source(SUSI_NO_CATEGORY)  boolean getFreezesText();
   @Source(SUSI_NO_CATEGORY)  int getCurrentTextColor();
   @Source(SUSI_NO_CATEGORY)  android.view.AccessibilityIterators$TextSegmentIterator getIteratorForGranularity(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getHorizontalOffsetForDrawables();
   @Source(SUSI_NO_CATEGORY)  int getLineHeight();
   @Source(SUSI_NO_CATEGORY)  android.content.res.ColorStateList getTextColors(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.content.res.TypedArray arg1);
   @Source(SUSI_NO_CATEGORY)  int getMaxLines();
   @Source(SUSI_NO_CATEGORY)  int getTotalPaddingRight();
   @Source(SUSI_NO_CATEGORY)  boolean getIncludeFontPadding();
   @Source(SUSI_NO_CATEGORY)  int getMaxHeight();
   @Source(SUSI_NO_CATEGORY)  int getPaintFlags();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable[] getCompoundDrawablesRelative();
   @Source(SUSI_NO_CATEGORY)  int getBottomPaddingOffset();
   @Source(SUSI_NO_CATEGORY)  int getImeActionId();
   @Source(SUSI_NO_CATEGORY)  android.view.ActionMode$Callback getCustomSelectionActionModeCallback();
   @Source(SUSI_NO_CATEGORY)  int getAutoLinkMask();
   @Source(SUSI_NO_CATEGORY)  float getRightFadingEdgeStrength();
   @Source(SUSI_NO_CATEGORY)  android.text.Layout getLayout();
   @Source(SUSI_NO_CATEGORY)  int getSelectionEnd();
   @Source(SUSI_NO_CATEGORY)  int getMinWidth();
   @Source(SUSI_NO_CATEGORY)  int getSelectionStart();
   @Source(SUSI_NO_CATEGORY)  int getCompoundPaddingEnd();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable[] getCompoundDrawables();
   @Source(SUSI_NO_CATEGORY)  int getImeOptions();
   @Source(SUSI_NO_CATEGORY)  android.text.method.MovementMethod getDefaultMovementMethod();
   @Source(SUSI_NO_CATEGORY)  int getTotalPaddingTop();
   @Source(SUSI_NO_CATEGORY)  int getCompoundPaddingBottom();
   @Source(SUSI_NO_CATEGORY)  int getTotalPaddingEnd();
   @Source(SUSI_NO_CATEGORY)  float getTextScaleX();
   @Source(SUSI_NO_CATEGORY)  int getMinEms();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Typeface getTypeface();
   @Source(SUSI_NO_CATEGORY)  int getLineAtCoordinate(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  int getMaxWidth();
   @Source(SUSI_NO_CATEGORY)  int getCompoundPaddingTop();
   @Source(SUSI_NO_CATEGORY)  int getCompoundDrawablePadding();
   @Source(SUSI_NO_CATEGORY)  java.util.Locale getTextLocale();
   @Source(SUSI_NO_CATEGORY)  int getFadeTop(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.text.Editable getEditableText();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getIterableTextForAccessibility();
   @Source(SUSI_NO_CATEGORY)  int getMaxEms();
   @Source(SUSI_NO_CATEGORY)  android.content.res.ColorStateList getTextColors();
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle getInputExtras(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int getLineBounds(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.res.ColorStateList getHintTextColors();
   @Source(SUSI_NO_CATEGORY)  int getCompoundPaddingRight();
   @Source(SUSI_NO_CATEGORY)  int getVerticalOffset(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int getMarqueeRepeatLimit();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getImeActionLabel();
   @Source(SUSI_NO_CATEGORY)  float getShadowDx();
   @Source(SUSI_NO_CATEGORY)  float getShadowDy();
   @Source(SUSI_NO_CATEGORY)  int getExtendedPaddingBottom();
   @Source(SUSI_NO_CATEGORY)  java.util.Locale getTextServicesLocale();
   @Source(SUSI_NO_CATEGORY)  float getTextSize();
   @Source(SUSI_NO_CATEGORY)  int getCompoundPaddingLeft();
   @Source(SUSI_NO_CATEGORY)  android.content.res.ColorStateList getLinkTextColors();
   @Source(SUSI_NO_CATEGORY)  int getShadowColor();
}
class TextView$CharWrapper{
   @Source(SUSI_NO_CATEGORY)  float getTextRunAdvances(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) float[] arg5, @Sink(SUSI_NO_CATEGORY) int arg6, @Sink(SUSI_NO_CATEGORY) android.graphics.Paint arg7, @Sink(SUSI_NO_CATEGORY) int arg8);
   @Source(SUSI_NO_CATEGORY)  float getTextRunAdvances(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) float[] arg5, @Sink(SUSI_NO_CATEGORY) int arg6, @Sink(SUSI_NO_CATEGORY) android.graphics.Paint arg7);
}
class TextView$Drawables{
    void resolveWithLayoutDirection(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class TextView$Marquee{
   @Source(SUSI_NO_CATEGORY)  float getScroll();
   @Source(SUSI_NO_CATEGORY)  float getGhostOffset();
   @Source(SUSI_NO_CATEGORY)  float getMaxFadeScroll();
}
class TextView$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class TimePicker{
    void setIs24HourView(  @Sink(SUSI_NO_CATEGORY) java.lang.Boolean arg0);
    void setCurrentMinute(  @Sink(SUSI_NO_CATEGORY) java.lang.Integer arg0);
    void setCurrentHour(  @Sink(SUSI_NO_CATEGORY) java.lang.Integer arg0);
   @Source(SUSI_NO_CATEGORY)  int getBaseline();
   @Source(SUSI_NO_CATEGORY)  java.lang.Integer getCurrentMinute();
   @Source(SUSI_NO_CATEGORY)  java.lang.Integer getCurrentHour();
}
class TimePicker$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getMinute();
   @Source(SUSI_NO_CATEGORY)  int getHour();
}
class Toast{
    void setText(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getVerticalMargin();
   @Source(SUSI_NO_CATEGORY)  android.view.View getView();
   @Source(SUSI_NO_CATEGORY)  float getHorizontalMargin();
   @Source(SUSI_NO_CATEGORY)  int getGravity();
   @Source(SUSI_NO_CATEGORY)  int getYOffset();
   @Source(SUSI_NO_CATEGORY)  int getXOffset();
   @Source(SUSI_NO_CATEGORY)  int getDuration();
}
class ToggleButton{
    void setChecked(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setBackgroundDrawable(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTextOff();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTextOn();
}
class TwoLineListItem{
   @Source(SUSI_NO_CATEGORY)  android.widget.TextView getText1();
   @Source(SUSI_NO_CATEGORY)  android.widget.TextView getText2();
}
class VideoView{
    void setVideoPath(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getBufferPercentage();
   @Source(SUSI_NO_CATEGORY)  int getCurrentPosition();
   @Source(SUSI_NO_CATEGORY)  int getDuration();
}
class ViewAnimator{
    void setInAnimation(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setOutAnimation(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getBaseline();
   @Source(SUSI_NO_CATEGORY)  android.view.animation.Animation getOutAnimation();
   @Source(SUSI_NO_CATEGORY)  boolean getAnimateFirstView();
   @Source(SUSI_NO_CATEGORY)  int getDisplayedChild();
   @Source(SUSI_NO_CATEGORY)  android.view.animation.Animation getInAnimation();
   @Source(SUSI_NO_CATEGORY)  android.view.View getCurrentView();
}
class ViewSwitcher{
   @Source(SUSI_NO_CATEGORY)  android.view.View getNextView();
}
class ZoomButton{
    void setEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class ZoomButtonsController{
    void setZoomOutEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setZoomSpeed(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setZoomInEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setFocusable(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.ViewGroup getContainer();
   @Source(SUSI_NO_CATEGORY)  android.view.View getZoomControls();
}
class ZoomControls{
    void setIsZoomInEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setIsZoomOutEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setZoomSpeed(  @Sink(SUSI_NO_CATEGORY) long arg0);
}

package com.android.providers.telephony;

class MmsProvider{
   @Source(SUSI_SMS_MMS)  android.net.Uri insert(  @Sink(SUSI_SMS_MMS) android.net.Uri arg0, @Sink(SUSI_SMS_MMS) android.content.ContentValues arg1);
   @Source(SUSI_SMS_MMS)  int update(  @Sink(SUSI_SMS_MMS) android.net.Uri arg0, @Sink(SUSI_SMS_MMS) android.content.ContentValues arg1, @Sink(SUSI_SMS_MMS) java.lang.String arg2, @Sink(SUSI_SMS_MMS) java.lang.String[] arg3);
   @Source(SUSI_SMS_MMS)  android.database.Cursor query(  @Sink(SUSI_SMS_MMS) android.net.Uri arg0, @Sink(SUSI_SMS_MMS) java.lang.String[] arg1, @Sink(SUSI_SMS_MMS) java.lang.String arg2, @Sink(SUSI_SMS_MMS) java.lang.String[] arg3, @Sink(SUSI_SMS_MMS) java.lang.String arg4);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
}
class MmsSmsDatabaseHelper{
   @Source(SUSI_DATABASE_INFORMATION)  android.database.sqlite.SQLiteDatabase getWritableDatabase();
   @Source(SUSI_NO_CATEGORY)  com.android.providers.telephony.MmsSmsDatabaseHelper getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class MmsSmsProvider{
   @Source(SUSI_SMS_MMS)  int update(  @Sink(SUSI_SMS_MMS) android.net.Uri arg0, @Sink(SUSI_SMS_MMS) android.content.ContentValues arg1, @Sink(SUSI_SMS_MMS) java.lang.String arg2, @Sink(SUSI_SMS_MMS) java.lang.String[] arg3);
   @Source(SUSI_SMS_MMS)  android.database.Cursor query(  @Sink(SUSI_SMS_MMS) android.net.Uri arg0, @Sink(SUSI_SMS_MMS) java.lang.String[] arg1, @Sink(SUSI_SMS_MMS) java.lang.String arg2, @Sink(SUSI_SMS_MMS) java.lang.String[] arg3, @Sink(SUSI_SMS_MMS) java.lang.String arg4);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
}
class SmsProvider{
   @Source(SUSI_SMS_MMS)  android.net.Uri insert(  @Sink(SUSI_SMS_MMS) android.net.Uri arg0, @Sink(SUSI_SMS_MMS) android.content.ContentValues arg1);
   @Source(SUSI_SMS_MMS)  int update(  @Sink(SUSI_SMS_MMS) android.net.Uri arg0, @Sink(SUSI_SMS_MMS) android.content.ContentValues arg1, @Sink(SUSI_SMS_MMS) java.lang.String arg2, @Sink(SUSI_SMS_MMS) java.lang.String[] arg3);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getType(  android.net.Uri arg0);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor query(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4);
}

package org.apache.http.message;

class AbstractHttpMessage{
    void setHeaders(  @Sink(SUSI_NO_CATEGORY) org.apache.http.Header[] arg0);
    void setHeader(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setHeader(  @Sink(SUSI_NO_CATEGORY) org.apache.http.Header arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.Header[] getAllHeaders();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.Header getLastHeader(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.Header[] getHeaders(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.Header getFirstHeader(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HeaderIterator headerIterator();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.params.HttpParams getParams();
}
class BasicHeader{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HeaderElement[] getElements();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue();
}
class BasicHeaderElement{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.NameValuePair getParameterByName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.NameValuePair getParameter(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getParameterCount();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.NameValuePair[] getParameters();
}
class BasicHeaderValueParser{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HeaderElement parseHeaderElement(  @Sink(SUSI_NO_CATEGORY) org.apache.http.util.CharArrayBuffer arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.message.ParserCursor arg1);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.NameValuePair parseNameValuePair(  @Sink(SUSI_NO_CATEGORY) org.apache.http.util.CharArrayBuffer arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.message.ParserCursor arg1, @Sink(SUSI_NO_CATEGORY) char[] arg2);
}
class BasicHttpEntityEnclosingRequest{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpEntity getEntity();
}
class BasicHttpRequest{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.RequestLine getRequestLine();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.ProtocolVersion getProtocolVersion();
}
class BasicHttpResponse{
    void setStatusLine(  @Sink(SUSI_NO_CATEGORY) org.apache.http.ProtocolVersion arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setStatusLine(  @Sink(SUSI_NO_CATEGORY) org.apache.http.ProtocolVersion arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void setReasonPhrase(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setStatusCode(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.StatusLine getStatusLine();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.ProtocolVersion getProtocolVersion();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpEntity getEntity();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getReason(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Locale getLocale();
}
class BasicLineParser{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.RequestLine parseRequestLine(  @Sink(SUSI_NO_CATEGORY) org.apache.http.util.CharArrayBuffer arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.message.ParserCursor arg1);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.StatusLine parseStatusLine(  @Sink(SUSI_NO_CATEGORY) org.apache.http.util.CharArrayBuffer arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.message.ParserCursor arg1);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.ProtocolVersion parseProtocolVersion(  @Sink(SUSI_NO_CATEGORY) org.apache.http.util.CharArrayBuffer arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.message.ParserCursor arg1);
}
class BasicNameValuePair{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue();
}
class BasicRequestLine{
   @Source(SUSI_FILE_INFORMATION)  java.lang.String getUri();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.ProtocolVersion getProtocolVersion();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMethod();
}
class BasicStatusLine{
   @Source(SUSI_NO_CATEGORY)  int getStatusCode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getReasonPhrase();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.ProtocolVersion getProtocolVersion();
}
class BufferedHeader{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.util.CharArrayBuffer getBuffer();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HeaderElement[] getElements();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  int getValuePos();
}
class HeaderGroup{
    void setHeaders(  @Sink(SUSI_NO_CATEGORY) org.apache.http.Header[] arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.Header[] getAllHeaders();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.Header getLastHeader(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.Header[] getHeaders(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.Header getFirstHeader(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.Header getCondensedHeader(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class ParserCursor{
   @Source(SUSI_NO_CATEGORY)  int getUpperBound();
   @Source(SUSI_NO_CATEGORY)  int getLowerBound();
   @Source(SUSI_NO_CATEGORY)  int getPos();
}

package android.text;

class Annotation{
   @Source(SUSI_NO_CATEGORY)  int getSpanTypeId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getKey();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue();
}
class BoringLayout{
   @Source(SUSI_NO_CATEGORY)  int getTopPadding();
   @Source(SUSI_NO_CATEGORY)  int getLineStart(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getEllipsisStart(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getLineMax(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getLineDescent(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getLineTop(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getEllipsisCount(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.text.Layout$Directions getLineDirections(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getBottomPadding();
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  int getEllipsizedWidth();
   @Source(SUSI_NO_CATEGORY)  int getLineCount();
   @Source(SUSI_NO_CATEGORY)  int getParagraphDirection(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class DynamicLayout{
   @Source(SUSI_NO_CATEGORY)  int getEllipsisCount(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getTopPadding();
   @Source(SUSI_NO_CATEGORY)  int getEllipsisStart(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int[] getBlockEndLines();
   @Source(SUSI_NO_CATEGORY)  android.text.Layout$Directions getLineDirections(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getParagraphDirection(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getLineStart(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int[] getBlockIndices();
   @Source(SUSI_NO_CATEGORY)  int getEllipsizedWidth();
   @Source(SUSI_NO_CATEGORY)  int getLineTop(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getLineCount();
   @Source(SUSI_NO_CATEGORY)  int getBottomPadding();
   @Source(SUSI_NO_CATEGORY)  int getNumberOfBlocks();
   @Source(SUSI_NO_CATEGORY)  int getLineDescent(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Editable$Factory{
   @Source(SUSI_NO_CATEGORY)  android.text.Editable$Factory getInstance();
}
class HtmlToSpannedConverter{
    void processingInstruction(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class Layout{
   @Source(SUSI_FILE_INFORMATION)  android.text.TextDirectionHeuristic getTextDirectionHeuristic();
   @Source(SUSI_NO_CATEGORY)  float getDesiredWidth(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg0, @Sink(SUSI_NO_CATEGORY) android.text.TextPaint arg1);
   @Source(SUSI_NO_CATEGORY)  float getDesiredWidth(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.text.TextPaint arg3);
   @Source(SUSI_NO_CATEGORY)  int getLineForVertical(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getLineBounds(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg1);
   @Source(SUSI_NO_CATEGORY)  float getSpacingMultiplier();
   @Source(SUSI_NO_CATEGORY)  int getLineVisibleEnd(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getOffsetToRightOf(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float measurePara(  @Sink(SUSI_NO_CATEGORY) android.text.TextPaint arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  float getSecondaryHorizontal(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] getParagraphSpans(  @Sink(SUSI_NO_CATEGORY) android.text.Spanned arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.Class arg3);
   @Source(SUSI_NO_CATEGORY)  android.text.Layout$Alignment getParagraphAlignment(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getSpacingAdd();
   @Source(SUSI_NO_CATEGORY)  float getLineRight(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void getSelectionPath(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.graphics.Path arg2);
   @Source(SUSI_NO_CATEGORY)  float getLineWidth(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getLineRangeForDraw(  @Sink(SUSI_NO_CATEGORY) android.graphics.Canvas arg0);
   @Source(SUSI_NO_CATEGORY)  int getLineEnd(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getText();
   @Source(SUSI_NO_CATEGORY)  float getLineMax(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.text.TextPaint getPaint();
   @Source(SUSI_NO_CATEGORY)  int getParagraphRight(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getEllipsizedWidth();
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  float getPrimaryHorizontal(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  int getParagraphLeft(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getLineAscent(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getLineForOffset(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getLineLeft(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getLineBaseline(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.text.Layout$Alignment getAlignment();
    void getCursorPath(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Path arg1, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg2);
   @Source(SUSI_NO_CATEGORY)  int getOffsetToLeftOf(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getLineBottom(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getOffsetForHorizontal(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
}
class Layout$SpannedEllipsizer{
   @Source(SUSI_NO_CATEGORY)  int getSpanEnd(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  int getSpanFlags(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] getSpans(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Class arg2);
   @Source(SUSI_NO_CATEGORY)  int getSpanStart(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class MeasuredText{
    void setPos(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float addStyleRun(  @Sink(SUSI_NO_CATEGORY) android.text.TextPaint arg0, @Sink(SUSI_NO_CATEGORY) android.text.style.MetricAffectingSpan[] arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.graphics.Paint$FontMetricsInt arg3);
}
class PackedIntVector{
    void setValue(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getValue(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class PackedObjectVector{
    void setValue(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class SpanSet{
   @Source(SUSI_NO_CATEGORY)  int getNextTransition(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class Spannable$Factory{
   @Source(SUSI_NO_CATEGORY)  android.text.Spannable$Factory getInstance();
}
class SpannableString{
    void setSpan(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  int getSpanStart(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  int getSpanEnd(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] getSpans(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Class arg2);
   @Source(SUSI_NO_CATEGORY)  int getSpanFlags(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class SpannableStringBuilder{
    void setSpan(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  float getTextRunAdvances(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) float[] arg5, @Sink(SUSI_NO_CATEGORY) int arg6, @Sink(SUSI_NO_CATEGORY) android.graphics.Paint arg7, @Sink(SUSI_NO_CATEGORY) int arg8);
   @Source(SUSI_NO_CATEGORY)  int getSpanEnd(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  int getTextWidths(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) float[] arg2, @Sink(SUSI_NO_CATEGORY) android.graphics.Paint arg3);
   @Source(SUSI_NO_CATEGORY)  int getSpanStart(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  float getTextRunAdvances(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) float[] arg5, @Sink(SUSI_NO_CATEGORY) int arg6, @Sink(SUSI_NO_CATEGORY) android.graphics.Paint arg7);
   @Source(SUSI_NO_CATEGORY)  int getTextRunCursor(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) android.graphics.Paint arg5);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] getSpans(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Class arg2);
   @Source(SUSI_NO_CATEGORY)  android.text.InputFilter[] getFilters();
   @Source(SUSI_NO_CATEGORY)  int getSpanFlags(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class SpannableStringInternal{
    void setSpan(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  int getSpanStart(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  int getSpanFlags(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  int getSpanEnd(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] getSpans(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Class arg2);
}
class SpannedString{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] getSpans(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Class arg2);
   @Source(SUSI_NO_CATEGORY)  int getSpanFlags(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  int getSpanStart(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  int getSpanEnd(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class StaticLayout{
   @Source(SUSI_NO_CATEGORY)  android.text.Layout$Directions getLineDirections(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getLineStart(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getEllipsizedWidth();
   @Source(SUSI_NO_CATEGORY)  int getLineForVertical(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getLineTop(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getParagraphDirection(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getBottomPadding();
   @Source(SUSI_NO_CATEGORY)  int getLineCount();
   @Source(SUSI_NO_CATEGORY)  int getLineDescent(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getEllipsisCount(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getTopPadding();
   @Source(SUSI_NO_CATEGORY)  int getEllipsisStart(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class TextLine{
   @Source(SUSI_NO_CATEGORY)  int getOffsetToLeftRightOf(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class TextPaint{
    void set(  @Sink(SUSI_NO_CATEGORY) android.text.TextPaint arg0);
}
class TextUtils{
    void dumpSpans(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg0, @Sink(SUSI_NO_CATEGORY) android.util.Printer arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getReverse(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}

package com.android.inputmethod.latin.spellcheck;

class AndroidSpellCheckerService{
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.spellcheck.DictAndProximity createDictAndProximity(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.view.textservice.SuggestionsInfo getNotInDictEmptySuggestions();
   @Source(SUSI_NETWORK_INFORMATION)  int getCapitalizationType(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.view.textservice.SuggestionsInfo getInDictEmptySuggestions();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.inputmethod.latin.spellcheck.DictionaryPool getDictionaryPool(  java.lang.String arg0);
}
class AndroidSpellCheckerService$SuggestionsGatherer{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService$SuggestionsGatherer$Result getResults(  int arg0, java.util.Locale arg1);
}
class AndroidSpellCheckerSession{
   @Source(SUSI_NO_CATEGORY)  android.view.textservice.SuggestionsInfo[] onGetSuggestionsMultiple(  @Sink(SUSI_NO_CATEGORY) android.view.textservice.TextInfo[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
}
class AndroidWordLevelSpellCheckerSession{
    android.view.textservice.SuggestionsInfo onGetSuggestions(  @Sink(SUSI_LOG) android.view.textservice.TextInfo arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) int arg2);
}
class AndroidWordLevelSpellCheckerSession$SuggestionsCache{
    void putSuggestionsToCache(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession$SuggestionsParams getSuggestionsFromCache(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class DictionaryPool{
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.spellcheck.DictAndProximity poll(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) java.util.concurrent.TimeUnit arg1);
}
class DictionaryPool$1{
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getSuggestions(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.latin.WordComposer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1, @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.ProximityInfo arg2);
}
class SpellCheckerProximityInfo{
   @Source(SUSI_NO_CATEGORY)  int[] getProximityForScript(  @Sink(SUSI_NO_CATEGORY) int arg0);
}

package com.android.mms.transaction;

class DefaultRetryScheme{
   @Source(SUSI_NO_CATEGORY)  long getWaitingInterval();
   @Source(SUSI_NO_CATEGORY)  int getRetryLimit();
}
class HttpUtils{
   @Source(SUSI_NO_CATEGORY)  byte[] httpConnection(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) byte[] arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) boolean arg5, @Sink(SUSI_NO_CATEGORY) java.lang.String arg6, @Sink(SUSI_NO_CATEGORY) int arg7);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCurrentAcceptLanguage(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
}
class MessageStatusReceiver{
    void onReceive(  @Sink(SUSI_SMS_MMS) android.content.Context arg0, @Sink(SUSI_SMS_MMS) android.content.Intent arg1);
}
class MessagingNotification{
    void notifySendFailed(  @Sink(SUSI_SMS_MMS) android.content.Context arg0);
    void notifyDownloadFailed(  @Sink(SUSI_SMS_MMS) android.content.Context arg0, @Sink(SUSI_SMS_MMS) long arg1);
    void blockingUpdateAllNotifications(  @Sink(SUSI_SMS_MMS) android.content.Context arg0, @Sink(SUSI_SMS_MMS) long arg1);
    void notifySendFailed(  @Sink(SUSI_SMS_MMS) android.content.Context arg0, @Sink(SUSI_SMS_MMS) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  long getThreadId(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1);
   @Source(SUSI_NO_CATEGORY)  long getSmsThreadId(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1);
}
class MessagingNotification$NotificationInfo{
   @Source(SUSI_NO_CATEGORY)  long getTime();
}
class MmsMessageSender{
    void sendReadRec(  @Sink(SUSI_SMS_MMS) android.content.Context arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) java.lang.String arg2, @Sink(SUSI_SMS_MMS) int arg3);
   @Source(SUSI_SMS_MMS)  boolean sendMessage(  @Sink(SUSI_SMS_MMS) long arg0);
}
class NotificationTransaction{
   @Source(SUSI_SMS_MMS)  byte[] sendPdu(  @Sink(SUSI_SMS_MMS) long arg0, @Sink(SUSI_SMS_MMS) byte[] arg1, @Sink(SUSI_SMS_MMS) java.lang.String arg2);
   @Source(SUSI_SMS_MMS)  byte[] sendPdu(  @Sink(SUSI_SMS_MMS) byte[] arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] getPdu(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getType();
}
class PushReceiver$ReceivePushTask{
   @Source(SUSI_SMS_MMS)  java.lang.Void doInBackground(  @Sink(SUSI_SMS_MMS) android.content.Intent[] arg0);
}
class ReadRecTransaction{
   @Source(SUSI_SMS_MMS)  byte[] sendPdu(  @Sink(SUSI_SMS_MMS) byte[] arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1);
   @Source(SUSI_SMS_MMS)  byte[] sendPdu(  @Sink(SUSI_SMS_MMS) long arg0, @Sink(SUSI_SMS_MMS) byte[] arg1, @Sink(SUSI_SMS_MMS) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  byte[] getPdu(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getType();
}
class RetrieveTransaction{
   @Source(SUSI_SMS_MMS)  byte[] sendPdu(  @Sink(SUSI_SMS_MMS) byte[] arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1);
   @Source(SUSI_SMS_MMS)  byte[] sendPdu(  @Sink(SUSI_SMS_MMS) long arg0, @Sink(SUSI_SMS_MMS) byte[] arg1, @Sink(SUSI_SMS_MMS) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  int getType();
   @Source(SUSI_NO_CATEGORY)  byte[] getPdu(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class RetryScheduler{
    void setRetryAlarm(  @Sink(SUSI_SMS_MMS) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.mms.transaction.RetryScheduler getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class SendTransaction{
   @Source(SUSI_SMS_MMS)  byte[] sendPdu(  @Sink(SUSI_SMS_MMS) byte[] arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1);
   @Source(SUSI_SMS_MMS)  byte[] sendPdu(  @Sink(SUSI_SMS_MMS) long arg0, @Sink(SUSI_SMS_MMS) byte[] arg1, @Sink(SUSI_SMS_MMS) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  int getType();
   @Source(SUSI_NO_CATEGORY)  byte[] getPdu(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class SmsMessageSender{
   @Source(SUSI_SMS_MMS)  boolean sendMessage(  @Sink(SUSI_SMS_MMS) long arg0);
}
class SmsReceiver{
   @Source(SUSI_NO_CATEGORY)  com.android.mms.transaction.SmsReceiver getInstance();
}
class SmsSingleRecipientSender{
   @Source(SUSI_SMS_MMS)  boolean sendMessage(  @Sink(SUSI_SMS_MMS) long arg0);
}
class Transaction{
   @Source(SUSI_SMS_MMS)  byte[] sendPdu(  @Sink(SUSI_SMS_MMS) byte[] arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1);
   @Source(SUSI_SMS_MMS)  byte[] sendPdu(  @Sink(SUSI_SMS_MMS) long arg0, @Sink(SUSI_SMS_MMS) byte[] arg1);
   @Source(SUSI_SMS_MMS)  byte[] sendPdu(  @Sink(SUSI_SMS_MMS) long arg0, @Sink(SUSI_SMS_MMS) byte[] arg1, @Sink(SUSI_SMS_MMS) java.lang.String arg2);
   @Source(SUSI_SMS_MMS)  byte[] sendPdu(  @Sink(SUSI_SMS_MMS) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getPdu(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  com.android.mms.transaction.TransactionState getState();
   @Source(SUSI_NO_CATEGORY)  int getServiceId();
   @Source(SUSI_NO_CATEGORY)  com.android.mms.transaction.TransactionSettings getConnectionSettings();
}
class TransactionBundle{
   @Source(SUSI_NO_CATEGORY)  int getProxyPort();
   @Source(SUSI_NO_CATEGORY)  byte[] getPushData();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUri();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProxyAddress();
   @Source(SUSI_NO_CATEGORY)  int getTransactionType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMmscUrl();
}
class TransactionService{
    void update(  @Sink(SUSI_SMS_MMS) com.android.mms.transaction.Observable arg0);
}
class TransactionSettings{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMmscUrl();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProxyAddress();
   @Source(SUSI_NO_CATEGORY)  int getProxyPort();
}
class TransactionState{
   @Source(SUSI_NO_CATEGORY)  int getState();
   @Source(SUSI_NO_CATEGORY)  android.net.Uri getContentUri();
}

package com.android.contacts.dialog;

class ClearFrequentsDialog{
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Dialog onCreateDialog(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg0);
}

package com.android.providers.settings;

class SettingsBackupAgent{
    void onRestore(  @Sink(SUSI_NO_CATEGORY) android.app.backup.BackupDataInput arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg2);
    void onBackup(  @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg0, @Sink(SUSI_NO_CATEGORY) android.app.backup.BackupDataOutput arg1, @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg2);
    void onRestoreFile(  @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) long arg5, @Sink(SUSI_NO_CATEGORY) long arg6);
}
class SettingsBackupAgent$WifiNetworkSettings{
    void write(  @Sink(SUSI_NETWORK) java.io.Writer arg0);
}
class SettingsHelper{
   @Source(SUSI_NO_CATEGORY)  boolean restoreValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setLocaleData(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] getLocaleData();
}

package com.google.android.apps.lightcycle;

class LightCycleApp{
   @Source(SUSI_NO_CATEGORY)  com.google.android.apps.lightcycle.camera.CameraUtility getCameraUtility();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAppVersion();
}

package com.android.calendarcommon2;

class Duration{
   @Source(SUSI_CALENDAR_INFORMATION)  long getMillis();
}

package libcore.net;

class UriCodec{
   @Source(SUSI_NO_CATEGORY)  java.lang.String decode(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) java.nio.charset.Charset arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.String validate(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
}

package javax.net;

class ServerSocketFactory{
   @Source(SUSI_NO_CATEGORY)  javax.net.ServerSocketFactory getDefault();
   @Source(SUSI_NO_CATEGORY)  java.net.ServerSocket createServerSocket();
}
class SocketFactory{
   @Source(SUSI_NO_CATEGORY)  java.net.Socket createSocket();
   @Source(SUSI_NO_CATEGORY)  javax.net.SocketFactory getDefault();
}

package com.android.contacts.widget;

class AlphaTouchInterceptorOverlay{
    void setOverlayClickable(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
}
class FrameLayoutWithOverlay{
    void setAlphaLayer(  @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg0);
    void setOverlayClickable(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
    void setAlphaLayerValue(  @Sink(SUSI_CONTACT_INFORMATION) float arg0);
}
class IndexerListAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  int getPinnedHeaderCount();
   @Source(SUSI_CONTACT_INFORMATION)  int getPositionForSection(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.widget.IndexerListAdapter$Placement getItemPlacementInSection(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getSectionForPosition(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getPinnedHeaderView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_CONTACT_INFORMATION)  int getIndexedPartition();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Object[] getSections();
   @Source(SUSI_CONTACT_INFORMATION)  android.widget.SectionIndexer getIndexer();
}
class PinnedHeaderListAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  int getPinnedHeaderCount();
   @Source(SUSI_CONTACT_INFORMATION)  int getScrollPositionForHeader(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getPinnedHeaderView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
}
class PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getPinnedHeaderView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View newHeaderView(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg2, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg3);
   @Source(SUSI_CONTACT_INFORMATION)  int getPinnedHeaderCount();
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View newView(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg4);
}
class PinnedHeaderListView{
    void setHeaderInvisible(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) boolean arg1);
    void setFadingHeader(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) boolean arg2);
   @Source(SUSI_CONTACT_INFORMATION)  float getTopFadingEdgeStrength();
   @Source(SUSI_CONTACT_INFORMATION)  int getPinnedHeaderHeight(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getTotalTopPinnedHeaderHeight();
   @Source(SUSI_CONTACT_INFORMATION)  int getPositionAt(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class TransitionAnimationView{
    void setMaskVisibility(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
}

package org.apache.http.auth;

class AuthSchemeRegistry{
    void register(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.auth.AuthSchemeFactory arg1);
    void setItems(  @Sink(SUSI_NO_CATEGORY) java.util.Map arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getSchemeNames();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.auth.AuthScheme getAuthScheme(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.params.HttpParams arg1);
}
class AuthScope{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getHost();
   @Source(SUSI_NO_CATEGORY)  int getPort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRealm();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getScheme();
}
class AuthState{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.auth.Credentials getCredentials();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.auth.AuthScheme getAuthScheme();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.auth.AuthScope getAuthScope();
}

package com.adobe.xmp.impl;

class ByteBuffer{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getEncoding();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getByteStream();
}
class CountOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  int getBytesWritten();
}
class QName{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPrefix();
}
class XMPDateTimeImpl{
    void setMinute(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSecond(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setHour(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setYear(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getISO8601String();
   @Source(SUSI_NO_CATEGORY)  int getMinute();
   @Source(SUSI_NO_CATEGORY)  int getDay();
   @Source(SUSI_NO_CATEGORY)  int getYear();
   @Source(SUSI_NO_CATEGORY)  int getSecond();
   @Source(SUSI_NO_CATEGORY)  int getHour();
   @Source(SUSI_NO_CATEGORY)  int getMonth();
   @Source(SUSI_NO_CATEGORY)  java.util.TimeZone getTimeZone();
   @Source(SUSI_NO_CATEGORY)  int getNanoSecond();
   @Source(SUSI_NO_CATEGORY)  java.util.Calendar getCalendar();
}
class XMPMetaImpl{
    void setPropertyDate(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) com.adobe.xmp.XMPDateTime arg2);
    void setLocalizedText(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) com.adobe.xmp.options.PropertyOptions arg5);
    void setPropertyBoolean(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void setProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg2, @Sink(SUSI_NO_CATEGORY) com.adobe.xmp.options.PropertyOptions arg3);
    void setProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg2);
    void setPropertyDouble(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) double arg2);
    void setNode(  @Sink(SUSI_NO_CATEGORY) com.adobe.xmp.impl.XMPNode arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1, @Sink(SUSI_NO_CATEGORY) com.adobe.xmp.options.PropertyOptions arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
    void setPropertyInteger(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPropertyString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPacketHeader();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getPropertyObject(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.Integer getPropertyInteger(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.Calendar getPropertyCalendar(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.impl.XMPNode getRoot();
   @Source(SUSI_NO_CATEGORY)  java.lang.Boolean getPropertyBoolean(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class XMPNode{
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.impl.XMPNode getQualifier(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getQualifierLength();
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.options.PropertyOptions getOptions();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue();
   @Source(SUSI_NO_CATEGORY)  int getChildrenLength();
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.impl.XMPNode getParent();
   @Source(SUSI_NO_CATEGORY)  java.util.List getUnmodifiableChildren();
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.impl.XMPNode getChild(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.impl.XMPNode findChildByName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class XMPNodeUtils{
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.impl.XMPNode findSchemaNode(  @Sink(SUSI_NO_CATEGORY) com.adobe.xmp.impl.XMPNode arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.String serializeNodeValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class XMPSchemaRegistryImpl{
   @Source(SUSI_NO_CATEGORY)  java.lang.String registerNamespace(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void registerAlias(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) com.adobe.xmp.options.AliasOptions arg4);
   @Source(SUSI_FILE_INFORMATION)  java.lang.String getNamespaceURI(  java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNamespacePrefix(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class XMPSchemaRegistryImpl$1{
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.options.AliasOptions getAliasForm();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPrefix();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPropName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNamespace();
}

package org.apache.harmony.security.x501;

class AttributeTypeAndValue{
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.utils.ObjectIdentifier getType();
}
class AttributeTypeAndValue$1{
    void setEncodingContent(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerOutputStream arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class AttributeTypeAndValue$2{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class AttributeValue{
   @Source(SUSI_NO_CATEGORY)  int getTag();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHexString();
}
class DirectoryString$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getObjectToEncode(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Name{
   @Source(SUSI_NO_CATEGORY)  javax.security.auth.x500.X500Principal getX500Principal();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
}
class Name$1{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getValues(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}

package com.android.bluetooth.hfp;

class AtPhonebook{
   @Source(SUSI_BLUETOOTH_INFORMATION)  boolean getCheckingAccessPermission();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getLastDialledNumber();
}
class HeadsetPhoneState{
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getNumActiveCall();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getBatteryCharge();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getSignal();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getSpeakerVolume();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getCallState();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getRoam();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getNumHeldCall();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getMicVolume();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getService();
}
class HeadsetService{
    boolean setPriority(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) int arg1);
    boolean startScoUsingVirtualVoiceCall(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0);
    boolean connect(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getConnectedDevices();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getConnectionState(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getName();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getPriority(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getBatteryUsageHint(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  com.android.bluetooth.hfp.HeadsetService getHeadsetService();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getAudioState(  android.bluetooth.BluetoothDevice arg0);
}
class HeadsetService$BluetoothHeadsetBinder{
    boolean setPriority(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) int arg1);
    boolean startScoUsingVirtualVoiceCall(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0);
    boolean startVoiceRecognition(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getDevicesMatchingConnectionStates(  int[] arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getConnectedDevices();
}
class HeadsetStateMachine{
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getConnectedDevices();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getAudioState(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getConnectionState(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getDevicesMatchingConnectionStates(  int[] arg0);
}
class HeadsetStateMachine$AudioOn{
    boolean processMessage(  @Sink(SUSI_BLUETOOTH) android.os.Message arg0);
}
class HeadsetStateMachine$Connected{
    boolean processMessage(  @Sink(SUSI_BLUETOOTH) android.os.Message arg0);
}
class HeadsetStateMachine$Disconnected{
    boolean processMessage(  @Sink(SUSI_BLUETOOTH) android.os.Message arg0);
}
class HeadsetStateMachine$Pending{
    boolean processMessage(  @Sink(SUSI_BLUETOOTH) android.os.Message arg0);
}

package com.android.mms.dom.smil.parser;

class SmilContentHandler{
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.smil.SMILDocument getSmilDocument();
}

package com.android.server.am;

class ActiveServices{
    boolean dumpService(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String arg2, @Sink(SUSI_FILE) java.lang.String[] arg3, @Sink(SUSI_FILE) int arg4, @Sink(SUSI_FILE) boolean arg5);
    boolean dumpServicesLocked(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2, @Sink(SUSI_FILE) int arg3, @Sink(SUSI_FILE) boolean arg4, @Sink(SUSI_FILE) boolean arg5, @Sink(SUSI_FILE) java.lang.String arg6);
    void setServiceForegroundLocked(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.app.Notification arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getRunningServiceInfoLocked(  int arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.app.PendingIntent getRunningServiceControlPanelLocked(  android.content.ComponentName arg0);
}
class ActiveServices$ServiceMap{
    void putServiceByIntent(  @Sink(SUSI_NO_CATEGORY) android.content.Intent$FilterComparison arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) com.android.server.am.ServiceRecord arg2);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.am.ServiceRecord getServiceByName(  android.content.ComponentName arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.am.ServiceRecord getServiceByName(  android.content.ComponentName arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.am.ServiceRecord getServiceByIntent(  android.content.Intent$FilterComparison arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Collection getAllServices(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.am.ServiceRecord getServiceByIntent(  android.content.Intent$FilterComparison arg0);
}
class ActivityManagerService{
    void dumpGraphicsHardwareUsage(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void dumpDbInfo(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    boolean dumpBroadcastsLocked(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2, @Sink(SUSI_FILE) int arg3, @Sink(SUSI_FILE) boolean arg4, @Sink(SUSI_FILE) java.lang.String arg5);
    boolean dumpActivitiesLocked(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2, @Sink(SUSI_FILE) int arg3, @Sink(SUSI_FILE) boolean arg4, @Sink(SUSI_FILE) boolean arg5, @Sink(SUSI_FILE) java.lang.String arg6);
    boolean dumpProvidersLocked(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2, @Sink(SUSI_FILE) int arg3, @Sink(SUSI_FILE) boolean arg4, @Sink(SUSI_FILE) java.lang.String arg5);
    boolean dumpProcessesToGc(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2, @Sink(SUSI_FILE) int arg3, @Sink(SUSI_FILE) boolean arg4, @Sink(SUSI_FILE) boolean arg5, @Sink(SUSI_FILE) java.lang.String arg6);
    boolean dumpProcessesLocked(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2, @Sink(SUSI_FILE) int arg3, @Sink(SUSI_FILE) boolean arg4, @Sink(SUSI_FILE) java.lang.String arg5);
    boolean dumpOomLocked(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2, @Sink(SUSI_FILE) int arg3, @Sink(SUSI_FILE) boolean arg4);
    boolean dumpProvider(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String arg2, @Sink(SUSI_FILE) java.lang.String[] arg3, @Sink(SUSI_FILE) int arg4, @Sink(SUSI_FILE) boolean arg5);
    void dumpApplicationMemoryUsage(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String arg2, @Sink(SUSI_FILE) java.lang.String[] arg3, @Sink(SUSI_FILE) boolean arg4, @Sink(SUSI_FILE) java.io.PrintWriter arg5, @Sink(SUSI_FILE) java.lang.StringBuilder arg6, @Sink(SUSI_FILE) java.lang.StringBuilder arg7);
    boolean dumpPendingIntentsLocked(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2, @Sink(SUSI_FILE) int arg3, @Sink(SUSI_FILE) boolean arg4, @Sink(SUSI_FILE) java.lang.String arg5);
    boolean dumpActivity(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String arg2, @Sink(SUSI_FILE) java.lang.String[] arg3, @Sink(SUSI_FILE) int arg4, @Sink(SUSI_FILE) boolean arg5);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean sendPendingBroadcastsLocked(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.server.am.ProcessRecord arg0);
    void dispatchUserSwitch(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.server.am.UserStartedState arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void signalPersistentProcesses(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean updateConfigurationLocked(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.res.Configuration arg0, @Sink(SUSI_SYSTEM_SETTINGS) com.android.server.am.ActivityRecord arg1, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg2, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg3);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean switchUser(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  int startActivityIntentSender(  @Sink(SUSI_SYSTEM_SETTINGS) android.app.IApplicationThread arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.content.IntentSender arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.content.Intent arg2, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg3, @Sink(SUSI_SYSTEM_SETTINGS) android.os.IBinder arg4, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg5, @Sink(SUSI_SYSTEM_SETTINGS) int arg6, @Sink(SUSI_SYSTEM_SETTINGS) int arg7, @Sink(SUSI_SYSTEM_SETTINGS) int arg8, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Bundle arg9);
    void updatePersistentConfiguration(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.res.Configuration arg0);
    void updateConfiguration(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.res.Configuration arg0);
    void setAlwaysFinish(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void appNotResponding(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.server.am.ProcessRecord arg0, @Sink(SUSI_SYSTEM_SETTINGS) com.android.server.am.ActivityRecord arg1, @Sink(SUSI_SYSTEM_SETTINGS) com.android.server.am.ActivityRecord arg2, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg3, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg4);
    void closeSystemDialogsLocked(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
    void setProcessForeground(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void dumpMemItems(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.util.ArrayList arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
    void publishContentProviders(  @Sink(SUSI_NO_CATEGORY) android.app.IApplicationThread arg0, @Sink(SUSI_NO_CATEGORY) java.util.List arg1);
    void finishUserSwitch(  @Sink(SUSI_NO_CATEGORY) com.android.server.am.UserStartedState arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName startServiceInPackage(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setServiceForeground(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.app.Notification arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4);
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName startService(  @Sink(SUSI_NO_CATEGORY) android.app.IApplicationThread arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  boolean bindBackupAgent(  @Sink(SUSI_NO_CATEGORY) android.content.pm.ApplicationInfo arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.server.am.ProcessRecord startProcessLocked(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.content.pm.ApplicationInfo arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg5, @Sink(SUSI_NO_CATEGORY) boolean arg6, @Sink(SUSI_NO_CATEGORY) boolean arg7);
    void setRequestedOrientation(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean startInstrumentation(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg3, @Sink(SUSI_NO_CATEGORY) android.app.IInstrumentationWatcher arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
    void setPackageScreenCompatMode(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setFrontActivityScreenCompatMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean clearApplicationUserData(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.content.pm.IPackageDataObserver arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void sendUserSwitchBroadcastsLocked(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList collectProcesses(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg2);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder newUriPermissionOwner(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void ensurePackageDexOpt(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void grantUriPermissionUncheckedLocked(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) com.android.server.am.UriPermissionOwner arg4);
   @Source(SUSI_NO_CATEGORY)  java.io.File dumpStackTraces(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) java.util.ArrayList arg1, @Sink(SUSI_NO_CATEGORY) com.android.internal.os.ProcessStats arg2, @Sink(SUSI_NO_CATEGORY) android.util.SparseArray arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg4);
    void setDebugApp(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void addErrorToDropBox(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) com.android.server.am.ProcessRecord arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) com.android.server.am.ActivityRecord arg3, @Sink(SUSI_NO_CATEGORY) com.android.server.am.ActivityRecord arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5, @Sink(SUSI_NO_CATEGORY) java.lang.String arg6, @Sink(SUSI_NO_CATEGORY) java.io.File arg7, @Sink(SUSI_NO_CATEGORY) android.app.ApplicationErrorReport$CrashInfo arg8);
   @Source(SUSI_NO_CATEGORY)  com.android.server.am.ProcessRecord addAppLocked(  @Sink(SUSI_NO_CATEGORY) android.content.pm.ApplicationInfo arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  boolean killPids(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent registerReceiver(  @Sink(SUSI_NO_CATEGORY) android.app.IApplicationThread arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.content.IIntentReceiver arg2, @Sink(SUSI_NO_CATEGORY) android.content.IntentFilter arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
    void setPackageAskScreenCompat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  boolean dumpHeap(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg4);
   @Source(SUSI_NETWORK_INFORMATION)  int[] getUsersLocked();
   @Source(SUSI_NETWORK_INFORMATION)  int[] getRunningUserIds();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getRunningAppProcesses();
   @Source(SUSI_NETWORK_INFORMATION)  android.content.ComponentName getActivityClassForToken(  android.os.IBinder arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Debug$MemoryInfo[] getProcessMemoryInfo(  int[] arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.pm.UserManagerService getUserManagerLocked();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.am.ProcessRecord getProcessRecordLocked(  java.lang.String arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getRunningExternalApplications();
   @Source(SUSI_NETWORK_INFORMATION)  int getTaskForActivityLocked(  android.os.IBinder arg0, boolean arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.pm.ConfigurationInfo getDeviceConfigurationInfo();
   @Source(SUSI_NETWORK_INFORMATION)  int getRequestedOrientation(  android.os.IBinder arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.res.Configuration getConfiguration();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getTasks(  int arg0, int arg1, android.app.IThumbnailReceiver arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPackageForToken(  android.os.IBinder arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.pm.ApplicationInfo getAppInfoForUser(  android.content.pm.ApplicationInfo arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getCurrentUserIdLocked();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getCallingPackage(  android.os.IBinder arg0);
   @Source(SUSI_NETWORK_INFORMATION)  long[] getProcessPss(  int[] arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getPackageScreenCompatMode(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.ComponentName getCallingActivity(  android.os.IBinder arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.app.ActivityManager$TaskThumbnails getTaskThumbnails(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.Intent createAppErrorIntentLocked(  com.android.server.am.ProcessRecord arg0, long arg1, android.app.ApplicationErrorReport$CrashInfo arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPackageForIntentSender(  android.content.IIntentSender arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getProcessLimit();
   @Source(SUSI_NETWORK_INFORMATION)  android.content.IIntentSender getIntentSender(  int arg0, java.lang.String arg1, android.os.IBinder arg2, java.lang.String arg3, int arg4, android.content.Intent[] arg5, java.lang.String[] arg6, int arg7, android.os.Bundle arg8, int arg9);
   @Source(SUSI_NETWORK_INFORMATION)  int getFrontActivityScreenCompatMode();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getRecentTasks(  int arg0, int arg1, int arg2);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.IIntentSender getIntentSenderLocked(  int arg0, java.lang.String arg1, int arg2, int arg3, android.os.IBinder arg4, java.lang.String arg5, int arg6, android.content.Intent[] arg7, java.lang.String[] arg8, int arg9, android.os.Bundle arg10);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.Intent getIntentForIntentSender(  android.content.IIntentSender arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.pm.UserInfo getCurrentUser();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getProcessesInErrorState();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getProviderMimeType(  android.net.Uri arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.app.IActivityManager$ContentProviderHolder getContentProvider(  android.app.IApplicationThread arg0, java.lang.String arg1, int arg2, boolean arg3);
   @Source(SUSI_NETWORK_INFORMATION)  int getUidForIntentSender(  android.content.IIntentSender arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getLaunchedFromUid(  android.os.IBinder arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getServices(  int arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.am.ProcessRecord getRecordForAppLocked(  android.app.IApplicationThread arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.graphics.Bitmap getTaskTopThumbnail(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.app.IActivityManager$ContentProviderHolder getContentProviderExternal(  java.lang.String arg0, int arg1, android.os.IBinder arg2);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.pm.ActivityInfo getActivityInfoForUser(  android.content.pm.ActivityInfo arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.app.PendingIntent getRunningServiceControlPanel(  android.content.ComponentName arg0);
}
class ActivityManagerService$2{
    void handleMessage(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
}
class ActivityManagerService$CpuBinder{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
}
class ActivityManagerService$DbBinder{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
}
class ActivityManagerService$GraphicsBinder{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
}
class ActivityManagerService$MemBinder{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
}
class ActivityRecord{
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void startFreezingScreenLocked(  @Sink(SUSI_NO_CATEGORY) com.android.server.am.ProcessRecord arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_FILE_INFORMATION)  com.android.server.am.UriPermissionOwner getUriPermissionsLocked();
   @Source(SUSI_NO_CATEGORY)  long getKeyDispatchingTimeout();
}
class ActivityRecord$Token{
   @Source(SUSI_NO_CATEGORY)  long getKeyDispatchingTimeout();
}
class ActivityStack{
   @Source(SUSI_SYSTEM_SETTINGS)  int startActivityMayWait(  @Sink(SUSI_SYSTEM_SETTINGS) android.app.IApplicationThread arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.content.Intent arg2, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg3, @Sink(SUSI_SYSTEM_SETTINGS) android.os.IBinder arg4, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg5, @Sink(SUSI_SYSTEM_SETTINGS) int arg6, @Sink(SUSI_SYSTEM_SETTINGS) int arg7, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg8, @Sink(SUSI_SYSTEM_SETTINGS) android.os.ParcelFileDescriptor arg9, @Sink(SUSI_SYSTEM_SETTINGS) android.app.IActivityManager$WaitResult arg10, @Sink(SUSI_SYSTEM_SETTINGS) android.content.res.Configuration arg11, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Bundle arg12, @Sink(SUSI_SYSTEM_SETTINGS) int arg13);
    void ensureActivitiesVisibleLocked(  @Sink(SUSI_NO_CATEGORY) com.android.server.am.ActivityRecord arg0, @Sink(SUSI_NO_CATEGORY) com.android.server.am.ActivityRecord arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  boolean realStartActivityLocked(  @Sink(SUSI_NO_CATEGORY) com.android.server.am.ActivityRecord arg0, @Sink(SUSI_NO_CATEGORY) com.android.server.am.ProcessRecord arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
   @Source(SUSI_NO_CATEGORY)  com.android.server.am.ActivityRecord removeTaskActivitiesLocked(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  int startActivityUncheckedLocked(  @Sink(SUSI_NO_CATEGORY) com.android.server.am.ActivityRecord arg0, @Sink(SUSI_NO_CATEGORY) com.android.server.am.ActivityRecord arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg4);
    void sendActivityResultLocked(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) com.android.server.am.ActivityRecord arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg5);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ActivityInfo resolveActivity(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getTaskTopThumbnailLocked(  @Sink(SUSI_NO_CATEGORY) com.android.server.am.TaskRecord arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.ActivityManager$TaskThumbnails getTaskThumbnailsLocked(  @Sink(SUSI_NO_CATEGORY) com.android.server.am.TaskRecord arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.server.am.TaskAccessInfo getTaskAccessInfoLocked(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList processStoppingActivitiesLocked(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class AppBindRecord{
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void dumpInIntentBind(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class AppErrorResult{
   @Source(SUSI_NO_CATEGORY)  int get();
}
class BatteryStatsService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void setBatteryState(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.app.IBatteryStats getService();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.os.BatteryStatsImpl getActiveStatistics();
   @Source(SUSI_SYSTEM_SETTINGS)  long getAwakeTimeBattery();
   @Source(SUSI_SYSTEM_SETTINGS)  byte[] getStatistics();
   @Source(SUSI_SYSTEM_SETTINGS)  long getAwakeTimePlugged();
}
class BroadcastFilter{
    void dumpInReceiverList(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) android.util.Printer arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void dumpBrief(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class BroadcastQueue{
    boolean dumpLocked(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2, @Sink(SUSI_FILE) int arg3, @Sink(SUSI_FILE) boolean arg4, @Sink(SUSI_FILE) java.lang.String arg5, @Sink(SUSI_FILE) boolean arg6);
    void setBroadcastTimeoutLocked(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  boolean sendPendingBroadcastsLocked(  @Sink(SUSI_NO_CATEGORY) com.android.server.am.ProcessRecord arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.server.am.BroadcastRecord getMatchingOrderedReceiver(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
}
class BroadcastRecord{
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class CompatModePackages{
    void setFrontActivityScreenCompatModeLocked(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setFrontActivityAskCompatModeLocked(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setPackageScreenCompatModeLocked(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setPackageAskCompatModeLocked(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  int getPackageScreenCompatModeLocked(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getFrontActivityScreenCompatModeLocked();
   @Source(SUSI_NO_CATEGORY)  java.util.HashMap getPackages();
}
class ConnectionRecord{
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class ContentProviderRecord{
    void addExternalProcessHandleLocked(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
}
class CoreSettingsObserver{
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle getCoreSettingsLocked();
}
class EventLogTags{
    void writeConfigurationChanged(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void writeBootProgressAmsReady(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void writeAmLowMemory(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void writeAmDropProcess(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void writeBootProgressEnableScreen(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void writeAmSwitchUser(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class IntentBindRecord{
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void dumpInService(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class PendingIntentRecord{
   @Source(SUSI_NO_CATEGORY)  int sendInner(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.content.IIntentReceiver arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg5, @Sink(SUSI_NO_CATEGORY) java.lang.String arg6, @Sink(SUSI_NO_CATEGORY) int arg7, @Sink(SUSI_NO_CATEGORY) int arg8, @Sink(SUSI_NO_CATEGORY) int arg9, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg10);
   @Source(SUSI_NO_CATEGORY)  int send(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.content.IIntentReceiver arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4);
}
class ProcessList{
   @Source(SUSI_NETWORK_INFORMATION)  long getMemLevel(  int arg0);
}
class ProcessRecord{
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getPackageList();
}
class ProviderMap{
    boolean dumpProvider(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String arg2, @Sink(SUSI_FILE) java.lang.String[] arg3, @Sink(SUSI_FILE) int arg4, @Sink(SUSI_FILE) boolean arg5);
   @Source(SUSI_NO_CATEGORY)  java.util.HashMap getProvidersByClass(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.server.am.ContentProviderRecord getProviderByClass(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.server.am.ContentProviderRecord getProviderByClass(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.server.am.ContentProviderRecord getProviderByName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.server.am.ContentProviderRecord getProviderByName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class ReceiverList{
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class ServiceRecord{
   @Source(SUSI_NO_CATEGORY)  com.android.server.am.AppBindRecord retrieveAppBindingLocked(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) com.android.server.am.ProcessRecord arg1);
    void dumpStartList(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.util.List arg2, @Sink(SUSI_NO_CATEGORY) long arg3);
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getLastStartId();
}
class ServiceRecord$StartItem{
   @Source(SUSI_FILE_INFORMATION)  com.android.server.am.UriPermissionOwner getUriPermissionsLocked();
}
class TaskRecord{
   @Source(SUSI_NO_CATEGORY)  long getInactiveDuration();
}
class TransferPipe{
   @Source(SUSI_NO_CATEGORY)  android.os.ParcelFileDescriptor getReadFd();
   @Source(SUSI_NO_CATEGORY)  android.os.ParcelFileDescriptor getWriteFd();
}
class UriPermissionOwner{
   @Source(SUSI_NO_CATEGORY)  android.os.Binder getExternalTokenLocked();
}
class UriPermissionOwner$ExternalToken{
   @Source(SUSI_NO_CATEGORY)  com.android.server.am.UriPermissionOwner getOwner();
}
class UsageStatsService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void noteResumeComponent(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.os.PkgUsageStats[] getAllPkgUsageStats();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.os.PkgUsageStats getPkgUsageStats(  android.content.ComponentName arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.app.IUsageStats getService();
   @Source(SUSI_NETWORK_INFORMATION)  byte[] readFully(  java.io.FileInputStream arg0);
}
class UsageStatsService$PkgUsageStatsExtended{
    void addLaunchTime(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void addLaunchCount(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0);
}

package gov.nist.javax.sip.message;

class ContentImpl{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getContent();
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.ContentTypeHeader getContentTypeHeader();
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.ContentDispositionHeader getContentDispositionHeader();
}
class HeaderIterator{
    void set(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class ListMap{
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.SIPHeaderList getList(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.header.SIPHeader arg0);
}
class MessageFactoryImpl{
    void setDefaultContentEncodingCharset(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.UserAgentHeader getDefaultUserAgentHeader();
   @Source(SUSI_NO_CATEGORY)  javax.sip.message.Response createResponse(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) javax.sip.message.Request arg1, @Sink(SUSI_NO_CATEGORY) javax.sip.header.ContentTypeHeader arg2, @Sink(SUSI_NO_CATEGORY) byte[] arg3);
   @Source(SUSI_NO_CATEGORY)  javax.sip.message.Response createResponse(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) javax.sip.header.CallIdHeader arg1, @Sink(SUSI_NO_CATEGORY) javax.sip.header.CSeqHeader arg2, @Sink(SUSI_NO_CATEGORY) javax.sip.header.FromHeader arg3, @Sink(SUSI_NO_CATEGORY) javax.sip.header.ToHeader arg4, @Sink(SUSI_NO_CATEGORY) java.util.List arg5, @Sink(SUSI_NO_CATEGORY) javax.sip.header.MaxForwardsHeader arg6, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg7, @Sink(SUSI_NO_CATEGORY) javax.sip.header.ContentTypeHeader arg8);
   @Source(SUSI_NO_CATEGORY)  javax.sip.message.Response createResponse(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) javax.sip.message.Request arg1, @Sink(SUSI_NO_CATEGORY) javax.sip.header.ContentTypeHeader arg2, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg3);
   @Source(SUSI_NO_CATEGORY)  javax.sip.message.Response createResponse(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) javax.sip.header.CallIdHeader arg1, @Sink(SUSI_NO_CATEGORY) javax.sip.header.CSeqHeader arg2, @Sink(SUSI_NO_CATEGORY) javax.sip.header.FromHeader arg3, @Sink(SUSI_NO_CATEGORY) javax.sip.header.ToHeader arg4, @Sink(SUSI_NO_CATEGORY) java.util.List arg5, @Sink(SUSI_NO_CATEGORY) javax.sip.header.MaxForwardsHeader arg6, @Sink(SUSI_NO_CATEGORY) javax.sip.header.ContentTypeHeader arg7, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg8);
   @Source(SUSI_NO_CATEGORY)  javax.sip.message.Response createResponse(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) javax.sip.header.CallIdHeader arg1, @Sink(SUSI_NO_CATEGORY) javax.sip.header.CSeqHeader arg2, @Sink(SUSI_NO_CATEGORY) javax.sip.header.FromHeader arg3, @Sink(SUSI_NO_CATEGORY) javax.sip.header.ToHeader arg4, @Sink(SUSI_NO_CATEGORY) java.util.List arg5, @Sink(SUSI_NO_CATEGORY) javax.sip.header.MaxForwardsHeader arg6);
   @Source(SUSI_NO_CATEGORY)  javax.sip.message.Response createResponse(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) javax.sip.message.Request arg1);
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.ServerHeader getDefaultServerHeader();
   @Source(SUSI_NO_CATEGORY)  javax.sip.message.Response createResponse(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) javax.sip.header.CallIdHeader arg1, @Sink(SUSI_NO_CATEGORY) javax.sip.header.CSeqHeader arg2, @Sink(SUSI_NO_CATEGORY) javax.sip.header.FromHeader arg3, @Sink(SUSI_NO_CATEGORY) javax.sip.header.ToHeader arg4, @Sink(SUSI_NO_CATEGORY) java.util.List arg5, @Sink(SUSI_NO_CATEGORY) javax.sip.header.MaxForwardsHeader arg6, @Sink(SUSI_NO_CATEGORY) byte[] arg7, @Sink(SUSI_NO_CATEGORY) javax.sip.header.ContentTypeHeader arg8);
   @Source(SUSI_NO_CATEGORY)  javax.sip.message.Response createResponse(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) javax.sip.header.CallIdHeader arg1, @Sink(SUSI_NO_CATEGORY) javax.sip.header.CSeqHeader arg2, @Sink(SUSI_NO_CATEGORY) javax.sip.header.FromHeader arg3, @Sink(SUSI_NO_CATEGORY) javax.sip.header.ToHeader arg4, @Sink(SUSI_NO_CATEGORY) java.util.List arg5, @Sink(SUSI_NO_CATEGORY) javax.sip.header.MaxForwardsHeader arg6, @Sink(SUSI_NO_CATEGORY) javax.sip.header.ContentTypeHeader arg7, @Sink(SUSI_NO_CATEGORY) byte[] arg8);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDefaultContentEncodingCharset();
}
class MessageObject{
   @Source(SUSI_NO_CATEGORY)  java.lang.String debugDump();
}
class MultipartMimeContentImpl{
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.ContentTypeHeader getContentTypeHeader();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.message.Content getContentByType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getContentCount();
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator getContents();
}
class SIPDuplicateHeaderException{
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.SIPHeader getSIPHeader();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.message.SIPMessage getSIPMessage();
}
class SIPMessage{
    void setMessageContent(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) byte[] arg2);
    void attachHeader(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.header.SIPHeader arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void setToTag(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setCallId(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setFromTag(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setHeader(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.header.SIPHeaderList arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.ContentLengthHeader getContentLengthHeader();
   @Source(SUSI_NO_CATEGORY)  java.util.ListIterator getHeaderNames();
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.CSeqHeader getCSeq();
   @Source(SUSI_NO_CATEGORY)  java.util.LinkedList getMessageAsEncodedStrings();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHeaderAsFormattedString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getContent();
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.ToHeader getToHeader();
   @Source(SUSI_NO_CATEGORY)  int getSize();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTransactionId();
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.ContentLanguageHeader getContentLanguage();
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.FromHeader getFrom();
   @Source(SUSI_NO_CATEGORY)  java.lang.String encode();
   @Source(SUSI_NO_CATEGORY)  byte[] encodeAsBytes(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.CSeqHeader getCSeqHeader();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.Contact getContactHeader();
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.CallIdHeader getCallIdHeader();
   @Source(SUSI_NO_CATEGORY)  java.util.ListIterator getUnrecognizedHeaders();
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.ContentEncodingHeader getContentEncoding();
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.FromHeader getFromHeader();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessageContent();
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.ViaHeader getTopmostViaHeader();
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.CallIdHeader getCallId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String debugDump();
   @Source(SUSI_NO_CATEGORY)  byte[] getRawContent();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.Authorization getAuthorization();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.ContactList getContactHeaders();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFromTag();
   @Source(SUSI_NO_CATEGORY)  java.util.ListIterator getHeaders(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.RecordRouteList getRecordRouteHeaders();
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.MaxForwardsHeader getMaxForwards();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.Via getTopmostVia();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.ContentType getContentTypeHeader();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.RouteList getRouteHeaders();
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator getHeaders();
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.ToHeader getTo();
   @Source(SUSI_NO_CATEGORY)  java.lang.String encodeSIPHeaders();
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.ContentLengthHeader getContentLength();
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.Header getHeader(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCharset();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getToTag();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.ErrorInfoList getErrorInfoHeaders();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.ViaList getViaHeaders();
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.ExpiresHeader getExpires();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getApplicationData();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.message.MultipartMimeContent getMultipartMimeContent();
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.ContentDispositionHeader getContentDisposition();
}
class SIPRequest{
   @Source(SUSI_NO_CATEGORY)  byte[] encodeAsBytes(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setSIPVersion(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setMethod(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_FILE_INFORMATION)  javax.sip.address.URI getRequestURI();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getMessageChannel();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSIPVersion();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getViaHost();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.message.SIPResponse createResponse(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDialogId(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getViaPort();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.RequestLine getRequestLine();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getTransaction();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCannonicalName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.LinkedList getMessageAsEncodedStrings();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.message.SIPRequest createBYERequest(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMethod();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMergeId();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.message.SIPRequest createSIPRequest(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.header.RequestLine arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFirstLine();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.message.SIPRequest createACKRequest();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDialogId(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getInviteTransaction();
}
class SIPResponse{
    void setReasonPhrase(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setStatusCode(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSIPVersion(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.StatusLine getStatusLine();
   @Source(SUSI_NO_CATEGORY)  java.util.LinkedList getMessageAsEncodedStrings();
   @Source(SUSI_NO_CATEGORY)  int getStatusCode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getReasonPhrase();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDialogId(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDialogId(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] encodeAsBytes(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSIPVersion();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFirstLine();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getReasonPhrase(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.message.SIPRequest createRequest(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.address.SipUri arg0, @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.header.Via arg1, @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.header.CSeq arg2, @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.header.From arg3, @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.header.To arg4);
}

package android.database.sqlite;

class SQLiteConnection{
    void execute(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object[] arg1, @Sink(SUSI_NO_CATEGORY) android.os.CancellationSignal arg2);
   @Source(SUSI_NO_CATEGORY)  long executeForLastInsertedRowId(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object[] arg1, @Sink(SUSI_NO_CATEGORY) android.os.CancellationSignal arg2);
   @Source(SUSI_NO_CATEGORY)  android.os.ParcelFileDescriptor executeForBlobFileDescriptor(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object[] arg1, @Sink(SUSI_NO_CATEGORY) android.os.CancellationSignal arg2);
   @Source(SUSI_NO_CATEGORY)  long executeForLong(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object[] arg1, @Sink(SUSI_NO_CATEGORY) android.os.CancellationSignal arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String executeForString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object[] arg1, @Sink(SUSI_NO_CATEGORY) android.os.CancellationSignal arg2);
   @Source(SUSI_DATABASE_INFORMATION)  int getConnectionId();
   @Source(SUSI_DATABASE_INFORMATION)  byte[] access$500();
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String describeCurrentOperationUnsafe();
}
class SQLiteCursor{
    void setWindow(  @Sink(SUSI_NO_CATEGORY) android.database.CursorWindow arg0);
    void setSelectionArguments(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
   @Source(SUSI_DATABASE_INFORMATION)  int getColumnIndex(  java.lang.String arg0);
   @Source(SUSI_DATABASE_INFORMATION)  android.database.sqlite.SQLiteDatabase getDatabase();
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String[] getColumnNames();
   @Source(SUSI_DATABASE_INFORMATION)  int getCount();
}
class SQLiteDatabase{
   @Source(SUSI_NO_CATEGORY)  int update(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.content.ContentValues arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3);
    void setVersion(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setLockingEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  long setMaximumSize(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setPageSize(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  android.database.sqlite.SQLiteDatabase openOrCreateDatabase(  @Sink(SUSI_NO_CATEGORY) java.io.File arg0, @Sink(SUSI_NO_CATEGORY) android.database.sqlite.SQLiteDatabase$CursorFactory arg1);
   @Source(SUSI_DATABASE_INFORMATION)  android.database.Cursor rawQueryWithFactory(  android.database.sqlite.SQLiteDatabase$CursorFactory arg0, java.lang.String arg1, java.lang.String[] arg2, java.lang.String arg3, android.os.CancellationSignal arg4);
   @Source(SUSI_DATABASE_INFORMATION)  java.util.Map getSyncedTables();
   @Source(SUSI_DATABASE_INFORMATION)  int getVersion();
   @Source(SUSI_DATABASE_INFORMATION)  android.database.Cursor rawQuery(  java.lang.String arg0, java.lang.String[] arg1, android.os.CancellationSignal arg2);
   @Source(SUSI_DATABASE_INFORMATION)  android.database.Cursor rawQuery(  java.lang.String arg0, java.lang.String[] arg1);
   @Source(SUSI_DATABASE_INFORMATION)  android.database.Cursor queryWithFactory(  android.database.sqlite.SQLiteDatabase$CursorFactory arg0, boolean arg1, java.lang.String arg2, java.lang.String[] arg3, java.lang.String arg4, java.lang.String[] arg5, java.lang.String arg6, java.lang.String arg7, java.lang.String arg8, java.lang.String arg9);
   @Source(SUSI_DATABASE_INFORMATION)  long getMaximumSize();
   @Source(SUSI_DATABASE_INFORMATION)  android.database.sqlite.SQLiteSession getThreadSession();
   @Source(SUSI_DATABASE_INFORMATION)  java.util.ArrayList getDbStats();
   @Source(SUSI_DATABASE_INFORMATION)  long getPageSize();
   @Source(SUSI_DATABASE_INFORMATION)  java.util.List getAttachedDbs();
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String getLabel();
   @Source(SUSI_DATABASE_INFORMATION)  android.database.Cursor query(  java.lang.String arg0, java.lang.String[] arg1, java.lang.String arg2, java.lang.String[] arg3, java.lang.String arg4, java.lang.String arg5, java.lang.String arg6, java.lang.String arg7);
   @Source(SUSI_DATABASE_INFORMATION)  android.database.Cursor query(  java.lang.String arg0, java.lang.String[] arg1, java.lang.String arg2, java.lang.String[] arg3, java.lang.String arg4, java.lang.String arg5, java.lang.String arg6);
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String getPath();
   @Source(SUSI_DATABASE_INFORMATION)  android.database.sqlite.SQLiteSession createSession();
   @Source(SUSI_DATABASE_INFORMATION)  android.database.Cursor query(  boolean arg0, java.lang.String arg1, java.lang.String[] arg2, java.lang.String arg3, java.lang.String[] arg4, java.lang.String arg5, java.lang.String arg6, java.lang.String arg7, java.lang.String arg8);
   @Source(SUSI_DATABASE_INFORMATION)  android.database.Cursor query(  boolean arg0, java.lang.String arg1, java.lang.String[] arg2, java.lang.String arg3, java.lang.String[] arg4, java.lang.String arg5, java.lang.String arg6, java.lang.String arg7, java.lang.String arg8, android.os.CancellationSignal arg9);
   @Source(SUSI_DATABASE_INFORMATION)  int getThreadDefaultConnectionFlags(  boolean arg0);
}
class SQLiteDatabase$1{
   @Source(SUSI_DATABASE_INFORMATION)  android.database.sqlite.SQLiteSession initialValue();
}
class SQLiteDebug{
   @Source(SUSI_DATABASE_INFORMATION)  android.database.sqlite.SQLiteDebug$PagerStats getDatabaseInfo();
}
class SQLiteDirectCursorDriver{
    void setBindArguments(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
}
class SQLiteGlobal{
   @Source(SUSI_DATABASE_INFORMATION)  int getJournalSizeLimit();
   @Source(SUSI_DATABASE_INFORMATION)  int getWALConnectionPoolSize();
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String getDefaultJournalMode();
   @Source(SUSI_DATABASE_INFORMATION)  int getDefaultPageSize();
   @Source(SUSI_DATABASE_INFORMATION)  int getWALAutoCheckpoint();
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String getWALSyncMode();
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String getDefaultSyncMode();
}
class SQLiteOpenHelper{
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String getDatabaseName();
   @Source(SUSI_DATABASE_INFORMATION)  android.database.sqlite.SQLiteDatabase getReadableDatabase();
   @Source(SUSI_DATABASE_INFORMATION)  android.database.sqlite.SQLiteDatabase getWritableDatabase();
}
class SQLiteProgram{
    void bindDouble(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) double arg1);
    void bindNull(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void bindBlob(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1);
    void bindAllArgsAsStrings(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
    void bindString(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void bindLong(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.Object[] getBindArgs();
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String getSql();
   @Source(SUSI_DATABASE_INFORMATION)  int getConnectionFlags();
   @Source(SUSI_DATABASE_INFORMATION)  android.database.sqlite.SQLiteDatabase getDatabase();
   @Source(SUSI_DATABASE_INFORMATION)  android.database.sqlite.SQLiteSession getSession();
   @Source(SUSI_DATABASE_INFORMATION)  int getUniqueId();
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String[] getColumnNames();
}
class SQLiteQueryBuilder{
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String getTables();
   @Source(SUSI_DATABASE_INFORMATION)  android.database.Cursor query(  android.database.sqlite.SQLiteDatabase arg0, java.lang.String[] arg1, java.lang.String arg2, java.lang.String[] arg3, java.lang.String arg4, java.lang.String arg5, java.lang.String arg6);
   @Source(SUSI_DATABASE_INFORMATION)  android.database.Cursor query(  android.database.sqlite.SQLiteDatabase arg0, java.lang.String[] arg1, java.lang.String arg2, java.lang.String[] arg3, java.lang.String arg4, java.lang.String arg5, java.lang.String arg6, java.lang.String arg7);
}
class SqliteWrapper{
   @Source(SUSI_DATABASE_INFORMATION)  android.net.Uri insert(  android.content.Context arg0, android.content.ContentResolver arg1, android.net.Uri arg2, android.content.ContentValues arg3);
   @Source(SUSI_DATABASE_INFORMATION)  android.database.Cursor query(  android.content.Context arg0, android.content.ContentResolver arg1, android.net.Uri arg2, java.lang.String[] arg3, java.lang.String arg4, java.lang.String[] arg5, java.lang.String arg6);
}

package org.apache.http.conn;

class BasicManagedEntity{
    void writeTo(  @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getContent();
}
class HttpHostConnectException{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpHost getHost();
}

package com.android.emailcommon.utility;

class AttachmentUtilities{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getAttachmentUri(  long arg0, long arg1);
   @Source(SUSI_NO_CATEGORY)  java.io.File getAttachmentFilename(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
   @Source(SUSI_NO_CATEGORY)  java.io.File getAttachmentDirectory(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
}
class EmailAsyncTask{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object callDoInBackgroundForTest(  @Sink(SUSI_NO_CATEGORY) java.lang.Object[] arg0);
}
class EmailAsyncTask$Tracker{
   @Source(SUSI_NO_CATEGORY)  int getTaskCountForTest();
}
class SSLSocketFactory{
   @Source(SUSI_NETWORK_INFORMATION)  java.net.Socket createSocket();
   @Source(SUSI_NETWORK_INFORMATION)  java.net.Socket connectSocket(  java.net.Socket arg0, java.lang.String arg1, int arg2, java.net.InetAddress arg3, int arg4, org.apache.http.params.HttpParams arg5);
   @Source(SUSI_NETWORK_INFORMATION)  java.net.Socket createSocket(  java.net.Socket arg0, java.lang.String arg1, int arg2, boolean arg3);
}
class SSLUtils{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.emailcommon.utility.SSLSocketFactory getHttpSocketFactory(  boolean arg0, javax.net.ssl.KeyManager arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.SSLCertificateSocketFactory getSSLSocketFactory(  boolean arg0, int arg1);
}
class SSLUtils$KeyChainKeyManager{
   @Source(SUSI_NETWORK_INFORMATION)  java.security.PrivateKey getPrivateKey(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String chooseClientAlias(  java.lang.String[] arg0, java.security.Principal[] arg1, java.net.Socket arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.security.cert.X509Certificate[] getCertificateChain(  java.lang.String arg0);
}
class SSLUtils$StubKeyManager{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getClientAliases(  java.lang.String arg0, java.security.Principal[] arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getServerAliases(  java.lang.String arg0, java.security.Principal[] arg1);
}
class SSLUtils$TrackingKeyManager{
   @Source(SUSI_NETWORK_INFORMATION)  java.security.PrivateKey getPrivateKey(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.security.cert.X509Certificate[] getCertificateChain(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  long getLastCertReqTime();
}
class Utility{
   @Source(SUSI_NO_CATEGORY)  java.lang.Long getFirstRowLong(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5, @Sink(SUSI_NO_CATEGORY) int arg6, @Sink(SUSI_NO_CATEGORY) java.lang.Long arg7);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getRowColumns(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getFirstRowColumn(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5, @Sink(SUSI_NO_CATEGORY) int arg6, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg7, @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.utility.Utility$CursorGetter arg8);
   @Source(SUSI_NO_CATEGORY)  java.lang.Integer getFirstRowInt(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5, @Sink(SUSI_NO_CATEGORY) int arg6, @Sink(SUSI_NO_CATEGORY) java.lang.Integer arg7);
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.provider.Account findExistingAccount(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getRowColumns(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg4);
}
class Utility$3{
   @Source(SUSI_NO_CATEGORY)  java.lang.Long get(  @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class Utility$4{
   @Source(SUSI_NO_CATEGORY)  java.lang.Integer get(  @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}

package java.io;

class BufferedOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class BufferedWriter{
    void write(  @Sink(SUSI_NO_CATEGORY) char[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void write(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class ByteArrayOutputStream{
   @Source(SUSI_NO_CATEGORY)  byte[] toByteArray();
}
class CharArrayWriter{
   @Source(SUSI_NO_CATEGORY)  java.io.CharArrayWriter append(  @Sink(SUSI_NO_CATEGORY) char arg0);
}
class Console{
   @Source(SUSI_NO_CATEGORY)  java.io.Console getConsole();
}
class DataOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void writeChar(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void writeByte(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void writeDouble(  @Sink(SUSI_NO_CATEGORY) double arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void writeChars(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void writeUTF(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void writeFloat(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class EmulatedFields{
   @Source(SUSI_NO_CATEGORY)  byte get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) byte arg1);
   @Source(SUSI_NO_CATEGORY)  long get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  int get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  float get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_NO_CATEGORY)  short get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) short arg1);
   @Source(SUSI_NO_CATEGORY)  double get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) double arg1);
   @Source(SUSI_NO_CATEGORY)  char get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) char arg1);
}
class EmulatedFields$ObjectSlot{
   @Source(SUSI_NO_CATEGORY)  java.io.ObjectStreamField getField();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getFieldValue();
}
class EmulatedFieldsForDumping{
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) char arg1);
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) double arg1);
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) byte arg1);
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) short arg1);
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
}
class EmulatedFieldsForLoading{
   @Source(SUSI_NO_CATEGORY)  double get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) double arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  char get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) char arg1);
   @Source(SUSI_NO_CATEGORY)  float get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_NO_CATEGORY)  long get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  java.io.ObjectStreamClass getObjectStreamClass();
   @Source(SUSI_NO_CATEGORY)  short get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) short arg1);
   @Source(SUSI_NO_CATEGORY)  byte get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) byte arg1);
}
class File{
   @Source(SUSI_NO_CATEGORY)  boolean setExecutable(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  boolean setReadable(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  boolean setReadable(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setExecutable(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setWritable(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  boolean setWritable(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setLastModified(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.File createTempFile(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.io.File getParentFile();
   @Source(SUSI_NO_CATEGORY)  long getFreeSpace();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAbsolutePath();
   @Source(SUSI_NO_CATEGORY)  java.io.File getAbsoluteFile();
   @Source(SUSI_NO_CATEGORY)  java.io.File getCanonicalFile();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCanonicalPath();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getParent();
   @Source(SUSI_NO_CATEGORY)  long getUsableSpace();
   @Source(SUSI_NO_CATEGORY)  long getTotalSpace();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPath();
}
class FileDescriptor{
   @Source(SUSI_NO_CATEGORY)  int getInt$();
}
class FileInputStream{
   @Source(SUSI_NO_CATEGORY)  java.io.FileDescriptor getFD();
   @Source(SUSI_NO_CATEGORY)  java.nio.channels.FileChannel getChannel();
}
class FileOutputStream{
    void write(  @Sink(SUSI_FILE) byte[] arg0, @Sink(SUSI_FILE) int arg1, @Sink(SUSI_FILE) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.nio.channels.FileChannel getChannel();
   @Source(SUSI_NO_CATEGORY)  java.io.FileDescriptor getFD();
}
class FilePermission{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getActions();
}
class FilterOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class InputStreamReader{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getEncoding();
}
class InvalidClassException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
}
class ObjectOutputStream{
    void writeDouble(  @Sink(SUSI_NO_CATEGORY) double arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void writeUTF(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void writeClassDescriptor(  @Sink(SUSI_NO_CATEGORY) java.io.ObjectStreamClass arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void writeObject(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
    void writeUnshared(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
    void writeByte(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void writeFloat(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void writeShort(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void writeChar(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void writeChars(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void writeLong(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void writeBoolean(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void writeBytes(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void writeInt(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ObjectStreamClass{
   @Source(SUSI_NO_CATEGORY)  byte getFlags();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Method getMethodWriteObject();
   @Source(SUSI_NO_CATEGORY)  java.io.ObjectStreamClass lookupStreamClass(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0);
   @Source(SUSI_NO_CATEGORY)  long getConstructor();
   @Source(SUSI_NO_CATEGORY)  java.util.List getHierarchy();
   @Source(SUSI_NO_CATEGORY)  java.io.ObjectStreamField[] getLoadFields();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Method getMethodReadResolve();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Method getMethodWriteReplace();
   @Source(SUSI_NO_CATEGORY)  java.io.ObjectStreamField[] getFields();
   @Source(SUSI_NO_CATEGORY)  java.io.ObjectStreamField getField(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Method getMethodReadObject();
   @Source(SUSI_NO_CATEGORY)  java.io.ObjectStreamClass getSuperclass();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Method getMethodReadObjectNoData();
   @Source(SUSI_NO_CATEGORY)  java.io.ObjectStreamField[] fields();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Field getReflectionField(  @Sink(SUSI_NO_CATEGORY) java.io.ObjectStreamField arg0);
   @Source(SUSI_NO_CATEGORY)  long getSerialVersionUID();
}
class ObjectStreamField{
   @Source(SUSI_NO_CATEGORY)  char getTypeCode();
   @Source(SUSI_NO_CATEGORY)  java.lang.Class getTypeInternal();
   @Source(SUSI_NO_CATEGORY)  int getOffset();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTypeString();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.Class getType();
}
class OutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class OutputStreamWriter{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getEncoding();
}
class PipedOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class PrintStream{
    void println(  @Sink(SUSI_NO_CATEGORY) double arg0);
    void print(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void println(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
    void println(  @Sink(SUSI_NO_CATEGORY) char arg0);
    void println(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void println(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void println(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void println(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void println(  @Sink(SUSI_NO_CATEGORY) char[] arg0);
}
class PrintWriter{
    void println(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void println(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) char[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.PrintWriter append(  @Sink(SUSI_NO_CATEGORY) char arg0);
    void println(  @Sink(SUSI_NO_CATEGORY) double arg0);
    void println(  @Sink(SUSI_NO_CATEGORY) char arg0);
    void println(  @Sink(SUSI_NO_CATEGORY) char[] arg0);
    void println(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void println(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void println(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void print(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class RandomAccessFile{
    void write(  @Sink(SUSI_FILE) byte[] arg0, @Sink(SUSI_FILE) int arg1, @Sink(SUSI_FILE) int arg2);
    void setLength(  @Sink(SUSI_FILE) long arg0);
    void writeUTF(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void writeChars(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void writeDouble(  @Sink(SUSI_NO_CATEGORY) double arg0);
    void writeFloat(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void writeChar(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  long getFilePointer();
   @Source(SUSI_NO_CATEGORY)  java.nio.channels.FileChannel getChannel();
   @Source(SUSI_NO_CATEGORY)  java.io.FileDescriptor getFD();
}
class Reader{
   @Source(SUSI_NO_CATEGORY)  int read(  @Sink(SUSI_NO_CATEGORY) java.nio.CharBuffer arg0);
   @Source(SUSI_NO_CATEGORY)  long skip(  @Sink(SUSI_NO_CATEGORY) long arg0);
}
class SerializablePermission{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getActions();
}
class StringWriter{
   @Source(SUSI_NO_CATEGORY)  java.io.StringWriter append(  @Sink(SUSI_NO_CATEGORY) char arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.StringBuffer getBuffer();
}
class WriteAbortedException{
   @Source(SUSI_NO_CATEGORY)  java.lang.Throwable getCause();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
}
class Writer{
    void write(  @Sink(SUSI_NO_CATEGORY) char[] arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.Writer append(  @Sink(SUSI_NO_CATEGORY) char arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.Writer append(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}

package android.webkit;

class AccessibilityInjector{
   @Source(SUSI_NO_CATEGORY)  boolean performAccessibilityAction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
}
class AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding{
   @Source(SUSI_NO_CATEGORY)  int getThirdArgument(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getKeyCode();
   @Source(SUSI_NO_CATEGORY)  int getActionCount();
   @Source(SUSI_NO_CATEGORY)  int getModifiers();
   @Source(SUSI_NO_CATEGORY)  int getSecondArgument(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getActionCode(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getAction(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getFirstArgument(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class BrowserFrame{
    void addJavascriptInterface(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_BROWSER_INFORMATION)  android.webkit.CallbackProxy getCallbackProxy();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getRawResFilename(  @Sink(SUSI_BROWSER_INFORMATION) int arg0, @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg1);
   @Source(SUSI_BROWSER_INFORMATION)  boolean getShouldStartScrolledRight();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getUserAgentString();
}
class ByteArrayBuilder{
   @Source(SUSI_NO_CATEGORY)  int getByteSize();
   @Source(SUSI_NO_CATEGORY)  android.webkit.ByteArrayBuilder$Chunk getFirstChunk();
}
class CacheManager{
    void saveCacheFile(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.webkit.CacheManager$CacheResult arg1);
   @Source(SUSI_NO_CATEGORY)  java.io.File getCacheFileBaseDir();
   @Source(SUSI_NO_CATEGORY)  java.io.File access$000();
   @Source(SUSI_NO_CATEGORY)  android.webkit.CacheManager$CacheResult getCacheFile(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) java.util.Map arg2);
   @Source(SUSI_NO_CATEGORY)  android.webkit.CacheManager$CacheResult getCacheFile(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.Map arg1);
}
class CacheManager$CacheResult{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getETag();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getExpiresString();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInputStream();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMimeType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getContentDisposition();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLastModified();
   @Source(SUSI_NO_CATEGORY)  long getExpires();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getEncoding();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLocalPath();
   @Source(SUSI_NO_CATEGORY)  java.io.OutputStream getOutputStream();
   @Source(SUSI_NO_CATEGORY)  long getContentLength();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLocation();
   @Source(SUSI_NO_CATEGORY)  int getHttpStatusCode();
}
class CallbackProxy{
    void onReceivedClientCertRequest(  @Sink(SUSI_NO_CATEGORY) android.webkit.ClientCertRequestHandler arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String onJsPrompt(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  boolean shouldOverrideUrlLoading(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void onJsAlert(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void onReceivedError(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void onReceivedLoginRequest(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  boolean onSavePassword(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.os.Message arg3);
   @Source(SUSI_NO_CATEGORY)  boolean onJsBeforeUnload(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void onScaleChanged(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void onReceivedSslError(  @Sink(SUSI_NO_CATEGORY) android.webkit.SslErrorHandler arg0, @Sink(SUSI_NO_CATEGORY) android.net.http.SslError arg1);
    void onReachedMaxAppCacheSize(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) android.webkit.WebStorage$QuotaUpdater arg2);
    void onReceivedHttpAuthRequest(  @Sink(SUSI_NO_CATEGORY) android.webkit.HttpAuthHandler arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  boolean uiOverrideUrlLoading(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void onExceededDatabaseQuota(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) long arg3, @Sink(SUSI_NO_CATEGORY) long arg4, @Sink(SUSI_NO_CATEGORY) android.webkit.WebStorage$QuotaUpdater arg5);
    void onFormResubmission(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0, @Sink(SUSI_NO_CATEGORY) android.os.Message arg1);
    void onPageStarted(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg1);
    void onReceivedHttpAuthCredentials(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
    void addMessageToConsole(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void onGeolocationPermissionsShowPrompt(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.webkit.GeolocationPermissions$Callback arg1);
   @Source(SUSI_NO_CATEGORY)  boolean onJsConfirm(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  boolean onDownloadStart(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) long arg5);
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebBackForwardListClient getWebBackForwardListClient();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebChromeClient getWebChromeClient();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebViewClient getWebViewClient();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebBackForwardListClassic getBackForwardList();
   @Source(SUSI_NO_CATEGORY)  int getProgress();
}
class CallbackProxy$ResultTransport{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getResult();
}
class CallbackProxy$UploadFile{
   @Source(SUSI_NO_CATEGORY)  android.net.Uri getResult();
}
class CallbackProxy$UploadFileMessageData{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAcceptType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCapture();
   @Source(SUSI_NO_CATEGORY)  android.webkit.CallbackProxy$UploadFile getUploadFile();
}
class CertTool{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSignedPublicKey(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCertType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getKeyStrengthList();
}
class CookieManager{
    void setAcceptFileSchemeCookiesImpl(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setAcceptFileSchemeCookies(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setAcceptCookie(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setCookie(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCookie(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCookie(  @Sink(SUSI_NO_CATEGORY) android.net.WebAddress arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCookie(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  android.webkit.CookieManager getInstance();
}
class CookieManagerClassic{
    void setCookie(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) boolean arg2);
    void setAcceptFileSchemeCookiesImpl(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setAcceptCookie(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setCookie(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.webkit.CookieManagerClassic getInstance();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCookie(  @Sink(SUSI_NO_CATEGORY) android.net.WebAddress arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCookie(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCookie(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class CookieSyncManager{
   @Source(SUSI_NO_CATEGORY)  android.webkit.CookieSyncManager getInstance();
   @Source(SUSI_NO_CATEGORY)  android.webkit.CookieSyncManager createInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class DateSorter{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLabel(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getIndex(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  long getBoundary(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class DeviceMotionAndOrientationManager{
    void setUseMock();
    void setMockOrientation(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) double arg1, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg2, @Sink(SUSI_SYSTEM_SETTINGS) double arg3, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg4, @Sink(SUSI_SYSTEM_SETTINGS) double arg5);
}
class FindActionModeCallback{
    void setText(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getActionModeGlobalBottom();
}
class GeolocationPermissions{
   @Source(SUSI_LOCATION_INFORMATION)  android.webkit.GeolocationPermissions getInstance();
}
class GeolocationPermissionsClassic{
    void getAllowed(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.webkit.ValueCallback arg1);
   @Source(SUSI_LOCATION_INFORMATION)  android.webkit.GeolocationPermissionsClassic getInstance();
}
class HTML5Audio$IsPrivateBrowsingEnabledGetter{
   @Source(SUSI_NO_CATEGORY)  boolean get();
}
class HTML5VideoFullScreen{
   @Source(SUSI_NO_CATEGORY)  int getBufferPercentage();
}
class HTML5VideoInline{
   @Source(SUSI_NO_CATEGORY)  int getTextureName();
   @Source(SUSI_NO_CATEGORY)  android.graphics.SurfaceTexture getSurfaceTexture(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class HTML5VideoView{
    void setVideoURI(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.webkit.HTML5VideoViewProxy arg1);
    void setOnCompletionListener(  @Sink(SUSI_NO_CATEGORY) android.webkit.HTML5VideoViewProxy arg0);
    void setOnInfoListener(  @Sink(SUSI_NO_CATEGORY) android.webkit.HTML5VideoViewProxy arg0);
    void setOnErrorListener(  @Sink(SUSI_NO_CATEGORY) android.webkit.HTML5VideoViewProxy arg0);
   @Source(SUSI_FILE_INFORMATION)  boolean getPauseDuringPreparing();
   @Source(SUSI_NO_CATEGORY)  boolean getPlayerBuffering();
   @Source(SUSI_NO_CATEGORY)  int getCurrentPosition();
   @Source(SUSI_NO_CATEGORY)  int getDuration();
   @Source(SUSI_NO_CATEGORY)  boolean getStartWhenPrepared();
   @Source(SUSI_NO_CATEGORY)  int getCurrentState();
   @Source(SUSI_NO_CATEGORY)  int getTextureName();
   @Source(SUSI_NO_CATEGORY)  int getVideoLayerId();
   @Source(SUSI_NO_CATEGORY)  boolean getReadyToUseSurfTex();
}
class HTML5VideoViewProxy{
    void setBaseLayer(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void onPrepared(  @Sink(SUSI_NO_CATEGORY) android.media.MediaPlayer arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebViewClassic getWebView();
}
class HTML5VideoViewProxy$PosterDownloader{
    void data(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class JWebCoreJavaBridge{
    void storeFilePathForContentUri(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class JniUtil{
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
}
class JsPromptResult{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getStringResult();
}
class JsResult{
   @Source(SUSI_NO_CATEGORY)  boolean getResult();
}
class L10nUtils{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLocalisedString(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class MimeTypeMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFileExtensionFromUrl(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMimeTypeFromExtension(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getExtensionFromMimeType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.webkit.MimeTypeMap getSingleton();
}
class MockGeolocation{
    void setError(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setPosition(  @Sink(SUSI_NO_CATEGORY) double arg0, @Sink(SUSI_NO_CATEGORY) double arg1, @Sink(SUSI_NO_CATEGORY) double arg2);
    void setPermission(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class OverScrollGlow{
   @Source(SUSI_NO_CATEGORY)  boolean drawEdgeGlows(  @Sink(SUSI_NO_CATEGORY) android.graphics.Canvas arg0);
}
class Plugin{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDescription();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPath();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFileName();
}
class PluginList{
   @Source(SUSI_NO_CATEGORY)  java.util.List getList();
}
class PluginManager{
   @Source(SUSI_NO_CATEGORY)  java.lang.Class getPluginClass(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPluginsAPKName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getPluginDirectories();
   @Source(SUSI_NO_CATEGORY)  android.webkit.PluginManager getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPluginSharedDataDirectory();
}
class SslCertLookupTable{
    void setIsAllowed(  @Sink(SUSI_NO_CATEGORY) android.net.http.SslError arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.webkit.SslCertLookupTable getInstance();
}
class SslClientCertLookupTable{
    void Allow(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.security.PrivateKey arg1, @Sink(SUSI_NO_CATEGORY) byte[][] arg2);
   @Source(SUSI_NETWORK_INFORMATION)  android.webkit.SslClientCertLookupTable getInstance();
}
class URLUtil{
   @Source(SUSI_NO_CATEGORY)  byte[] decode(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
}
class ViewManager{
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList access$300(  @Sink(SUSI_NO_CATEGORY) android.webkit.ViewManager arg0);
   @Source(SUSI_NO_CATEGORY)  android.webkit.ViewManager$ChildView createView();
}
class ViewStateSerializer{
   @Source(SUSI_NO_CATEGORY)  boolean serializeViewState(  @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg0, @Sink(SUSI_NO_CATEGORY) android.webkit.WebViewCore$DrawData arg1);
}
class WebBackForwardList{
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebHistoryItem getItemAtIndex(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getCurrentIndex();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebBackForwardList clone();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebHistoryItem getCurrentItem();
   @Source(SUSI_NO_CATEGORY)  int getSize();
}
class WebBackForwardListClassic{
   @Source(SUSI_NO_CATEGORY)  int getSize();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebHistoryItem getCurrentItem();
   @Source(SUSI_NO_CATEGORY)  int getCurrentIndex();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebHistoryItem getItemAtIndex(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getClearPending();
}
class WebChromeClient{
    void setupAutoFill(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getDefaultVideoPoster();
   @Source(SUSI_NO_CATEGORY)  android.view.View getVideoLoadingProgressView();
}
class WebHistoryItem{
   @Source(SUSI_NO_CATEGORY)  int getId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getOriginalUrl();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUrl();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getFavicon();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebHistoryItem clone();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTitle();
}
class WebHistoryItemClassic{
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getFavicon();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTitle();
   @Source(SUSI_NO_CATEGORY)  int getId();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getCustomData();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTouchIconUrl();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUrl();
   @Source(SUSI_NO_CATEGORY)  byte[] getFlattenedData();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getOriginalUrl();
}
class WebIconDatabase{
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebIconDatabase getInstance();
}
class WebIconDatabaseClassic{
    void requestIconForPageUrl(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.webkit.WebIconDatabase$IconListener arg1);
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebIconDatabaseClassic getInstance();
}
class WebResourceResponse{
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getData();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getEncoding();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMimeType();
}
class WebSettings{
    void setRenderPriority(  @Sink(SUSI_NO_CATEGORY) android.webkit.WebSettings$RenderPriority arg0);
    void setBuiltInZoomControls(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setSerifFontFamily(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setPluginState(  @Sink(SUSI_NO_CATEGORY) android.webkit.WebSettings$PluginState arg0);
    void setDatabaseEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setSupportMultipleWindows(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setAppCachePath(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setLoadWithOverviewMode(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setSansSerifFontFamily(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setDomStorageEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setCacheMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setTextSize(  @Sink(SUSI_NO_CATEGORY) android.webkit.WebSettings$TextSize arg0);
    void setSaveFormData(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setBlockNetworkImage(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setFixedFontFamily(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setMediaPlaybackRequiresUserGesture(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setJavaScriptCanOpenWindowsAutomatically(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setTextZoom(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setMinimumLogicalFontSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDatabasePath(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setStandardFontFamily(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setDisplayZoomControls(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setGeolocationDatabasePath(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setLoadsImagesAutomatically(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setLightTouchEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setBlockNetworkLoads(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setJavaScriptEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setAppCacheMaxSize(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setSavePassword(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setUseWebViewBackgroundForOverscrollBackground(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setDefaultFontSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setPluginsPath(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setUserAgentString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setDefaultTextEncodingName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setPluginsEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setNeedInitialFocus(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setAllowFileAccess(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setAllowContentAccess(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setUseWideViewPort(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setFantasyFontFamily(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setUserAgent(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setNavDump(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setAppCacheEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setCursiveFontFamily(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setUseDoubleTree(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setDefaultZoom(  @Sink(SUSI_NO_CATEGORY) android.webkit.WebSettings$ZoomDensity arg0);
    void setGeolocationEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setLayoutAlgorithm(  @Sink(SUSI_NO_CATEGORY) android.webkit.WebSettings$LayoutAlgorithm arg0);
    void setDefaultFixedFontSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setMinimumFontSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSupportZoom(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setEnableSmoothTransition(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getSavePassword();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getDatabaseEnabled();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getLightTouchEnabled();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getJavaScriptEnabled();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getPluginsEnabled();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getDomStorageEnabled();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUserAgentString();
   @Source(SUSI_NO_CATEGORY)  boolean getLoadWithOverviewMode();
   @Source(SUSI_NO_CATEGORY)  int getMinimumLogicalFontSize();
   @Source(SUSI_NO_CATEGORY)  int getDefaultFixedFontSize();
   @Source(SUSI_NO_CATEGORY)  boolean getDisplayZoomControls();
   @Source(SUSI_NO_CATEGORY)  int getDefaultFontSize();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSerifFontFamily();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPluginsPath();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebSettings$PluginState getPluginState();
   @Source(SUSI_NO_CATEGORY)  boolean getUseWideViewPort();
   @Source(SUSI_NO_CATEGORY)  int getTextZoom();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getStandardFontFamily();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFantasyFontFamily();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSansSerifFontFamily();
   @Source(SUSI_NO_CATEGORY)  boolean getBlockNetworkLoads();
   @Source(SUSI_NO_CATEGORY)  boolean getUseDoubleTree();
   @Source(SUSI_NO_CATEGORY)  boolean getJavaScriptCanOpenWindowsAutomatically();
   @Source(SUSI_NO_CATEGORY)  boolean getSaveFormData();
   @Source(SUSI_NO_CATEGORY)  int getCacheMode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDatabasePath();
   @Source(SUSI_NO_CATEGORY)  boolean getAllowContentAccess();
   @Source(SUSI_NO_CATEGORY)  boolean getBuiltInZoomControls();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFixedFontFamily();
   @Source(SUSI_NO_CATEGORY)  boolean getUseWebViewBackgroundForOverscrollBackground();
   @Source(SUSI_NO_CATEGORY)  boolean getMediaPlaybackRequiresUserGesture();
   @Source(SUSI_NO_CATEGORY)  boolean getNavDump();
   @Source(SUSI_NO_CATEGORY)  boolean getBlockNetworkImage();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDefaultTextEncodingName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCursiveFontFamily();
   @Source(SUSI_NO_CATEGORY)  int getUserAgent();
   @Source(SUSI_NO_CATEGORY)  boolean getLoadsImagesAutomatically();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebSettings$ZoomDensity getDefaultZoom();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDefaultUserAgent(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebSettings$TextSize getTextSize();
   @Source(SUSI_NO_CATEGORY)  boolean getAllowFileAccess();
   @Source(SUSI_NO_CATEGORY)  int getMinimumFontSize();
}
class WebSettingsClassic{
    void setDefaultFontSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setPluginsPath(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setMinimumLogicalFontSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setPluginsEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setUserAgent(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setAutoFillEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setMinimumFontSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setUseDoubleTree(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setDefaultFixedFontSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getDomStorageEnabled();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getJavaScriptEnabled();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getPluginsEnabled();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getSavePassword();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getDatabaseEnabled();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getAutoFillEnabled();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getHardwareAccelSkiaEnabled();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getLightTouchEnabled();
   @Source(SUSI_NO_CATEGORY)  boolean getAllowContentAccess();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAcceptLanguage();
   @Source(SUSI_NO_CATEGORY)  boolean getNavDump();
   @Source(SUSI_NO_CATEGORY)  boolean getLoadsImagesAutomatically();
   @Source(SUSI_NO_CATEGORY)  boolean getUseFixedViewport();
   @Source(SUSI_NO_CATEGORY)  boolean getLoadWithOverviewMode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getStandardFontFamily();
   @Source(SUSI_NO_CATEGORY)  boolean getUseWebViewBackgroundForOverscrollBackground();
   @Source(SUSI_NO_CATEGORY)  boolean getBlockNetworkImage();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebSettings$ZoomDensity getDefaultZoom();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCursiveFontFamily();
   @Source(SUSI_NO_CATEGORY)  int getMinimumFontSize();
   @Source(SUSI_NO_CATEGORY)  boolean getUseDoubleTree();
   @Source(SUSI_NO_CATEGORY)  boolean getNeedInitialFocus();
   @Source(SUSI_NO_CATEGORY)  int getCacheMode();
   @Source(SUSI_NO_CATEGORY)  boolean getAllowUniversalAccessFromFileURLs();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFixedFontFamily();
   @Source(SUSI_NO_CATEGORY)  int getDoubleTapToastCount();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebSettings$PluginState getPluginState();
   @Source(SUSI_NO_CATEGORY)  boolean getBuiltInZoomControls();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSansSerifFontFamily();
   @Source(SUSI_NO_CATEGORY)  boolean getJavaScriptCanOpenWindowsAutomatically();
   @Source(SUSI_NO_CATEGORY)  int getDefaultFixedFontSize();
   @Source(SUSI_NO_CATEGORY)  int getDoubleTapZoom();
   @Source(SUSI_NO_CATEGORY)  boolean getMediaPlaybackRequiresUserGesture();
   @Source(SUSI_NO_CATEGORY)  boolean getAllowFileAccess();
   @Source(SUSI_NO_CATEGORY)  int getMinimumLogicalFontSize();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getUseWideViewPort();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDefaultTextEncodingName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDefaultUserAgentForLocale(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.util.Locale arg1);
   @Source(SUSI_NO_CATEGORY)  boolean getShowVisualIndicator();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDatabasePath();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFantasyFontFamily();
   @Source(SUSI_NO_CATEGORY)  boolean getDisplayZoomControls();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSerifFontFamily();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUserAgentString();
   @Source(SUSI_NO_CATEGORY)  int getTextZoom();
   @Source(SUSI_NO_CATEGORY)  int getDefaultFontSize();
   @Source(SUSI_NO_CATEGORY)  boolean getBlockNetworkLoads();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPluginsPath();
   @Source(SUSI_NO_CATEGORY)  boolean getSaveFormData();
   @Source(SUSI_NO_CATEGORY)  int getUserAgent();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebSettingsClassic$AutoFillProfile getAutoFillProfile();
   @Source(SUSI_NO_CATEGORY)  boolean getAllowFileAccessFromFileURLs();
}
class WebSettingsClassic$AutoFillProfile{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFullName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPhoneNumber();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCity();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCountry();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getState();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCompanyName();
   @Source(SUSI_NO_CATEGORY)  int getUniqueId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getZipCode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getEmailAddress();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAddressLine2();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAddressLine1();
}
class WebStorage{
    void setQuotaForOrigin(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebStorage getInstance();
}
class WebStorage$Origin{
   @Source(SUSI_NO_CATEGORY)  long getUsage();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getOrigin();
   @Source(SUSI_NO_CATEGORY)  long getQuota();
}
class WebStorageClassic{
    void setAppCacheMaximumSize(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setQuotaForOrigin(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.util.Collection getOriginsSync();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebStorageClassic getInstance();
    void getUsageForOrigin(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.webkit.ValueCallback arg1);
    void getQuotaForOrigin(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.webkit.ValueCallback arg1);
}
class WebSyncManager{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
}
class WebView{
    void setScrollBarStyle(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void saveWebArchive(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void saveWebArchive(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) android.webkit.ValueCallback arg2);
    void setMapTrackballToArrowKeys(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setFrame(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setBackgroundColor(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setOverScrollMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void dumpViewHierarchyWithProperties(  @Sink(SUSI_NO_CATEGORY) java.io.BufferedWriter arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void savePassword(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void setVerticalScrollbarOverlay(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setLayoutParams(  @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup$LayoutParams arg0);
    void setHttpAuthUsernamePassword(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
    void setWebChromeClient(  @Sink(SUSI_NO_CATEGORY) android.webkit.WebChromeClient arg0);
    void setLayerType(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Paint arg1);
   @Source(SUSI_NO_CATEGORY)  boolean restorePicture(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0, @Sink(SUSI_NO_CATEGORY) java.io.File arg1);
    void setInitialScale(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean savePicture(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0, @Sink(SUSI_NO_CATEGORY) java.io.File arg1);
    void setWebViewClient(  @Sink(SUSI_NO_CATEGORY) android.webkit.WebViewClient arg0);
   @Source(SUSI_NO_CATEGORY)  boolean performAccessibilityAction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void setCertificate(  @Sink(SUSI_NO_CATEGORY) android.net.http.SslCertificate arg0);
    void setNetworkAvailable(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setHorizontalScrollbarOverlay(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int getContentHeight();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTouchIconUrl();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebBackForwardList restoreState(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
   @Source(SUSI_NO_CATEGORY)  android.webkit.PluginList getPluginList();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getHttpAuthUsernamePassword(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  float getScale();
   @Source(SUSI_NO_CATEGORY)  android.view.View getZoomControls();
   @Source(SUSI_NO_CATEGORY)  int getVisibleTitleHeight();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getOriginalUrl();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTitle();
   @Source(SUSI_NO_CATEGORY)  int getContentWidth();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUrl();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebSettings getSettings();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebViewProvider getWebViewProvider();
   @Source(SUSI_NO_CATEGORY)  android.net.http.SslCertificate getCertificate();
   @Source(SUSI_NO_CATEGORY)  int getProgress();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebBackForwardList saveState(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getFavicon();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebView$HitTestResult getHitTestResult();
}
class WebView$HitTestResult{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getExtra();
   @Source(SUSI_NO_CATEGORY)  int getType();
}
class WebView$PrivateAccess{
    void setMeasuredDimension(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setScrollYRaw(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setScrollXRaw(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getVerticalScrollFactor();
   @Source(SUSI_NO_CATEGORY)  float getHorizontalScrollFactor();
   @Source(SUSI_NO_CATEGORY)  int getHorizontalScrollbarHeight();
}
class WebView$WebViewTransport{
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebView getWebView();
}
class WebViewClassic{
    void sendBatchableInputMessage(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg3);
    void setNetworkAvailable(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setSelection(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean savePicture(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0, @Sink(SUSI_NO_CATEGORY) java.io.File arg1);
    void setWebBackForwardListClient(  @Sink(SUSI_NO_CATEGORY) android.webkit.WebBackForwardListClient arg0);
    void setWebChromeClient(  @Sink(SUSI_NO_CATEGORY) android.webkit.WebChromeClient arg0);
    void setJsFlags(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  boolean restorePicture(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0, @Sink(SUSI_NO_CATEGORY) java.io.File arg1);
    void setMockGeolocationPosition(  @Sink(SUSI_NO_CATEGORY) double arg0, @Sink(SUSI_NO_CATEGORY) double arg1, @Sink(SUSI_NO_CATEGORY) double arg2);
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebBackForwardList restoreState(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
    void setInitialScale(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setHttpAuthUsernamePassword(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
    void setLayerType(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Paint arg1);
    void setWebViewClient(  @Sink(SUSI_NO_CATEGORY) android.webkit.WebViewClient arg0);
    void setMockGeolocationError(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void dumpViewHierarchyWithProperties(  @Sink(SUSI_NO_CATEGORY) java.io.BufferedWriter arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setMockDeviceOrientation(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) double arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) double arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4, @Sink(SUSI_NO_CATEGORY) double arg5);
    void setScrollBarStyle(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setFrame(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void saveViewState(  @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg0, @Sink(SUSI_NO_CATEGORY) android.webkit.ValueCallback arg1);
    void saveWebArchive(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) android.webkit.ValueCallback arg2);
   @Source(SUSI_NO_CATEGORY)  boolean performAccessibilityAction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void setLayoutParams(  @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup$LayoutParams arg0);
   @Source(SUSI_NO_CATEGORY)  boolean onSavePassword(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.os.Message arg3);
    void setOverScrollMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void saveWebArchive(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setMockGeolocationPermission(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setNetworkType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebViewProvider$ViewDelegate getViewDelegate();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTouchIconUrl();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSelection();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebViewClient getWebViewClient();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebViewCore getWebViewCore();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTitle();
   @Source(SUSI_NO_CATEGORY)  int getContentWidth();
   @Source(SUSI_NO_CATEGORY)  int getContentHeight();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUrl();
   @Source(SUSI_NO_CATEGORY)  int getBaseLayer();
   @Source(SUSI_NO_CATEGORY)  float getScale();
   @Source(SUSI_NO_CATEGORY)  android.view.View getZoomControls();
   @Source(SUSI_NO_CATEGORY)  int getPageBackgroundColor();
   @Source(SUSI_NO_CATEGORY)  int getTitleHeight();
   @Source(SUSI_NO_CATEGORY)  int getScaledNavSlop();
   @Source(SUSI_NO_CATEGORY)  android.webkit.ViewManager getViewManager();
   @Source(SUSI_NO_CATEGORY)  int getViewHeight();
   @Source(SUSI_NO_CATEGORY)  android.net.http.SslCertificate getCertificate();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebView$HitTestResult getHitTestResult();
   @Source(SUSI_NO_CATEGORY)  int getViewHeightWithTitle();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getOriginalUrl();
   @Source(SUSI_NO_CATEGORY)  int getHistoryPictureWidth();
   @Source(SUSI_NO_CATEGORY)  float getZoomOverviewScale();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebView getWebView();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect sendOurVisibleRect();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getHttpAuthUsernamePassword(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getFavicon();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebViewProvider$ScrollDelegate getScrollDelegate();
   @Source(SUSI_NO_CATEGORY)  int getBlockLeftEdge(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) float arg2);
   @Source(SUSI_NO_CATEGORY)  int getProgress();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebChromeClient getWebChromeClient();
   @Source(SUSI_NO_CATEGORY)  android.webkit.PluginList getPluginList();
   @Source(SUSI_NO_CATEGORY)  int getVisibleTitleHeight();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebSettings getSettings();
   @Source(SUSI_NO_CATEGORY)  int getViewWidth();
   @Source(SUSI_NO_CATEGORY)  android.view.inputmethod.InputConnection onCreateInputConnection(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.EditorInfo arg0);
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebBackForwardListClient getWebBackForwardListClient();
   @Source(SUSI_NO_CATEGORY)  int getScrollX();
   @Source(SUSI_NO_CATEGORY)  int getScrollY();
   @Source(SUSI_NO_CATEGORY)  float getDefaultZoomScale();
}
class WebViewClassic$Factory{
    void setPlatformNotificationsEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebViewFactoryProvider$Statics getStatics();
   @Source(SUSI_NO_CATEGORY)  android.webkit.CookieManager getCookieManager();
   @Source(SUSI_NO_CATEGORY)  android.webkit.GeolocationPermissions getGeolocationPermissions();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebStorage getWebStorage();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDefaultUserAgent(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebIconDatabase getWebIconDatabase();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebViewDatabase getWebViewDatabase(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class WebViewClassic$FocusTransitionDrawable{
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void draw(  @Sink(SUSI_NO_CATEGORY) android.graphics.Canvas arg0);
    void setColorFilter(  @Sink(SUSI_NO_CATEGORY) android.graphics.ColorFilter arg0);
   @Source(SUSI_NO_CATEGORY)  float getProgress();
   @Source(SUSI_NO_CATEGORY)  int getOpacity();
}
class WebViewClassic$InvokeListBox$MyArrayListAdapter{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class WebViewClassic$PrivateHandler{
    void handleMessage(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Looper getUiLooper();
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
}
class WebViewClassic$SelectionHandleAlpha{
   @Source(SUSI_NO_CATEGORY)  int getTargetAlpha();
   @Source(SUSI_NO_CATEGORY)  int getAlpha();
}
class WebViewClassic$WebViewInputConnection{
    void setAutoFillable(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setSelection(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean sendKeyEvent(  @Sink(SUSI_NO_CATEGORY) android.view.KeyEvent arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setComposingRegion(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean performEditorAction(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setupEditorInfo(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.EditorInfo arg0);
}
class WebViewCore{
    void setMockDeviceOrientation(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) double arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) double arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4, @Sink(SUSI_NO_CATEGORY) double arg5);
    void setMockGeolocationPosition(  @Sink(SUSI_NO_CATEGORY) double arg0, @Sink(SUSI_NO_CATEGORY) double arg1, @Sink(SUSI_NO_CATEGORY) double arg2);
    void setMockGeolocationPermission(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setMockGeolocationError(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.webkit.DeviceOrientationService getDeviceOrientationService();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebViewInputDispatcher$WebKitCallbacks getInputDispatcherCallbacks();
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
   @Source(SUSI_NO_CATEGORY)  float getFixedDisplayDensity(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  android.webkit.DeviceMotionService getDeviceMotionService();
   @Source(SUSI_NO_CATEGORY)  android.webkit.BrowserFrame getBrowserFrame();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebViewClassic getWebViewClassic();
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebSettingsClassic getSettings();
}
class WebViewCore$AutoFillData{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPreviewString();
   @Source(SUSI_NO_CATEGORY)  int getQueryId();
}
class WebViewCore$EventHub{
   @Source(SUSI_NO_CATEGORY)  android.os.Looper getWebKitLooper();
}
class WebViewDatabase{
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebViewDatabase getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class WebViewDatabaseClassic{
    void setFormData(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.util.HashMap arg1);
    void setHttpAuthUsernamePassword(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
    void setUsernamePassword(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getFormData(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getUsernamePassword(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebViewDatabaseClassic getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getHttpAuthUsernamePassword(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class WebViewFactory{
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebViewFactoryProvider getProvider();
}
class WebViewFragment{
   @Source(SUSI_NO_CATEGORY)  android.webkit.WebView getWebView();
}
class WebViewInputDispatcher$TouchStream{
   @Source(SUSI_NO_CATEGORY)  android.view.MotionEvent getLastEvent();
}
class ZoomControlExternal{
   @Source(SUSI_NO_CATEGORY)  android.webkit.ZoomControlExternal$ExtendedZoomControls getControls();
}
class ZoomManager{
    void setInitialScaleInPercent(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean onNewPicture(  @Sink(SUSI_NO_CATEGORY) android.webkit.WebViewCore$DrawData arg0);
    void onFirstLayout(  @Sink(SUSI_NO_CATEGORY) android.webkit.WebViewCore$DrawData arg0);
    void setZoomScale(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void restoreZoomState(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
    void setHardwareAccelerated();
   @Source(SUSI_NO_CATEGORY)  float getMaxZoomScale();
   @Source(SUSI_NO_CATEGORY)  float getDefaultMinZoomScale();
   @Source(SUSI_NO_CATEGORY)  float getDefaultMaxZoomScale();
   @Source(SUSI_NO_CATEGORY)  int getDocumentAnchorY();
   @Source(SUSI_NO_CATEGORY)  int getDocumentAnchorX();
   @Source(SUSI_NO_CATEGORY)  android.view.ScaleGestureDetector getScaleGestureDetector();
   @Source(SUSI_NO_CATEGORY)  float getTextWrapScale();
   @Source(SUSI_NO_CATEGORY)  float getScale();
   @Source(SUSI_NO_CATEGORY)  float getZoomOverviewScale();
   @Source(SUSI_NO_CATEGORY)  float getInvScale();
   @Source(SUSI_NO_CATEGORY)  float getDefaultScale();
   @Source(SUSI_NO_CATEGORY)  float getReadingLevelScale();
   @Source(SUSI_NO_CATEGORY)  float getMinZoomScale();
   @Source(SUSI_NO_CATEGORY)  float getInvDefaultScale();
   @Source(SUSI_NO_CATEGORY)  android.view.View getExternalZoomPicker();
}

package com.android.server;

class AlarmManagerService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void setTimeZone(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
    void set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) android.app.PendingIntent arg2);
    void setWakelockWorkSource(  @Sink(SUSI_NO_CATEGORY) android.app.PendingIntent arg0);
    void setTime(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  boolean lookForPackageLocked(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setInexactRepeating(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) android.app.PendingIntent arg3);
}
class AlarmManagerService$Alarm{
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
}
class AppWidgetService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NO_CATEGORY)  int allocateAppWidgetId(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int[] startListeningAsUser(  @Sink(SUSI_NO_CATEGORY) com.android.internal.appwidget.IAppWidgetHost arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.util.List arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
    void notifyAppWidgetViewDataChanged(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean hasBindAppWidgetPermission(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void updateAppWidgetOptions(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
   @Source(SUSI_NO_CATEGORY)  int[] startListening(  @Sink(SUSI_NO_CATEGORY) com.android.internal.appwidget.IAppWidgetHost arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.util.List arg3);
    void bindRemoteViewsService(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void bindAppWidgetId(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
    void setBindAppWidgetPermission(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  boolean bindAppWidgetIdIfAllowed(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg2, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg3);
    void updateAppWidgetIds(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) android.widget.RemoteViews arg1);
    void updateAppWidgetProvider(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) android.widget.RemoteViews arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int[] getAppWidgetIdsForHost(  int arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getInstalledProviders(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.widget.RemoteViews getAppWidgetViews(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle getAppWidgetOptions(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int[] getAppWidgetIds(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
}
class AppWidgetServiceImpl{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    boolean writeStateToFileLocked(  @Sink(SUSI_FILE) java.io.FileOutputStream arg0);
    void notifyAppWidgetViewDataChanged(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void sendEnableIntentLocked(  @Sink(SUSI_NO_CATEGORY) com.android.server.AppWidgetServiceImpl$Provider arg0);
   @Source(SUSI_NO_CATEGORY)  boolean updateProvidersForPackageLocked(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.Set arg1);
    void notifyAppWidgetViewDataChangedInstanceLocked(  @Sink(SUSI_NO_CATEGORY) com.android.server.AppWidgetServiceImpl$AppWidgetId arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setBindAppWidgetPermission(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void bindAppWidgetId(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
    void updateAppWidgetIds(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) android.widget.RemoteViews arg1);
    void registerForBroadcastsLocked(  @Sink(SUSI_NO_CATEGORY) com.android.server.AppWidgetServiceImpl$Provider arg0, @Sink(SUSI_NO_CATEGORY) int[] arg1);
    void partiallyUpdateAppWidgetIds(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) android.widget.RemoteViews arg1);
   @Source(SUSI_NO_CATEGORY)  boolean bindAppWidgetIdIfAllowed(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg2, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg3);
    void deleteAppWidgetLocked(  @Sink(SUSI_NO_CATEGORY) com.android.server.AppWidgetServiceImpl$AppWidgetId arg0);
    void updateAppWidgetProvider(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) android.widget.RemoteViews arg1);
    void sendUpdateIntentLocked(  @Sink(SUSI_NO_CATEGORY) com.android.server.AppWidgetServiceImpl$Provider arg0, @Sink(SUSI_NO_CATEGORY) int[] arg1);
    void bindRemoteViewsService(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.io.File getSettingsFile(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int[] getAppWidgetIdsForHost(  int arg0);
   @Source(SUSI_NO_CATEGORY)  android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int[] getAppWidgetIds(  @Sink(SUSI_NO_CATEGORY) com.android.server.AppWidgetServiceImpl$Provider arg0);
   @Source(SUSI_NO_CATEGORY)  int[] getAppWidgetIds(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  android.widget.RemoteViews getAppWidgetViews(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getUidForPackage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getInstalledProviders(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int[] getAppWidgetIds(  @Sink(SUSI_NO_CATEGORY) com.android.server.AppWidgetServiceImpl$Host arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle getAppWidgetOptions(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class AttributeCache{
    void updateConfiguration(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.res.Configuration arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.server.AttributeCache$Entry get(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int[] arg3);
}
class BackupManagerService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void setBackupProvisioned(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setBackupPassword(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  boolean startConfirmationUi(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String selectBackupTransport(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void prepareOperationTimeout(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) com.android.server.BackupManagerService$BackupRestoreTask arg2);
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void opComplete(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void handleTimeout(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void fullRestore(  @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg0);
    void fullBackup(  @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg5);
    void logBackupComplete(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void restoreAtInstall(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getDestinationString(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getCurrentTransport();
   @Source(SUSI_NETWORK_INFORMATION)  android.content.Intent getConfigurationIntent(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List allAgentPackages();
   @Source(SUSI_NETWORK_INFORMATION)  long getAvailableRestoreToken(  java.lang.String arg0);
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.app.IBackupAgent bindToAgentSynchronous(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.content.pm.ApplicationInfo arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) int arg1);
}
class BackupManagerService$ActiveRestoreSession{
   @Source(SUSI_NO_CATEGORY)  int restoreSome(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) android.app.backup.IRestoreObserver arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg2);
   @Source(SUSI_NO_CATEGORY)  int restorePackage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.app.backup.IRestoreObserver arg1);
}
class BackupManagerService$PerformFullBackupTask{
    void access$900(  @Sink(SUSI_NO_CATEGORY) com.android.server.BackupManagerService$PerformFullBackupTask arg0, @Sink(SUSI_NO_CATEGORY) android.content.pm.PackageInfo arg1, @Sink(SUSI_NO_CATEGORY) java.io.File arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
}
class BackupManagerService$PerformFullRestoreTask{
    boolean restoreOneFile(  @Sink(SUSI_FILE) java.io.InputStream arg0, @Sink(SUSI_FILE) byte[] arg1);
   @Source(SUSI_NO_CATEGORY)  boolean installApk(  @Sink(SUSI_NO_CATEGORY) com.android.server.BackupManagerService$FileMetadata arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg2);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.BackupManagerService$RestorePolicy readAppManifest(  com.android.server.BackupManagerService$FileMetadata arg0, java.io.InputStream arg1);
}
class BackupManagerService$PerformFullRestoreTask$RestoreInstallObserver{
   @Source(SUSI_NETWORK_INFORMATION)  int getResult();
}
class BatteryService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NETWORK_INFORMATION)  int getBatteryLevel();
   @Source(SUSI_NETWORK_INFORMATION)  int getPlugType();
}
class BluetoothManagerService{
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getAddress();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getName();
}
class CertBlacklister$BlacklistObserver{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue();
}
class ClipboardService{
    void setPrimaryClip(  @Sink(SUSI_NO_CATEGORY) android.content.ClipData arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.ClipData getPrimaryClip(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.ClipDescription getPrimaryClipDescription();
}
class CommonTimeManagementService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
}
class ConnectivityService{
    void sendConnectedBroadcast(  @Sink(SUSI_PHONE_CONNECTION) android.net.NetworkInfo arg0);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NO_CATEGORY)  boolean setRadio(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  boolean setRadios(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int setUsbTethering(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setNetworkPreference(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setMobileDataEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setGlobalProxy(  @Sink(SUSI_NO_CATEGORY) android.net.ProxyProperties arg0);
    void setDataDependency(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setPolicyDataEnable(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void startLegacyVpn(  @Sink(SUSI_NO_CATEGORY) com.android.internal.net.VpnProfile arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getNetworkPreference();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getTetherableUsbRegexs();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.ProxyProperties getGlobalProxy();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkInfo getNetworkInfo(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LinkProperties getActiveLinkProperties();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getTetheredIfacePairs();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getTetherableIfaces();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkInfo[] getAllNetworkInfo();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getMobileDataEnabled();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getTetherableBluetoothRegexs();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LinkProperties getLinkProperties(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkInfo getActiveNetworkInfo();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkInfo getActiveNetworkInfoForUid(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getTetherableWifiRegexs();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.ProxyProperties getProxy();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkInfo getActiveNetworkInfoUnfiltered();
   @Source(SUSI_NETWORK_INFORMATION)  int getLastTetherError(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getTetheredIfaces();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkState[] getAllNetworkState();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getTetheringErroredIfaces();
}
class ConnectivityService$2{
    void onUidRulesChanged(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class ConnectivityService$NetworkStateTrackerHandler{
    void handleMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class CountryDetectorService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void notifyReceivers(  @Sink(SUSI_NO_CATEGORY) android.location.Country arg0);
}
class CountryDetectorService$Receiver{
   @Source(SUSI_NETWORK_INFORMATION)  android.location.ICountryListener getListener();
}
class DevicePolicyManagerService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void sendAdminCommandLocked(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.server.DevicePolicyManagerService$ActiveAdmin arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1);
    void setMaximumTimeToLock(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) long arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void setPasswordQuality(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void sendAdminCommandLocked(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
   @Source(SUSI_SYSTEM_SETTINGS)  android.content.ComponentName setGlobalProxy(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2, @Sink(SUSI_SYSTEM_SETTINGS) int arg3);
    void setPasswordMinimumNonLetter(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void setActiveAdmin(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void setExpirationAlarmCheckLocked(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.Context arg0, @Sink(SUSI_SYSTEM_SETTINGS) com.android.server.DevicePolicyManagerService$DevicePolicyData arg1);
    void setActivePasswordState(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2, @Sink(SUSI_SYSTEM_SETTINGS) int arg3, @Sink(SUSI_SYSTEM_SETTINGS) int arg4, @Sink(SUSI_SYSTEM_SETTINGS) int arg5, @Sink(SUSI_SYSTEM_SETTINGS) int arg6, @Sink(SUSI_SYSTEM_SETTINGS) int arg7, @Sink(SUSI_SYSTEM_SETTINGS) int arg8);
   @Source(SUSI_SYSTEM_SETTINGS)  int setStorageEncryption(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void reportSuccessfulPasswordAttempt(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
    void sendAdminCommandLocked(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.server.DevicePolicyManagerService$ActiveAdmin arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.content.BroadcastReceiver arg2);
    void setPasswordMinimumNumeric(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void setPasswordMinimumLowerCase(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void setPasswordExpirationTimeout(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) long arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean resetPassword(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void setPasswordMinimumUpperCase(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void setKeyguardDisabledFeatures(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void setPasswordMinimumSymbols(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void setPasswordHistoryLength(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void reportFailedPasswordAttempt(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
    void setMaximumFailedPasswordsForWipe(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void setCameraDisabled(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean hasGrantedPolicy(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void setPasswordMinimumLetters(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void setPasswordMinimumLength(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
   @Source(SUSI_NETWORK_INFORMATION)  long getMaximumTimeToLock(  android.content.ComponentName arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getPasswordMinimumNonLetter(  android.content.ComponentName arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(  android.content.ComponentName arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getPasswordMinimumNumeric(  android.content.ComponentName arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  long getPasswordExpirationTimeout(  android.content.ComponentName arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  long getPasswordExpiration(  android.content.ComponentName arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getPasswordMinimumSymbols(  android.content.ComponentName arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getActiveAdmins(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.ComponentName getGlobalProxyAdmin(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(  android.content.ComponentName arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getKeyguardDisabledFeatures(  android.content.ComponentName arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getCurrentFailedPasswordAttempts(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getPasswordMinimumLowerCase(  android.content.ComponentName arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getPasswordMinimumLetters(  android.content.ComponentName arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getPasswordMinimumUpperCase(  android.content.ComponentName arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getPasswordMinimumLength(  android.content.ComponentName arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getPasswordQuality(  android.content.ComponentName arg0, int arg1);
    void getRemoveWarning(  android.content.ComponentName arg0, android.os.RemoteCallback arg1, int arg2);
   @Source(SUSI_NETWORK_INFORMATION)  int getMaximumFailedPasswordsForWipe(  android.content.ComponentName arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getPasswordHistoryLength(  android.content.ComponentName arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getStorageEncryptionStatus(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.app.admin.DeviceAdminInfo findAdmin(  android.content.ComponentName arg0, int arg1);
}
class DevicePolicyManagerService$ActiveAdmin{
   @Source(SUSI_NETWORK_INFORMATION)  int getUid();
   @Source(SUSI_NETWORK_INFORMATION)  android.os.UserHandle getUserHandle();
}
class DeviceStorageMonitorService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NETWORK_INFORMATION)  long getMemoryLowThreshold();
}
class DeviceStorageMonitorService$CacheFileDeletedObserver{
    void onEvent(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1);
}
class DiskStatsService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
}
class DropBoxManagerService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void add(  @Sink(SUSI_NO_CATEGORY) android.os.DropBoxManager$Entry arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.DropBoxManager$Entry getNextEntry(  java.lang.String arg0, long arg1);
}
class EventLogTags{
    void writePowerScreenBroadcastSend(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void writeUnknownSourcesEnabled(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void writeBootProgressPmsDataScanStart(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void writeBackupStart(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void writeBootProgressPmsScanEnd(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void writeWatchdog(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void writePowerSleepRequested(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void writeLowStorage(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void writeCacheFileDeleted(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void writeFreeStorageChanged(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void writeLockdownVpnError(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void writeBootProgressPmsReady(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void writeBackupDataChanged(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void writeLockdownVpnConnected(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void writeBackupReset(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void writeBootProgressPmsStart(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void writeBackupTransportFailure(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void writeLockdownVpnConnecting(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void writeConfigInstallFailed(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void writeBootProgressPmsSystemScanStart(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void writeBootProgressSystemRun(  @Sink(SUSI_NO_CATEGORY) long arg0);
}
class InputMethodManagerService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void setInputMethodAndSubtype(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.InputMethodSubtype arg2);
   @Source(SUSI_NO_CATEGORY)  boolean setInputMethodEnabledLocked(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void registerSuggestionSpansForNotification(  @Sink(SUSI_NO_CATEGORY) android.text.style.SuggestionSpan[] arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setInputMethodEnabled(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  boolean setCurrentInputMethodSubtype(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.InputMethodSubtype arg0);
   @Source(SUSI_NO_CATEGORY)  boolean handleMessage(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
    void setInputMethod(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  boolean notifySuggestionPicked(  @Sink(SUSI_NO_CATEGORY) android.text.style.SuggestionSpan arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setAdditionalInputMethodSubtypes(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.InputMethodSubtype[] arg1);
    void setInputMethodLocked(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void addClient(  @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputMethodClient arg0, @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputContext arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.view.InputBindResult startInputInnerLocked();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getEnabledInputMethodList();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getInputMethodList();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getEnabledInputMethodSubtypeListLocked(  android.view.inputmethod.InputMethodInfo arg0, boolean arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getShortcutInputMethodsAndSubtypes();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getEnabledInputMethodSubtypeList(  android.view.inputmethod.InputMethodInfo arg0, boolean arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype();
   @Source(SUSI_NETWORK_INFORMATION)  android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype();
}
class InputMethodManagerService$ImeSubtypeListAdapter{
   @Source(SUSI_NETWORK_INFORMATION)  android.view.View getView(  int arg0, android.view.View arg1, android.view.ViewGroup arg2);
}
class InputMethodManagerService$InputMethodAndSubtypeListManager{
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getSortedInputMethodAndSubtypeList(  boolean arg0, boolean arg1, boolean arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getSortedInputMethodAndSubtypeList();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.InputMethodManagerService$ImeSubtypeListItem getNextInputMethod(  boolean arg0, android.view.inputmethod.InputMethodInfo arg1, android.view.inputmethod.InputMethodSubtype arg2);
}
class InputMethodManagerService$InputMethodFileManager{
    void addInputMethodSubtypes(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.InputMethodInfo arg0, @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.InputMethodSubtype[] arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.HashMap getAllAdditionalInputMethodSubtypes();
}
class InputMethodManagerService$InputMethodSettings{
    void putSelectedInputMethod(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void addSubtypeToHistory(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void appendAndPutEnabledInputMethodLocked(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void putSelectedSubtype(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean buildAndPutEnabledInputMethodsStrRemovingIdLocked(  @Sink(SUSI_NO_CATEGORY) java.lang.StringBuilder arg0, @Sink(SUSI_NO_CATEGORY) java.util.List arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NETWORK_INFORMATION)  int getCurrentUserId();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getEnabledInputMethodSubtypeListLocked(  android.view.inputmethod.InputMethodInfo arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getSelectedInputMethod();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getDisabledSystemInputMethods();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getEnabledInputMethodAndSubtypeHashCodeListLocked();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getLastSubtypeForInputMethodLocked(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.util.Pair getLastInputMethodAndSubtypeLocked();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getEnabledInputMethodListLocked();
   @Source(SUSI_NETWORK_INFORMATION)  int getSelectedInputMethodSubtypeHashCode();
}
class IntentResolver{
    void dumpFilter(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.content.IntentFilter arg2);
   @Source(SUSI_NO_CATEGORY)  boolean dumpMap(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) java.util.Map arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5, @Sink(SUSI_NO_CATEGORY) boolean arg6);
   @Source(SUSI_NO_CATEGORY)  boolean dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4);
   @Source(SUSI_NO_CATEGORY)  java.util.Set filterSet();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object newResult(  @Sink(SUSI_NO_CATEGORY) android.content.IntentFilter arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator filterIterator();
}
class IntentResolverOld{
   @Source(SUSI_NO_CATEGORY)  boolean dumpMap(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) java.util.Map arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5, @Sink(SUSI_NO_CATEGORY) boolean arg6);
   @Source(SUSI_NO_CATEGORY)  boolean dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4);
    void dumpFilter(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.content.IntentFilter arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object newResult(  @Sink(SUSI_NO_CATEGORY) android.content.IntentFilter arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.Set filterSet();
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator filterIterator();
}
class LightsService{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.LightsService$Light getLight(  int arg0);
}
class LightsService$Light{
    void pulse(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setBrightness(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setFlashing(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setColor(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setBrightness(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class LocationManagerService{
    void addTestProvider(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0, @Sink(SUSI_LOCATION_INFORMATION) com.android.internal.location.ProviderProperties arg1);
   @Source(SUSI_LOCATION_INFORMATION)  boolean onTransact(  @Sink(SUSI_LOCATION_INFORMATION) int arg0, @Sink(SUSI_LOCATION_INFORMATION) android.os.Parcel arg1, @Sink(SUSI_LOCATION_INFORMATION) android.os.Parcel arg2, @Sink(SUSI_LOCATION_INFORMATION) int arg3);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NO_CATEGORY)  boolean sendExtraCommand(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
    void setTestProviderLocation(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.location.Location arg1);
   @Source(SUSI_NO_CATEGORY)  boolean providerMeetsCriteria(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.location.Criteria arg1);
   @Source(SUSI_NO_CATEGORY)  boolean sendNiResponse(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setTestProviderStatus(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2, @Sink(SUSI_NO_CATEGORY) long arg3);
    void removeTestProvider(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setTestProviderEnabled(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getFromLocation(  @Sink(SUSI_LOCATION_INFORMATION) double arg0, @Sink(SUSI_LOCATION_INFORMATION) double arg1, @Sink(SUSI_LOCATION_INFORMATION) int arg2, @Sink(SUSI_LOCATION_INFORMATION) android.location.GeocoderParams arg3, @Sink(SUSI_LOCATION_INFORMATION) java.util.List arg4);
   @Source(SUSI_LOCATION_INFORMATION)  java.util.List getAllProviders();
   @Source(SUSI_LOCATION_INFORMATION)  android.location.Location getLastLocation(  @Sink(SUSI_LOCATION_INFORMATION) android.location.LocationRequest arg0, @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg1);
   @Source(SUSI_LOCATION_INFORMATION)  java.util.List getProviders(  @Sink(SUSI_LOCATION_INFORMATION) android.location.Criteria arg0, @Sink(SUSI_LOCATION_INFORMATION) boolean arg1);
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getFromLocationName(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0, @Sink(SUSI_LOCATION_INFORMATION) double arg1, @Sink(SUSI_LOCATION_INFORMATION) double arg2, @Sink(SUSI_LOCATION_INFORMATION) double arg3, @Sink(SUSI_LOCATION_INFORMATION) double arg4, @Sink(SUSI_LOCATION_INFORMATION) int arg5, @Sink(SUSI_LOCATION_INFORMATION) android.location.GeocoderParams arg6, @Sink(SUSI_LOCATION_INFORMATION) java.util.List arg7);
   @Source(SUSI_LOCATION_INFORMATION)  com.android.internal.location.ProviderProperties getProviderProperties(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0);
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getBestProvider(  @Sink(SUSI_LOCATION_INFORMATION) android.location.Criteria arg0, @Sink(SUSI_LOCATION_INFORMATION) boolean arg1);
}
class LocationManagerService$Receiver{
   @Source(SUSI_NO_CATEGORY)  boolean callStatusChangedLocked(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
   @Source(SUSI_NO_CATEGORY)  boolean callLocationChangedLocked(  @Sink(SUSI_NO_CATEGORY) android.location.Location arg0);
   @Source(SUSI_NO_CATEGORY)  boolean callProviderEnabledLocked(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_LOCATION_INFORMATION)  android.location.ILocationListener getListener();
}
class MountService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NO_CATEGORY)  int decryptStorage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String buildObbPath(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  boolean onEvent(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg2);
   @Source(SUSI_NO_CATEGORY)  int verifyEncryptionPassword(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int changeEncryptionPassword(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setUsbMassStorageEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getMountedObbPath(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getEncryptionState();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getSecureContainerPath(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getSecureContainerList();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getSecureContainerFilesystemPath(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int[] getStorageUsers(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getVolumeState(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.storage.StorageVolume[] getVolumeList();
}
class MountService$ObbAction{
   @Source(SUSI_NETWORK_INFORMATION)  android.content.res.ObbInfo getObbInfo();
}
class MountService$ObbState{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder getBinder();
}
class NativeDaemonConnector{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] doListCommand(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList doCommand(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class NativeDaemonConnector$ResponseQueue{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
}
class NativeDaemonConnectorException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCmd();
   @Source(SUSI_NO_CATEGORY)  int getCode();
}
class NativeDaemonEvent{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRawEvent();
   @Source(SUSI_NO_CATEGORY)  int getCmdNumber();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getField(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
   @Source(SUSI_NO_CATEGORY)  int getCode();
}
class NetworkManagementService{
    void setInterfaceConfig(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) android.net.InterfaceConfiguration arg1);
    void setFirewallEgressDestRule(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) int arg1, @Sink(SUSI_NETWORK) boolean arg2);
    void setFirewallUidRule(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) boolean arg1);
    void setInterfaceQuota(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) long arg1);
    void setIpForwardingEnabled(  @Sink(SUSI_NETWORK) boolean arg0);
    void setInterfaceIpv6PrivacyExtensions(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) boolean arg1);
    void setDnsServersForInterface(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) java.lang.String[] arg1);
    void setFirewallInterfaceRule(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) boolean arg1);
    void setDefaultInterfaceForDns(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void startReverseTethering(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void setUidNetworkRules(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) boolean arg1);
    void setInterfaceUp(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void setInterfaceAlert(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) long arg1);
    void enableIpv6(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void enableNat(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) java.lang.String arg1);
    void setInterfaceThrottle(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) int arg1, @Sink(SUSI_NETWORK) int arg2);
    void setInterfaceDown(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void setDnsForwarders(  @Sink(SUSI_NETWORK) java.lang.String[] arg0);
    void setAccessPoint(  @Sink(SUSI_NETWORK) android.net.wifi.WifiConfiguration arg0, @Sink(SUSI_NETWORK) java.lang.String arg1);
    void addIdleTimer(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) int arg1, @Sink(SUSI_NETWORK) java.lang.String arg2);
    void setFirewallEgressSourceRule(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) boolean arg1);
    void setGlobalAlert(  @Sink(SUSI_NETWORK) long arg0);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStats getNetworkStatsSummaryDev();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStats getNetworkStatsSummaryXt();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStats getNetworkStatsDetail();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStats getNetworkStatsTethering(  java.lang.String[] arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStats getNetworkStatsUidDetail(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getInterfaceRxThrottle(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getDnsForwarders();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.InterfaceConfiguration getInterfaceConfig(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.RouteInfo[] getRoutes(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getInterfaceTxThrottle(  java.lang.String arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getIpForwardingEnabled();
}
class NetworkManagementSocketTagger{
   @Source(SUSI_SYSTEM_SETTINGS)  int getThreadSocketStatsTag();
}
class NotificationManagerService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void setNotificationsEnabledForPackage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void enqueueToast(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.app.ITransientNotification arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void enqueueNotificationInternal(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) android.app.Notification arg5, @Sink(SUSI_NO_CATEGORY) int[] arg6, @Sink(SUSI_NO_CATEGORY) int arg7);
   @Source(SUSI_NETWORK_INFORMATION)  long[] getLongArray(  android.content.res.Resources arg0, int arg1, int arg2, long[] arg3);
}
class NotificationManagerService$NotificationRecord{
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.content.Context arg2);
}
class NotificationManagerService$ToastRecord{
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class NsdService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void setEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Messenger getMessenger();
}
class NsdService$NativeCallbackReceiver{
   @Source(SUSI_NO_CATEGORY)  boolean onEvent(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg2);
}
class NsdService$NsdStateMachine{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getWhatToString(  int arg0);
}
class NsdService$NsdStateMachine$DefaultState{
   @Source(SUSI_NO_CATEGORY)  boolean processMessage(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
}
class NsdService$NsdStateMachine$DisabledState{
   @Source(SUSI_NO_CATEGORY)  boolean processMessage(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
}
class PackageManagerBackupAgent{
    void onRestore(  @Sink(SUSI_NO_CATEGORY) android.app.backup.BackupDataInput arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg2);
    void onBackup(  @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg0, @Sink(SUSI_NO_CATEGORY) android.app.backup.BackupDataOutput arg1, @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.Set getRestoredPackages();
   @Source(SUSI_NO_CATEGORY)  com.android.server.PackageManagerBackupAgent$Metadata getRestoredMetadata(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class PreferredComponent{
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getParseError();
}
class ProcessMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.HashMap getMap();
}
class RecognitionManagerService{
    void setCurRecognizer(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.ComponentName findAvailRecognizer(  java.lang.String arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.ComponentName getCurRecognizer(  int arg0);
}
class SamplingProfilerService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
}
class SerialService{
   @Source(SUSI_NO_CATEGORY)  android.os.ParcelFileDescriptor openSerialPort(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getSerialPorts();
}
class ServiceWatcher{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder getBinder();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getBestPackageName();
   @Source(SUSI_NETWORK_INFORMATION)  int getBestVersion();
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getSignatureSets(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.util.List arg1);
}
class StatusBarManagerService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void setSystemUiVisibility(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setIconVisibility(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setIcon(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4);
    void setHardKeyboardEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void updateNotification(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) com.android.internal.statusbar.StatusBarNotification arg1);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder addNotification(  @Sink(SUSI_NO_CATEGORY) com.android.internal.statusbar.StatusBarNotification arg0);
}
class TelephonyRegistry{
    void notifyDataConnectionFailed(  @Sink(SUSI_PHONE_STATE) java.lang.String arg0, @Sink(SUSI_PHONE_STATE) java.lang.String arg1);
    void notifyDataConnection(  @Sink(SUSI_PHONE_STATE) int arg0, @Sink(SUSI_PHONE_STATE) boolean arg1, @Sink(SUSI_PHONE_STATE) java.lang.String arg2, @Sink(SUSI_PHONE_STATE) java.lang.String arg3, @Sink(SUSI_PHONE_STATE) java.lang.String arg4, @Sink(SUSI_PHONE_STATE) android.net.LinkProperties arg5, @Sink(SUSI_PHONE_STATE) android.net.LinkCapabilities arg6, @Sink(SUSI_PHONE_STATE) int arg7, @Sink(SUSI_PHONE_STATE) boolean arg8);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void notifyCellLocation(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
    void notifySignalStrength(  @Sink(SUSI_NO_CATEGORY) android.telephony.SignalStrength arg0);
    void notifyCallState(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void notifyOtaspChanged(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void notifyServiceState(  @Sink(SUSI_NO_CATEGORY) android.telephony.ServiceState arg0);
    void notifyCallForwardingChanged(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void notifyDataActivity(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void notifyMessageWaitingChanged(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class TextServicesManagerService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void getSpellCheckerService(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) com.android.internal.textservice.ITextServicesSessionListener arg2, @Sink(SUSI_NO_CATEGORY) com.android.internal.textservice.ISpellCheckerSessionListener arg3, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg4);
    void setCurrentSpellCheckerSubtype(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setCurrentSpellChecker(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setSpellCheckerEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(  java.lang.String arg0, boolean arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers();
   @Source(SUSI_NETWORK_INFORMATION)  android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(  java.lang.String arg0);
}
class TextServicesManagerService$TextServicesSettings{
    void putSelectedSpellChecker(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void putSelectedSpellCheckerSubtype(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSpellCheckerEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getSelectedSpellCheckerSubtype();
   @Source(SUSI_NETWORK_INFORMATION)  int getCurrentUserId();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getSelectedSpellChecker();
}
class ThrottleService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NETWORK_INFORMATION)  int getCliffLevel(  java.lang.String arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  long getPeriodStartTime(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getHelpUri();
   @Source(SUSI_NETWORK_INFORMATION)  long getCliffThreshold(  java.lang.String arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  long getResetTime(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getThrottle(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  long getByteCount(  java.lang.String arg0, int arg1, int arg2, int arg3);
}
class ThrottleService$DataRecorder{
   @Source(SUSI_NO_CATEGORY)  boolean setNextPeriod(  @Sink(SUSI_NO_CATEGORY) java.util.Calendar arg0, @Sink(SUSI_NO_CATEGORY) java.util.Calendar arg1);
   @Source(SUSI_NETWORK_INFORMATION)  long getPeriodEnd();
   @Source(SUSI_NETWORK_INFORMATION)  long getPeriodTx(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  long getPeriodRx(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getPeriodCount();
   @Source(SUSI_NETWORK_INFORMATION)  long getPeriodStart();
}
class TwilightService{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.TwilightService$TwilightState getCurrentState();
}
class TwilightService$TwilightState{
   @Source(SUSI_NETWORK_INFORMATION)  long getTodaySunrise();
   @Source(SUSI_NETWORK_INFORMATION)  long getTomorrowSunrise();
   @Source(SUSI_NETWORK_INFORMATION)  long getTodaySunset();
   @Source(SUSI_NETWORK_INFORMATION)  long getYesterdaySunset();
}
class UiModeManagerService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void setNightMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void disableCarMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void enableCarMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getCurrentModeType();
   @Source(SUSI_NETWORK_INFORMATION)  int getNightMode();
}
class UpdateLockService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void sendLockChangedBroadcast(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class WallpaperManagerService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NO_CATEGORY)  boolean bindWallpaperComponentLocked(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) com.android.server.WallpaperManagerService$WallpaperData arg3, @Sink(SUSI_NO_CATEGORY) android.os.IRemoteCallback arg4);
    void switchUser(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.IRemoteCallback arg1);
   @Source(SUSI_NO_CATEGORY)  boolean hasNamedWallpaper(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.ParcelFileDescriptor setWallpaper(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setWallpaperComponent(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
    void setDimensionHints(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void settingsRestored();
   @Source(SUSI_NO_CATEGORY)  android.os.ParcelFileDescriptor updateWallpaperBitmapLocked(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) com.android.server.WallpaperManagerService$WallpaperData arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getHeightHint();
   @Source(SUSI_NETWORK_INFORMATION)  int getWidthHint();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getName();
   @Source(SUSI_NETWORK_INFORMATION)  android.app.WallpaperInfo getWallpaperInfo();
}
class WallpaperManagerService$MyPackageMonitor{
    void onPackageUpdateStarted(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void onPackageUpdateFinished(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class WallpaperManagerService$WallpaperConnection{
   @Source(SUSI_NO_CATEGORY)  android.os.ParcelFileDescriptor setWallpaper(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class Watchdog{
   @Source(SUSI_NO_CATEGORY)  com.android.server.Watchdog getInstance();
}
class WifiService{
    void setCountryCode(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) boolean arg1);
    void startScan(  @Sink(SUSI_NETWORK) boolean arg0);
    void setWifiApConfiguration(  @Sink(SUSI_NETWORK) android.net.wifi.WifiConfiguration arg0);
    boolean setWifiEnabled(  @Sink(SUSI_NETWORK) boolean arg0);
    void setWifiApEnabled(  @Sink(SUSI_NETWORK) android.net.wifi.WifiConfiguration arg0, @Sink(SUSI_NETWORK) boolean arg1);
    void setFrequencyBand(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) boolean arg1);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.wifi.WifiInfo getConnectionInfo();
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Messenger getWifiStateMachineMessenger();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.DhcpInfo getDhcpInfo();
   @Source(SUSI_NETWORK_INFORMATION)  int getWifiEnabledState();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.wifi.WifiConfiguration getWifiApConfiguration();
   @Source(SUSI_NETWORK_INFORMATION)  int getWifiApEnabledState();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getConfigFile();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getConfiguredNetworks();
   @Source(SUSI_NETWORK_INFORMATION)  int getFrequencyBand();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getScanResults();
}
class WifiService$Multicaster{
   @Source(SUSI_NETWORK_INFORMATION)  int getUid();
}
class WiredAccessoryManager{
    void notifyWiredAccessoryChanged(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class WiredAccessoryManager$WiredAccessoryObserver$UEventInfo{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSwitchStatePath();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDevPath();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDevName();
}

package android.net.wifi;

class IWifiManager$Stub{
    boolean onTransact(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) android.os.Parcel arg1, @Sink(SUSI_NETWORK) android.os.Parcel arg2, @Sink(SUSI_NETWORK) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IWifiManager$Stub$Proxy{
    void setWifiApEnabled(  @Sink(SUSI_NETWORK) android.net.wifi.WifiConfiguration arg0, @Sink(SUSI_NETWORK) boolean arg1);
    void setFrequencyBand(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) boolean arg1);
    boolean releaseWifiLock(  @Sink(SUSI_NETWORK) android.os.IBinder arg0);
    boolean disableNetwork(  @Sink(SUSI_NETWORK) int arg0);
    void addToBlacklist(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void setWifiApConfiguration(  @Sink(SUSI_NETWORK) android.net.wifi.WifiConfiguration arg0);
    boolean enableNetwork(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) boolean arg1);
    boolean setWifiEnabled(  @Sink(SUSI_NETWORK) boolean arg0);
    boolean removeNetwork(  @Sink(SUSI_NETWORK) int arg0);
    void acquireMulticastLock(  @Sink(SUSI_NETWORK) android.os.IBinder arg0, @Sink(SUSI_NETWORK) java.lang.String arg1);
    void updateWifiLockWorkSource(  @Sink(SUSI_NETWORK) android.os.IBinder arg0, @Sink(SUSI_NETWORK) android.os.WorkSource arg1);
    boolean acquireWifiLock(  @Sink(SUSI_NETWORK) android.os.IBinder arg0, @Sink(SUSI_NETWORK) int arg1, @Sink(SUSI_NETWORK) java.lang.String arg2, @Sink(SUSI_NETWORK) android.os.WorkSource arg3);
    void setCountryCode(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) boolean arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getConfigFile();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.wifi.WifiInfo getConnectionInfo();
   @Source(SUSI_NETWORK_INFORMATION)  int getWifiApEnabledState();
   @Source(SUSI_NETWORK_INFORMATION)  int getFrequencyBand();
   @Source(SUSI_NETWORK_INFORMATION)  int getWifiEnabledState();
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Messenger getWifiStateMachineMessenger();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.DhcpInfo getDhcpInfo();
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Messenger getWifiServiceMessenger();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getScanResults();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.wifi.WifiConfiguration getWifiApConfiguration();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getConfiguredNetworks();
}
class NetworkUpdateResult{
   @Source(SUSI_NETWORK_INFORMATION)  int getNetworkId();
}
class ScanResult{
    void writeToParcel(  @Sink(SUSI_NETWORK) android.os.Parcel arg0, @Sink(SUSI_NETWORK) int arg1);
}
class ScanResult$1{
   @Source(SUSI_NETWORK_INFORMATION)  android.net.wifi.ScanResult createFromParcel(  android.os.Parcel arg0);
}
class SupplicantStateTracker$CompletedState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class SupplicantStateTracker$DefaultState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class SupplicantStateTracker$HandshakeState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiApConfigStore$ActiveState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiApConfigStore$DefaultState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiApConfigStore$InactiveState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiConfigStore{
    android.net.wifi.WpsResult startWpsWithPinFromDevice(  @Sink(SUSI_NETWORK) android.net.wifi.WpsInfo arg0);
    boolean disableNetwork(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) int arg1);
    boolean selectNetwork(  @Sink(SUSI_NETWORK) int arg0);
    void setIpConfiguration(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) android.net.DhcpInfoInternal arg1);
    boolean enableNetworkWithoutBroadcast(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) boolean arg1);
    boolean enableNetwork(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) boolean arg1);
    android.net.wifi.WpsResult startWpsPbc(  @Sink(SUSI_NETWORK) android.net.wifi.WpsInfo arg0);
    android.net.wifi.WpsResult startWpsWithPinFromAccessPoint(  @Sink(SUSI_NETWORK) android.net.wifi.WpsInfo arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.DhcpInfoInternal getIpConfiguration(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LinkProperties getLinkProperties(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getConfiguredNetworks();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.ProxyProperties getProxyProperties(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.wifi.NetworkUpdateResult saveNetwork(  android.net.wifi.WifiConfiguration arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getConfigFile();
}
class WifiConfiguration{
    void writeToParcel(  @Sink(SUSI_NETWORK) android.os.Parcel arg0, @Sink(SUSI_NETWORK) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getAuthType();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPrintableSsid();
}
class WifiInfo{
    void setSupplicantState(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void writeToParcel(  @Sink(SUSI_NETWORK) android.os.Parcel arg0, @Sink(SUSI_NETWORK) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getRssi();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getSSID();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getMeteredHint();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getMacAddress();
   @Source(SUSI_NETWORK_INFORMATION)  int getLinkSpeed();
   @Source(SUSI_NETWORK_INFORMATION)  int getIpAddress();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.wifi.SupplicantState getSupplicantState();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getBSSID();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.wifi.WifiSsid getWifiSsid();
   @Source(SUSI_NETWORK_INFORMATION)  int getNetworkId();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkInfo$DetailedState getDetailedStateOf(  android.net.wifi.SupplicantState arg0);
   @Source(SUSI_NETWORK_INFORMATION)  boolean getHiddenSSID();
}
class WifiManager{
    void save(  @Sink(SUSI_NETWORK) android.net.wifi.WifiConfiguration arg0, @Sink(SUSI_NETWORK) android.net.wifi.WifiManager$ActionListener arg1);
    boolean setWifiEnabled(  @Sink(SUSI_NETWORK) boolean arg0);
    void disable(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) android.net.wifi.WifiManager$ActionListener arg1);
    boolean enableNetwork(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) boolean arg1);
    void setCountryCode(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) boolean arg1);
    void startWps(  @Sink(SUSI_NETWORK) android.net.wifi.WpsInfo arg0, @Sink(SUSI_NETWORK) android.net.wifi.WifiManager$WpsListener arg1);
    void connect(  @Sink(SUSI_NETWORK) android.net.wifi.WifiConfiguration arg0, @Sink(SUSI_NETWORK) android.net.wifi.WifiManager$ActionListener arg1);
    boolean setWifiApConfiguration(  @Sink(SUSI_NETWORK) android.net.wifi.WifiConfiguration arg0);
    boolean setWifiApEnabled(  @Sink(SUSI_NETWORK) android.net.wifi.WifiConfiguration arg0, @Sink(SUSI_NETWORK) boolean arg1);
    void setFrequencyBand(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) boolean arg1);
    void forget(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) android.net.wifi.WifiManager$ActionListener arg1);
    void connect(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) android.net.wifi.WifiManager$ActionListener arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.wifi.WifiInfo getConnectionInfo();
   @Source(SUSI_NETWORK_INFORMATION)  int getFrequencyBand();
   @Source(SUSI_NETWORK_INFORMATION)  int getWifiState();
   @Source(SUSI_NETWORK_INFORMATION)  int getWifiApState();
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Messenger getWifiServiceMessenger();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getConfiguredNetworks();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getScanResults();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.wifi.WifiManager$MulticastLock createMulticastLock(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getConfigFile();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.DhcpInfo getDhcpInfo();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.wifi.WifiManager$WifiLock createWifiLock(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.wifi.WifiManager$WifiLock createWifiLock(  int arg0, java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Messenger getWifiStateMachineMessenger();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.wifi.WifiConfiguration getWifiApConfiguration();
}
class WifiManager$ServiceHandler{
    void handleMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiManager$WifiLock{
    void setWorkSource(  @Sink(SUSI_NETWORK) android.os.WorkSource arg0);
}
class WifiNative{
    boolean setBluetoothCoexistenceMode(  @Sink(SUSI_NETWORK) int arg0);
    boolean setScanResultHandling(  @Sink(SUSI_NETWORK) int arg0);
    boolean setP2pSsidPostfix(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    boolean setDeviceName(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    boolean setP2pGroupIdle(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) int arg1);
    boolean setWfdDeviceInfo(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    boolean setPersistentReconnect(  @Sink(SUSI_NETWORK) boolean arg0);
    boolean setSerialNumber(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    boolean setDeviceType(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    boolean setNetworkVariable(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) java.lang.String arg1, @Sink(SUSI_NETWORK) java.lang.String arg2);
    boolean setConfigMethods(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    boolean setModelNumber(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void setScanInterval(  @Sink(SUSI_NETWORK) int arg0);
    boolean setConcurrencyPriority(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    boolean setCountryCode(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    boolean setModelName(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    boolean setP2pPowerSave(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) boolean arg1);
    boolean setWfdEnable(  @Sink(SUSI_NETWORK) boolean arg0);
    boolean setBand(  @Sink(SUSI_NETWORK) int arg0);
    void setPowerSave(  @Sink(SUSI_NETWORK) boolean arg0);
    boolean setScanMode(  @Sink(SUSI_NETWORK) boolean arg0);
    boolean setManufacturer(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    boolean setBluetoothCoexistenceScanMode(  @Sink(SUSI_NETWORK) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNetworkVariable(  int arg0, java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getGroupCapability(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getMacAddress();
   @Source(SUSI_NETWORK_INFORMATION)  int getBand();
}
class WifiSsid{
    android.net.wifi.WifiSsid createFromHex(  @Sink(SUSI_NETWORK) java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getHexString();
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getOctets();
}
class WifiSsid$1{
    android.net.wifi.WifiSsid createFromParcel(  @Sink(SUSI_NETWORK) android.os.Parcel arg0);
}
class WifiStateMachine{
    void setScanOnlyMode(  @Sink(SUSI_NETWORK) boolean arg0);
    void setDriverStart(  @Sink(SUSI_NETWORK) boolean arg0, @Sink(SUSI_NETWORK) boolean arg1);
    void setWifiApConfiguration(  @Sink(SUSI_NETWORK) android.net.wifi.WifiConfiguration arg0);
    boolean syncEnableNetwork(  @Sink(SUSI_NETWORK) com.android.internal.util.AsyncChannel arg0, @Sink(SUSI_NETWORK) int arg1, @Sink(SUSI_NETWORK) boolean arg2);
    void setWifiEnabled(  @Sink(SUSI_NETWORK) boolean arg0);
    boolean syncRemoveNetwork(  @Sink(SUSI_NETWORK) com.android.internal.util.AsyncChannel arg0, @Sink(SUSI_NETWORK) int arg1);
    void setFrequencyBand(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) boolean arg1);
    void setWifiApEnabled(  @Sink(SUSI_NETWORK) android.net.wifi.WifiConfiguration arg0, @Sink(SUSI_NETWORK) boolean arg1);
    void sendBluetoothAdapterStateChange(  @Sink(SUSI_NETWORK) int arg0);
    void setScanType(  @Sink(SUSI_NETWORK) boolean arg0);
    boolean syncDisableNetwork(  @Sink(SUSI_NETWORK) com.android.internal.util.AsyncChannel arg0, @Sink(SUSI_NETWORK) int arg1);
    void setCountryCode(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) boolean arg1);
    void setHighPerfModeEnabled(  @Sink(SUSI_NETWORK) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getFrequencyBand();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getConfigFile();
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Messenger getMessenger();
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.util.List syncGetScanResultsList();
}
class WifiStateMachine$CaptivePortalCheckState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$ConnectModeState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$ConnectedState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$DefaultState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$DisconnectedState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$DisconnectingState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$DriverFailedState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$DriverLoadedState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$DriverLoadingState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$DriverStartedState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$DriverStartingState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$DriverStoppedState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$DriverStoppingState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$DriverUnloadedState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$DriverUnloadingState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$L2ConnectedState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$ObtainingIpState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$ScanModeState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$SoftApStartedState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$SoftApStartingState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$SoftApStoppingState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$SupplicantStartedState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$SupplicantStartingState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$SupplicantStoppingState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$TetheredState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$TetheringState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$VerifyingLinkState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$WaitForP2pDisableState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateMachine$WpsRunningState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiStateTracker{
    void setDependencyMet(  @Sink(SUSI_NETWORK) boolean arg0);
    void setUserDataEnable(  @Sink(SUSI_NETWORK) boolean arg0);
    void setPolicyDataEnable(  @Sink(SUSI_NETWORK) boolean arg0);
    boolean setRadio(  @Sink(SUSI_NETWORK) boolean arg0);
    void setTeardownRequested(  @Sink(SUSI_NETWORK) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getTcpBufferSizesPropName();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkInfo getNetworkInfo();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LinkProperties getLinkProperties();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LinkCapabilities getLinkCapabilities();
}
class WifiWatchdogStateMachine{
    android.net.wifi.WifiWatchdogStateMachine makeWifiWatchdogStateMachine(  @Sink(SUSI_NETWORK) android.content.Context arg0);
}
class WifiWatchdogStateMachine$BssidStatistics{
    void updateLoss(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) double arg1, @Sink(SUSI_NETWORK) int arg2);
}
class WifiWatchdogStateMachine$ConnectedState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiWatchdogStateMachine$DefaultState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiWatchdogStateMachine$LinkMonitoringState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiWatchdogStateMachine$OnlineState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiWatchdogStateMachine$OnlineWatchState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiWatchdogStateMachine$VerifyingLinkState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiWatchdogStateMachine$WatchdogDisabledState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiWatchdogStateMachine$WatchdogEnabledState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}

package org.apache.harmony.security.x509;

class AccessDescription{
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
}
class AccessDescription$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class AlgorithmIdentifier{
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlgorithm();
   @Source(SUSI_NO_CATEGORY)  byte[] getParameters();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlgorithmName();
}
class AlgorithmIdentifier$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class AlternativeName{
    void dumpValue(  @Sink(SUSI_NO_CATEGORY) java.lang.StringBuilder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
}
class AuthorityKeyIdentifier{
    void dumpValue(  @Sink(SUSI_NO_CATEGORY) java.lang.StringBuilder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getAuthorityCertSerialNumber();
   @Source(SUSI_NO_CATEGORY)  byte[] access$000(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.x509.AuthorityKeyIdentifier arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.x509.GeneralNames getAuthorityCertIssuer();
   @Source(SUSI_NO_CATEGORY)  byte[] getKeyIdentifier();
}
class AuthorityKeyIdentifier$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class BasicConstraints{
   @Source(SUSI_NO_CATEGORY)  int getPathLenConstraint();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
}
class BasicConstraints$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class CRLDistributionPoints{
    void dumpValue(  @Sink(SUSI_NO_CATEGORY) java.lang.StringBuilder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
}
class CRLDistributionPoints$1{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getValues(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class CRLNumber{
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getNumber();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
}
class Certificate{
   @Source(SUSI_NO_CATEGORY)  byte[] access$300(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.x509.Certificate arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getSignatureValue();
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.x509.TBSCertificate getTbsCertificate();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
}
class Certificate$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class CertificateIssuer{
    void dumpValue(  @Sink(SUSI_NO_CATEGORY) java.lang.StringBuilder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  javax.security.auth.x500.X500Principal getIssuer();
}
class CertificateList{
   @Source(SUSI_NO_CATEGORY)  byte[] getSignatureValue();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  byte[] access$300(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.x509.CertificateList arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.x509.TBSCertList getTbsCertList();
}
class CertificateList$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class CertificatePolicies{
    void dumpValue(  @Sink(SUSI_NO_CATEGORY) java.lang.StringBuilder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  java.util.List getPolicyInformations();
}
class CertificatePolicies$1{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getValues(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class DNParser{
   @Source(SUSI_NO_CATEGORY)  java.util.List parse();
   @Source(SUSI_NO_CATEGORY)  char getUTF8();
}
class DistributionPoint{
    void dumpValue(  @Sink(SUSI_NO_CATEGORY) java.lang.StringBuilder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class DistributionPoint$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class DistributionPointName{
    void dumpValue(  @Sink(SUSI_NO_CATEGORY) java.lang.StringBuilder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class DistributionPointName$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getObjectToEncode(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class EDIPartyName{
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
}
class EDIPartyName$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class ExtendedKeyUsage{
    void dumpValue(  @Sink(SUSI_NO_CATEGORY) java.lang.StringBuilder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  java.util.List getExtendedKeyUsage();
}
class Extension{
    void dumpValue(  @Sink(SUSI_NO_CATEGORY) java.lang.StringBuilder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.x509.KeyUsage getKeyUsageValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getExtnID();
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.x509.ExtensionValue getDecodedExtensionValue();
   @Source(SUSI_NO_CATEGORY)  byte[] getExtnValue();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  byte[] getRawExtnValue();
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.x509.BasicConstraints getBasicConstraintsValue();
   @Source(SUSI_NO_CATEGORY)  byte[] access$300(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.x509.Extension arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getCritical();
}
class Extension$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class Extension$2{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class ExtensionValue{
    void dumpValue(  @Sink(SUSI_NO_CATEGORY) java.lang.StringBuilder arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
}
class Extensions{
    void dumpValue(  @Sink(SUSI_NO_CATEGORY) java.lang.StringBuilder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.Set getNonCriticalExtensions();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.x509.Extension getExtensionByOID(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Set getCriticalExtensions();
}
class Extensions$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getValues(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class GeneralName{
   @Source(SUSI_NO_CATEGORY)  byte[] access$202(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.x509.GeneralName arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  java.util.List getAsList();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getName();
   @Source(SUSI_NO_CATEGORY)  int getTag();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncodedName();
}
class GeneralName$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getObjectToEncode(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class GeneralNames{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getPairsList();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  java.util.List getNames();
}
class GeneralNames$1{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getValues(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class GeneralSubtree{
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.x509.GeneralName getBase();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
}
class GeneralSubtree$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class GeneralSubtrees{
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  java.util.List getSubtrees();
}
class GeneralSubtrees$1{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getValues(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class InfoAccessSyntax{
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
}
class InfoAccessSyntax$1{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getValues(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class InhibitAnyPolicy{
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
}
class InvalidityDate{
   @Source(SUSI_NO_CATEGORY)  java.util.Date getDate();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
}
class IssuingDistributionPoint{
    void dumpValue(  @Sink(SUSI_NO_CATEGORY) java.lang.StringBuilder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
}
class IssuingDistributionPoint$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class KeyUsage{
   @Source(SUSI_NO_CATEGORY)  boolean[] getKeyUsage();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
}
class NameConstraints{
    void dumpValue(  @Sink(SUSI_NO_CATEGORY) java.lang.StringBuilder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
}
class NameConstraints$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class ORAddress{
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
}
class ORAddress$2{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class OtherName{
   @Source(SUSI_NO_CATEGORY)  byte[] access$200(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.x509.OtherName arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getValue();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
}
class OtherName$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class PolicyConstraints{
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
}
class PolicyConstraints$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class PolicyInformation{
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPolicyIdentifier();
}
class PolicyInformation$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class ReasonCode{
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
}
class ReasonFlags$1{
    void setEncodingContent(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerOutputStream arg0);
}
class SubjectKeyIdentifier{
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  byte[] getKeyIdentifier();
}
class SubjectPublicKeyInfo{
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.x509.AlgorithmIdentifier getAlgorithmIdentifier();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  byte[] access$200(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.x509.SubjectPublicKeyInfo arg0);
   @Source(SUSI_NO_CATEGORY)  java.security.PublicKey getPublicKey();
   @Source(SUSI_NO_CATEGORY)  byte[] getSubjectPublicKey();
}
class SubjectPublicKeyInfo$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class TBSCertList{
    void dumpValue(  @Sink(SUSI_NO_CATEGORY) java.lang.StringBuilder arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.x509.Extensions getCrlExtensions();
   @Source(SUSI_NO_CATEGORY)  int getVersion();
   @Source(SUSI_NO_CATEGORY)  java.util.Date getThisUpdate();
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.x509.AlgorithmIdentifier getSignature();
   @Source(SUSI_NO_CATEGORY)  java.util.Date getNextUpdate();
   @Source(SUSI_NO_CATEGORY)  java.util.List getRevokedCertificates();
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.x501.Name getIssuer();
}
class TBSCertList$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class TBSCertList$RevokedCertificate{
    void dumpValue(  @Sink(SUSI_NO_CATEGORY) java.lang.StringBuilder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.Date getRevocationDate();
   @Source(SUSI_NO_CATEGORY)  javax.security.auth.x500.X500Principal getIssuer();
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.x509.Extensions getCrlEntryExtensions();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getUserCertificate();
}
class TBSCertList$RevokedCertificate$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class TBSCertificate{
    void dumpValue(  @Sink(SUSI_NO_CATEGORY) java.lang.StringBuilder arg0);
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getSerialNumber();
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo();
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.x501.Name getSubject();
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.x509.Extensions getExtensions();
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.x501.Name getIssuer();
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.x509.AlgorithmIdentifier getSignature();
   @Source(SUSI_NO_CATEGORY)  boolean[] getIssuerUniqueID();
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.x509.Validity getValidity();
   @Source(SUSI_NO_CATEGORY)  boolean[] getSubjectUniqueID();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  int getVersion();
}
class TBSCertificate$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class Time$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getObjectToEncode(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Validity{
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  java.util.Date getNotAfter();
   @Source(SUSI_NO_CATEGORY)  java.util.Date getNotBefore();
}
class Validity$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class X509PublicKey{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFormat();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlgorithm();
}

package android.filterfw.io;

class GraphReader{
    void addReferencesByMap(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.KeyValueMap arg0);
    void addReference(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FilterGraph readGraphResource(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}

package javax.obex;

class ApplicationParameter{
   @Source(SUSI_NO_CATEGORY)  byte[] getAPPparam();
}
class ClientOperation{
    void sendHeaders(  @Sink(SUSI_NO_CATEGORY) javax.obex.HeaderSet arg0);
   @Source(SUSI_NO_CATEGORY)  int getMaxPacketSize();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType();
   @Source(SUSI_NO_CATEGORY)  long getLength();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getEncoding();
   @Source(SUSI_NO_CATEGORY)  int getHeaderLength();
   @Source(SUSI_NO_CATEGORY)  javax.obex.HeaderSet getReceivedHeader();
   @Source(SUSI_NO_CATEGORY)  int getResponseCode();
}
class ClientSession{
   @Source(SUSI_NO_CATEGORY)  javax.obex.HeaderSet delete(  @Sink(SUSI_NO_CATEGORY) javax.obex.HeaderSet arg0);
   @Source(SUSI_NO_CATEGORY)  javax.obex.HeaderSet setPath(  @Sink(SUSI_NO_CATEGORY) javax.obex.HeaderSet arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  boolean sendRequest(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1, @Sink(SUSI_NO_CATEGORY) javax.obex.HeaderSet arg2, @Sink(SUSI_NO_CATEGORY) javax.obex.PrivateInputStream arg3);
    void setConnectionID(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  long getConnectionID();
   @Source(SUSI_NO_CATEGORY)  javax.obex.Operation get(  @Sink(SUSI_NO_CATEGORY) javax.obex.HeaderSet arg0);
   @Source(SUSI_NO_CATEGORY)  javax.obex.HeaderSet disconnect(  @Sink(SUSI_NO_CATEGORY) javax.obex.HeaderSet arg0);
}
class HeaderSet{
    void setHeader(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getHeader(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getResponseCode();
   @Source(SUSI_NO_CATEGORY)  int[] getHeaderList();
}
class ObexHelper{
   @Source(SUSI_NO_CATEGORY)  byte[] createHeader(  @Sink(SUSI_NO_CATEGORY) javax.obex.HeaderSet arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] updateHeaderSet(  @Sink(SUSI_NO_CATEGORY) javax.obex.HeaderSet arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] getTagValue(  @Sink(SUSI_NO_CATEGORY) byte arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1);
}
class PasswordAuthentication{
   @Source(SUSI_NO_CATEGORY)  byte[] getPassword();
   @Source(SUSI_NO_CATEGORY)  byte[] getUserName();
}
class PrivateOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void write(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] readBytes(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ServerOperation{
    void sendHeaders(  @Sink(SUSI_NO_CATEGORY) javax.obex.HeaderSet arg0);
   @Source(SUSI_NO_CATEGORY)  boolean sendReply(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  javax.obex.HeaderSet getReceivedHeader();
   @Source(SUSI_NO_CATEGORY)  int getHeaderLength();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getEncoding();
   @Source(SUSI_NO_CATEGORY)  long getLength();
   @Source(SUSI_NO_CATEGORY)  int getResponseCode();
   @Source(SUSI_NO_CATEGORY)  int getMaxPacketSize();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType();
}
class ServerRequestHandler{
   @Source(SUSI_NO_CATEGORY)  long getConnectionId();
}
class ServerSession{
    void sendResponse(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1);
}

package android.bluetooth;

class BluetoothA2dp{
    boolean setPriority(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) int arg1);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getConnectionState(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getDevicesMatchingConnectionStates(  int[] arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getPriority(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getConnectedDevices();
}
class BluetoothAdapter{
    boolean setScanMode(  @Sink(SUSI_BLUETOOTH) int arg0);
    void setDiscoverableTimeout(  @Sink(SUSI_BLUETOOTH) int arg0);
    boolean setScanMode(  @Sink(SUSI_BLUETOOTH) int arg0, @Sink(SUSI_BLUETOOTH) int arg1);
   @Source(SUSI_BLUETOOTH_INFORMATION)  boolean getProfileProxy(  android.content.Context arg0, android.bluetooth.BluetoothProfile$ServiceListener arg1, int arg2);
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(  java.lang.String arg0, java.util.UUID arg1);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.Set getBondedDevices();
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.bluetooth.BluetoothAdapter getDefaultAdapter();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getDiscoverableTimeout();
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.bluetooth.IBluetooth getBluetoothService(  android.bluetooth.IBluetoothManagerCallback arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getName();
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.bluetooth.BluetoothServerSocket listenUsingEncryptedRfcommWithServiceRecord(  java.lang.String arg0, java.util.UUID arg1);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getConnectionState();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getScanMode();
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.bluetooth.BluetoothDevice getRemoteDevice(  java.lang.String arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(  java.lang.String arg0, java.util.UUID arg1);
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.ParcelUuid[] getUuids();
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.bluetooth.IBluetoothManager getBluetoothManager();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getProfileConnectionState(  int arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getAddress();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getState();
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.bluetooth.BluetoothDevice getRemoteDevice(  byte[] arg0);
}
class BluetoothClass{
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getMajorDeviceClass();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getDeviceClass();
}
class BluetoothDevice{
    boolean setPairingConfirmation(  @Sink(SUSI_BLUETOOTH) boolean arg0);
    boolean setDeviceOutOfBandData(  @Sink(SUSI_BLUETOOTH) byte[] arg0, @Sink(SUSI_BLUETOOTH) byte[] arg1);
    boolean setPin(  @Sink(SUSI_BLUETOOTH) byte[] arg0);
    boolean setTrust(  @Sink(SUSI_BLUETOOTH) boolean arg0);
    boolean setAlias(  @Sink(SUSI_BLUETOOTH) java.lang.String arg0);
    boolean setPasskey(  @Sink(SUSI_BLUETOOTH) int arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.ParcelUuid[] getUuids();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getAlias();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getAliasName();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getBondState();
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.bluetooth.BluetoothClass getBluetoothClass();
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.bluetooth.IBluetooth getService();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getAddress();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getName();
   @Source(SUSI_BLUETOOTH_INFORMATION)  boolean getTrustState();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getServiceChannel(  android.os.ParcelUuid arg0);
}
class BluetoothHeadset{
    boolean startScoUsingVirtualVoiceCall(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0);
    boolean setPriority(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) int arg1);
    boolean startVoiceRecognition(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getConnectedDevices();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getConnectionState(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getDevicesMatchingConnectionStates(  int[] arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getBatteryUsageHint(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getAudioState(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getPriority(  android.bluetooth.BluetoothDevice arg0);
}
class BluetoothHealth{
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.ParcelFileDescriptor getMainChannelFd(  android.bluetooth.BluetoothDevice arg0, android.bluetooth.BluetoothHealthAppConfiguration arg1);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getConnectionState(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getConnectedDevices();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getDevicesMatchingConnectionStates(  int[] arg0);
}
class BluetoothHealthAppConfiguration{
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getRole();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getName();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getDataType();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getChannelType();
}
class BluetoothInputDevice{
    boolean setPriority(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) int arg1);
    boolean sendData(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) java.lang.String arg1);
    boolean setReport(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) byte arg1, @Sink(SUSI_BLUETOOTH) java.lang.String arg2);
    boolean setProtocolMode(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) int arg1);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getConnectedDevices();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getPriority(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  boolean getReport(  android.bluetooth.BluetoothDevice arg0, byte arg1, byte arg2, int arg3);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getConnectionState(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getDevicesMatchingConnectionStates(  int[] arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  boolean getProtocolMode(  android.bluetooth.BluetoothDevice arg0);
}
class BluetoothOutputStream{
    void write(  @Sink(SUSI_BLUETOOTH) byte[] arg0, @Sink(SUSI_BLUETOOTH) int arg1, @Sink(SUSI_BLUETOOTH) int arg2);
}
class BluetoothPan{
    void setBluetoothTethering(  @Sink(SUSI_BLUETOOTH) boolean arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getConnectionState(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getDevicesMatchingConnectionStates(  int[] arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  boolean isTetheringOn();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getConnectedDevices();
}
class BluetoothPbap{
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.bluetooth.BluetoothDevice getClient();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getState();
}
class BluetoothServerSocket{
    void setServiceName(  @Sink(SUSI_BLUETOOTH) java.lang.String arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getChannel();
}
class BluetoothSocket{
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.io.InputStream getInputStream();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.io.OutputStream getOutputStream();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getPort();
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.bluetooth.BluetoothSocket accept(  int arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.bluetooth.BluetoothDevice getRemoteDevice();
}
class BluetoothTetheringDataTracker{
    void setTeardownRequested(  @Sink(SUSI_BLUETOOTH) boolean arg0);
    boolean setRadio(  @Sink(SUSI_BLUETOOTH) boolean arg0);
    void setDependencyMet(  @Sink(SUSI_BLUETOOTH) boolean arg0);
    void setUserDataEnable(  @Sink(SUSI_BLUETOOTH) boolean arg0);
    void setPolicyDataEnable(  @Sink(SUSI_BLUETOOTH) boolean arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.net.LinkCapabilities getLinkCapabilities();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getTcpBufferSizesPropName();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getDefaultGatewayAddr();
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.net.NetworkInfo getNetworkInfo();
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.bluetooth.BluetoothTetheringDataTracker getInstance();
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.net.LinkProperties getLinkProperties();
}
class BluetoothUuid{
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getServiceIdentifierFromParcelUuid(  android.os.ParcelUuid arg0);
}
class IBluetooth$Stub{
    boolean onTransact(  @Sink(SUSI_BLUETOOTH) int arg0, @Sink(SUSI_BLUETOOTH) android.os.Parcel arg1, @Sink(SUSI_BLUETOOTH) android.os.Parcel arg2, @Sink(SUSI_BLUETOOTH) int arg3);
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.IBinder asBinder();
}
class IBluetooth$Stub$Proxy{
    void unregisterCallback(  @Sink(SUSI_BLUETOOTH) android.bluetooth.IBluetoothCallback arg0);
    boolean setScanMode(  @Sink(SUSI_BLUETOOTH) int arg0, @Sink(SUSI_BLUETOOTH) int arg1);
    boolean setPasskey(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) boolean arg1, @Sink(SUSI_BLUETOOTH) int arg2, @Sink(SUSI_BLUETOOTH) byte[] arg3);
    boolean setPairingConfirmation(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) boolean arg1);
    boolean setPin(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) boolean arg1, @Sink(SUSI_BLUETOOTH) int arg2, @Sink(SUSI_BLUETOOTH) byte[] arg3);
    boolean setName(  @Sink(SUSI_BLUETOOTH) java.lang.String arg0);
    boolean setRemoteAlias(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) java.lang.String arg1);
    boolean setDiscoverableTimeout(  @Sink(SUSI_BLUETOOTH) int arg0);
    void registerCallback(  @Sink(SUSI_BLUETOOTH) android.bluetooth.IBluetoothCallback arg0);
    void sendConnectionStateChange(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) int arg1, @Sink(SUSI_BLUETOOTH) int arg2, @Sink(SUSI_BLUETOOTH) int arg3);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getRemoteClass(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.ParcelFileDescriptor connectSocket(  android.bluetooth.BluetoothDevice arg0, int arg1, android.os.ParcelUuid arg2, int arg3, int arg4);
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.ParcelUuid[] getUuids();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getAdapterConnectionState();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getDiscoverableTimeout();
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.ParcelFileDescriptor createSocketChannel(  int arg0, java.lang.String arg1, android.os.ParcelUuid arg2, int arg3, int arg4);
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.ParcelUuid[] getRemoteUuids(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getRemoteName(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getState();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getBondState(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getAddress();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getProfileConnectionState(  int arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.bluetooth.BluetoothDevice[] getBondedDevices();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getName();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getScanMode();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getRemoteAlias(  android.bluetooth.BluetoothDevice arg0);
}
class IBluetoothA2dp$Stub{
    boolean onTransact(  @Sink(SUSI_BLUETOOTH) int arg0, @Sink(SUSI_BLUETOOTH) android.os.Parcel arg1, @Sink(SUSI_BLUETOOTH) android.os.Parcel arg2, @Sink(SUSI_BLUETOOTH) int arg3);
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.IBinder asBinder();
}
class IBluetoothA2dp$Stub$Proxy{
    boolean setPriority(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) int arg1);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getConnectionState(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getPriority(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getDevicesMatchingConnectionStates(  int[] arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getConnectedDevices();
}
class IBluetoothCallback$Stub{
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.IBinder asBinder();
}
class IBluetoothCallback$Stub$Proxy{
    void onBluetoothStateChange(  @Sink(SUSI_BLUETOOTH) int arg0, @Sink(SUSI_BLUETOOTH) int arg1);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class IBluetoothHeadset$Stub{
    boolean onTransact(  @Sink(SUSI_BLUETOOTH) int arg0, @Sink(SUSI_BLUETOOTH) android.os.Parcel arg1, @Sink(SUSI_BLUETOOTH) android.os.Parcel arg2, @Sink(SUSI_BLUETOOTH) int arg3);
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.IBinder asBinder();
}
class IBluetoothHeadset$Stub$Proxy{
    boolean setPriority(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) int arg1);
    void phoneStateChanged(  @Sink(SUSI_BLUETOOTH) int arg0, @Sink(SUSI_BLUETOOTH) int arg1, @Sink(SUSI_BLUETOOTH) int arg2, @Sink(SUSI_BLUETOOTH) java.lang.String arg3, @Sink(SUSI_BLUETOOTH) int arg4);
    void clccResponse(  @Sink(SUSI_BLUETOOTH) int arg0, @Sink(SUSI_BLUETOOTH) int arg1, @Sink(SUSI_BLUETOOTH) int arg2, @Sink(SUSI_BLUETOOTH) int arg3, @Sink(SUSI_BLUETOOTH) boolean arg4, @Sink(SUSI_BLUETOOTH) java.lang.String arg5, @Sink(SUSI_BLUETOOTH) int arg6);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getPriority(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getBatteryUsageHint(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getDevicesMatchingConnectionStates(  int[] arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getAudioState(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getConnectionState(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getConnectedDevices();
}
class IBluetoothHeadsetPhone$Stub{
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.IBinder asBinder();
}
class IBluetoothHeadsetPhone$Stub$Proxy{
    boolean sendDtmf(  @Sink(SUSI_BLUETOOTH) int arg0);
    boolean processChld(  @Sink(SUSI_BLUETOOTH) int arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getNetworkOperator();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getSubscriberNumber();
}
class IBluetoothHealth$Stub{
    boolean onTransact(  @Sink(SUSI_BLUETOOTH) int arg0, @Sink(SUSI_BLUETOOTH) android.os.Parcel arg1, @Sink(SUSI_BLUETOOTH) android.os.Parcel arg2, @Sink(SUSI_BLUETOOTH) int arg3);
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.IBinder asBinder();
}
class IBluetoothHealth$Stub$Proxy{
    boolean connectChannelToSink(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothHealthAppConfiguration arg1, @Sink(SUSI_BLUETOOTH) int arg2);
    boolean disconnectChannel(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothHealthAppConfiguration arg1, @Sink(SUSI_BLUETOOTH) int arg2);
    boolean registerAppConfiguration(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothHealthAppConfiguration arg0, @Sink(SUSI_BLUETOOTH) android.bluetooth.IBluetoothHealthCallback arg1);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getHealthDeviceConnectionState(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getConnectedHealthDevices();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getHealthDevicesMatchingConnectionStates(  int[] arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.ParcelFileDescriptor getMainChannelFd(  android.bluetooth.BluetoothDevice arg0, android.bluetooth.BluetoothHealthAppConfiguration arg1);
}
class IBluetoothHealthCallback$Stub{
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.IBinder asBinder();
}
class IBluetoothHealthCallback$Stub$Proxy{
    void onHealthChannelStateChange(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothHealthAppConfiguration arg0, @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg1, @Sink(SUSI_BLUETOOTH) int arg2, @Sink(SUSI_BLUETOOTH) int arg3, @Sink(SUSI_BLUETOOTH) android.os.ParcelFileDescriptor arg4, @Sink(SUSI_BLUETOOTH) int arg5);
    void onHealthAppConfigurationStatusChange(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothHealthAppConfiguration arg0, @Sink(SUSI_BLUETOOTH) int arg1);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class IBluetoothInputDevice$Stub{
    boolean onTransact(  @Sink(SUSI_BLUETOOTH) int arg0, @Sink(SUSI_BLUETOOTH) android.os.Parcel arg1, @Sink(SUSI_BLUETOOTH) android.os.Parcel arg2, @Sink(SUSI_BLUETOOTH) int arg3);
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.IBinder asBinder();
}
class IBluetoothInputDevice$Stub$Proxy{
    boolean setProtocolMode(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) int arg1);
    boolean setReport(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) byte arg1, @Sink(SUSI_BLUETOOTH) java.lang.String arg2);
    boolean setPriority(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) int arg1);
    boolean sendData(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) java.lang.String arg1);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getConnectedDevices();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getConnectionState(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  boolean getReport(  android.bluetooth.BluetoothDevice arg0, byte arg1, byte arg2, int arg3);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getDevicesMatchingConnectionStates(  int[] arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getPriority(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class IBluetoothManager$Stub{
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.IBinder asBinder();
}
class IBluetoothManager$Stub$Proxy{
    void unregisterStateChangeCallback(  @Sink(SUSI_BLUETOOTH) android.bluetooth.IBluetoothStateChangeCallback arg0);
    android.bluetooth.IBluetooth registerAdapter(  @Sink(SUSI_BLUETOOTH) android.bluetooth.IBluetoothManagerCallback arg0);
    void registerStateChangeCallback(  @Sink(SUSI_BLUETOOTH) android.bluetooth.IBluetoothStateChangeCallback arg0);
    void unregisterAdapter(  @Sink(SUSI_BLUETOOTH) android.bluetooth.IBluetoothManagerCallback arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getAddress();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getName();
}
class IBluetoothManagerCallback$Stub{
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.IBinder asBinder();
}
class IBluetoothManagerCallback$Stub$Proxy{
    void onBluetoothServiceUp(  @Sink(SUSI_BLUETOOTH) android.bluetooth.IBluetooth arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class IBluetoothPan$Stub{
    boolean onTransact(  @Sink(SUSI_BLUETOOTH) int arg0, @Sink(SUSI_BLUETOOTH) android.os.Parcel arg1, @Sink(SUSI_BLUETOOTH) android.os.Parcel arg2, @Sink(SUSI_BLUETOOTH) int arg3);
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.IBinder asBinder();
}
class IBluetoothPan$Stub$Proxy{
    void setBluetoothTethering(  @Sink(SUSI_BLUETOOTH) boolean arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getConnectionState(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getDevicesMatchingConnectionStates(  int[] arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getConnectedDevices();
}
class IBluetoothPbap$Stub{
    boolean onTransact(  @Sink(SUSI_BLUETOOTH) int arg0, @Sink(SUSI_BLUETOOTH) android.os.Parcel arg1, @Sink(SUSI_BLUETOOTH) android.os.Parcel arg2, @Sink(SUSI_BLUETOOTH) int arg3);
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.IBinder asBinder();
}
class IBluetoothPbap$Stub$Proxy{
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.bluetooth.BluetoothDevice getClient();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getState();
}
class IBluetoothStateChangeCallback$Stub{
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.IBinder asBinder();
}
class IBluetoothStateChangeCallback$Stub$Proxy{
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getInterfaceDescriptor();
}

package gov.nist.javax.sip.header.ims;

class PAccessNetworkInfo{
    void setCGI3GPP(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setUtranCellID3GPP(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setDSLLocation(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void setCI3GPP2(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String getCGI3GPP();
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.Object getExtensionAccessInfo();
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String getAccessType();
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String getDSLLocation();
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String getCI3GPP2();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUtranCellID3GPP();
}
class PAssertedIdentity{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class PAssertedService{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String encodeBody();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getApplicationIdentifiers();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSubserviceIdentifiers();
}
class PAssociatedURI{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_FILE_INFORMATION)  javax.sip.address.URI getAssociatedURI();
}
class PCalledPartyID{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class PChargingFunctionAddresses{
    void setChargingCollectionFunctionAddress(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setEventChargingFunctionAddress(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.ListIterator getChargingCollectionFunctionAddresses();
   @Source(SUSI_NO_CATEGORY)  java.util.ListIterator getEventChargingFunctionAddresses();
}
class PChargingVector{
    void setOriginatingIOI(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setTerminatingIOI(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setICIDGeneratedAt(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setICID(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getICIDGeneratedAt();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getICID();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getOriginatingIOI();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTerminatingIOI();
}
class PMediaAuthorization{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getToken();
}
class PPreferredIdentity{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class PPreferredService{
    void setSubserviceIdentifiers(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String encodeBody();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getApplicationIdentifiers();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSubserviceIdentifiers();
}
class PProfileKey{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class PServedUser{
    void setRegistrationState(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setSessionCase(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSessionCase();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRegistrationState();
}
class PUserDatabase{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDatabaseName();
}
class PVisitedNetworkID{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setVisitedNetworkID(  @Sink(SUSI_NO_CATEGORY) gov.nist.core.Token arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getVisitedNetworkID();
}
class Path{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class Privacy{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPrivacy();
}
class SecurityAgree{
    void setMode(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setPortClient(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSPIServer(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setPreference(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setSPIClient(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setProtocol(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setAlgorithm(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setPortServer(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setEncryptionAlgorithm(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_FILE_INFORMATION)  java.lang.String getSecurityMechanism();
   @Source(SUSI_NO_CATEGORY)  int getSPIClient();
   @Source(SUSI_NO_CATEGORY)  float getPreference();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProtocol();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String encodeBody();
   @Source(SUSI_NO_CATEGORY)  int getPortClient();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getEncryptionAlgorithm();
   @Source(SUSI_NO_CATEGORY)  int getPortServer();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlgorithm();
   @Source(SUSI_NO_CATEGORY)  int getSPIServer();
}
class SecurityClient{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class SecurityServer{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class SecurityVerify{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class ServiceRoute{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}

package com.android.internal.appwidget;

class IAppWidgetHost$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IAppWidgetHost$Stub$Proxy{
    void viewDataChanged(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void updateAppWidget(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.widget.RemoteViews arg1);
    void providerChanged(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.appwidget.AppWidgetProviderInfo arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IAppWidgetService$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IAppWidgetService$Stub$Proxy{
    void unbindRemoteViewsService(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int[] startListening(  @Sink(SUSI_NO_CATEGORY) com.android.internal.appwidget.IAppWidgetHost arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.util.List arg3);
   @Source(SUSI_NO_CATEGORY)  boolean hasBindAppWidgetPermission(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void bindAppWidgetId(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
    void updateAppWidgetOptions(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void updateAppWidgetIds(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) android.widget.RemoteViews arg1);
    void notifyAppWidgetViewDataChanged(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setBindAppWidgetPermission(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void deleteHost(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int allocateAppWidgetId(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void stopListeningAsUser(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean bindAppWidgetIdIfAllowed(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg2, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg3);
    void stopListening(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int[] startListeningAsUser(  @Sink(SUSI_NO_CATEGORY) com.android.internal.appwidget.IAppWidgetHost arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.util.List arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
    void deleteAppWidgetId(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void bindRemoteViewsService(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void partiallyUpdateAppWidgetIds(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) android.widget.RemoteViews arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int[] getAppWidgetIdsForHost(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NO_CATEGORY)  int[] getAppWidgetIds(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getInstalledProviders(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle getAppWidgetOptions(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.widget.RemoteViews getAppWidgetViews(  @Sink(SUSI_NO_CATEGORY) int arg0);
}

package com.coremedia.iso.boxes.mdat;

class MediaDataBox{
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer getContent(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType();
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.ContainerBox getParent();
   @Source(SUSI_NO_CATEGORY)  long getSize();
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer getHeader();
}
class SampleList{
   @Source(SUSI_NO_CATEGORY)  java.util.Map getOffsets(  @Sink(SUSI_NO_CATEGORY) com.coremedia.iso.boxes.fragment.MovieFragmentBox arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) com.coremedia.iso.boxes.fragment.TrackExtendsBox arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}

package com.android.mms.dom;

class AttrImpl{
    void setNodeValue(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getSpecified();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.Node getNextSibling();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  short getNodeType();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.Node getParentNode();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.TypeInfo getSchemaTypeInfo();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNodeName();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.Element getOwnerElement();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.Node getPreviousSibling();
}
class DocumentImpl{
    void setDocumentURI(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
    void setStrictErrorChecking(  @Sink(SUSI_SMS_MMS) boolean arg0);
    void setXmlVersion(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
    void setXmlStandalone(  @Sink(SUSI_SMS_MMS) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNodeName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getXmlEncoding();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.NodeList getElementsByTagNameNS(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getXmlVersion();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.NodeList getElementsByTagName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getStrictErrorChecking();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDocumentURI();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.Element getElementById(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.DOMImplementation getImplementation();
   @Source(SUSI_NO_CATEGORY)  boolean getXmlStandalone();
   @Source(SUSI_NO_CATEGORY)  short getNodeType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInputEncoding();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.DOMConfiguration getDomConfig();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.DocumentFragment createDocumentFragment();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.DocumentType getDoctype();
}
class ElementImpl{
    void setAttribute(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1);
    void setIdAttribute(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) boolean arg1);
    void setIdAttributeNS(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) boolean arg2);
    void setAttributeNS(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTagName();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.Attr getAttributeNodeNS(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNodeName();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.NodeList getElementsByTagName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAttributeNS(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.NodeList getElementsByTagNameNS(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.TypeInfo getSchemaTypeInfo();
   @Source(SUSI_NO_CATEGORY)  short getNodeType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAttribute(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.Attr getAttributeNode(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.NamedNodeMap getAttributes();
}
class NamedNodeMapImpl{
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.Node getNamedItemNS(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.Node getNamedItem(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getLength();
}
class NodeImpl{
   @Source(SUSI_SMS_MMS)  java.lang.Object setUserData(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.Object arg1, @Sink(SUSI_SMS_MMS) org.w3c.dom.UserDataHandler arg2);
    void setNodeValue(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
    void setTextContent(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
    void setPrefix(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.Document getOwnerDocument();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getUserData(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.NodeList getChildNodes();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.Node getNextSibling();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getBaseURI();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.Node getFirstChild();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNamespaceURI();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPrefix();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.Node getLastChild();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.NamedNodeMap getAttributes();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getFeature(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.Node getPreviousSibling();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.Node getParentNode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNodeValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLocalName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTextContent();
}
class NodeListImpl{
   @Source(SUSI_NO_CATEGORY)  int getLength();
}

package com.coremedia.iso.boxes;

class ChunkOffsetBox{
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
}
class CompositionTimeToSample{
   @Source(SUSI_NO_CATEGORY)  long getContentSize();
   @Source(SUSI_NO_CATEGORY)  java.util.List getEntries();
}
class CompositionTimeToSample$Entry{
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  int getOffset();
}
class DataEntryUrlBox{
   @Source(SUSI_NO_CATEGORY)  long getContentSize();
}
class DataReferenceBox{
   @Source(SUSI_NO_CATEGORY)  long getContentSize();
}
class FileTypeBox{
   @Source(SUSI_NO_CATEGORY)  long getMinorVersion();
   @Source(SUSI_NO_CATEGORY)  long getContentSize();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMajorBrand();
}
class HandlerBox{
   @Source(SUSI_NO_CATEGORY)  long getContentSize();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHandlerType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
}
class MediaBox{
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.MediaInformationBox getMediaInformationBox();
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.HandlerBox getHandlerBox();
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.MediaHeaderBox getMediaHeaderBox();
}
class MediaHeaderBox{
   @Source(SUSI_NO_CATEGORY)  long getContentSize();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLanguage();
   @Source(SUSI_NO_CATEGORY)  long getModificationTime();
   @Source(SUSI_NO_CATEGORY)  long getCreationTime();
   @Source(SUSI_NO_CATEGORY)  long getTimescale();
   @Source(SUSI_NO_CATEGORY)  long getDuration();
}
class MediaInformationBox{
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.AbstractMediaHeaderBox getMediaHeaderBox();
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.SampleTableBox getSampleTableBox();
}
class MovieHeaderBox{
   @Source(SUSI_NO_CATEGORY)  float getVolume();
   @Source(SUSI_NO_CATEGORY)  long getNextTrackId();
   @Source(SUSI_NO_CATEGORY)  long getModificationTime();
   @Source(SUSI_NO_CATEGORY)  long getTimescale();
   @Source(SUSI_NO_CATEGORY)  long getDuration();
   @Source(SUSI_NO_CATEGORY)  double getRate();
   @Source(SUSI_NO_CATEGORY)  long getContentSize();
   @Source(SUSI_NO_CATEGORY)  long getCreationTime();
}
class SampleDependencyTypeBox{
   @Source(SUSI_NO_CATEGORY)  long getContentSize();
   @Source(SUSI_NO_CATEGORY)  java.util.List getEntries();
}
class SampleDependencyTypeBox$Entry{
   @Source(SUSI_NO_CATEGORY)  int getSampleHasRedundancy();
   @Source(SUSI_NO_CATEGORY)  int getReserved();
   @Source(SUSI_NO_CATEGORY)  int getSampleIsDependentOn();
   @Source(SUSI_NO_CATEGORY)  int getSampleDependsOn();
}
class SampleDescriptionBox{
   @Source(SUSI_NO_CATEGORY)  long getContentSize();
}
class SampleSizeBox{
   @Source(SUSI_NO_CATEGORY)  long getContentSize();
   @Source(SUSI_NO_CATEGORY)  long[] getSampleSizes();
   @Source(SUSI_NO_CATEGORY)  long getSampleSize();
   @Source(SUSI_NO_CATEGORY)  long getSampleCount();
}
class SampleTableBox{
   @Source(SUSI_SYNCHRONIZATION_DATA)  com.coremedia.iso.boxes.SyncSampleBox getSyncSampleBox();
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.SampleToChunkBox getSampleToChunkBox();
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.SampleDescriptionBox getSampleDescriptionBox();
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.CompositionTimeToSample getCompositionTimeToSample();
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.SampleDependencyTypeBox getSampleDependencyTypeBox();
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.TimeToSampleBox getTimeToSampleBox();
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.ChunkOffsetBox getChunkOffsetBox();
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.SampleSizeBox getSampleSizeBox();
}
class SampleToChunkBox{
   @Source(SUSI_NO_CATEGORY)  long getContentSize();
   @Source(SUSI_NO_CATEGORY)  java.util.List getEntries();
}
class SampleToChunkBox$Entry{
   @Source(SUSI_NO_CATEGORY)  long getSampleDescriptionIndex();
   @Source(SUSI_NO_CATEGORY)  long getSamplesPerChunk();
   @Source(SUSI_NO_CATEGORY)  long getFirstChunk();
}
class StaticChunkOffsetBox{
   @Source(SUSI_NO_CATEGORY)  long[] getChunkOffsets();
   @Source(SUSI_NO_CATEGORY)  long getContentSize();
}
class SyncSampleBox{
   @Source(SUSI_NO_CATEGORY)  long[] getSampleNumber();
   @Source(SUSI_NO_CATEGORY)  long getContentSize();
}
class TimeToSampleBox{
   @Source(SUSI_NO_CATEGORY)  long getContentSize();
   @Source(SUSI_NO_CATEGORY)  java.util.List getEntries();
}
class TimeToSampleBox$Entry{
   @Source(SUSI_NO_CATEGORY)  long getCount();
   @Source(SUSI_NO_CATEGORY)  long getDelta();
}
class TrackBox{
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.SampleTableBox getSampleTableBox();
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.MediaBox getMediaBox();
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.TrackHeaderBox getTrackHeaderBox();
}
class TrackHeaderBox{
   @Source(SUSI_NO_CATEGORY)  long getDuration();
   @Source(SUSI_NO_CATEGORY)  double getHeight();
   @Source(SUSI_NO_CATEGORY)  long getContentSize();
   @Source(SUSI_NO_CATEGORY)  double getWidth();
   @Source(SUSI_NO_CATEGORY)  long getTrackId();
   @Source(SUSI_NO_CATEGORY)  int getLayer();
   @Source(SUSI_NO_CATEGORY)  long getModificationTime();
   @Source(SUSI_NO_CATEGORY)  long getCreationTime();
   @Source(SUSI_NO_CATEGORY)  float getVolume();
   @Source(SUSI_NO_CATEGORY)  long[] getMatrix();
    void getContent(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0);
   @Source(SUSI_NO_CATEGORY)  int getAlternateGroup();
}

package org.apache.http.util;

class ByteArrayBuffer{
   @Source(SUSI_NO_CATEGORY)  byte[] toByteArray();
   @Source(SUSI_NO_CATEGORY)  byte[] buffer();
}
class EncodingUtils{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAsciiString(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
   @Source(SUSI_NO_CATEGORY)  byte[] getBytes(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAsciiString(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] getAsciiBytes(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class VersionInfo{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getClassloader();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getModule();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTimestamp();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPackage();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRelease();
}

package com.android.internal.os.storage;

class ExternalStorageFormatter{
   @Source(SUSI_NO_CATEGORY)  android.os.storage.IMountService getMountService();
}

package com.android.internal.preference;

class YesNoPreference{
   @Source(SUSI_NO_CATEGORY)  boolean getValue();
}
class YesNoPreference$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}

package java.nio.channels;

class Channels$ChannelOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class Channels$OutputStreamChannel{
   @Source(SUSI_NO_CATEGORY)  int write(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0);
}
class DatagramChannel{
   @Source(SUSI_NO_CATEGORY)  long write(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer[] arg0);
   @Source(SUSI_NO_CATEGORY)  long read(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer[] arg0);
}
class FileChannel{
   @Source(SUSI_NO_CATEGORY)  long read(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.channels.FileLock tryLock();
   @Source(SUSI_NO_CATEGORY)  java.nio.channels.FileLock lock();
   @Source(SUSI_NO_CATEGORY)  long write(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer[] arg0);
}
class FileLock{
   @Source(SUSI_NO_CATEGORY)  long size();
   @Source(SUSI_NO_CATEGORY)  java.nio.channels.FileChannel channel();
   @Source(SUSI_NO_CATEGORY)  long position();
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
}
class SelectableChannel{
   @Source(SUSI_NO_CATEGORY)  java.nio.channels.SelectionKey register(  @Sink(SUSI_NO_CATEGORY) java.nio.channels.Selector arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class SelectionKey{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object attachment();
}
class SocketChannel{
   @Source(SUSI_NO_CATEGORY)  long read(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer[] arg0);
   @Source(SUSI_NO_CATEGORY)  long write(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer[] arg0);
}

package com.android.providers.contacts;

class AbstractContactsProvider{
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri insert(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg1);
   @Source(SUSI_CONTACT_INFORMATION)  int update(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg3);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.providers.contacts.ContactsTransaction getCurrentTransaction();
   @Source(SUSI_CONTACT_INFORMATION)  android.database.sqlite.SQLiteOpenHelper getDatabaseHelper();
}
class AccountWithDataSet{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getAccountType();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getAccountName();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getDataSet();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.providers.contacts.AccountWithDataSet get(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2);
}
class CallLogProvider{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.providers.contacts.ContactsDatabaseHelper getDatabaseHelper(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getType(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.database.Cursor query(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4);
}
class ContactDirectoryManager{
    void onPackageChanged(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.providers.contacts.ContactsDatabaseHelper getDbHelper();
   @Source(SUSI_CONTACT_INFORMATION)  int scanAllPackages();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.Set getDirectoryProviderPackages(  @Sink(SUSI_CONTACT_INFORMATION) android.content.pm.PackageManager arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String providerDescription(  @Sink(SUSI_CONTACT_INFORMATION) android.content.pm.ProviderInfo arg0);
}
class ContactLocaleUtils{
    void setLocale(  @Sink(SUSI_CONTACT_INFORMATION) java.util.Locale arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.util.Iterator getNameLookupKeys(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getSortKey(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.providers.contacts.ContactLocaleUtils getIntance();
}
class ContactLocaleUtils$ChineseContactUtils{
   @Source(SUSI_CONTACT_INFORMATION)  java.util.Iterator getNameLookupKeys(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getSortKey(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
}
class ContactLocaleUtils$ContactLocaleUtilsBase{
   @Source(SUSI_CONTACT_INFORMATION)  java.util.Iterator getNameLookupKeys(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getSortKey(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
}
class ContactsDatabaseHelper{
    void copyLongValue(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg3);
    void updateContactVisible(  @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.TransactionContext arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1);
    void setIsPrimary(  @Sink(SUSI_CONTACT_INFORMATION) long arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1, @Sink(SUSI_CONTACT_INFORMATION) long arg2);
    void replaceStatusUpdate(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.Long arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.Integer arg4, @Sink(SUSI_CONTACT_INFORMATION) java.lang.Integer arg5);
    void insertNameLookup(  @Sink(SUSI_CONTACT_INFORMATION) long arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1, @Sink(SUSI_CONTACT_INFORMATION) int arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg3);
    void updateRawContactDisplayName(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1);
   @Source(SUSI_CONTACT_INFORMATION)  boolean updateContactVisible(  @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.TransactionContext arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1, @Sink(SUSI_CONTACT_INFORMATION) boolean arg2);
    void insertStatusUpdate(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.Long arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.Integer arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.Integer arg4);
    void setIsSuperPrimary(  @Sink(SUSI_CONTACT_INFORMATION) long arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1, @Sink(SUSI_CONTACT_INFORMATION) long arg2);
   @Source(SUSI_CONTACT_INFORMATION)  boolean updateContactVisibleOnlyIfChanged(  @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.TransactionContext arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1);
    void copyStringValue(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg3);
    void setLocale(  @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.ContactsProvider2 arg0, @Sink(SUSI_CONTACT_INFORMATION) java.util.Locale arg1);
    void onCreate(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg0);
    void onUpgrade(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) int arg2);
    void setProperty(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
   @Source(SUSI_DATABASE_INFORMATION)  com.android.common.content.SyncStateContentProviderHelper getSyncState();
   @Source(SUSI_CONTACT_INFORMATION)  long getMimeTypeId(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  boolean getUseStrictPhoneNumberComparisonForTest();
   @Source(SUSI_CONTACT_INFORMATION)  long getMimeTypeIdForSip();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getUseStrictPhoneNumberComparisonParameter();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getProperty(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.providers.contacts.ContactsDatabaseHelper getNewInstanceForTest(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  long getMimeTypeIdForEmail();
   @Source(SUSI_CONTACT_INFORMATION)  long getOrCreateAccountIdInTransaction(  @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.AccountWithDataSet arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Long getAccountIdOrNull(  @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.AccountWithDataSet arg0);
   @Source(SUSI_CONTACT_INFORMATION)  long getMimeTypeIdForStructuredName();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getDataMimeType(  @Sink(SUSI_CONTACT_INFORMATION) long arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getCurrentCountryIso();
   @Source(SUSI_CONTACT_INFORMATION)  int getAggregationMode(  @Sink(SUSI_CONTACT_INFORMATION) long arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.database.sqlite.SQLiteDatabase getDatabase(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getCountryIso();
   @Source(SUSI_CONTACT_INFORMATION)  long getMimeTypeIdForOrganization();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.providers.contacts.ContactsDatabaseHelper getInstance(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  long getContactId(  @Sink(SUSI_CONTACT_INFORMATION) long arg0);
   @Source(SUSI_CONTACT_INFORMATION)  long getMimeTypeIdForStructuredPostal();
   @Source(SUSI_CONTACT_INFORMATION)  long getMimeTypeIdForPhone();
   @Source(SUSI_CONTACT_INFORMATION)  long getMimeTypeIdForIm();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.Set getAllAccountsWithDataSets();
   @Source(SUSI_CONTACT_INFORMATION)  int getDisplayNameSourceForMimeTypeId(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  long getPackageId(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
}
class ContactsDatabaseHelper$StructuredNameLookupBuilder{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String[] getCommonNicknameClusters(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
}
class ContactsProvider2{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_CONTACT_INFORMATION)  long insertStatusUpdate(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg0);
    void notifyChange(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri insertInTransaction(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg1);
   @Source(SUSI_CONTACT_INFORMATION)  boolean isWritableAccountWithDataSet(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.database.Cursor query(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4);
   @Source(SUSI_CONTACT_INFORMATION)  int getMaxDisplayPhotoDim();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.ThreadLocal getTransactionHolder();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.providers.contacts.ContactDirectoryManager getContactDirectoryManagerForTest();
   @Source(SUSI_CONTACT_INFORMATION)  android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.database.Cursor query(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4, @Sink(SUSI_CONTACT_INFORMATION) android.os.CancellationSignal arg5);
   @Source(SUSI_CONTACT_INFORMATION)  android.database.Cursor buildSingleRowResult(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.Object[] arg2);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.providers.contacts.PhotoPriorityResolver createPhotoPriorityResolver(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getQueryParameter(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.providers.contacts.DataRowHandler getDataRowHandlerForProfile(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.database.Cursor queryLocal(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4, @Sink(SUSI_CONTACT_INFORMATION) long arg5, @Sink(SUSI_CONTACT_INFORMATION) android.os.CancellationSignal arg6);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getType(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String[] getDefaultProjection(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.accounts.Account getDefaultAccount();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.Locale getLocale();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.providers.contacts.ContactsDatabaseHelper getThreadActiveDatabaseHelperForTest();
   @Source(SUSI_CONTACT_INFORMATION)  int getMaxThumbnailDim();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.providers.contacts.PhotoStore getProfilePhotoStore();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.providers.contacts.PhotoStore getPhotoStore();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.providers.contacts.DataRowHandler getDataRowHandler(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
}
class ContactsProvider2$StructuredNameLookupBuilder{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String[] getCommonNicknameClusters(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
}
class ContactsTransaction{
    void startTransactionForDb(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteTransactionListener arg2);
   @Source(SUSI_CONTACT_INFORMATION)  android.database.sqlite.SQLiteDatabase getDbForTag(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
}
class CountryMonitor{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getCountryIso();
}
class DataRowHandler{
   @Source(SUSI_CONTACT_INFORMATION)  android.content.ContentValues getAugmentedValues(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg2);
   @Source(SUSI_CONTACT_INFORMATION)  int getTypeRank(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  long insert(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.TransactionContext arg1, @Sink(SUSI_CONTACT_INFORMATION) long arg2, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg3);
   @Source(SUSI_CONTACT_INFORMATION)  long getMimeTypeId();
}
class DataRowHandlerForCommonDataKind{
   @Source(SUSI_CONTACT_INFORMATION)  boolean update(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.TransactionContext arg1, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg2, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg3, @Sink(SUSI_CONTACT_INFORMATION) boolean arg4);
}
class DataRowHandlerForEmail{
   @Source(SUSI_CONTACT_INFORMATION)  int getTypeRank(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class DataRowHandlerForGroupMembership{
   @Source(SUSI_CONTACT_INFORMATION)  boolean update(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.TransactionContext arg1, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg2, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg3, @Sink(SUSI_CONTACT_INFORMATION) boolean arg4);
   @Source(SUSI_CONTACT_INFORMATION)  long insert(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.TransactionContext arg1, @Sink(SUSI_CONTACT_INFORMATION) long arg2, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg3);
}
class DataRowHandlerForIdentity{
   @Source(SUSI_CONTACT_INFORMATION)  boolean update(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.TransactionContext arg1, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg2, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg3, @Sink(SUSI_CONTACT_INFORMATION) boolean arg4);
}
class DataRowHandlerForOrganization{
   @Source(SUSI_CONTACT_INFORMATION)  int getTypeRank(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class DataRowHandlerForPhoneNumber{
   @Source(SUSI_CONTACT_INFORMATION)  boolean update(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.TransactionContext arg1, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg2, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg3, @Sink(SUSI_CONTACT_INFORMATION) boolean arg4);
   @Source(SUSI_CONTACT_INFORMATION)  long insert(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.TransactionContext arg1, @Sink(SUSI_CONTACT_INFORMATION) long arg2, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg3);
   @Source(SUSI_CONTACT_INFORMATION)  int getTypeRank(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class DataRowHandlerForPhoto{
   @Source(SUSI_CONTACT_INFORMATION)  boolean update(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.TransactionContext arg1, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg2, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg3, @Sink(SUSI_CONTACT_INFORMATION) boolean arg4);
   @Source(SUSI_CONTACT_INFORMATION)  long insert(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.TransactionContext arg1, @Sink(SUSI_CONTACT_INFORMATION) long arg2, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg3);
}
class DataRowHandlerForStructuredName{
   @Source(SUSI_CONTACT_INFORMATION)  boolean update(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.TransactionContext arg1, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg2, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg3, @Sink(SUSI_CONTACT_INFORMATION) boolean arg4);
}
class DataRowHandlerForStructuredPostal{
   @Source(SUSI_CONTACT_INFORMATION)  boolean update(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.TransactionContext arg1, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg2, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg3, @Sink(SUSI_CONTACT_INFORMATION) boolean arg4);
}
class DbModifierWithNotification{
   @Source(SUSI_CONTACT_INFORMATION)  long insert(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg0);
   @Source(SUSI_CONTACT_INFORMATION)  long insert(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg2);
   @Source(SUSI_CONTACT_INFORMATION)  int update(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg3);
}
class DefaultCallLogInsertionHelper{
    void addComputedValues(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getGeocodedLocationFor(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.providers.contacts.DefaultCallLogInsertionHelper getInstance(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
}
class FastScrollingIndexCache{
   @Source(SUSI_CONTACT_INFORMATION)  android.os.Bundle buildExtraBundle(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg0, @Sink(SUSI_CONTACT_INFORMATION) int[] arg1);
   @Source(SUSI_CONTACT_INFORMATION)  android.os.Bundle get(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4);
}
class GlobalSearchSupport{
   @Source(SUSI_CONTACT_INFORMATION)  android.database.Cursor handleSearchSuggestionsQuery(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg3);
   @Source(SUSI_CONTACT_INFORMATION)  android.database.Cursor handleSearchShortcutRefresh(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg3);
}
class HanziToPinyin{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.providers.contacts.HanziToPinyin getInstance();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.ArrayList get(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
}
class LegacyApiSupport{
   @Source(SUSI_CONTACT_INFORMATION)  int update(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg3);
   @Source(SUSI_CONTACT_INFORMATION)  android.database.Cursor query(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg5);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getType(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0);
}
class MemoryCursor{
   @Source(SUSI_CONTACT_INFORMATION)  int getCount();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String[] getColumnNames();
}
class NameLookupBuilder{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String normalizeName(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
}
class NameNormalizer{
   @Source(SUSI_CONTACT_INFORMATION)  java.text.RuleBasedCollator getCompressingCollator();
   @Source(SUSI_CONTACT_INFORMATION)  java.text.RuleBasedCollator getComplexityCollator();
}
class NameSplitter{
   @Source(SUSI_CONTACT_INFORMATION)  int getAdjustedFullNameStyle(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getAdjustedNameStyleBasedOnPhoneticNameStyle(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
}
class NameSplitter$Name{
    void toValues(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getGivenNames();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getSuffix();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getMiddleName();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getPrefix();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getFamilyName();
}
class PhotoPriorityResolver{
   @Source(SUSI_CONTACT_INFORMATION)  int getPhotoPriority(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
}
class PhotoProcessor{
   @Source(SUSI_CONTACT_INFORMATION)  byte[] getThumbnailPhotoBytes();
   @Source(SUSI_CONTACT_INFORMATION)  byte[] getDisplayPhotoBytes();
   @Source(SUSI_CONTACT_INFORMATION)  int getMaxThumbnailPhotoDim();
   @Source(SUSI_CONTACT_INFORMATION)  android.graphics.Bitmap getDisplayPhoto();
   @Source(SUSI_CONTACT_INFORMATION)  android.graphics.Bitmap getNormalizedBitmap(  @Sink(SUSI_CONTACT_INFORMATION) android.graphics.Bitmap arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) boolean arg2);
}
class PhotoStore{
   @Source(SUSI_CONTACT_INFORMATION)  long insert(  @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.PhotoProcessor arg0, @Sink(SUSI_CONTACT_INFORMATION) boolean arg1);
   @Source(SUSI_CONTACT_INFORMATION)  long getTotalSize();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.providers.contacts.PhotoStore$Entry get(  @Sink(SUSI_CONTACT_INFORMATION) long arg0);
}
class ProfileAwareUriMatcher{
    void addURI(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) int arg2);
}
class ProfileDatabaseHelper{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.providers.contacts.ProfileDatabaseHelper getInstance(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.providers.contacts.ProfileDatabaseHelper getNewInstanceForTest(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
}
class ProfileProvider{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.ThreadLocal getTransactionHolder();
   @Source(SUSI_CONTACT_INFORMATION)  android.database.Cursor query(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4, @Sink(SUSI_CONTACT_INFORMATION) android.os.CancellationSignal arg5);
   @Source(SUSI_CONTACT_INFORMATION)  android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getType(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.database.Cursor query(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4);
}
class ReorderingCursorWrapper{
   @Source(SUSI_CONTACT_INFORMATION)  int getInt(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  double getDouble(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getCount();
   @Source(SUSI_CONTACT_INFORMATION)  short getShort(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getString(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  long getLong(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String[] getColumnNames();
   @Source(SUSI_CONTACT_INFORMATION)  int getType(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  float getFloat(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class SearchIndexManager{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getFtsMatchQuery(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.SearchIndexManager$FtsQueryBuilder arg1);
   @Source(SUSI_CONTACT_INFORMATION)  java.util.List splitIntoFtsTokens(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
}
class SearchIndexManager$FtsQueryBuilder{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.providers.contacts.SearchIndexManager$FtsQueryBuilder getDigitsQueryBuilder(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
}
class SearchIndexManager$IndexBuilder{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getName();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getString(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getContent();
   @Source(SUSI_CONTACT_INFORMATION)  int getInt(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getTokens();
}
class TransactionContext{
    void syncStateUpdated(  @Sink(SUSI_SYNCHRONIZATION_DATA) long arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.Object arg1);
    void rawContactInserted(  @Sink(SUSI_CONTACT_INFORMATION) long arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1);
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.util.Set getUpdatedSyncStates();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.Set getDirtyRawContactIds();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Long getAccountIdOrNullForRawContact(  @Sink(SUSI_CONTACT_INFORMATION) long arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.util.Set getStaleSearchIndexRawContactIds();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.Set getUpdatedRawContactIds();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.Set getStaleSearchIndexContactIds();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.Set getInsertedRawContactIds();
}
class VoicemailContentProvider{
   @Source(SUSI_CONTACT_INFORMATION)  android.os.ParcelFileDescriptor openDataFile(  @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.VoicemailContentProvider$UriData arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
    void checkAndAddSourcePackageIntoValues(  @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.VoicemailContentProvider$UriData arg0, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg1);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getType(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.database.Cursor query(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getCallingPackage();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.providers.contacts.ContactsDatabaseHelper getDatabaseHelper(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
}
class VoicemailContentProvider$UriData{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.providers.contacts.VoicemailUriType getUriType();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getSourcePackage();
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getUri();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getId();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getWhereClause();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.providers.contacts.VoicemailContentProvider$UriData createUriData(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0);
}
class VoicemailContentTable{
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri insert(  @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.VoicemailContentProvider$UriData arg0, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg1);
   @Source(SUSI_CONTACT_INFORMATION)  android.os.ParcelFileDescriptor openFile(  @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.VoicemailContentProvider$UriData arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
   @Source(SUSI_CONTACT_INFORMATION)  int update(  @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.VoicemailContentProvider$UriData arg0, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg3);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getType(  @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.VoicemailContentProvider$UriData arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.database.Cursor query(  @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.VoicemailContentProvider$UriData arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4);
}
class VoicemailStatusTable{
   @Source(SUSI_CONTACT_INFORMATION)  android.os.ParcelFileDescriptor openFile(  @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.VoicemailContentProvider$UriData arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
   @Source(SUSI_CONTACT_INFORMATION)  int update(  @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.VoicemailContentProvider$UriData arg0, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg3);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getType(  @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.VoicemailContentProvider$UriData arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.database.Cursor query(  @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.VoicemailContentProvider$UriData arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4);
}

package android.location;

class Address{
    void setAddressLine(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setExtras(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getFeatureName();
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getAdminArea();
   @Source(SUSI_LOCATION_INFORMATION)  java.util.Locale getLocale();
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getCountryName();
   @Source(SUSI_LOCATION_INFORMATION)  int getMaxAddressLineIndex();
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getPremises();
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getThoroughfare();
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getAddressLine(  @Sink(SUSI_LOCATION_INFORMATION) int arg0);
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getPhone();
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getUrl();
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getLocality();
   @Source(SUSI_LOCATION_INFORMATION)  android.os.Bundle getExtras();
   @Source(SUSI_LOCATION_INFORMATION)  double getLongitude();
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getPostalCode();
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getSubLocality();
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getSubAdminArea();
   @Source(SUSI_LOCATION_INFORMATION)  double getLatitude();
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getCountryCode();
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getSubThoroughfare();
}
class Address$1{
   @Source(SUSI_NO_CATEGORY)  android.location.Address createFromParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0);
}
class Country{
   @Source(SUSI_LOCATION_INFORMATION)  int getSource();
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getCountryIso();
   @Source(SUSI_LOCATION_INFORMATION)  long getTimestamp();
}
class Criteria{
    void setAccuracy(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_LOCATION_INFORMATION)  int getVerticalAccuracy();
   @Source(SUSI_LOCATION_INFORMATION)  int getPowerRequirement();
   @Source(SUSI_LOCATION_INFORMATION)  int getSpeedAccuracy();
   @Source(SUSI_LOCATION_INFORMATION)  int getHorizontalAccuracy();
   @Source(SUSI_LOCATION_INFORMATION)  int getAccuracy();
   @Source(SUSI_LOCATION_INFORMATION)  int getBearingAccuracy();
}
class Geocoder{
   @Source(SUSI_LOCATION_INFORMATION)  java.util.List getFromLocation(  @Sink(SUSI_LOCATION_INFORMATION) double arg0, @Sink(SUSI_LOCATION_INFORMATION) double arg1, @Sink(SUSI_LOCATION_INFORMATION) int arg2);
   @Source(SUSI_LOCATION_INFORMATION)  java.util.List getFromLocationName(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0, @Sink(SUSI_LOCATION_INFORMATION) int arg1, @Sink(SUSI_LOCATION_INFORMATION) double arg2, @Sink(SUSI_LOCATION_INFORMATION) double arg3, @Sink(SUSI_LOCATION_INFORMATION) double arg4, @Sink(SUSI_LOCATION_INFORMATION) double arg5);
   @Source(SUSI_LOCATION_INFORMATION)  java.util.List getFromLocationName(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0, @Sink(SUSI_LOCATION_INFORMATION) int arg1);
}
class GeocoderParams{
   @Source(SUSI_LOCATION_INFORMATION)  java.util.Locale getLocale();
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getClientPackage();
}
class Geofence{
   @Source(SUSI_LOCATION_INFORMATION)  double getLongitude();
   @Source(SUSI_LOCATION_INFORMATION)  int getType();
   @Source(SUSI_LOCATION_INFORMATION)  float getRadius();
   @Source(SUSI_LOCATION_INFORMATION)  double getLatitude();
}
class GpsSatellite{
   @Source(SUSI_LOCATION_INFORMATION)  int getPrn();
   @Source(SUSI_LOCATION_INFORMATION)  float getSnr();
   @Source(SUSI_LOCATION_INFORMATION)  float getElevation();
   @Source(SUSI_LOCATION_INFORMATION)  float getAzimuth();
}
class GpsStatus{
    void setStatus(  @Sink(SUSI_NO_CATEGORY) android.location.GpsStatus arg0);
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.Iterable getSatellites();
   @Source(SUSI_LOCATION_INFORMATION)  int getTimeToFirstFix();
   @Source(SUSI_LOCATION_INFORMATION)  int getMaxSatellites();
}
class ICountryDetector$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_LOCATION_INFORMATION)  android.os.IBinder asBinder();
}
class ICountryDetector$Stub$Proxy{
    void addCountryListener(  @Sink(SUSI_NO_CATEGORY) android.location.ICountryListener arg0);
    void removeCountryListener(  @Sink(SUSI_NO_CATEGORY) android.location.ICountryListener arg0);
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_LOCATION_INFORMATION)  android.location.Country detectCountry();
}
class ICountryListener$Stub{
   @Source(SUSI_LOCATION_INFORMATION)  android.os.IBinder asBinder();
}
class ICountryListener$Stub$Proxy{
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class IGeocodeProvider$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_LOCATION_INFORMATION)  android.os.IBinder asBinder();
}
class IGeocodeProvider$Stub$Proxy{
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getFromLocationName(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0, @Sink(SUSI_LOCATION_INFORMATION) double arg1, @Sink(SUSI_LOCATION_INFORMATION) double arg2, @Sink(SUSI_LOCATION_INFORMATION) double arg3, @Sink(SUSI_LOCATION_INFORMATION) double arg4, @Sink(SUSI_LOCATION_INFORMATION) int arg5, @Sink(SUSI_LOCATION_INFORMATION) android.location.GeocoderParams arg6, @Sink(SUSI_LOCATION_INFORMATION) java.util.List arg7);
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getFromLocation(  @Sink(SUSI_LOCATION_INFORMATION) double arg0, @Sink(SUSI_LOCATION_INFORMATION) double arg1, @Sink(SUSI_LOCATION_INFORMATION) int arg2, @Sink(SUSI_LOCATION_INFORMATION) android.location.GeocoderParams arg3, @Sink(SUSI_LOCATION_INFORMATION) java.util.List arg4);
}
class IGpsStatusListener$Stub{
   @Source(SUSI_LOCATION_INFORMATION)  android.os.IBinder asBinder();
}
class IGpsStatusListener$Stub$Proxy{
    void onFirstFix(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void onNmeaReceived(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void onSvStatusChanged(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int[] arg1, @Sink(SUSI_NO_CATEGORY) float[] arg2, @Sink(SUSI_NO_CATEGORY) float[] arg3, @Sink(SUSI_NO_CATEGORY) float[] arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) int arg6, @Sink(SUSI_NO_CATEGORY) int arg7);
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class IGpsStatusProvider$Stub{
   @Source(SUSI_LOCATION_INFORMATION)  android.os.IBinder asBinder();
}
class IGpsStatusProvider$Stub$Proxy{
    void addGpsStatusListener(  @Sink(SUSI_NO_CATEGORY) android.location.IGpsStatusListener arg0);
    void removeGpsStatusListener(  @Sink(SUSI_NO_CATEGORY) android.location.IGpsStatusListener arg0);
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class ILocationListener$Stub{
   @Source(SUSI_LOCATION_INFORMATION)  android.os.IBinder asBinder();
}
class ILocationListener$Stub$Proxy{
    void onStatusChanged(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
    void onProviderDisabled(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void onProviderEnabled(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class ILocationManager$Stub{
   @Source(SUSI_LOCATION_INFORMATION)  boolean onTransact(  @Sink(SUSI_LOCATION_INFORMATION) int arg0, @Sink(SUSI_LOCATION_INFORMATION) android.os.Parcel arg1, @Sink(SUSI_LOCATION_INFORMATION) android.os.Parcel arg2, @Sink(SUSI_LOCATION_INFORMATION) int arg3);
   @Source(SUSI_LOCATION_INFORMATION)  android.os.IBinder asBinder();
}
class ILocationManager$Stub$Proxy{
    void clearTestProviderEnabled(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0);
    void clearTestProviderStatus(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0);
   @Source(SUSI_LOCATION_INFORMATION)  boolean addGpsStatusListener(  @Sink(SUSI_LOCATION_INFORMATION) android.location.IGpsStatusListener arg0);
   @Source(SUSI_LOCATION_INFORMATION)  boolean isProviderEnabled(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0);
    void requestGeofence(  @Sink(SUSI_LOCATION_INFORMATION) android.location.LocationRequest arg0, @Sink(SUSI_LOCATION_INFORMATION) android.location.Geofence arg1, @Sink(SUSI_LOCATION_INFORMATION) android.app.PendingIntent arg2, @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg3);
   @Source(SUSI_LOCATION_INFORMATION)  boolean sendNiResponse(  @Sink(SUSI_LOCATION_INFORMATION) int arg0, @Sink(SUSI_LOCATION_INFORMATION) int arg1);
    void removeGeofence(  @Sink(SUSI_LOCATION_INFORMATION) android.location.Geofence arg0, @Sink(SUSI_LOCATION_INFORMATION) android.app.PendingIntent arg1, @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg2);
    void locationCallbackFinished(  @Sink(SUSI_LOCATION_INFORMATION) android.location.ILocationListener arg0);
   @Source(SUSI_LOCATION_INFORMATION)  boolean providerMeetsCriteria(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0, @Sink(SUSI_LOCATION_INFORMATION) android.location.Criteria arg1);
    void removeTestProvider(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0);
    void removeUpdates(  @Sink(SUSI_LOCATION_INFORMATION) android.location.ILocationListener arg0, @Sink(SUSI_LOCATION_INFORMATION) android.app.PendingIntent arg1, @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg2);
    void removeGpsStatusListener(  @Sink(SUSI_LOCATION_INFORMATION) android.location.IGpsStatusListener arg0);
   @Source(SUSI_LOCATION_INFORMATION)  boolean sendExtraCommand(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0, @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg1, @Sink(SUSI_LOCATION_INFORMATION) android.os.Bundle arg2);
    void clearTestProviderLocation(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0);
    void requestLocationUpdates(  @Sink(SUSI_LOCATION_INFORMATION) android.location.LocationRequest arg0, @Sink(SUSI_LOCATION_INFORMATION) android.location.ILocationListener arg1, @Sink(SUSI_LOCATION_INFORMATION) android.app.PendingIntent arg2, @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg3);
    void setTestProviderLocation(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0, @Sink(SUSI_LOCATION_INFORMATION) android.location.Location arg1);
    void setTestProviderStatus(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0, @Sink(SUSI_LOCATION_INFORMATION) int arg1, @Sink(SUSI_LOCATION_INFORMATION) android.os.Bundle arg2, @Sink(SUSI_LOCATION_INFORMATION) long arg3);
    void setTestProviderEnabled(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0, @Sink(SUSI_LOCATION_INFORMATION) boolean arg1);
    void addTestProvider(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0, @Sink(SUSI_LOCATION_INFORMATION) com.android.internal.location.ProviderProperties arg1);
   @Source(SUSI_LOCATION_INFORMATION)  java.util.List getAllProviders();
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getBestProvider(  @Sink(SUSI_LOCATION_INFORMATION) android.location.Criteria arg0, @Sink(SUSI_LOCATION_INFORMATION) boolean arg1);
   @Source(SUSI_LOCATION_INFORMATION)  android.location.Location getLastLocation(  @Sink(SUSI_LOCATION_INFORMATION) android.location.LocationRequest arg0, @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg1);
   @Source(SUSI_LOCATION_INFORMATION)  com.android.internal.location.ProviderProperties getProviderProperties(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0);
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getFromLocationName(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0, @Sink(SUSI_LOCATION_INFORMATION) double arg1, @Sink(SUSI_LOCATION_INFORMATION) double arg2, @Sink(SUSI_LOCATION_INFORMATION) double arg3, @Sink(SUSI_LOCATION_INFORMATION) double arg4, @Sink(SUSI_LOCATION_INFORMATION) int arg5, @Sink(SUSI_LOCATION_INFORMATION) android.location.GeocoderParams arg6, @Sink(SUSI_LOCATION_INFORMATION) java.util.List arg7);
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getFromLocation(  @Sink(SUSI_LOCATION_INFORMATION) double arg0, @Sink(SUSI_LOCATION_INFORMATION) double arg1, @Sink(SUSI_LOCATION_INFORMATION) int arg2, @Sink(SUSI_LOCATION_INFORMATION) android.location.GeocoderParams arg3, @Sink(SUSI_LOCATION_INFORMATION) java.util.List arg4);
   @Source(SUSI_LOCATION_INFORMATION)  java.util.List getProviders(  @Sink(SUSI_LOCATION_INFORMATION) android.location.Criteria arg0, @Sink(SUSI_LOCATION_INFORMATION) boolean arg1);
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class INetInitiatedListener$Stub{
   @Source(SUSI_LOCATION_INFORMATION)  android.os.IBinder asBinder();
}
class INetInitiatedListener$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  boolean sendNiResponse(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class Location{
    void setExtraLocation(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.location.Location arg1);
    void set(  @Sink(SUSI_NO_CATEGORY) android.location.Location arg0);
    void setExtras(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
    void dump(  @Sink(SUSI_NO_CATEGORY) android.util.Printer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_LOCATION_INFORMATION)  float getSpeed();
   @Source(SUSI_LOCATION_INFORMATION)  long getElapsedRealtimeNanos();
   @Source(SUSI_LOCATION_INFORMATION)  double getLatitude();
   @Source(SUSI_LOCATION_INFORMATION)  float getBearing();
   @Source(SUSI_LOCATION_INFORMATION)  android.os.Bundle getExtras();
   @Source(SUSI_LOCATION_INFORMATION)  long getTime();
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getProvider();
   @Source(SUSI_LOCATION_INFORMATION)  double getAltitude();
   @Source(SUSI_LOCATION_INFORMATION)  android.location.Location getExtraLocation(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0);
   @Source(SUSI_LOCATION_INFORMATION)  float getAccuracy();
   @Source(SUSI_LOCATION_INFORMATION)  double getLongitude();
}
class LocationManager{
    void setTestProviderLocation(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0, @Sink(SUSI_LOCATION_INFORMATION) android.location.Location arg1);
    void setTestProviderStatus(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0, @Sink(SUSI_LOCATION_INFORMATION) int arg1, @Sink(SUSI_LOCATION_INFORMATION) android.os.Bundle arg2, @Sink(SUSI_LOCATION_INFORMATION) long arg3);
   @Source(SUSI_LOCATION_INFORMATION)  boolean addNmeaListener(  @Sink(SUSI_LOCATION_INFORMATION) android.location.GpsStatus$NmeaListener arg0);
    void setTestProviderEnabled(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0, @Sink(SUSI_LOCATION_INFORMATION) boolean arg1);
   @Source(SUSI_LOCATION_INFORMATION)  boolean sendExtraCommand(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0, @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg1, @Sink(SUSI_LOCATION_INFORMATION) android.os.Bundle arg2);
   @Source(SUSI_LOCATION_INFORMATION)  boolean addGpsStatusListener(  @Sink(SUSI_LOCATION_INFORMATION) android.location.GpsStatus$Listener arg0);
   @Source(SUSI_LOCATION_INFORMATION)  boolean sendNiResponse(  @Sink(SUSI_LOCATION_INFORMATION) int arg0, @Sink(SUSI_LOCATION_INFORMATION) int arg1);
   @Source(SUSI_LOCATION_INFORMATION)  java.util.List getProviders(  @Sink(SUSI_LOCATION_INFORMATION) boolean arg0);
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getBestProvider(  @Sink(SUSI_LOCATION_INFORMATION) android.location.Criteria arg0, @Sink(SUSI_LOCATION_INFORMATION) boolean arg1);
   @Source(SUSI_LOCATION_INFORMATION)  java.util.List getAllProviders();
   @Source(SUSI_LOCATION_INFORMATION)  boolean isProviderEnabled(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0);
   @Source(SUSI_LOCATION_INFORMATION)  java.util.List getProviders(  @Sink(SUSI_LOCATION_INFORMATION) android.location.Criteria arg0, @Sink(SUSI_LOCATION_INFORMATION) boolean arg1);
   @Source(SUSI_LOCATION_INFORMATION)  android.location.Location getLastLocation();
   @Source(SUSI_LOCATION_INFORMATION)  android.location.LocationProvider getProvider(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0);
   @Source(SUSI_LOCATION_INFORMATION)  android.location.GpsStatus getGpsStatus(  @Sink(SUSI_LOCATION_INFORMATION) android.location.GpsStatus arg0);
   @Source(SUSI_LOCATION_INFORMATION)  android.location.Location getLastKnownLocation(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0);
}
class LocationManager$ListenerTransport{
    void onStatusChanged(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
}
class LocationProvider{
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getName();
   @Source(SUSI_LOCATION_INFORMATION)  int getPowerRequirement();
   @Source(SUSI_LOCATION_INFORMATION)  int getAccuracy();
}
class LocationRequest{
   @Source(SUSI_NO_CATEGORY)  android.location.LocationRequest setExpireIn(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getProvider();
   @Source(SUSI_LOCATION_INFORMATION)  int getQuality();
   @Source(SUSI_LOCATION_INFORMATION)  long getInterval();
   @Source(SUSI_LOCATION_INFORMATION)  long getExpireAt();
   @Source(SUSI_LOCATION_INFORMATION)  long getFastestInterval();
   @Source(SUSI_LOCATION_INFORMATION)  int getNumUpdates();
   @Source(SUSI_LOCATION_INFORMATION)  float getSmallestDisplacement();
}

package android.view.textservice;

class SentenceSuggestionsInfo{
   @Source(SUSI_NETWORK_INFORMATION)  int getOffsetAt(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getLengthAt(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.view.textservice.SuggestionsInfo getSuggestionsInfoAt(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getSuggestionsCount();
}
class SpellCheckerInfo{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getSettingsActivity();
   @Source(SUSI_NETWORK_INFORMATION)  android.view.textservice.SpellCheckerSubtype getSubtypeAt(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.ComponentName getComponent();
   @Source(SUSI_NETWORK_INFORMATION)  android.content.pm.ServiceInfo getServiceInfo();
   @Source(SUSI_NETWORK_INFORMATION)  int getSubtypeCount();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPackageName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getId();
}
class SpellCheckerSession{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.textservice.ISpellCheckerSessionListener getSpellCheckerSessionListener();
   @Source(SUSI_NETWORK_INFORMATION)  android.view.textservice.SpellCheckerInfo getSpellChecker();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.textservice.ITextServicesSessionListener getTextServicesSessionListener();
}
class SpellCheckerSession$SpellCheckerSessionListenerImpl{
    void onGetSentenceSuggestions(  @Sink(SUSI_NO_CATEGORY) android.view.textservice.SentenceSuggestionsInfo[] arg0);
    void onGetSuggestions(  @Sink(SUSI_NO_CATEGORY) android.view.textservice.SuggestionsInfo[] arg0);
}
class SpellCheckerSubtype{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getExtraValueOf(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getExtraValue();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getLocale();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.CharSequence getDisplayName(  android.content.Context arg0, java.lang.String arg1, android.content.pm.ApplicationInfo arg2);
   @Source(SUSI_NO_CATEGORY)  int getNameResId();
}
class SuggestionsInfo{
   @Source(SUSI_NETWORK_INFORMATION)  int getSuggestionsAttributes();
   @Source(SUSI_NETWORK_INFORMATION)  int getCookie();
   @Source(SUSI_NETWORK_INFORMATION)  int getSequence();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getSuggestionAt(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getSuggestionsCount();
}
class TextInfo{
   @Source(SUSI_NETWORK_INFORMATION)  int getCookie();
   @Source(SUSI_NETWORK_INFORMATION)  int getSequence();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getText();
}
class TextServicesManager{
    void setSpellCheckerSubtype(  @Sink(SUSI_NO_CATEGORY) android.view.textservice.SpellCheckerSubtype arg0);
    void setCurrentSpellChecker(  @Sink(SUSI_NO_CATEGORY) android.view.textservice.SpellCheckerInfo arg0);
    void setSpellCheckerEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(  boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.view.textservice.SpellCheckerSession newSpellCheckerSession(  android.os.Bundle arg0, java.util.Locale arg1, android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener arg2, boolean arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers();
   @Source(SUSI_NETWORK_INFORMATION)  android.view.textservice.SpellCheckerInfo getCurrentSpellChecker();
   @Source(SUSI_NETWORK_INFORMATION)  android.view.textservice.TextServicesManager getInstance();
}

package com.android.providers.applications;

class ApplicationsProvider{
   @Source(SUSI_NO_CATEGORY)  android.content.pm.PackageManager getPackageManager();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
}

package com.android.browser.util;

class ThreadedCursorAdapter{
   @Source(SUSI_BROWSER_INFORMATION)  long getItemId(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.database.Cursor getItem(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getCount();
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getView(  @Sink(SUSI_BROWSER_INFORMATION) int arg0, @Sink(SUSI_BROWSER_INFORMATION) android.view.View arg1, @Sink(SUSI_BROWSER_INFORMATION) android.view.ViewGroup arg2);
}

package com.google.android.mms.pdu;

class AcknowledgeInd{
    void setTransactionId(  @Sink(SUSI_SMS_MMS) byte[] arg0);
    void setReportAllowed(  @Sink(SUSI_SMS_MMS) int arg0);
   @Source(SUSI_SMS_MMS)  int getReportAllowed();
   @Source(SUSI_SMS_MMS)  byte[] getTransactionId();
}
class Base64{
   @Source(SUSI_SMS_MMS)  byte[] discardNonBase64(  @Sink(SUSI_SMS_MMS) byte[] arg0);
}
class CharacterSets{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMimeName(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class DeliveryInd{
    void setTo(  @Sink(SUSI_SMS_MMS) com.google.android.mms.pdu.EncodedStringValue[] arg0);
    void setMessageId(  @Sink(SUSI_SMS_MMS) byte[] arg0);
    void setStatus(  @Sink(SUSI_SMS_MMS) int arg0);
    void setDate(  @Sink(SUSI_SMS_MMS) long arg0);
   @Source(SUSI_SMS_MMS)  long getDate();
   @Source(SUSI_SMS_MMS)  byte[] getMessageId();
   @Source(SUSI_SMS_MMS)  int getStatus();
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.EncodedStringValue[] getTo();
}
class EncodedStringValue{
    void setTextString(  @Sink(SUSI_SMS_MMS) byte[] arg0);
    void appendTextString(  @Sink(SUSI_SMS_MMS) byte[] arg0);
   @Source(SUSI_SMS_MMS)  byte[] getTextString();
   @Source(SUSI_SMS_MMS)  int getCharacterSet();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString();
}
class GenericPdu{
    void setFrom(  @Sink(SUSI_SMS_MMS) com.google.android.mms.pdu.EncodedStringValue arg0);
    void setMmsVersion(  @Sink(SUSI_SMS_MMS) int arg0);
    void setMessageType(  @Sink(SUSI_SMS_MMS) int arg0);
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.EncodedStringValue getFrom();
   @Source(SUSI_SMS_MMS)  int getMessageType();
   @Source(SUSI_SMS_MMS)  int getMmsVersion();
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.PduHeaders getPduHeaders();
}
class MultimediaMessagePdu{
    void setDate(  @Sink(SUSI_SMS_MMS) long arg0);
    void setPriority(  @Sink(SUSI_SMS_MMS) int arg0);
    void setSubject(  @Sink(SUSI_SMS_MMS) com.google.android.mms.pdu.EncodedStringValue arg0);
   @Source(SUSI_SMS_MMS)  long getDate();
   @Source(SUSI_SMS_MMS)  int getPriority();
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.PduBody getBody();
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.EncodedStringValue getSubject();
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.EncodedStringValue[] getTo();
}
class NotificationInd{
    void setContentLocation(  @Sink(SUSI_SMS_MMS) byte[] arg0);
    void setContentClass(  @Sink(SUSI_SMS_MMS) int arg0);
    void setDeliveryReport(  @Sink(SUSI_SMS_MMS) int arg0);
    void setExpiry(  @Sink(SUSI_SMS_MMS) long arg0);
    void setSubject(  @Sink(SUSI_SMS_MMS) com.google.android.mms.pdu.EncodedStringValue arg0);
    void setTransactionId(  @Sink(SUSI_SMS_MMS) byte[] arg0);
    void setMessageSize(  @Sink(SUSI_SMS_MMS) long arg0);
    void setMessageClass(  @Sink(SUSI_SMS_MMS) byte[] arg0);
    void setFrom(  @Sink(SUSI_SMS_MMS) com.google.android.mms.pdu.EncodedStringValue arg0);
   @Source(SUSI_SMS_MMS)  long getExpiry();
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.EncodedStringValue getFrom();
   @Source(SUSI_SMS_MMS)  int getDeliveryReport();
   @Source(SUSI_SMS_MMS)  byte[] getMessageClass();
   @Source(SUSI_SMS_MMS)  byte[] getContentLocation();
   @Source(SUSI_SMS_MMS)  int getContentClass();
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.EncodedStringValue getSubject();
   @Source(SUSI_SMS_MMS)  byte[] getTransactionId();
   @Source(SUSI_SMS_MMS)  long getMessageSize();
}
class NotifyRespInd{
    void setStatus(  @Sink(SUSI_SMS_MMS) int arg0);
    void setTransactionId(  @Sink(SUSI_SMS_MMS) byte[] arg0);
    void setReportAllowed(  @Sink(SUSI_SMS_MMS) int arg0);
   @Source(SUSI_SMS_MMS)  byte[] getTransactionId();
   @Source(SUSI_SMS_MMS)  int getReportAllowed();
   @Source(SUSI_SMS_MMS)  int getStatus();
}
class PduBody{
    void addPart(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) com.google.android.mms.pdu.PduPart arg1);
   @Source(SUSI_SMS_MMS)  boolean addPart(  @Sink(SUSI_SMS_MMS) com.google.android.mms.pdu.PduPart arg0);
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.PduPart getPartByFileName(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
   @Source(SUSI_SMS_MMS)  int getPartIndex(  @Sink(SUSI_SMS_MMS) com.google.android.mms.pdu.PduPart arg0);
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.PduPart getPartByContentId(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.PduPart getPartByContentLocation(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
   @Source(SUSI_SMS_MMS)  int getPartsNum();
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.PduPart getPartByName(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.PduPart getPart(  @Sink(SUSI_SMS_MMS) int arg0);
}
class PduComposer{
    void arraycopy(  @Sink(SUSI_SMS_MMS) byte[] arg0, @Sink(SUSI_SMS_MMS) int arg1, @Sink(SUSI_SMS_MMS) int arg2);
    void append(  @Sink(SUSI_SMS_MMS) int arg0);
   @Source(SUSI_SMS_MMS)  byte[] make();
}
class PduComposer$PositionMarker{
   @Source(SUSI_SMS_MMS)  int getLength();
}
class PduHeaders{
    void setEncodedStringValue(  @Sink(SUSI_SMS_MMS) com.google.android.mms.pdu.EncodedStringValue arg0, @Sink(SUSI_SMS_MMS) int arg1);
    void setOctet(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) int arg1);
    void setLongInteger(  @Sink(SUSI_SMS_MMS) long arg0, @Sink(SUSI_SMS_MMS) int arg1);
    void setTextString(  @Sink(SUSI_SMS_MMS) byte[] arg0, @Sink(SUSI_SMS_MMS) int arg1);
    void appendEncodedStringValue(  @Sink(SUSI_SMS_MMS) com.google.android.mms.pdu.EncodedStringValue arg0, @Sink(SUSI_SMS_MMS) int arg1);
    void setEncodedStringValues(  @Sink(SUSI_SMS_MMS) com.google.android.mms.pdu.EncodedStringValue[] arg0, @Sink(SUSI_SMS_MMS) int arg1);
   @Source(SUSI_SMS_MMS)  byte[] getTextString(  @Sink(SUSI_SMS_MMS) int arg0);
   @Source(SUSI_SMS_MMS)  long getLongInteger(  @Sink(SUSI_SMS_MMS) int arg0);
   @Source(SUSI_SMS_MMS)  int getOctet(  @Sink(SUSI_SMS_MMS) int arg0);
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.EncodedStringValue getEncodedStringValue(  @Sink(SUSI_SMS_MMS) int arg0);
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.EncodedStringValue[] getEncodedStringValues(  @Sink(SUSI_SMS_MMS) int arg0);
}
class PduParser{
    void parseContentTypeParams(  @Sink(SUSI_SMS_MMS) java.io.ByteArrayInputStream arg0, @Sink(SUSI_SMS_MMS) java.util.HashMap arg1, @Sink(SUSI_SMS_MMS) java.lang.Integer arg2);
   @Source(SUSI_SMS_MMS)  byte[] getWapString(  @Sink(SUSI_SMS_MMS) java.io.ByteArrayInputStream arg0, @Sink(SUSI_SMS_MMS) int arg1);
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.PduHeaders parseHeaders(  @Sink(SUSI_SMS_MMS) java.io.ByteArrayInputStream arg0);
}
class PduPart{
    void setContentDisposition(  @Sink(SUSI_SMS_MMS) byte[] arg0);
    void setContentId(  @Sink(SUSI_SMS_MMS) byte[] arg0);
    void setContentLocation(  @Sink(SUSI_SMS_MMS) byte[] arg0);
    void setContentType(  @Sink(SUSI_SMS_MMS) byte[] arg0);
    void setName(  @Sink(SUSI_SMS_MMS) byte[] arg0);
    void setCharset(  @Sink(SUSI_SMS_MMS) int arg0);
    void setFilename(  @Sink(SUSI_SMS_MMS) byte[] arg0);
    void setData(  @Sink(SUSI_SMS_MMS) byte[] arg0);
    void setContentTransferEncoding(  @Sink(SUSI_SMS_MMS) byte[] arg0);
   @Source(SUSI_SMS_MMS)  byte[] getData();
   @Source(SUSI_SMS_MMS)  byte[] getContentDisposition();
   @Source(SUSI_SMS_MMS)  byte[] getName();
   @Source(SUSI_SMS_MMS)  int getCharset();
   @Source(SUSI_SMS_MMS)  byte[] getContentId();
   @Source(SUSI_SMS_MMS)  byte[] getContentType();
   @Source(SUSI_SMS_MMS)  byte[] getContentLocation();
   @Source(SUSI_SMS_MMS)  android.net.Uri getDataUri();
   @Source(SUSI_SMS_MMS)  byte[] getContentTransferEncoding();
   @Source(SUSI_SMS_MMS)  byte[] getFilename();
}
class PduPersister{
   @Source(SUSI_SMS_MMS)  android.net.Uri persist(  @Sink(SUSI_SMS_MMS) com.google.android.mms.pdu.GenericPdu arg0, @Sink(SUSI_SMS_MMS) android.net.Uri arg1, @Sink(SUSI_SMS_MMS) boolean arg2, @Sink(SUSI_SMS_MMS) boolean arg3, @Sink(SUSI_SMS_MMS) java.util.HashMap arg4);
    void updateParts(  @Sink(SUSI_SMS_MMS) android.net.Uri arg0, @Sink(SUSI_SMS_MMS) com.google.android.mms.pdu.PduBody arg1, @Sink(SUSI_SMS_MMS) java.util.HashMap arg2);
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.GenericPdu load(  @Sink(SUSI_SMS_MMS) android.net.Uri arg0);
    void updateHeaders(  @Sink(SUSI_SMS_MMS) android.net.Uri arg0, @Sink(SUSI_SMS_MMS) com.google.android.mms.pdu.SendReq arg1);
   @Source(SUSI_SMS_MMS)  android.net.Uri persistPart(  @Sink(SUSI_SMS_MMS) com.google.android.mms.pdu.PduPart arg0, @Sink(SUSI_SMS_MMS) long arg1, @Sink(SUSI_SMS_MMS) java.util.HashMap arg2);
   @Source(SUSI_SMS_MMS)  android.net.Uri move(  @Sink(SUSI_SMS_MMS) android.net.Uri arg0, @Sink(SUSI_SMS_MMS) android.net.Uri arg1);
   @Source(SUSI_SMS_MMS)  android.database.Cursor getPendingMessages(  @Sink(SUSI_SMS_MMS) long arg0);
   @Source(SUSI_SMS_MMS)  byte[] getBytes(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.PduPersister getPduPersister(  @Sink(SUSI_SMS_MMS) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String convertUriToPath(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1);
}
class QuotedPrintable{
   @Source(SUSI_SMS_MMS)  byte[] decodeQuotedPrintable(  @Sink(SUSI_SMS_MMS) byte[] arg0);
}
class ReadOrigInd{
    void setReadStatus(  @Sink(SUSI_SMS_MMS) int arg0);
    void setDate(  @Sink(SUSI_SMS_MMS) long arg0);
    void setFrom(  @Sink(SUSI_SMS_MMS) com.google.android.mms.pdu.EncodedStringValue arg0);
    void setTo(  @Sink(SUSI_SMS_MMS) com.google.android.mms.pdu.EncodedStringValue[] arg0);
    void setMessageId(  @Sink(SUSI_SMS_MMS) byte[] arg0);
   @Source(SUSI_SMS_MMS)  int getReadStatus();
   @Source(SUSI_SMS_MMS)  byte[] getMessageId();
   @Source(SUSI_SMS_MMS)  long getDate();
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.EncodedStringValue[] getTo();
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.EncodedStringValue getFrom();
}
class ReadRecInd{
    void setTo(  @Sink(SUSI_SMS_MMS) com.google.android.mms.pdu.EncodedStringValue[] arg0);
    void setReadStatus(  @Sink(SUSI_SMS_MMS) int arg0);
    void setMessageId(  @Sink(SUSI_SMS_MMS) byte[] arg0);
    void setDate(  @Sink(SUSI_SMS_MMS) long arg0);
   @Source(SUSI_SMS_MMS)  long getDate();
   @Source(SUSI_SMS_MMS)  byte[] getMessageId();
   @Source(SUSI_SMS_MMS)  int getReadStatus();
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.EncodedStringValue[] getTo();
}
class RetrieveConf{
    void setReadReport(  @Sink(SUSI_SMS_MMS) int arg0);
    void setTransactionId(  @Sink(SUSI_SMS_MMS) byte[] arg0);
    void setDeliveryReport(  @Sink(SUSI_SMS_MMS) int arg0);
    void setMessageClass(  @Sink(SUSI_SMS_MMS) byte[] arg0);
    void setMessageId(  @Sink(SUSI_SMS_MMS) byte[] arg0);
    void setContentType(  @Sink(SUSI_SMS_MMS) byte[] arg0);
    void setRetrieveStatus(  @Sink(SUSI_SMS_MMS) int arg0);
    void setFrom(  @Sink(SUSI_SMS_MMS) com.google.android.mms.pdu.EncodedStringValue arg0);
    void setRetrieveText(  @Sink(SUSI_SMS_MMS) com.google.android.mms.pdu.EncodedStringValue arg0);
   @Source(SUSI_SMS_MMS)  byte[] getTransactionId();
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.EncodedStringValue getRetrieveText();
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.EncodedStringValue getFrom();
   @Source(SUSI_SMS_MMS)  byte[] getMessageClass();
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.EncodedStringValue[] getCc();
   @Source(SUSI_SMS_MMS)  byte[] getContentType();
   @Source(SUSI_SMS_MMS)  int getDeliveryReport();
   @Source(SUSI_SMS_MMS)  byte[] getMessageId();
   @Source(SUSI_SMS_MMS)  int getRetrieveStatus();
   @Source(SUSI_SMS_MMS)  int getReadReport();
}
class SendConf{
    void setResponseStatus(  @Sink(SUSI_SMS_MMS) int arg0);
    void setTransactionId(  @Sink(SUSI_SMS_MMS) byte[] arg0);
    void setMessageId(  @Sink(SUSI_SMS_MMS) byte[] arg0);
   @Source(SUSI_SMS_MMS)  byte[] getTransactionId();
   @Source(SUSI_SMS_MMS)  int getResponseStatus();
   @Source(SUSI_SMS_MMS)  byte[] getMessageId();
}
class SendReq{
    void setTransactionId(  @Sink(SUSI_SMS_MMS) byte[] arg0);
    void setReadReport(  @Sink(SUSI_SMS_MMS) int arg0);
    void setDeliveryReport(  @Sink(SUSI_SMS_MMS) int arg0);
    void setMessageSize(  @Sink(SUSI_SMS_MMS) long arg0);
    void setExpiry(  @Sink(SUSI_SMS_MMS) long arg0);
    void setBcc(  @Sink(SUSI_SMS_MMS) com.google.android.mms.pdu.EncodedStringValue[] arg0);
    void setContentType(  @Sink(SUSI_SMS_MMS) byte[] arg0);
    void setCc(  @Sink(SUSI_SMS_MMS) com.google.android.mms.pdu.EncodedStringValue[] arg0);
    void setTo(  @Sink(SUSI_SMS_MMS) com.google.android.mms.pdu.EncodedStringValue[] arg0);
    void setMessageClass(  @Sink(SUSI_SMS_MMS) byte[] arg0);
   @Source(SUSI_SMS_MMS)  byte[] getTransactionId();
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.EncodedStringValue[] getCc();
   @Source(SUSI_SMS_MMS)  int getDeliveryReport();
   @Source(SUSI_SMS_MMS)  byte[] getContentType();
   @Source(SUSI_SMS_MMS)  long getExpiry();
   @Source(SUSI_SMS_MMS)  com.google.android.mms.pdu.EncodedStringValue[] getBcc();
   @Source(SUSI_SMS_MMS)  byte[] getMessageClass();
   @Source(SUSI_SMS_MMS)  int getReadReport();
   @Source(SUSI_SMS_MMS)  long getMessageSize();
}

package com.android.bluetooth.hid;

class HidService{
    boolean setPriority(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) int arg1);
    boolean sendData(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) java.lang.String arg1);
    boolean setReport(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) byte arg1, @Sink(SUSI_BLUETOOTH) java.lang.String arg2);
    boolean setProtocolMode(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) int arg1);
   @Source(SUSI_BLUETOOTH_INFORMATION)  boolean getProtocolMode(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  com.android.bluetooth.hid.HidService getHidService();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getPriority(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getName();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getConnectionState(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getDevicesMatchingConnectionStates(  int[] arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  boolean getReport(  android.bluetooth.BluetoothDevice arg0, byte arg1, byte arg2, int arg3);
}
class HidService$BluetoothInputDeviceBinder{
    boolean setProtocolMode(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) int arg1);
    boolean setReport(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) byte arg1, @Sink(SUSI_BLUETOOTH) java.lang.String arg2);
    boolean sendData(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) java.lang.String arg1);
    boolean setPriority(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) int arg1);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getDevicesMatchingConnectionStates(  int[] arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getConnectedDevices();
}

package com.android.inputmethod.latin.makedict;

class BinaryDictInputOutput{
    void writeDictionaryBinary(  @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg0, @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.latin.makedict.FusionDictionary arg1, @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.latin.makedict.FormatSpec$FormatOptions arg2);
}
class BinaryDictInputOutput$CharEncoding{
    void access$400(  @Sink(SUSI_NO_CATEGORY) java.io.ByteArrayOutputStream arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class FusionDictionary{
    void setBigram(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class FusionDictionary$CharGroup{
    void addBigram(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.makedict.FusionDictionary$WeightedString getShortcut(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.makedict.FusionDictionary$WeightedString getBigram(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}

package android.emoji;

class EmojiFactory{
   @Source(SUSI_NO_CATEGORY)  int getMinimumAndroidPua();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getBitmapFromAndroidPua(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getBitmapFromVendorSpecificSjis(  @Sink(SUSI_NO_CATEGORY) char arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getBitmapFromVendorSpecificPua(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getAndroidPuaFromVendorSpecificSjis(  @Sink(SUSI_NO_CATEGORY) char arg0);
   @Source(SUSI_NO_CATEGORY)  int getVendorSpecificPuaFromAndroidPua(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getMaximumAndroidPua();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getVendorSpecificPuaFromAndroidPua(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getAndroidPuaFromVendorSpecificPua(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getVendorSpecificSjisFromAndroidPua(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAndroidPuaFromVendorSpecificPua(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}

package java.util.regex;

class PatternSyntaxException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPattern();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDescription();
   @Source(SUSI_NO_CATEGORY)  int getIndex();
}

package org.apache.commons.io;

class IOUtils{
   @Source(SUSI_NO_CATEGORY)  long copyLarge(  @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg0, @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg1);
}

package com.android.contacts.format;

class PrefixHighlighter{
    void setText(  @Sink(SUSI_CONTACT_INFORMATION) android.widget.TextView arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) char[] arg2);
}

package org.apache.harmony.crypto.internal;

class NullCipherSpi{
   @Source(SUSI_NO_CATEGORY)  int engineUpdate(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0, @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] engineDoFinal(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  byte[] engineUpdate(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  byte[] engineWrap(  @Sink(SUSI_NO_CATEGORY) java.security.Key arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] engineGetIV();
}

package com.android.commands.bmgr;

class Bmgr$RestoreObserver{
    void restoreFinished(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void onUpdate(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void restoreSetsAvailable(  @Sink(SUSI_NO_CATEGORY) android.app.backup.RestoreSet[] arg0);
    void restoreStarting(  @Sink(SUSI_NO_CATEGORY) int arg0);
}

package com.android.wallpaper;

class RenderScriptScene{
    void setOffset(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.renderscript.ScriptC getScript();
}
class RenderScriptWallpaper{
   @Source(SUSI_NO_CATEGORY)  android.service.wallpaper.WallpaperService$Engine onCreateEngine();
}

package android.filterpacks.videoproc;

class BackDropperFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}

package com.android.camera;

class ActivityBase{
    void setContentView(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSwipingEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  long getStorageSpace();
   @Source(SUSI_NO_CATEGORY)  com.android.gallery3d.app.GalleryActionBar getGalleryActionBar();
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getResultData();
   @Source(SUSI_NO_CATEGORY)  int getResultCode();
   @Source(SUSI_NO_CATEGORY)  com.android.gallery3d.ui.ScreenNail reuseCameraScreenNail(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class ActivityBase$MyAppBridge{
   @Source(SUSI_NO_CATEGORY)  com.android.gallery3d.ui.ScreenNail getCameraScreenNail();
}
class CameraActivity{
    void startActivityForResult(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  long getPictureDisplayedToJpegCallbackTime();
   @Source(SUSI_NO_CATEGORY)  long getAutoFocusTime();
   @Source(SUSI_NO_CATEGORY)  com.android.camera.ShutterButton getShutterButton();
   @Source(SUSI_NO_CATEGORY)  com.android.camera.CameraScreenNail getCameraScreenNail();
   @Source(SUSI_NO_CATEGORY)  long getShutterLag();
   @Source(SUSI_NO_CATEGORY)  long getShutterToPictureDisplayedTime();
   @Source(SUSI_NO_CATEGORY)  long getJpegCallbackFinishTime();
   @Source(SUSI_NO_CATEGORY)  long getCaptureStartTime();
}
class CameraHolder{
   @Source(SUSI_NO_CATEGORY)  int getNumberOfCameras();
   @Source(SUSI_NO_CATEGORY)  android.hardware.Camera$CameraInfo[] getCameraInfo();
   @Source(SUSI_NO_CATEGORY)  int getBackCameraId();
   @Source(SUSI_NO_CATEGORY)  int getFrontCameraId();
}
class CameraManager{
   @Source(SUSI_NO_CATEGORY)  com.android.camera.CameraManager$CameraProxy cameraOpen(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class CameraManager$CameraProxy{
    void setParametersAsync(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.hardware.Camera$Parameters arg0);
    void setPreviewTextureAsync(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.graphics.SurfaceTexture arg0);
    void setDisplayOrientation(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setParameters(  @Sink(SUSI_NO_CATEGORY) android.hardware.Camera$Parameters arg0);
   @Source(SUSI_NO_CATEGORY)  android.hardware.Camera getCamera();
   @Source(SUSI_NO_CATEGORY)  android.hardware.Camera$Parameters getParameters();
}
class CameraPreference{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTitle();
   @Source(SUSI_NO_CATEGORY)  android.content.SharedPreferences getSharedPreferences();
}
class CameraScreenNail{
    void setPreviewFrameLayoutSize(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  int getUncroppedRenderHeight();
   @Source(SUSI_NO_CATEGORY)  int getUncroppedRenderWidth();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  float getAlpha();
}
class CameraSettings{
    void initialCameraPictureSize(  @Sink(SUSI_LOG) android.content.Context arg0, @Sink(SUSI_LOG) android.hardware.Camera$Parameters arg1);
   @Source(SUSI_NO_CATEGORY)  boolean setCameraPictureSize(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.List arg1, @Sink(SUSI_NO_CATEGORY) android.hardware.Camera$Parameters arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.camera.PreferenceGroup getPreferenceGroup(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getMaxVideoDuration(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDefaultVideoQuality(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class CaptureAnimManager{
    void setOrientation(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ComboPreferences{
    void setLocalId(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  long getLong(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.SharedPreferences getGlobal();
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.camera.ComboPreferences get(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Map getAll();
   @Source(SUSI_NO_CATEGORY)  android.content.SharedPreferences getLocal();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  float getFloat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_NO_CATEGORY)  boolean getBoolean(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.Set getStringSet(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.Set arg1);
}
class ComboPreferences$MyEditor{
   @Source(SUSI_NO_CATEGORY)  android.content.SharedPreferences$Editor putBoolean(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.SharedPreferences$Editor putString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.SharedPreferences$Editor putFloat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.SharedPreferences$Editor putInt(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.SharedPreferences$Editor putLong(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
}
class EffectsRecorder{
    void setOutputFile(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0);
}
class FocusOverlayManager{
   @Source(SUSI_NO_CATEGORY)  int getFocusState();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFocusMode();
   @Source(SUSI_NO_CATEGORY)  boolean getAeAwbLock();
   @Source(SUSI_NO_CATEGORY)  java.util.List getFocusAreas();
   @Source(SUSI_NO_CATEGORY)  java.util.List getMeteringAreas();
}
class IconListPreference{
   @Source(SUSI_NO_CATEGORY)  boolean getUseSingleIcon();
   @Source(SUSI_NO_CATEGORY)  int[] getImageIds();
   @Source(SUSI_NO_CATEGORY)  int[] getLargeIconIds();
   @Source(SUSI_NO_CATEGORY)  int getSingleIcon();
}
class ListPreference{
    void setValueIndex(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void persistStringValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getKey();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence[] getEntryValues();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence[] getEntries();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getEntry();
}
class LocationManager{
   @Source(SUSI_LOCATION_INFORMATION)  android.location.Location getCurrentLocation();
}
class MosaicFrameProcessor{
    void setStripType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.camera.MosaicFrameProcessor getInstance();
   @Source(SUSI_NO_CATEGORY)  byte[] getFinalMosaicNV21();
   @Source(SUSI_NO_CATEGORY)  int createMosaic(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class MosaicPreviewRenderer{
   @Source(SUSI_NO_CATEGORY)  android.graphics.SurfaceTexture getInputSurfaceTexture();
}
class MosaicPreviewRenderer$EGLHandler{
    void sendMessageSync(  @Sink(SUSI_SYNCHRONIZATION_DATA) int arg0);
}
class PanoProgressBar{
    void setMaxProgress(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setProgress(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setIndicatorColor(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDoneColor(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setRightIncreasing(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setBackgroundColor(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class PanoramaModule{
   @Source(SUSI_NO_CATEGORY)  int getPreviewBufSize();
}
class PhotoController{
    void setCameraId(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class PhotoModule{
    void onActivityResult(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2);
   @Source(SUSI_NO_CATEGORY)  byte[] access$4802(  @Sink(SUSI_NO_CATEGORY) com.android.camera.PhotoModule arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1);
}
class PhotoModule$ImageNamer{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getUri();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTitle();
}
class PieController{
    void addItem(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2);
    void setCameraId(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class PreferenceGroup{
   @Source(SUSI_NO_CATEGORY)  com.android.camera.CameraPreference get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class PreviewGestures{
   @Source(SUSI_NO_CATEGORY)  boolean dispatchTouch(  @Sink(SUSI_NO_CATEGORY) android.view.MotionEvent arg0);
}
class RecordLocationPreference{
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getValue();
}
class RotateDialogController{
    void setOrientation(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class SoundClips{
   @Source(SUSI_NO_CATEGORY)  com.android.camera.SoundClips$Player getPlayer(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class Storage{
    boolean updateImage(  @Sink(SUSI_LOG) android.content.ContentResolver arg0, @Sink(SUSI_LOG) android.net.Uri arg1, @Sink(SUSI_LOG) java.lang.String arg2, @Sink(SUSI_LOG) android.location.Location arg3, @Sink(SUSI_LOG) int arg4, @Sink(SUSI_LOG) byte[] arg5, @Sink(SUSI_LOG) int arg6, @Sink(SUSI_LOG) int arg7);
    void writeFile(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) byte[] arg1);
   @Source(SUSI_NO_CATEGORY)  long getAvailableSpace();
   @Source(SUSI_NO_CATEGORY)  android.net.Uri addImage(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) android.location.Location arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) java.lang.String arg6, @Sink(SUSI_NO_CATEGORY) int arg7, @Sink(SUSI_NO_CATEGORY) int arg8);
   @Source(SUSI_NO_CATEGORY)  android.net.Uri newImage(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
}
class Thumbnail{
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap createVideoThumbnailBitmap(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap createVideoThumbnailBitmap(  @Sink(SUSI_NO_CATEGORY) java.io.FileDescriptor arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class Util{
    void setGpsParameters(  @Sink(SUSI_LOG) android.hardware.Camera$Parameters arg0, @Sink(SUSI_LOG) android.location.Location arg1);
   @Source(SUSI_NO_CATEGORY)  int getJpegRotation(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int[] getRelativeLocation(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1);
   @Source(SUSI_NO_CATEGORY)  int getCameraOrientation(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getDisplayOrientation(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.hardware.Camera$Size getOptimalPreviewSize(  @Sink(SUSI_NO_CATEGORY) android.app.Activity arg0, @Sink(SUSI_NO_CATEGORY) java.util.List arg1, @Sink(SUSI_NO_CATEGORY) double arg2);
   @Source(SUSI_NO_CATEGORY)  android.hardware.Camera$Size getOptimalVideoSnapshotPictureSize(  @Sink(SUSI_NO_CATEGORY) java.util.List arg0, @Sink(SUSI_NO_CATEGORY) double arg1);
}
class VideoController{
    void setCameraId(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class VideoModule$VideoNamer{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getUri();
}

package android.media.audiofx;

class AudioEffect{
    int setParameter(  @Sink(SUSI_AUDIO) int[] arg0, @Sink(SUSI_AUDIO) int[] arg1);
    int setParameter(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) short arg1);
    byte[] intToByteArray(  @Sink(SUSI_AUDIO) int arg0);
    int setParameter(  @Sink(SUSI_AUDIO) int[] arg0, @Sink(SUSI_AUDIO) byte[] arg1);
    int setParameter(  @Sink(SUSI_AUDIO) int[] arg0, @Sink(SUSI_AUDIO) short[] arg1);
    int setParameter(  @Sink(SUSI_AUDIO) byte[] arg0, @Sink(SUSI_AUDIO) byte[] arg1);
    int setEnabled(  @Sink(SUSI_AUDIO) boolean arg0);
    int setParameter(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1);
    byte[] shortToByteArray(  @Sink(SUSI_AUDIO) short arg0);
    int setParameter(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) byte[] arg1);
   @Source(SUSI_NO_CATEGORY)  int getParameter(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) short[] arg1);
   @Source(SUSI_NO_CATEGORY)  int getParameter(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) int[] arg1);
   @Source(SUSI_NO_CATEGORY)  int getParameter(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1);
   @Source(SUSI_NO_CATEGORY)  int getParameter(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int[] arg1);
   @Source(SUSI_NO_CATEGORY)  int getParameter(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) short[] arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] concatArrays(  @Sink(SUSI_NO_CATEGORY) byte[][] arg0);
   @Source(SUSI_NO_CATEGORY)  int getId();
   @Source(SUSI_NO_CATEGORY)  boolean getEnabled();
   @Source(SUSI_NO_CATEGORY)  int getParameter(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1);
   @Source(SUSI_NO_CATEGORY)  int getParameter(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1);
   @Source(SUSI_NO_CATEGORY)  android.media.audiofx.AudioEffect$Descriptor getDescriptor();
}
class BassBoost{
    void setStrength(  @Sink(SUSI_AUDIO) short arg0);
    void setProperties(  @Sink(SUSI_AUDIO) android.media.audiofx.BassBoost$Settings arg0);
   @Source(SUSI_NO_CATEGORY)  short getRoundedStrength();
   @Source(SUSI_NO_CATEGORY)  android.media.audiofx.BassBoost$Settings getProperties();
   @Source(SUSI_NO_CATEGORY)  boolean getStrengthSupported();
}
class Equalizer{
    void setProperties(  @Sink(SUSI_AUDIO) android.media.audiofx.Equalizer$Settings arg0);
    void setBandLevel(  @Sink(SUSI_AUDIO) short arg0, @Sink(SUSI_AUDIO) short arg1);
   @Source(SUSI_NO_CATEGORY)  short getBand(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  short getBandLevel(  @Sink(SUSI_NO_CATEGORY) short arg0);
   @Source(SUSI_NO_CATEGORY)  short getNumberOfBands();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPresetName(  @Sink(SUSI_NO_CATEGORY) short arg0);
   @Source(SUSI_NO_CATEGORY)  android.media.audiofx.Equalizer$Settings getProperties();
   @Source(SUSI_NO_CATEGORY)  short[] getBandLevelRange();
   @Source(SUSI_NO_CATEGORY)  int[] getBandFreqRange(  @Sink(SUSI_NO_CATEGORY) short arg0);
   @Source(SUSI_NO_CATEGORY)  short getCurrentPreset();
   @Source(SUSI_NO_CATEGORY)  short getNumberOfPresets();
   @Source(SUSI_NO_CATEGORY)  int getCenterFreq(  @Sink(SUSI_NO_CATEGORY) short arg0);
}
class PresetReverb{
    void setProperties(  @Sink(SUSI_AUDIO) android.media.audiofx.PresetReverb$Settings arg0);
    void setPreset(  @Sink(SUSI_AUDIO) short arg0);
   @Source(SUSI_NO_CATEGORY)  short getPreset();
   @Source(SUSI_NO_CATEGORY)  android.media.audiofx.PresetReverb$Settings getProperties();
}
class Virtualizer{
    void setProperties(  @Sink(SUSI_AUDIO) android.media.audiofx.Virtualizer$Settings arg0);
    void setStrength(  @Sink(SUSI_AUDIO) short arg0);
   @Source(SUSI_NO_CATEGORY)  android.media.audiofx.Virtualizer$Settings getProperties();
   @Source(SUSI_NO_CATEGORY)  short getRoundedStrength();
   @Source(SUSI_NO_CATEGORY)  boolean getStrengthSupported();
}

package android.net.sip;

class ISipService$Stub{
    boolean onTransact(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) android.os.Parcel arg1, @Sink(SUSI_NETWORK) android.os.Parcel arg2, @Sink(SUSI_NETWORK) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class ISipService$Stub$Proxy{
    void open3(  @Sink(SUSI_VOIP) android.net.sip.SipProfile arg0, @Sink(SUSI_VOIP) android.app.PendingIntent arg1, @Sink(SUSI_VOIP) android.net.sip.ISipSessionListener arg2);
    void setRegistrationListener(  @Sink(SUSI_VOIP) java.lang.String arg0, @Sink(SUSI_VOIP) android.net.sip.ISipSessionListener arg1);
    boolean isOpened(  @Sink(SUSI_VOIP) java.lang.String arg0);
    void close(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    boolean isRegistered(  @Sink(SUSI_NETWORK) java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.sip.SipProfile[] getListOfProfiles();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.sip.ISipSession getPendingSession(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.sip.ISipSession createSession(  android.net.sip.SipProfile arg0, android.net.sip.ISipSessionListener arg1);
}
class ISipSession$Stub{
    boolean onTransact(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) android.os.Parcel arg1, @Sink(SUSI_NETWORK) android.os.Parcel arg2, @Sink(SUSI_NETWORK) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class ISipSession$Stub$Proxy{
    void makeCall(  @Sink(SUSI_VOIP) android.net.sip.SipProfile arg0, @Sink(SUSI_VOIP) java.lang.String arg1, @Sink(SUSI_VOIP) int arg2);
    void setListener(  @Sink(SUSI_VOIP) android.net.sip.ISipSessionListener arg0);
    void answerCall(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) int arg1);
    void changeCall(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) int arg1);
    void register(  @Sink(SUSI_NETWORK) int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getState();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.sip.SipProfile getPeerProfile();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.sip.SipProfile getLocalProfile();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getLocalIp();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCallId();
}
class ISipSessionListener$Stub{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class ISipSessionListener$Stub$Proxy{
    void onRinging(  @Sink(SUSI_VOIP) android.net.sip.ISipSession arg0, @Sink(SUSI_VOIP) android.net.sip.SipProfile arg1, @Sink(SUSI_VOIP) java.lang.String arg2);
    void onCallEnded(  @Sink(SUSI_VOIP) android.net.sip.ISipSession arg0);
    void onCallTransferring(  @Sink(SUSI_VOIP) android.net.sip.ISipSession arg0, @Sink(SUSI_VOIP) java.lang.String arg1);
    void onRegistering(  @Sink(SUSI_VOIP) android.net.sip.ISipSession arg0);
    void onRegistrationTimeout(  @Sink(SUSI_VOIP) android.net.sip.ISipSession arg0);
    void onRingingBack(  @Sink(SUSI_VOIP) android.net.sip.ISipSession arg0);
    void onError(  @Sink(SUSI_VOIP) android.net.sip.ISipSession arg0, @Sink(SUSI_VOIP) int arg1, @Sink(SUSI_VOIP) java.lang.String arg2);
    void onRegistrationDone(  @Sink(SUSI_VOIP) android.net.sip.ISipSession arg0, @Sink(SUSI_VOIP) int arg1);
    void onCallBusy(  @Sink(SUSI_VOIP) android.net.sip.ISipSession arg0);
    void onRegistrationFailed(  @Sink(SUSI_VOIP) android.net.sip.ISipSession arg0, @Sink(SUSI_VOIP) int arg1, @Sink(SUSI_VOIP) java.lang.String arg2);
    void onCallEstablished(  @Sink(SUSI_VOIP) android.net.sip.ISipSession arg0, @Sink(SUSI_VOIP) java.lang.String arg1);
    void onCallChangeFailed(  @Sink(SUSI_VOIP) android.net.sip.ISipSession arg0, @Sink(SUSI_VOIP) int arg1, @Sink(SUSI_VOIP) java.lang.String arg2);
    void onCalling(  @Sink(SUSI_VOIP) android.net.sip.ISipSession arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class SimpleSessionDescription{
    void setEncryption(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) java.lang.String arg1);
    void setAttribute(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) java.lang.String arg1);
    void setAddress(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void setBandwidth(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAttribute(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncryptionMethod();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getAttributeNames();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncryptionKey();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.sip.SimpleSessionDescription$Media[] getMedia();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAddress();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getBandwidthTypes();
   @Source(SUSI_NO_CATEGORY)  int getBandwidth(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class SimpleSessionDescription$Fields{
    void access$200(  @Sink(SUSI_VOIP) android.net.sip.SimpleSessionDescription$Fields arg0, @Sink(SUSI_VOIP) java.lang.StringBuilder arg1);
    void setEncryption(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) java.lang.String arg1);
    void setAddress(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void setAttribute(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) java.lang.String arg1);
    void setBandwidth(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAddress();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncryptionKey();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAttribute(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncryptionMethod();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getAttributeNames();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getBandwidthTypes();
   @Source(SUSI_NO_CATEGORY)  int getBandwidth(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class SimpleSessionDescription$Media{
    void setFormat(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) java.lang.String arg1);
    void setRtpPayload(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) java.lang.String arg1, @Sink(SUSI_NETWORK) java.lang.String arg2);
    void setBandwidth(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) int arg1);
    void setEncryption(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) java.lang.String arg1);
    void setAddress(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void setAttribute(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getAttributeNames();
   @Source(SUSI_NETWORK_INFORMATION)  int getPort();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncryptionKey();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getType();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getFmtp(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAttribute(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getPortCount();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getRtpmap(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getProtocol();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAddress();
   @Source(SUSI_NETWORK_INFORMATION)  int[] getRtpPayloadTypes();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getFmtp(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncryptionMethod();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getFormats();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getBandwidthTypes();
   @Source(SUSI_NO_CATEGORY)  int getBandwidth(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class SipAudioCall{
    void setListener(  @Sink(SUSI_VOIP) android.net.sip.SipAudioCall$Listener arg0);
    void setSpeakerMode(  @Sink(SUSI_NETWORK) boolean arg0);
    void sendDtmf(  @Sink(SUSI_NETWORK) int arg0);
    void sendDtmf(  @Sink(SUSI_LOG) int arg0, @Sink(SUSI_LOG) android.os.Message arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.rtp.AudioGroup getAudioGroup();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.sip.SimpleSessionDescription access$1300(  android.net.sip.SipAudioCall arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.sip.SipProfile getPeerProfile();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.sip.SimpleSessionDescription access$400(  android.net.sip.SipAudioCall arg0, java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getState();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.sip.SipProfile getLocalProfile();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.rtp.AudioStream getAudioStream();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.sip.SipSession getSipSession();
}
class SipManager{
    void setRegistrationListener(  @Sink(SUSI_VOIP) java.lang.String arg0, @Sink(SUSI_VOIP) android.net.sip.SipRegistrationListener arg1);
    void open(  @Sink(SUSI_VOIP) android.net.sip.SipProfile arg0, @Sink(SUSI_VOIP) android.app.PendingIntent arg1, @Sink(SUSI_VOIP) android.net.sip.SipRegistrationListener arg2);
    void open(  @Sink(SUSI_VOIP) android.net.sip.SipProfile arg0);
    android.content.Intent createIncomingCallBroadcast(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.sip.SipProfile[] getListOfProfiles();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getCallId(  android.content.Intent arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.sip.SipSession createSipSession(  android.net.sip.SipProfile arg0, android.net.sip.SipSession$Listener arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.sip.SipAudioCall makeAudioCall(  java.lang.String arg0, java.lang.String arg1, android.net.sip.SipAudioCall$Listener arg2, int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.sip.SipAudioCall takeAudioCall(  android.content.Intent arg0, android.net.sip.SipAudioCall$Listener arg1);
   @Source(SUSI_NETWORK_INFORMATION)  boolean isRegistered(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getOfferSessionDescription(  android.content.Intent arg0);
   @Source(SUSI_NETWORK_INFORMATION)  boolean isOpened(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.sip.SipSession getSessionFor(  android.content.Intent arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.sip.SipAudioCall makeAudioCall(  android.net.sip.SipProfile arg0, android.net.sip.SipProfile arg1, android.net.sip.SipAudioCall$Listener arg2, int arg3);
}
class SipProfile{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getProfileName();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getDisplayName();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getSendKeepAlive();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPassword();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getProxyAddress();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getProtocol();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getAutoRegistration();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getSipDomain();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getUserName();
   @Source(SUSI_NETWORK_INFORMATION)  javax.sip.address.Address getSipAddress();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getUriString();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAuthUserName();
   @Source(SUSI_NETWORK_INFORMATION)  int getPort();
   @Source(SUSI_FILE_INFORMATION)  javax.sip.address.SipURI getUri();
   @Source(SUSI_NO_CATEGORY)  int getCallingUid();
}
class SipProfile$Builder{
    android.net.sip.SipProfile$Builder setProtocol(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    android.net.sip.SipProfile$Builder setAutoRegistration(  @Sink(SUSI_NETWORK) boolean arg0);
    android.net.sip.SipProfile$Builder setPassword(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    android.net.sip.SipProfile$Builder setSendKeepAlive(  @Sink(SUSI_NETWORK) boolean arg0);
    android.net.sip.SipProfile$Builder setPort(  @Sink(SUSI_NETWORK) int arg0);
    android.net.sip.SipProfile$Builder setProfileName(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    android.net.sip.SipProfile$Builder setAuthUserName(  @Sink(SUSI_NETWORK) java.lang.String arg0);
}
class SipSession{
   @Source(SUSI_NETWORK_INFORMATION)  android.net.sip.ISipSession getRealSession();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLocalIp();
   @Source(SUSI_NO_CATEGORY)  int getState();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCallId();
   @Source(SUSI_NO_CATEGORY)  android.net.sip.SipProfile getLocalProfile();
   @Source(SUSI_NO_CATEGORY)  android.net.sip.SipProfile getPeerProfile();
}

package com.google.common.primitives;

class Ints$IntArrayAsList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Integer set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Integer arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Integer get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}

package android.hardware.display;

class DisplayManager{
   @Source(SUSI_NO_CATEGORY)  android.hardware.display.WifiDisplayStatus getWifiDisplayStatus();
   @Source(SUSI_NO_CATEGORY)  android.view.Display[] getDisplays(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.Display[] getDisplays();
   @Source(SUSI_NO_CATEGORY)  android.view.Display getDisplay(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class DisplayManagerGlobal{
   @Source(SUSI_NO_CATEGORY)  int[] getDisplayIds();
   @Source(SUSI_NO_CATEGORY)  android.view.Display getCompatibleDisplay(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.CompatibilityInfoHolder arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.Display getRealDisplay(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.hardware.display.DisplayManagerGlobal getInstance();
   @Source(SUSI_NO_CATEGORY)  android.view.DisplayInfo getDisplayInfo(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.hardware.display.WifiDisplayStatus getWifiDisplayStatus();
}
class DisplayManagerGlobal$DisplayListenerDelegate{
    void sendDisplayEvent(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class IDisplayManager$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IDisplayManager$Stub$Proxy{
    void connectWifiDisplay(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void renameWifiDisplay(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void forgetWifiDisplay(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void registerCallback(  @Sink(SUSI_NO_CATEGORY) android.hardware.display.IDisplayManagerCallback arg0);
   @Source(SUSI_NO_CATEGORY)  android.hardware.display.WifiDisplayStatus getWifiDisplayStatus();
   @Source(SUSI_NO_CATEGORY)  android.view.DisplayInfo getDisplayInfo(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NO_CATEGORY)  int[] getDisplayIds();
}
class IDisplayManagerCallback$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IDisplayManagerCallback$Stub$Proxy{
    void onDisplayEvent(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class WifiDisplay{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFriendlyDisplayName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDeviceAlias();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDeviceName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDeviceAddress();
}
class WifiDisplayStatus{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getFeatureState();
   @Source(SUSI_NO_CATEGORY)  int getScanState();
   @Source(SUSI_NO_CATEGORY)  android.hardware.display.WifiDisplay[] getRememberedDisplays();
   @Source(SUSI_NO_CATEGORY)  android.hardware.display.WifiDisplay[] getAvailableDisplays();
   @Source(SUSI_NO_CATEGORY)  int getActiveDisplayState();
   @Source(SUSI_NO_CATEGORY)  android.hardware.display.WifiDisplay getActiveDisplay();
}
class WifiDisplayStatus$1{
   @Source(SUSI_NO_CATEGORY)  android.hardware.display.WifiDisplayStatus createFromParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0);
}

package com.android.nfc.dhimpl;

class NativeLlcpConnectionlessSocket{
    void send(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) byte[] arg1);
   @Source(SUSI_NFC)  int getSap();
   @Source(SUSI_NFC)  int getHandle();
   @Source(SUSI_NFC)  int getLinkMiu();
}
class NativeLlcpSocket{
    void send(  @Sink(SUSI_NFC) byte[] arg0);
   @Source(SUSI_NFC)  int getRemoteRw();
   @Source(SUSI_NFC)  int getLocalMiu();
   @Source(SUSI_NFC)  int getRemoteMiu();
   @Source(SUSI_NFC)  int getLocalSap();
   @Source(SUSI_NFC)  int getLocalRw();
}
class NativeNfcManager{
    void setP2pInitiatorModes(  @Sink(SUSI_NFC) int arg0);
    void setP2pTargetModes(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  boolean setTimeout(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) int arg1);
   @Source(SUSI_NFC)  com.android.nfc.DeviceHost$LlcpSocket createLlcpSocket(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) int arg1, @Sink(SUSI_NFC) int arg2, @Sink(SUSI_NFC) int arg3);
   @Source(SUSI_NFC)  int getTimeout(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  com.android.nfc.DeviceHost$LlcpConnectionlessSocket createLlcpConnectionlessSocket(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) java.lang.String arg1);
   @Source(SUSI_NFC)  com.android.nfc.DeviceHost$LlcpServerSocket createLlcpServerSocket(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) java.lang.String arg1, @Sink(SUSI_NFC) int arg2, @Sink(SUSI_NFC) int arg3, @Sink(SUSI_NFC) int arg4);
   @Source(SUSI_NFC)  byte[][] getWipeApdus();
   @Source(SUSI_NFC)  java.lang.String dump();
   @Source(SUSI_NFC)  int getDefaultLlcpRwSize();
   @Source(SUSI_NFC)  boolean getExtendedLengthApdusSupported();
   @Source(SUSI_NFC)  int getMaxTransceiveLength(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  java.lang.String getName();
   @Source(SUSI_NFC)  int getDefaultLlcpMiu();
}
class NativeNfcTag{
    void addNdefTechnology(  @Sink(SUSI_NFC) android.nfc.NdefMessage arg0, @Sink(SUSI_NFC) int arg1, @Sink(SUSI_NFC) int arg2, @Sink(SUSI_NFC) int arg3, @Sink(SUSI_NFC) int arg4, @Sink(SUSI_NFC) int arg5);
   @Source(SUSI_NFC)  byte[] transceive(  @Sink(SUSI_NFC) byte[] arg0, @Sink(SUSI_NFC) boolean arg1, @Sink(SUSI_NFC) int[] arg2);
   @Source(SUSI_NFC)  int[] getTechList();
   @Source(SUSI_NFC)  int getHandle();
   @Source(SUSI_NFC)  byte[] getUid();
   @Source(SUSI_NFC)  byte[] readNdef();
   @Source(SUSI_NFC)  int getConnectedTechnology();
   @Source(SUSI_NFC)  android.os.Bundle[] getTechExtras();
}
class NativeP2pDevice{
   @Source(SUSI_NFC)  boolean send(  @Sink(SUSI_NFC) byte[] arg0);
   @Source(SUSI_NFC)  byte[] getGeneralBytes();
   @Source(SUSI_NFC)  byte[] transceive(  @Sink(SUSI_NFC) byte[] arg0);
   @Source(SUSI_NFC)  byte[] receive();
   @Source(SUSI_NFC)  int getMode();
   @Source(SUSI_NFC)  int getHandle();
}

package android.support.v4.widget;

class EdgeEffectCompat{
    void setSize(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class EdgeEffectCompat$BaseEdgeEffectImpl{
    void setSize(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class EdgeEffectCompat$EdgeEffectIcsImpl{
    void setSize(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class EdgeEffectCompatIcs{
    void setSize(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}

package com.googlecode.mp4parser.authoring;

class Movie{
   @Source(SUSI_NO_CATEGORY)  com.googlecode.mp4parser.authoring.Track getTrackByTrackId(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getTracks();
   @Source(SUSI_NO_CATEGORY)  long getNextTrackId();
}
class Mp4TrackImpl{
   @Source(SUSI_SYNCHRONIZATION_DATA)  long[] getSyncSamples();
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.SampleDescriptionBox getSampleDescriptionBox();
   @Source(SUSI_NO_CATEGORY)  java.util.List getSampleDependencies();
   @Source(SUSI_NO_CATEGORY)  com.googlecode.mp4parser.authoring.TrackMetaData getTrackMetaData();
   @Source(SUSI_NO_CATEGORY)  java.util.List getSamples();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHandler();
   @Source(SUSI_NO_CATEGORY)  java.util.List getCompositionTimeEntries();
   @Source(SUSI_NO_CATEGORY)  java.util.List getDecodingTimeEntries();
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.AbstractMediaHeaderBox getMediaHeaderBox();
}
class TrackMetaData{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLanguage();
   @Source(SUSI_NO_CATEGORY)  double getWidth();
   @Source(SUSI_NO_CATEGORY)  double getHeight();
   @Source(SUSI_NO_CATEGORY)  long[] getMatrix();
   @Source(SUSI_NO_CATEGORY)  long getTrackId();
   @Source(SUSI_NO_CATEGORY)  int getGroup();
   @Source(SUSI_NO_CATEGORY)  float getVolume();
   @Source(SUSI_NO_CATEGORY)  int getLayer();
   @Source(SUSI_NO_CATEGORY)  java.util.Date getCreationTime();
}

package com.android.internal.telephony.cat;

class BerTlv{
   @Source(SUSI_NETWORK_INFORMATION)  int getTag();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getComprehensionTlvs();
}
class CatCmdMessage{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.cat.ToneSettings getToneSettings();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.cat.Menu getMenu();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.cat.CatCmdMessage$CallSettings getCallSettings();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.cat.AppInterface$CommandType getCmdType();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.cat.CatCmdMessage$BrowserSettings getBrowserSettings();
}
class CatResponseMessage{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.cat.CommandDetails getCmdDetails();
}
class CatService{
    void handleMessage(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.cat.AppInterface getInstance();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.cat.CatService getInstance(  com.android.internal.telephony.CommandsInterface arg0, android.content.Context arg1, com.android.internal.telephony.UiccCard arg2);
}
class CommandDetails{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.cat.ComprehensionTlvTag getTag();
}
class CommandParams{
   @Source(SUSI_SYSTEM_SETTINGS)  boolean setIcon(  @Sink(SUSI_SYSTEM_SETTINGS) android.graphics.Bitmap arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.cat.AppInterface$CommandType getCommandType();
}
class CommandParamsFactory{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.cat.CommandParamsFactory getInstance(  com.android.internal.telephony.cat.RilMessageDecoder arg0, com.android.internal.telephony.IccFileHandler arg1);
}
class ComprehensionTlv{
   @Source(SUSI_NETWORK_INFORMATION)  int getTag();
   @Source(SUSI_NETWORK_INFORMATION)  int getValueIndex();
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getRawValue();
   @Source(SUSI_NETWORK_INFORMATION)  int getLength();
}
class DeviceIdentities{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.cat.ComprehensionTlvTag getTag();
}
class GetInkeyInputResponseData{
    void format(  @Sink(SUSI_SYSTEM_SETTINGS) java.io.ByteArrayOutputStream arg0);
}
class IconId{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.cat.ComprehensionTlvTag getTag();
}
class IconLoader{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.cat.IconLoader getInstance(  android.os.Handler arg0, com.android.internal.telephony.IccFileHandler arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.graphics.Bitmap parseToRGB(  byte[] arg0, int arg1, boolean arg2, byte[] arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.graphics.Bitmap parseToBnW(  byte[] arg0, int arg1);
}
class Input{
   @Source(SUSI_SYSTEM_SETTINGS)  boolean setIcon(  @Sink(SUSI_SYSTEM_SETTINGS) android.graphics.Bitmap arg0);
}
class Item{
    void writeToParcel(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Parcel arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
}
class ItemsIconId{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.cat.ComprehensionTlvTag getTag();
}
class Menu{
    void writeToParcel(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Parcel arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
}
class ResponseData{
    void writeLength(  @Sink(SUSI_SYSTEM_SETTINGS) java.io.ByteArrayOutputStream arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
}
class RilMessageDecoder{
    void sendMsgParamsDecoded(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.cat.ResultCode arg0, @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.cat.CommandParams arg1);
    void sendStartDecodingMessageParams(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.cat.RilMessage arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.cat.RilMessageDecoder getInstance(  android.os.Handler arg0, com.android.internal.telephony.IccFileHandler arg1);
}
class RilMessageDecoder$StateCmdParamsReady{
   @Source(SUSI_SYSTEM_SETTINGS)  boolean processMessage(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
}
class RilMessageDecoder$StateStart{
   @Source(SUSI_SYSTEM_SETTINGS)  boolean processMessage(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
}

package com.android.mms.model;

class AudioModel{
   @Source(SUSI_NO_CATEGORY)  java.util.Map getExtras();
}
class ContentRestrictionFactory{
   @Source(SUSI_NO_CATEGORY)  com.android.mms.model.ContentRestriction getContentRestriction();
}
class ImageModel{
   @Source(SUSI_NO_CATEGORY)  boolean getMediaResizable();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getBitmap(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class LayoutModel{
   @Source(SUSI_NO_CATEGORY)  int getLayoutType();
   @Source(SUSI_NO_CATEGORY)  com.android.mms.model.RegionModel getImageRegion();
   @Source(SUSI_NO_CATEGORY)  int getLayoutWidth();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getBackgroundColor();
   @Source(SUSI_NO_CATEGORY)  int getLayoutHeight();
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getRegions();
   @Source(SUSI_NO_CATEGORY)  com.android.mms.model.RegionModel getTextRegion();
}
class MediaModel{
   @Source(SUSI_NO_CATEGORY)  int getDuration();
   @Source(SUSI_NO_CATEGORY)  int getMediaSize();
   @Source(SUSI_NO_CATEGORY)  boolean getMediaResizable();
   @Source(SUSI_NO_CATEGORY)  com.android.mms.model.MediaModel$MediaAction getCurrentAction();
   @Source(SUSI_NO_CATEGORY)  byte[] getData();
   @Source(SUSI_NO_CATEGORY)  int getBegin();
   @Source(SUSI_NO_CATEGORY)  int getSeekTo();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSrc();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getContentType();
   @Source(SUSI_NO_CATEGORY)  android.net.Uri getUri();
}
class MediaModelFactory{
   @Source(SUSI_NO_CATEGORY)  com.android.mms.model.MediaModel getMediaModel(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) org.w3c.dom.smil.SMILMediaElement arg1, @Sink(SUSI_NO_CATEGORY) com.android.mms.model.LayoutModel arg2, @Sink(SUSI_NO_CATEGORY) com.google.android.mms.pdu.PduBody arg3);
}
class RegionMediaModel{
   @Source(SUSI_NO_CATEGORY)  com.android.mms.model.RegionModel getRegion();
}
class RegionModel{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getBackgroundColor();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRegionId();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  int getLeft();
   @Source(SUSI_NO_CATEGORY)  int getTop();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFit();
}
class SlideModel{
   @Source(SUSI_SMS_MMS)  com.android.mms.model.MediaModel set(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) com.android.mms.model.MediaModel arg1);
   @Source(SUSI_SMS_MMS)  java.lang.Object set(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.mms.model.TextModel getText();
   @Source(SUSI_NO_CATEGORY)  int getDuration();
   @Source(SUSI_NO_CATEGORY)  com.android.mms.model.ImageModel getImage();
   @Source(SUSI_NO_CATEGORY)  com.android.mms.model.VideoModel getVideo();
   @Source(SUSI_NO_CATEGORY)  com.android.mms.model.MediaModel get(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.mms.model.AudioModel getAudio();
   @Source(SUSI_NO_CATEGORY)  int getSlideSize();
}
class SlideshowModel{
   @Source(SUSI_SMS_MMS)  java.lang.Object set(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) java.lang.Object arg1);
   @Source(SUSI_SMS_MMS)  java.util.HashMap openPartFiles(  @Sink(SUSI_SMS_MMS) android.content.ContentResolver arg0);
   @Source(SUSI_SMS_MMS)  com.android.mms.model.SlideModel set(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) com.android.mms.model.SlideModel arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.mms.model.SlideModel get(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.mms.model.LayoutModel getLayout();
   @Source(SUSI_NO_CATEGORY)  com.google.android.mms.pdu.PduBody getPduBody(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1);
   @Source(SUSI_NO_CATEGORY)  int getCurrentMessageSize();
   @Source(SUSI_NO_CATEGORY)  com.android.mms.model.SlideshowModel createFromPduBody(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) com.google.android.mms.pdu.PduBody arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.mms.model.SlideshowModel createFromMessageUri(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1);
   @Source(SUSI_NO_CATEGORY)  int getTotalMessageSize();
}
class SmilHelper{
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.smil.SMILMediaElement createMediaElement(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) org.w3c.dom.smil.SMILDocument arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.smil.SMILParElement addPar(  @Sink(SUSI_NO_CATEGORY) org.w3c.dom.smil.SMILDocument arg0);
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.smil.SMILDocument getDocument(  @Sink(SUSI_NO_CATEGORY) com.android.mms.model.SlideshowModel arg0);
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.smil.SMILDocument getDocument(  @Sink(SUSI_NO_CATEGORY) com.google.android.mms.pdu.PduBody arg0);
}
class TextModel{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getText();
   @Source(SUSI_NO_CATEGORY)  int getCharset();
}

package javax.microedition.khronos.egl;

class EGLContext{
   @Source(SUSI_NO_CATEGORY)  javax.microedition.khronos.egl.EGL getEGL();
}

package com.android.contacts.dialpad;

class DialpadFragment{
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View onCreateView(  @Sink(SUSI_CONTACT_INFORMATION) android.view.LayoutInflater arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg1, @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg2);
}
class DialpadFragment$DialpadChooserAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  int getCount();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Object getItem(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  long getItemId(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
}
class DialpadFragment$ErrorDialogFragment{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.dialpad.DialpadFragment$ErrorDialogFragment newInstance(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Dialog onCreateDialog(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg0);
}
class DialpadImageButton{
    void setPressed(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
}

package android.view.inputmethod;

class BaseInputConnection{
   @Source(SUSI_NO_CATEGORY)  boolean setComposingRegion(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean setSelection(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.inputmethod.ExtractedText getExtractedText(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.ExtractedTextRequest arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getCursorCapsMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.text.Editable getEditable();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTextBeforeCursor(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTextAfterCursor(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getSelectedText(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class CompletionInfo{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getLabel();
   @Source(SUSI_NO_CATEGORY)  long getId();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getText();
   @Source(SUSI_NO_CATEGORY)  int getPosition();
}
class CorrectionInfo{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getNewText();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getOldText();
   @Source(SUSI_NO_CATEGORY)  int getOffset();
}
class EditorInfo{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void dump(  @Sink(SUSI_NO_CATEGORY) android.util.Printer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class ExtractedText{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class InputBinding{
   @Source(SUSI_NO_CATEGORY)  int getPid();
   @Source(SUSI_NO_CATEGORY)  int getUid();
   @Source(SUSI_NO_CATEGORY)  android.view.inputmethod.InputConnection getConnection();
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder getConnectionToken();
}
class InputConnectionWrapper{
   @Source(SUSI_NO_CATEGORY)  boolean performContextMenuAction(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean performPrivateCommand(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
   @Source(SUSI_NO_CATEGORY)  boolean setComposingRegion(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean sendKeyEvent(  @Sink(SUSI_NO_CATEGORY) android.view.KeyEvent arg0);
   @Source(SUSI_NO_CATEGORY)  boolean performEditorAction(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setSelection(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getCursorCapsMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.inputmethod.ExtractedText getExtractedText(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.ExtractedTextRequest arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTextBeforeCursor(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getSelectedText(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTextAfterCursor(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class InputMethodInfo{
    void dump(  @Sink(SUSI_NO_CATEGORY) android.util.Printer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPackageName();
   @Source(SUSI_NO_CATEGORY)  int getIsDefaultResourceId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getId();
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getComponent();
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ServiceInfo getServiceInfo();
   @Source(SUSI_NO_CATEGORY)  android.view.inputmethod.InputMethodSubtype getSubtypeAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getServiceName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSettingsActivity();
   @Source(SUSI_NO_CATEGORY)  int getSubtypeCount();
}
class InputMethodManager{
    void doDump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void updateSelection(  @Sink(SUSI_LOG) android.view.View arg0, @Sink(SUSI_LOG) int arg1, @Sink(SUSI_LOG) int arg2, @Sink(SUSI_LOG) int arg3, @Sink(SUSI_LOG) int arg4);
    boolean setCurrentInputMethodSubtype(  @Sink(SUSI_LOG) android.view.inputmethod.InputMethodSubtype arg0);
    void setAdditionalInputMethodSubtypes(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) android.view.inputmethod.InputMethodSubtype[] arg1);
    void updateCursor(  @Sink(SUSI_LOG) android.view.View arg0, @Sink(SUSI_LOG) int arg1, @Sink(SUSI_LOG) int arg2, @Sink(SUSI_LOG) int arg3, @Sink(SUSI_LOG) int arg4);
    void sendAppPrivateCommand(  @Sink(SUSI_LOG) android.view.View arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) android.os.Bundle arg2);
    void setInputMethod(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setImeWindowStatus(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void updateExtractedText(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.ExtractedText arg2);
    void onWindowFocus(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
    void setInputMethodAndSubtype(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.InputMethodSubtype arg2);
    void notifySuggestionPicked(  @Sink(SUSI_NO_CATEGORY) android.text.style.SuggestionSpan arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype();
   @Source(SUSI_NO_CATEGORY)  android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype();
   @Source(SUSI_NO_CATEGORY)  com.android.internal.view.IInputMethodClient getClient();
   @Source(SUSI_NO_CATEGORY)  com.android.internal.view.IInputContext getInputContext();
   @Source(SUSI_NO_CATEGORY)  java.util.Map getShortcutInputMethodsAndSubtypes();
   @Source(SUSI_NO_CATEGORY)  java.util.List getEnabledInputMethodList();
   @Source(SUSI_NO_CATEGORY)  android.view.inputmethod.InputMethodManager getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getInputMethodList();
   @Source(SUSI_NO_CATEGORY)  java.util.List getEnabledInputMethodSubtypeList(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.InputMethodInfo arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.inputmethod.InputMethodManager getInstance(  @Sink(SUSI_NO_CATEGORY) android.os.Looper arg0);
}
class InputMethodSubtype{
   @Source(SUSI_NO_CATEGORY)  int getNameResId();
   @Source(SUSI_NO_CATEGORY)  int getIconResId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getExtraValueOf(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getDisplayName(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.content.pm.ApplicationInfo arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLocale();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getExtraValue();
}

package com.android.emailcommon.internet;

class BinaryTempFileBody{
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInputStream();
   @Source(SUSI_NO_CATEGORY)  java.io.OutputStream getOutputStream();
}
class MimeBodyPart{
    void setHeader(  @Sink(SUSI_EMAIL) java.lang.String arg0, @Sink(SUSI_EMAIL) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFirstHeader(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisposition();
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.mail.Body getBody();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getContentType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMimeType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getHeader(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class MimeHeader{
    void setHeader(  @Sink(SUSI_EMAIL) java.lang.String arg0, @Sink(SUSI_EMAIL) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getHeader(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFirstHeader(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class MimeMessage{
    void setHeader(  @Sink(SUSI_EMAIL) java.lang.String arg0, @Sink(SUSI_EMAIL) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getHeader(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Date getSentDate();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMimeType();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInputStream();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisposition();
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.mail.Body getBody();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFirstHeader(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getContentType();
}
class MimeMultipart{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSubTypeForTest();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getContentType();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInputStream();
}
class MimeUtility{
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInputStreamForContentTransferEncoding(  @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHeaderParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class Rfc822Output{
    void writeTo(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) java.io.OutputStream arg2, @Sink(SUSI_EMAIL) boolean arg3, @Sink(SUSI_EMAIL) boolean arg4);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHtmlBody(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHtmlAlternate(  @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.provider.EmailContent$Body arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNextBoundary();
}
class TextBody{
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInputStream();
}

package android.support.v13.app;

class FragmentCompat{
    void setUserVisibleHint(  @Sink(SUSI_NO_CATEGORY) android.app.Fragment arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setMenuVisibility(  @Sink(SUSI_NO_CATEGORY) android.app.Fragment arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class FragmentCompat$BaseFragmentCompatImpl{
    void setUserVisibleHint(  @Sink(SUSI_NO_CATEGORY) android.app.Fragment arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setMenuVisibility(  @Sink(SUSI_NO_CATEGORY) android.app.Fragment arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class FragmentCompat$ICSFragmentCompatImpl{
    void setMenuVisibility(  @Sink(SUSI_NO_CATEGORY) android.app.Fragment arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class FragmentCompat$ICSMR1FragmentCompatImpl{
    void setUserVisibleHint(  @Sink(SUSI_NO_CATEGORY) android.app.Fragment arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class FragmentCompatICS{
    void setMenuVisibility(  @Sink(SUSI_NO_CATEGORY) android.app.Fragment arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class FragmentCompatICSMR1{
    void setUserVisibleHint(  @Sink(SUSI_NO_CATEGORY) android.app.Fragment arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class FragmentPagerAdapter{
    void setPrimaryItem(  @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object instantiateItem(  @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Parcelable saveState();
}

package java.net;

class AddressCache{
    void putUnknownHost(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.net.InetAddress[] arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class Authenticator{
   @Source(SUSI_NO_CATEGORY)  java.net.PasswordAuthentication getPasswordAuthentication();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRequestingPrompt();
   @Source(SUSI_NO_CATEGORY)  int getRequestingPort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRequestingHost();
   @Source(SUSI_NO_CATEGORY)  java.net.URL getRequestingURL();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRequestingScheme();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getRequestingSite();
   @Source(SUSI_NO_CATEGORY)  java.net.Authenticator$RequestorType getRequestorType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRequestingProtocol();
}
class ContentHandler{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getContent(  @Sink(SUSI_NO_CATEGORY) java.net.URLConnection arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Class[] arg1);
}
class CookieHandler{
   @Source(SUSI_NO_CATEGORY)  java.net.CookieHandler getDefault();
}
class DatagramPacket{
    void setSocketAddress(  @Sink(SUSI_NO_CATEGORY) java.net.SocketAddress arg0);
   @Source(SUSI_NO_CATEGORY)  int getOffset();
   @Source(SUSI_NO_CATEGORY)  byte[] getData();
   @Source(SUSI_NO_CATEGORY)  java.net.SocketAddress getSocketAddress();
   @Source(SUSI_NO_CATEGORY)  int getLength();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getAddress();
   @Source(SUSI_NO_CATEGORY)  int getPort();
}
class DatagramSocket{
    void setNetworkInterface(  @Sink(SUSI_FILE) java.net.NetworkInterface arg0);
    void setTrafficClass(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSendBufferSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSoTimeout(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setBroadcast(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void send(  @Sink(SUSI_NO_CATEGORY) java.net.DatagramPacket arg0);
    void setReceiveBufferSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setReuseAddress(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void bind(  @Sink(SUSI_NO_CATEGORY) java.net.SocketAddress arg0);
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getInetAddress();
   @Source(SUSI_NO_CATEGORY)  int getPort();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getLocalAddress();
   @Source(SUSI_NO_CATEGORY)  int getReceiveBufferSize();
   @Source(SUSI_NO_CATEGORY)  java.nio.channels.DatagramChannel getChannel();
   @Source(SUSI_NO_CATEGORY)  int getSoTimeout();
   @Source(SUSI_NO_CATEGORY)  boolean getBroadcast();
   @Source(SUSI_NO_CATEGORY)  int getLocalPort();
   @Source(SUSI_NO_CATEGORY)  boolean getReuseAddress();
   @Source(SUSI_NO_CATEGORY)  int getTrafficClass();
   @Source(SUSI_NO_CATEGORY)  java.net.SocketAddress getRemoteSocketAddress();
   @Source(SUSI_NO_CATEGORY)  int getSendBufferSize();
   @Source(SUSI_NO_CATEGORY)  java.io.FileDescriptor getFileDescriptor$();
   @Source(SUSI_NO_CATEGORY)  java.net.SocketAddress getLocalSocketAddress();
}
class DatagramSocketImpl{
   @Source(SUSI_NO_CATEGORY)  int getLocalPort();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getLocalAddress();
   @Source(SUSI_NO_CATEGORY)  java.io.FileDescriptor getFileDescriptor();
}
class DefaultFileNameMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getContentTypeFor(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class HttpRetryException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLocation();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getReason();
}
class HttpURLConnection{
    void setRequestMethod(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  long getHeaderFieldDate(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  java.security.Permission getPermission();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getContentEncoding();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getResponseMessage();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRequestMethod();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getErrorStream();
   @Source(SUSI_NO_CATEGORY)  boolean getFollowRedirects();
   @Source(SUSI_NO_CATEGORY)  boolean getInstanceFollowRedirects();
   @Source(SUSI_NO_CATEGORY)  int getResponseCode();
}
class Inet6Address{
   @Source(SUSI_NO_CATEGORY)  int getScopeId();
   @Source(SUSI_NO_CATEGORY)  java.net.Inet6Address getByAddress(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.net.NetworkInterface getScopedInterface();
   @Source(SUSI_NO_CATEGORY)  java.net.Inet6Address getByAddress(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1, @Sink(SUSI_NO_CATEGORY) java.net.NetworkInterface arg2);
}
class InetAddress{
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getByAddress(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1);
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getByAddress(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getAddress();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getByName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getLoopbackAddress();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress[] getAllByName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHostAddress();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getLocalHost();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCanonicalHostName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHostName();
}
class InetSocketAddress{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHostString();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getAddress();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHostName();
   @Source(SUSI_NO_CATEGORY)  int getPort();
}
class InterfaceAddress{
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getBroadcast();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getAddress();
   @Source(SUSI_NO_CATEGORY)  short getNetworkPrefixLength();
}
class JarURLConnection{
   @Source(SUSI_NO_CATEGORY)  java.security.cert.Certificate[] getCertificates();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getEntryName();
   @Source(SUSI_NO_CATEGORY)  java.util.jar.Attributes getMainAttributes();
   @Source(SUSI_NO_CATEGORY)  java.util.jar.Attributes getAttributes();
   @Source(SUSI_NO_CATEGORY)  java.util.jar.Manifest getManifest();
   @Source(SUSI_NO_CATEGORY)  java.net.URL getJarFileURL();
   @Source(SUSI_NO_CATEGORY)  java.util.jar.JarEntry getJarEntry();
}
class MulticastSocket{
    void setLoopbackMode(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setTimeToLive(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setNetworkInterface(  @Sink(SUSI_NO_CATEGORY) java.net.NetworkInterface arg0);
    void setInterface(  @Sink(SUSI_NO_CATEGORY) java.net.InetAddress arg0);
    void setTTL(  @Sink(SUSI_NO_CATEGORY) byte arg0);
    void send(  @Sink(SUSI_NO_CATEGORY) java.net.DatagramPacket arg0, @Sink(SUSI_NO_CATEGORY) byte arg1);
   @Source(SUSI_NO_CATEGORY)  boolean getLoopbackMode();
   @Source(SUSI_NO_CATEGORY)  int getTimeToLive();
   @Source(SUSI_NO_CATEGORY)  byte getTTL();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getInterface();
   @Source(SUSI_NO_CATEGORY)  java.net.NetworkInterface getNetworkInterface();
}
class NetworkInterface{
   @Source(SUSI_NO_CATEGORY)  java.util.List getInterfaceAddresses();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.net.NetworkInterface getByInetAddress(  @Sink(SUSI_NO_CATEGORY) java.net.InetAddress arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getHardwareAddress();
   @Source(SUSI_NO_CATEGORY)  int getMTU();
   @Source(SUSI_NO_CATEGORY)  java.util.Enumeration getSubInterfaces();
   @Source(SUSI_NO_CATEGORY)  java.util.Enumeration getInetAddresses();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayName();
   @Source(SUSI_NO_CATEGORY)  java.net.NetworkInterface getByIndex(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.net.NetworkInterface getParent();
   @Source(SUSI_NO_CATEGORY)  java.net.NetworkInterface getByName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getIndex();
   @Source(SUSI_NO_CATEGORY)  java.util.Enumeration getNetworkInterfaces();
}
class PasswordAuthentication{
   @Source(SUSI_NO_CATEGORY)  char[] getPassword();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUserName();
}
class PlainDatagramSocketImpl{
    void setOption(  @Sink(SUSI_FILE) int arg0, @Sink(SUSI_FILE) java.lang.Object arg1);
    void bind(  @Sink(SUSI_FILE) int arg0, @Sink(SUSI_FILE) java.net.InetAddress arg1);
    void send(  @Sink(SUSI_FILE) java.net.DatagramPacket arg0);
    void setTimeToLive(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setTTL(  @Sink(SUSI_NO_CATEGORY) byte arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getOption(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  byte getTTL();
   @Source(SUSI_NO_CATEGORY)  int getTimeToLive();
}
class PlainSocketImpl{
    void bind(  @Sink(SUSI_FILE) java.net.InetAddress arg0, @Sink(SUSI_FILE) int arg1);
    void setOption(  @Sink(SUSI_FILE) int arg0, @Sink(SUSI_FILE) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInputStream();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getOption(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.OutputStream getOutputStream();
}
class PlainSocketImpl$PlainSocketOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ProxySelector{
   @Source(SUSI_NO_CATEGORY)  java.net.ProxySelector getDefault();
}
class ResponseCache{
   @Source(SUSI_NO_CATEGORY)  java.net.ResponseCache getDefault();
}
class ServerSocket{
    void bind(  @Sink(SUSI_NO_CATEGORY) java.net.SocketAddress arg0);
    void bind(  @Sink(SUSI_NO_CATEGORY) java.net.SocketAddress arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setReuseAddress(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setPerformancePreferences(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setReceiveBufferSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSoTimeout(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.channels.ServerSocketChannel getChannel();
   @Source(SUSI_NO_CATEGORY)  int getLocalPort();
   @Source(SUSI_NO_CATEGORY)  int getSoTimeout();
   @Source(SUSI_NO_CATEGORY)  java.net.SocketAddress getLocalSocketAddress();
   @Source(SUSI_NO_CATEGORY)  int getReceiveBufferSize();
   @Source(SUSI_NO_CATEGORY)  boolean getReuseAddress();
   @Source(SUSI_NO_CATEGORY)  java.net.SocketImpl getImpl$();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getInetAddress();
}
class Socket{
    void setReuseAddress(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setSoLinger(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setSoTimeout(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setPerformancePreferences(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setKeepAlive(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void sendUrgentData(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void bind(  @Sink(SUSI_NO_CATEGORY) java.net.SocketAddress arg0);
    void setTcpNoDelay(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setReceiveBufferSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setTrafficClass(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSendBufferSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setOOBInline(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getInetAddress();
   @Source(SUSI_NO_CATEGORY)  int getPort();
   @Source(SUSI_NO_CATEGORY)  int getSoTimeout();
   @Source(SUSI_NO_CATEGORY)  int getSoLinger();
   @Source(SUSI_NO_CATEGORY)  boolean getTcpNoDelay();
   @Source(SUSI_NO_CATEGORY)  int getLocalPort();
   @Source(SUSI_NO_CATEGORY)  java.nio.channels.SocketChannel getChannel();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getLocalAddress();
   @Source(SUSI_NO_CATEGORY)  boolean getOOBInline();
   @Source(SUSI_NO_CATEGORY)  java.io.OutputStream getOutputStream();
   @Source(SUSI_NO_CATEGORY)  java.io.FileDescriptor getFileDescriptor$();
   @Source(SUSI_NO_CATEGORY)  int getReceiveBufferSize();
   @Source(SUSI_NO_CATEGORY)  boolean getReuseAddress();
   @Source(SUSI_NO_CATEGORY)  java.net.SocketAddress getRemoteSocketAddress();
   @Source(SUSI_NO_CATEGORY)  int getSendBufferSize();
   @Source(SUSI_NO_CATEGORY)  boolean getKeepAlive();
   @Source(SUSI_NO_CATEGORY)  int getTrafficClass();
   @Source(SUSI_NO_CATEGORY)  java.net.SocketAddress getLocalSocketAddress();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInputStream();
}
class SocketImpl{
    void setPerformancePreferences(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getLocalPort();
   @Source(SUSI_NO_CATEGORY)  java.io.FileDescriptor getFD$();
   @Source(SUSI_NO_CATEGORY)  int getPort();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getInetAddress();
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  java.io.FileDescriptor getFileDescriptor();
}
class SocketPermission{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getActions();
}
class Socks4Message{
    void setCommandOrResult(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setUserId(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setPort(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setIP(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  int getPort();
   @Source(SUSI_NO_CATEGORY)  int getCommandOrResult();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUserId();
   @Source(SUSI_NO_CATEGORY)  int getIP();
   @Source(SUSI_NO_CATEGORY)  int getLength();
   @Source(SUSI_NO_CATEGORY)  byte[] getBytes();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getErrorString(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class URI{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRawUserInfo();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAuthority();
   @Source(SUSI_NO_CATEGORY)  int getEffectivePort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSchemeSpecificPart();
   @Source(SUSI_NO_CATEGORY)  int getPort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHost();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRawPath();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getScheme();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRawFragment();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFragment();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRawSchemeSpecificPart();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRawAuthority();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUserInfo();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPath();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getQuery();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRawQuery();
}
class URISyntaxException{
   @Source(SUSI_NO_CATEGORY)  int getIndex();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getReason();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInput();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
}
class URL{
    java.net.URLConnection openConnection();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAuthority();
   @Source(SUSI_NO_CATEGORY)  int getEffectivePort();
   @Source(SUSI_NO_CATEGORY)  int getPort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHost();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRef();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getContent(  @Sink(SUSI_NO_CATEGORY) java.lang.Class[] arg0);
   @Source(SUSI_NO_CATEGORY)  int getDefaultPort();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getContent();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUserInfo();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPath();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProtocol();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getQuery();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFile();
}
class URLConnection{
    void setRequestProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setDefaultUseCaches(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setDefaultRequestProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHeaderField(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.security.Permission getPermission();
   @Source(SUSI_NO_CATEGORY)  java.io.OutputStream getOutputStream();
   @Source(SUSI_NO_CATEGORY)  java.net.FileNameMap getFileNameMap();
   @Source(SUSI_NO_CATEGORY)  boolean getDefaultAllowUserInteraction();
   @Source(SUSI_NO_CATEGORY)  int getConnectTimeout();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getContentType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDefaultRequestProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getContent();
   @Source(SUSI_NO_CATEGORY)  java.util.Map getRequestProperties();
   @Source(SUSI_NO_CATEGORY)  java.net.URL getURL();
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  long getIfModifiedSince();
   @Source(SUSI_NO_CATEGORY)  long getExpiration();
   @Source(SUSI_NO_CATEGORY)  boolean getDefaultUseCaches();
   @Source(SUSI_NO_CATEGORY)  long getHeaderFieldDate(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHeaderFieldKey(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getUseCaches();
   @Source(SUSI_NO_CATEGORY)  java.util.Map getHeaderFields();
   @Source(SUSI_NO_CATEGORY)  long getLastModified();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInputStream();
   @Source(SUSI_NO_CATEGORY)  boolean getAllowUserInteraction();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHeaderField(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getReadTimeout();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getContentEncoding();
   @Source(SUSI_NO_CATEGORY)  long getDate();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRequestProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getHeaderFieldInt(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getContentLength();
   @Source(SUSI_NO_CATEGORY)  boolean getDoInput();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getContent(  @Sink(SUSI_NO_CATEGORY) java.lang.Class[] arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getDoOutput();
}
class URLConnection$DefaultContentHandler{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getContent(  @Sink(SUSI_NO_CATEGORY) java.net.URLConnection arg0);
}
class URLStreamHandler{
   @Source(SUSI_NO_CATEGORY)  java.lang.String toExternalForm(  @Sink(SUSI_NO_CATEGORY) java.net.URL arg0);
   @Source(SUSI_NO_CATEGORY)  int getDefaultPort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String toExternalForm(  @Sink(SUSI_NO_CATEGORY) java.net.URL arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getHostAddress(  @Sink(SUSI_NO_CATEGORY) java.net.URL arg0);
}

package com.android.mms.drm;

class DrmUtils{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getConvertExtension(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}

package org.xml.sax;

class InputSource{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSystemId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getEncoding();
   @Source(SUSI_NO_CATEGORY)  java.io.Reader getCharacterStream();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getByteStream();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPublicId();
}
class SAXException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
   @Source(SUSI_NO_CATEGORY)  java.lang.Exception getException();
}
class SAXParseException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSystemId();
   @Source(SUSI_NO_CATEGORY)  int getColumnNumber();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPublicId();
   @Source(SUSI_NO_CATEGORY)  int getLineNumber();
}

package android.text.style;

class AbsoluteSizeSpan{
   @Source(SUSI_NO_CATEGORY)  int getSpanTypeId();
   @Source(SUSI_NO_CATEGORY)  boolean getDip();
   @Source(SUSI_NO_CATEGORY)  int getSize();
}
class AlignmentSpan$Standard{
   @Source(SUSI_NO_CATEGORY)  android.text.Layout$Alignment getAlignment();
   @Source(SUSI_NO_CATEGORY)  int getSpanTypeId();
}
class BackgroundColorSpan{
   @Source(SUSI_NO_CATEGORY)  int getSpanTypeId();
   @Source(SUSI_NO_CATEGORY)  int getBackgroundColor();
}
class BulletSpan{
   @Source(SUSI_NO_CATEGORY)  int getSpanTypeId();
   @Source(SUSI_NO_CATEGORY)  int getLeadingMargin(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class CharacterStyle{
   @Source(SUSI_NO_CATEGORY)  android.text.style.CharacterStyle getUnderlying();
}
class CharacterStyle$Passthrough{
    void updateDrawState(  @Sink(SUSI_NO_CATEGORY) android.text.TextPaint arg0);
   @Source(SUSI_NO_CATEGORY)  android.text.style.CharacterStyle getUnderlying();
}
class DynamicDrawableSpan{
   @Source(SUSI_NO_CATEGORY)  int getVerticalAlignment();
   @Source(SUSI_NO_CATEGORY)  int getSize(  @Sink(SUSI_NO_CATEGORY) android.graphics.Paint arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.graphics.Paint$FontMetricsInt arg4);
}
class EasyEditSpan{
   @Source(SUSI_NO_CATEGORY)  int getSpanTypeId();
}
class ForegroundColorSpan{
   @Source(SUSI_NO_CATEGORY)  int getSpanTypeId();
   @Source(SUSI_NO_CATEGORY)  int getForegroundColor();
}
class ImageSpan{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSource();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getDrawable();
}
class LeadingMarginSpan$Standard{
   @Source(SUSI_NO_CATEGORY)  int getSpanTypeId();
   @Source(SUSI_NO_CATEGORY)  int getLeadingMargin(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class LocaleSpan{
   @Source(SUSI_NO_CATEGORY)  java.util.Locale getLocale();
   @Source(SUSI_NO_CATEGORY)  int getSpanTypeId();
}
class MetricAffectingSpan{
   @Source(SUSI_NO_CATEGORY)  android.text.style.CharacterStyle getUnderlying();
}
class MetricAffectingSpan$Passthrough{
    void updateDrawState(  @Sink(SUSI_NO_CATEGORY) android.text.TextPaint arg0);
    void updateMeasureState(  @Sink(SUSI_NO_CATEGORY) android.text.TextPaint arg0);
   @Source(SUSI_NO_CATEGORY)  android.text.style.CharacterStyle getUnderlying();
}
class QuoteSpan{
   @Source(SUSI_NO_CATEGORY)  int getLeadingMargin(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int getColor();
   @Source(SUSI_NO_CATEGORY)  int getSpanTypeId();
}
class RelativeSizeSpan{
   @Source(SUSI_NO_CATEGORY)  int getSpanTypeId();
   @Source(SUSI_NO_CATEGORY)  float getSizeChange();
}
class ScaleXSpan{
   @Source(SUSI_NO_CATEGORY)  int getSpanTypeId();
   @Source(SUSI_NO_CATEGORY)  float getScaleX();
}
class SpellCheckSpan{
   @Source(SUSI_NO_CATEGORY)  int getSpanTypeId();
}
class StrikethroughSpan{
   @Source(SUSI_NO_CATEGORY)  int getSpanTypeId();
}
class StyleSpan{
   @Source(SUSI_NO_CATEGORY)  int getSpanTypeId();
   @Source(SUSI_NO_CATEGORY)  int getStyle();
}
class SubscriptSpan{
   @Source(SUSI_NO_CATEGORY)  int getSpanTypeId();
}
class SuggestionRangeSpan{
   @Source(SUSI_NO_CATEGORY)  int getSpanTypeId();
}
class SuggestionSpan{
   @Source(SUSI_NO_CATEGORY)  int getSpanTypeId();
   @Source(SUSI_NO_CATEGORY)  int getUnderlineColor();
   @Source(SUSI_NO_CATEGORY)  int getFlags();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNotificationTargetClassName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getSuggestions();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLocale();
}
class SuperscriptSpan{
   @Source(SUSI_NO_CATEGORY)  int getSpanTypeId();
}
class TabStopSpan$Standard{
   @Source(SUSI_NO_CATEGORY)  int getTabStop();
}
class TextAppearanceSpan{
    void updateDrawState(  @Sink(SUSI_NO_CATEGORY) android.text.TextPaint arg0);
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.res.ColorStateList getTextColor();
   @Source(SUSI_NO_CATEGORY)  int getTextStyle();
   @Source(SUSI_NO_CATEGORY)  int getSpanTypeId();
   @Source(SUSI_NO_CATEGORY)  int getTextSize();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFamily();
   @Source(SUSI_NO_CATEGORY)  android.content.res.ColorStateList getLinkTextColor();
}
class TypefaceSpan{
   @Source(SUSI_NO_CATEGORY)  int getSpanTypeId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFamily();
}
class URLSpan{
    void onClick(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getURL();
   @Source(SUSI_NO_CATEGORY)  int getSpanTypeId();
}
class UnderlineSpan{
   @Source(SUSI_NO_CATEGORY)  int getSpanTypeId();
}

package java.util.zip;

class Adler32{
    void update(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void update(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
    void update(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getValue();
}
class CRC32{
    void update(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
    void update(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void update(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  long getValue();
}
class CheckedInputStream{
   @Source(SUSI_NO_CATEGORY)  java.util.zip.Checksum getChecksum();
}
class Deflater{
    void setDictionary(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
    void setInput(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
    void setDictionary(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  long getBytesWritten();
   @Source(SUSI_NO_CATEGORY)  int getTotalOut();
   @Source(SUSI_NO_CATEGORY)  int getTotalIn();
   @Source(SUSI_NO_CATEGORY)  int getAdler();
   @Source(SUSI_NO_CATEGORY)  long getBytesRead();
}
class DeflaterOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class GZIPOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class Inflater{
    int setFileInput(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) long arg1, @Sink(SUSI_FILE) int arg2);
    void setDictionary(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
    void setInput(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
    void setDictionary(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getRemaining();
   @Source(SUSI_NO_CATEGORY)  int getTotalOut();
   @Source(SUSI_NO_CATEGORY)  long getBytesRead();
   @Source(SUSI_NO_CATEGORY)  long getBytesWritten();
   @Source(SUSI_NO_CATEGORY)  int getTotalIn();
   @Source(SUSI_NO_CATEGORY)  int getAdler();
}
class ZipEntry{
    void setTime(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  long getCompressedSize();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  long getSize();
   @Source(SUSI_NO_CATEGORY)  int getMethod();
   @Source(SUSI_NO_CATEGORY)  byte[] getExtra();
   @Source(SUSI_NO_CATEGORY)  long getCrc();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getComment();
   @Source(SUSI_NO_CATEGORY)  long getTime();
}
class ZipFile{
   @Source(SUSI_NO_CATEGORY)  java.util.zip.ZipEntry getEntry(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInputStream(  @Sink(SUSI_NO_CATEGORY) java.util.zip.ZipEntry arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
}
class ZipOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}

package android.hardware.usb;

class IUsbManager$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IUsbManager$Stub$Proxy{
    void setAccessoryPackage(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbAccessory arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void clearDefaults(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void grantAccessoryPermission(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbAccessory arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setDevicePackage(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbDevice arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  boolean hasDefaults(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void allowUsbDebugging(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void requestDevicePermission(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbDevice arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.app.PendingIntent arg2);
    void setMassStorageBackingFile(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.ParcelFileDescriptor openDevice(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setCurrentFunction(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void requestAccessoryPermission(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbAccessory arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.app.PendingIntent arg2);
    void grantDevicePermission(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbDevice arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.hardware.usb.UsbAccessory getCurrentAccessory();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NO_CATEGORY)  android.os.ParcelFileDescriptor openAccessory(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbAccessory arg0);
}
class UsbAccessory{
   @Source(SUSI_FILE_INFORMATION)  java.lang.String getUri();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDescription();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getManufacturer();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getModel();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getVersion();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSerial();
}
class UsbDevice{
   @Source(SUSI_NO_CATEGORY)  int getDeviceId(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getDeviceClass();
   @Source(SUSI_NO_CATEGORY)  int getProductId();
   @Source(SUSI_NO_CATEGORY)  int getDeviceId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDeviceName(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getVendorId();
   @Source(SUSI_NO_CATEGORY)  int getDeviceSubclass();
   @Source(SUSI_NO_CATEGORY)  int getDeviceProtocol();
   @Source(SUSI_NO_CATEGORY)  android.hardware.usb.UsbInterface getInterface(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDeviceName();
   @Source(SUSI_NO_CATEGORY)  int getInterfaceCount();
}
class UsbDeviceConnection{
   @Source(SUSI_NO_CATEGORY)  int getFileDescriptor();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSerial();
   @Source(SUSI_NO_CATEGORY)  byte[] getRawDescriptors();
}
class UsbEndpoint{
   @Source(SUSI_NO_CATEGORY)  int getAttributes();
   @Source(SUSI_NO_CATEGORY)  int getEndpointNumber();
   @Source(SUSI_NO_CATEGORY)  int getInterval();
   @Source(SUSI_NO_CATEGORY)  int getAddress();
   @Source(SUSI_NO_CATEGORY)  int getDirection();
   @Source(SUSI_NO_CATEGORY)  int getMaxPacketSize();
   @Source(SUSI_NO_CATEGORY)  int getType();
}
class UsbInterface{
   @Source(SUSI_NO_CATEGORY)  int getInterfaceClass();
   @Source(SUSI_NO_CATEGORY)  android.hardware.usb.UsbEndpoint getEndpoint(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getInterfaceProtocol();
   @Source(SUSI_NO_CATEGORY)  int getInterfaceSubclass();
   @Source(SUSI_NO_CATEGORY)  int getEndpointCount();
   @Source(SUSI_NO_CATEGORY)  int getId();
}
class UsbManager{
    void setMassStorageBackingFile(  @Sink(SUSI_LOG) java.lang.String arg0);
    void setCurrentFunction(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  android.os.ParcelFileDescriptor openAccessory(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbAccessory arg0);
   @Source(SUSI_NO_CATEGORY)  android.hardware.usb.UsbAccessory[] getAccessoryList();
   @Source(SUSI_NO_CATEGORY)  java.util.HashMap getDeviceList();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDefaultFunction();
   @Source(SUSI_NO_CATEGORY)  android.hardware.usb.UsbDeviceConnection openDevice(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbDevice arg0);
}
class UsbRequest{
   @Source(SUSI_NO_CATEGORY)  android.hardware.usb.UsbEndpoint getEndpoint();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getClientData();
}

package com.android.calendar;

class AbstractCalendarActivity{
   @Source(SUSI_CALENDAR_INFORMATION)  com.android.calendar.AsyncQueryService getAsyncQueryService();
}
class AllInOneActivity{
    void setControlsOffset(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
    void handleEvent(  @Sink(SUSI_CALENDAR_INFORMATION) com.android.calendar.CalendarController$EventInfo arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  boolean onQueryTextSubmit(  @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  long getSupportedEventTypes();
}
class AsyncQueryService{
   @Source(SUSI_CALENDAR_INFORMATION)  int getNextToken();
}
class AsyncQueryServiceHelper$OperationInfo{
   @Source(SUSI_CALENDAR_INFORMATION)  long getDelay(  @Sink(SUSI_CALENDAR_INFORMATION) java.util.concurrent.TimeUnit arg0);
}
class CalendarController{
    void sendEvent(  @Sink(SUSI_CALENDAR_INFORMATION) java.lang.Object arg0, @Sink(SUSI_CALENDAR_INFORMATION) long arg1, @Sink(SUSI_CALENDAR_INFORMATION) android.text.format.Time arg2, @Sink(SUSI_CALENDAR_INFORMATION) android.text.format.Time arg3, @Sink(SUSI_CALENDAR_INFORMATION) long arg4, @Sink(SUSI_CALENDAR_INFORMATION) int arg5);
    void sendEventRelatedEvent(  @Sink(SUSI_CALENDAR_INFORMATION) java.lang.Object arg0, @Sink(SUSI_CALENDAR_INFORMATION) long arg1, @Sink(SUSI_CALENDAR_INFORMATION) long arg2, @Sink(SUSI_CALENDAR_INFORMATION) long arg3, @Sink(SUSI_CALENDAR_INFORMATION) long arg4, @Sink(SUSI_CALENDAR_INFORMATION) int arg5, @Sink(SUSI_CALENDAR_INFORMATION) int arg6, @Sink(SUSI_CALENDAR_INFORMATION) long arg7);
    void setTime(  @Sink(SUSI_CALENDAR_INFORMATION) long arg0);
    void sendEventRelatedEventWithExtra(  @Sink(SUSI_CALENDAR_INFORMATION) java.lang.Object arg0, @Sink(SUSI_CALENDAR_INFORMATION) long arg1, @Sink(SUSI_CALENDAR_INFORMATION) long arg2, @Sink(SUSI_CALENDAR_INFORMATION) long arg3, @Sink(SUSI_CALENDAR_INFORMATION) long arg4, @Sink(SUSI_CALENDAR_INFORMATION) int arg5, @Sink(SUSI_CALENDAR_INFORMATION) int arg6, @Sink(SUSI_CALENDAR_INFORMATION) long arg7, @Sink(SUSI_CALENDAR_INFORMATION) long arg8);
    void launchViewEvent(  @Sink(SUSI_CALENDAR_INFORMATION) long arg0, @Sink(SUSI_CALENDAR_INFORMATION) long arg1, @Sink(SUSI_CALENDAR_INFORMATION) long arg2, @Sink(SUSI_CALENDAR_INFORMATION) int arg3);
    void sendEvent(  @Sink(SUSI_CALENDAR_INFORMATION) java.lang.Object arg0, @Sink(SUSI_CALENDAR_INFORMATION) long arg1, @Sink(SUSI_CALENDAR_INFORMATION) android.text.format.Time arg2, @Sink(SUSI_CALENDAR_INFORMATION) android.text.format.Time arg3, @Sink(SUSI_CALENDAR_INFORMATION) long arg4, @Sink(SUSI_CALENDAR_INFORMATION) int arg5, @Sink(SUSI_CALENDAR_INFORMATION) long arg6, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg7, @Sink(SUSI_CALENDAR_INFORMATION) android.content.ComponentName arg8);
    void sendEvent(  @Sink(SUSI_CALENDAR_INFORMATION) java.lang.Object arg0, @Sink(SUSI_CALENDAR_INFORMATION) long arg1, @Sink(SUSI_CALENDAR_INFORMATION) android.text.format.Time arg2, @Sink(SUSI_CALENDAR_INFORMATION) android.text.format.Time arg3, @Sink(SUSI_CALENDAR_INFORMATION) android.text.format.Time arg4, @Sink(SUSI_CALENDAR_INFORMATION) long arg5, @Sink(SUSI_CALENDAR_INFORMATION) int arg6, @Sink(SUSI_CALENDAR_INFORMATION) long arg7, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg8, @Sink(SUSI_CALENDAR_INFORMATION) android.content.ComponentName arg9);
   @Source(SUSI_CALENDAR_INFORMATION)  long getEventId();
   @Source(SUSI_CALENDAR_INFORMATION)  long getDateFlags();
   @Source(SUSI_CALENDAR_INFORMATION)  int getPreviousViewType();
   @Source(SUSI_CALENDAR_INFORMATION)  long getTime();
   @Source(SUSI_CALENDAR_INFORMATION)  com.android.calendar.CalendarController getInstance(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getViewType();
}
class CalendarController$EventInfo{
   @Source(SUSI_CALENDAR_INFORMATION)  int getResponse();
}
class CalendarEventModel{
    void addAttendees(  @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg0, @Sink(SUSI_CALENDAR_INFORMATION) com.android.common.Rfc822Validator arg1);
    void addAttendee(  @Sink(SUSI_CALENDAR_INFORMATION) com.android.calendar.CalendarEventModel$Attendee arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String getAttendeesString();
}
class CalendarEventModel$ReminderEntry{
   @Source(SUSI_CALENDAR_INFORMATION)  int getMinutes();
   @Source(SUSI_CALENDAR_INFORMATION)  int getMethod();
}
class CalendarUtils{
    void setSharedPreference(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.SharedPreferences arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg1, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg2);
    void setSharedPreference(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.SharedPreferences arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg1, @Sink(SUSI_CALENDAR_INFORMATION) boolean arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  android.content.SharedPreferences getSharedPreferences(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg1);
}
class CalendarUtils$TimeZoneUtils{
    void setTimeZone(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg1);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String getTimeZone(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.Runnable arg1);
}
class CalendarViewAdapter{
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.Object getItem(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  android.view.View getDropDownView(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.view.View arg1, @Sink(SUSI_CALENDAR_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  int getViewTypeCount();
   @Source(SUSI_CALENDAR_INFORMATION)  int getCount();
   @Source(SUSI_CALENDAR_INFORMATION)  long getItemId(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  android.view.View getView(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.view.View arg1, @Sink(SUSI_CALENDAR_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  int getItemViewType(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
}
class DayFragment{
   @Source(SUSI_CALENDAR_INFORMATION)  long getSelectedTimeInMillis();
   @Source(SUSI_CALENDAR_INFORMATION)  long getSupportedEventTypes();
}
class DayOfMonthDrawable{
    void setAlpha(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
    void setColorFilter(  @Sink(SUSI_CALENDAR_INFORMATION) android.graphics.ColorFilter arg0);
    void setDayOfMonth(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getOpacity();
}
class DayView{
    void setMoreAllDayEventsTextAlpha(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
    void setSelected(  @Sink(SUSI_CALENDAR_INFORMATION) android.text.format.Time arg0, @Sink(SUSI_CALENDAR_INFORMATION) boolean arg1, @Sink(SUSI_CALENDAR_INFORMATION) boolean arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  long getSelectedTimeInMillis();
   @Source(SUSI_CALENDAR_INFORMATION)  int getFirstVisibleHour();
   @Source(SUSI_CALENDAR_INFORMATION)  android.text.format.Time getSelectedTime();
   @Source(SUSI_CALENDAR_INFORMATION)  int getEventsAlpha();
   @Source(SUSI_CALENDAR_INFORMATION)  android.text.format.Time getSelectedTimeForAccessibility();
}
class DayView$ScrollInterpolator{
   @Source(SUSI_CALENDAR_INFORMATION)  float getInterpolation(  @Sink(SUSI_CALENDAR_INFORMATION) float arg0);
}
class EditResponseHelper{
   @Source(SUSI_CALENDAR_INFORMATION)  int getWhichEvents();
}
class Event{
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String getTitleAndLocation();
   @Source(SUSI_CALENDAR_INFORMATION)  long getEndMillis();
   @Source(SUSI_CALENDAR_INFORMATION)  int getColumn();
   @Source(SUSI_CALENDAR_INFORMATION)  int getMaxColumns();
   @Source(SUSI_CALENDAR_INFORMATION)  long getStartMillis();
}
class EventGeometry{
    void setHourHeight(  @Sink(SUSI_CALENDAR_INFORMATION) float arg0);
}
class EventInfoFragment{
   @Source(SUSI_CALENDAR_INFORMATION)  android.database.Cursor access$2002(  @Sink(SUSI_CALENDAR_INFORMATION) com.android.calendar.EventInfoFragment arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.database.Cursor arg1);
   @Source(SUSI_CALENDAR_INFORMATION)  long getStartMillis();
   @Source(SUSI_CALENDAR_INFORMATION)  android.database.Cursor access$900(  @Sink(SUSI_CALENDAR_INFORMATION) com.android.calendar.EventInfoFragment arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  android.database.Cursor access$600(  @Sink(SUSI_CALENDAR_INFORMATION) com.android.calendar.EventInfoFragment arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  android.content.DialogInterface$OnDismissListener access$3400(  @Sink(SUSI_CALENDAR_INFORMATION) com.android.calendar.EventInfoFragment arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  long getEventId();
   @Source(SUSI_CALENDAR_INFORMATION)  long getSupportedEventTypes();
   @Source(SUSI_CALENDAR_INFORMATION)  long getEndMillis();
   @Source(SUSI_CALENDAR_INFORMATION)  android.database.Cursor access$2000(  @Sink(SUSI_CALENDAR_INFORMATION) com.android.calendar.EventInfoFragment arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  android.database.Cursor access$1802(  @Sink(SUSI_CALENDAR_INFORMATION) com.android.calendar.EventInfoFragment arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.database.Cursor arg1);
   @Source(SUSI_CALENDAR_INFORMATION)  android.database.Cursor access$602(  @Sink(SUSI_CALENDAR_INFORMATION) com.android.calendar.EventInfoFragment arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.database.Cursor arg1);
   @Source(SUSI_CALENDAR_INFORMATION)  android.database.Cursor access$902(  @Sink(SUSI_CALENDAR_INFORMATION) com.android.calendar.EventInfoFragment arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.database.Cursor arg1);
}
class EventLoader{
    void loadEventsInBackground(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.util.ArrayList arg1, @Sink(SUSI_CALENDAR_INFORMATION) int arg2, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.Runnable arg3, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.Runnable arg4);
}
class EventRecurrenceFormatter{
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String getRepeatString(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.res.Resources arg0, @Sink(SUSI_CALENDAR_INFORMATION) com.android.calendarcommon2.EventRecurrence arg1);
}
class ExpandableTextView{
    void setText(  @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.CharSequence getText();
}
class GeneralPreferences{
    void setDefaultValues(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String getRingtoneTitleFromUri(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg1);
   @Source(SUSI_CALENDAR_INFORMATION)  android.content.SharedPreferences getSharedPreferences(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0);
}
class SearchActivity{
   @Source(SUSI_CALENDAR_INFORMATION)  boolean onQueryTextSubmit(  @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  long getSupportedEventTypes();
}
class TimezoneAdapter{
   @Source(SUSI_CALENDAR_INFORMATION)  int getRowById(  @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.CharSequence[][] getAllTimezones();
}
class Utils{
   @Source(SUSI_CALENDAR_INFORMATION)  android.content.Intent createEmailAttendeesIntent(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.res.Resources arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg1, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg2, @Sink(SUSI_CALENDAR_INFORMATION) java.util.List arg3, @Sink(SUSI_CALENDAR_INFORMATION) java.util.List arg4, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg5);
    void setTodayIcon(  @Sink(SUSI_CALENDAR_INFORMATION) android.graphics.drawable.LayerDrawable arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg1, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg2);
    void setSharedPreference(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg1, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg2);
    void setSharedPreference(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg1, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String[] arg2);
    void setSharedPreference(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg1, @Sink(SUSI_CALENDAR_INFORMATION) boolean arg2);
    void setDefaultView(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) int arg1);
    void setSharedPreference(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg1, @Sink(SUSI_CALENDAR_INFORMATION) int arg2);
    void setUpSearchView(  @Sink(SUSI_CALENDAR_INFORMATION) android.widget.SearchView arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.app.Activity arg1);
    void setTimeZone(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg1);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String getDisplayedDatetime(  @Sink(SUSI_CALENDAR_INFORMATION) long arg0, @Sink(SUSI_CALENDAR_INFORMATION) long arg1, @Sink(SUSI_CALENDAR_INFORMATION) long arg2, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg3, @Sink(SUSI_CALENDAR_INFORMATION) boolean arg4, @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg5);
   @Source(SUSI_CALENDAR_INFORMATION)  long getTardis();
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String[] getSharedPreference(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg1, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String[] arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  int getDeclinedColorFromColor(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String[] getQuickResponses(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getWeeksSinceEpochFromJulianDay(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0, @Sink(SUSI_CALENDAR_INFORMATION) int arg1);
   @Source(SUSI_CALENDAR_INFORMATION)  int getSharedPreference(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg1, @Sink(SUSI_CALENDAR_INFORMATION) int arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  int getWeekNumberFromTime(  @Sink(SUSI_CALENDAR_INFORMATION) long arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg1);
   @Source(SUSI_CALENDAR_INFORMATION)  boolean getSharedPreference(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg1, @Sink(SUSI_CALENDAR_INFORMATION) boolean arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String getTimeZone(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.Runnable arg1);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String getDisplayedTimezone(  @Sink(SUSI_CALENDAR_INFORMATION) long arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg1, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  int getDaysPerWeek(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  long getNextMidnight(  @Sink(SUSI_CALENDAR_INFORMATION) android.text.format.Time arg0, @Sink(SUSI_CALENDAR_INFORMATION) long arg1, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  int getDisplayColorFromColor(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String getSharedPreference(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg1, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String getSearchAuthority(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String getWidgetScheduledUpdateAction(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String getWidgetUpdateAction(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String getDayOfWeekString(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0, @Sink(SUSI_CALENDAR_INFORMATION) int arg1, @Sink(SUSI_CALENDAR_INFORMATION) long arg2, @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg3);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String getVersionCode(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getJulianMondayFromWeeksSinceEpoch(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getFirstDayOfWeek(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0);
}

package com.android.bluetooth.pbap;

class BluetoothPbapAuthenticator{
   @Source(SUSI_BLUETOOTH_INFORMATION)  byte[] onAuthenticationResponse(  byte[] arg0);
}
class BluetoothPbapCallLogComposer{
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String createOneEntry(  boolean arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getErrorReason();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getCount();
}
class BluetoothPbapReceiver{
    void onReceive(  @Sink(SUSI_BLUETOOTH) android.content.Context arg0, @Sink(SUSI_BLUETOOTH) android.content.Intent arg1);
}
class BluetoothPbapService{
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getLocalPhoneName();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getLocalPhoneNum();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getRemoteDeviceName();
}
class BluetoothPbapService$2{
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.bluetooth.BluetoothDevice getClient();
}
class BluetoothPbapService$SocketAcceptThread{
    void run();
}
class BluetoothPbapUtils{
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getProfileName(  android.content.Context arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String createProfileVCard(  android.content.Context arg0, int arg1, byte[] arg2);
}
class BluetoothPbapVcardManager{
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getPhonebookSize(  int arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getContactsSize();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.ArrayList loadCallHistoryList(  int arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getOwnerPhoneNumberVcard(  boolean arg0, byte[] arg1);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getCallHistorySize(  int arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.ArrayList getPhonebookNameList(  int arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.ArrayList getContactNamesByNumber(  java.lang.String arg0);
}
class BluetoothPbapVcardManager$HandlerForStringBuffer{
    boolean onEntryCreated(  @Sink(SUSI_BLUETOOTH) java.lang.String arg0);
}

package java.nio.channels.spi;

class AbstractSelectableChannel{
   @Source(SUSI_NO_CATEGORY)  java.nio.channels.SelectableChannel configureBlocking(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object blockingLock();
   @Source(SUSI_NO_CATEGORY)  java.nio.channels.SelectionKey register(  @Sink(SUSI_NO_CATEGORY) java.nio.channels.Selector arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg2);
   @Source(SUSI_NO_CATEGORY)  java.nio.channels.spi.SelectorProvider provider();
}
class AbstractSelector{
   @Source(SUSI_NO_CATEGORY)  java.nio.channels.spi.SelectorProvider provider();
   @Source(SUSI_NO_CATEGORY)  java.util.Set cancelledKeys();
}
class SelectorProvider{
   @Source(SUSI_NO_CATEGORY)  java.nio.channels.Channel inheritedChannel();
}

package com.android.internal.telephony.gsm;

class GSMPhone{
    void sendBurstDtmf(  @Sink(SUSI_PHONE_CONNECTION) java.lang.String arg0);
    void sendDtmf(  @Sink(SUSI_PHONE_CONNECTION) char arg0);
    void sendUssdResponse(  @Sink(SUSI_PHONE_CONNECTION) java.lang.String arg0);
    void startDtmf(  @Sink(SUSI_PHONE_CONNECTION) char arg0);
    com.android.internal.telephony.Connection dial(  @Sink(SUSI_VOIP) java.lang.String arg0);
    void notifyDataConnection(  @Sink(SUSI_PHONE_STATE) java.lang.String arg0, @Sink(SUSI_PHONE_STATE) java.lang.String arg1);
    void notifyDisconnect(  @Sink(SUSI_PHONE_STATE) com.android.internal.telephony.Connection arg0);
    void notifyNewRingingConnection(  @Sink(SUSI_PHONE_STATE) com.android.internal.telephony.Connection arg0);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void setSystemProperty(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1);
    void setMute(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void setOutgoingCallerIdDisplay(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void handleMessage(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void setSmscAddress(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean handlePinMmi(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
    void notifyServiceStateChanged(  @Sink(SUSI_SYSTEM_SETTINGS) android.telephony.ServiceState arg0);
    void setLine1Number(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void setCdmaSubscription(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.Connection dial(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.UUSInfo arg1);
    void setCallWaiting(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setRadioPower(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void saveClirSetting(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
    void setOnPostDialCharacter(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void setCellBroadcastSmsConfig(  @Sink(SUSI_SYSTEM_SETTINGS) int[] arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void notifySuppServiceFailed(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.Phone$SuppService arg0);
    void setDataRoamingEnabled(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void setCallForwardingOption(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2, @Sink(SUSI_SYSTEM_SETTINGS) int arg3, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg4);
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getMsisdn();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getVoiceMailAlphaTag();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getDeviceId();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getLine1AlphaTag();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getMeid();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getSubscriberId();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getImei();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getDeviceSvn();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getEsn();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getVoiceMailNumber();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getLine1Number();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getPhoneName();
    void getPreferredNetworkType(  @Sink(SUSI_LOCATION_INFORMATION) android.os.Message arg0);
   @Source(SUSI_LOCATION_INFORMATION)  android.telephony.CellLocation getCellLocation();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Call getForegroundCall();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.ServiceStateTracker getServiceStateTracker();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Call getRingingCall();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getPendingMmiCodes();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Call getBackgroundCall();
   @Source(SUSI_NETWORK_INFORMATION)  int getPhoneType();
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.ServiceState getServiceState();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.CallTracker getCallTracker();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getMute();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager();
    void getCallWaiting(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void getSmscAddress(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void getNeighboringCids(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.PhoneConstants$State getState();
    void getDataCallList(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getDataRoamingEnabled();
    void getAvailableNetworks(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void getCallForwardingOption(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.Phone$DataActivityState getDataActivityState();
}
class GsmCall{
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getConnections();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Phone getPhone();
}
class GsmCallTracker{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.internal.telephony.Connection dial(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.internal.telephony.Connection dial(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.internal.telephony.UUSInfo arg1);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.internal.telephony.Connection dial(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) com.android.internal.telephony.UUSInfo arg2);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.internal.telephony.Connection dial(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.gsm.GsmConnection getConnectionByIndex(  com.android.internal.telephony.gsm.GsmCall arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  boolean getMute();
}
class GsmConnection{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getRemainingPostDialString();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Call$State getState();
   @Source(SUSI_NETWORK_INFORMATION)  int getNumberPresentation();
   @Source(SUSI_NETWORK_INFORMATION)  long getDurationMillis();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAddress();
   @Source(SUSI_NETWORK_INFORMATION)  long getHoldDurationMillis();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Connection$DisconnectCause getDisconnectCause();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.UUSInfo getUUSInfo();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Call getCall();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Connection$PostDialState getPostDialState();
   @Source(SUSI_NETWORK_INFORMATION)  long getDisconnectTime();
   @Source(SUSI_NETWORK_INFORMATION)  int getGSMIndex();
   @Source(SUSI_NETWORK_INFORMATION)  long getConnectTime();
   @Source(SUSI_NETWORK_INFORMATION)  long getCreateTime();
}
class GsmDataConnection{
    void onConnect(  @Sink(SUSI_PHONE_CONNECTION) com.android.internal.telephony.DataConnection$ConnectionParams arg0);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NETWORK_INFORMATION)  int getProfileId();
}
class GsmDataConnectionTracker{
    void onDisconnectDone(  @Sink(SUSI_PHONE_CONNECTION) int arg0, @Sink(SUSI_PHONE_CONNECTION) android.os.AsyncResult arg1);
    void notifyDataConnection(  @Sink(SUSI_PHONE_STATE) java.lang.String arg0);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void notifyOffApnsOfAvailability(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
    void setState(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.DctConstants$State arg0);
    void onDataSetupComplete(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.AsyncResult arg0);
    void setDataOnRoamingEnabled(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getActionIntentDataStallAlarm();
   @Source(SUSI_NETWORK_INFORMATION)  int getApnProfileID(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getActionIntentReconnectAlarm();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LinkProperties getLinkProperties(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getActiveApnTypes();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getActiveApnString(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.DctConstants$State getOverallState();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LinkCapabilities getLinkCapabilities(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.DctConstants$State getState(  java.lang.String arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getAnyDataEnabled();
}
class GsmMmiCode{
    void sendUssd(  @Sink(SUSI_PHONE_CONNECTION) java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.MmiCode$State getState();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.CharSequence getMessage();
   @Source(SUSI_NETWORK_INFORMATION)  int getCLIRMode();
}
class GsmSMSDispatcher{
    void sendSms(  @Sink(SUSI_SMS_MMS) com.android.internal.telephony.SMSDispatcher$SmsTracker arg0);
    void sendNewSubmitPdu(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) java.lang.String arg2, @Sink(SUSI_SMS_MMS) com.android.internal.telephony.SmsHeader arg3, @Sink(SUSI_SMS_MMS) int arg4, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg5, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg6, @Sink(SUSI_SMS_MMS) boolean arg7);
    void sendData(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) int arg2, @Sink(SUSI_SMS_MMS) byte[] arg3, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg4, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg5);
   @Source(SUSI_SMS_MMS)  int processMessagePart(  @Sink(SUSI_SMS_MMS) byte[] arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) int arg2, @Sink(SUSI_SMS_MMS) int arg3, @Sink(SUSI_SMS_MMS) int arg4, @Sink(SUSI_SMS_MMS) long arg5, @Sink(SUSI_SMS_MMS) int arg6, @Sink(SUSI_SMS_MMS) boolean arg7);
    void dispatch(  @Sink(SUSI_SMS_MMS) android.content.Intent arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) android.content.BroadcastReceiver arg2);
    void sendText(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) java.lang.String arg2, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg3, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg4);
    void dispatch(  @Sink(SUSI_SMS_MMS) android.content.Intent arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1);
   @Source(SUSI_SMS_MMS)  int dispatchMessage(  @Sink(SUSI_SMS_MMS) com.android.internal.telephony.SmsMessageBase arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getFormat();
}
class GsmServiceStateTracker{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NETWORK_INFORMATION)  int getCurrentDataConnectionState();
   @Source(SUSI_NETWORK_INFORMATION)  int getCurrentGprsState();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Phone getPhone();
}
class GsmSmsAddress{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAddressString();
}
class GsmSmsCbMessage{
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.SmsCbMessage createSmsCbMessage(  android.telephony.SmsCbLocation arg0, byte[][] arg1);
}
class SIMFileHandler{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEFPath(  int arg0);
}
class SIMRecords{
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getVoiceMailNumber();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getMsisdnNumber();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable();
   @Source(SUSI_NETWORK_INFORMATION)  int getDisplayRule(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getOperatorNumeric();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getIMSI();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getVoiceMailAlphaTag();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getMsisdnAlphaTag();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getVoiceCallForwardingFlag();
}
class SimPhoneBookInterfaceManager{
   @Source(SUSI_CONTACT_INFORMATION)  boolean updateAdnRecordsInEfBySearch(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg5);
   @Source(SUSI_CONTACT_INFORMATION)  boolean onTransact(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.os.Parcel arg1, @Sink(SUSI_CONTACT_INFORMATION) android.os.Parcel arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3);
   @Source(SUSI_CONTACT_INFORMATION)  int[] getAdnRecordsSize(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.util.List getAdnRecordsInEf(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class SimSmsInterfaceManager{
   @Source(SUSI_SMS_MMS)  boolean updateMessageOnIccEf(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) int arg1, @Sink(SUSI_SMS_MMS) byte[] arg2);
    void sendData(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) int arg2, @Sink(SUSI_SMS_MMS) byte[] arg3, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg4, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg5);
   @Source(SUSI_SMS_MMS)  boolean copyMessageToIccEf(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) byte[] arg1, @Sink(SUSI_SMS_MMS) byte[] arg2);
   @Source(SUSI_SMS_MMS)  boolean enableCellBroadcast(  @Sink(SUSI_SMS_MMS) int arg0);
   @Source(SUSI_SMS_MMS)  boolean enableCellBroadcastRange(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.ArrayList access$300(  com.android.internal.telephony.gsm.SimSmsInterfaceManager arg0, java.util.ArrayList arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List access$202(  com.android.internal.telephony.gsm.SimSmsInterfaceManager arg0, java.util.List arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List access$200(  com.android.internal.telephony.gsm.SimSmsInterfaceManager arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.util.List getAllMessagesFromIccEf();
}
class SimTlv{
   @Source(SUSI_NETWORK_INFORMATION)  int getTag();
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getData();
}
class SmsBroadcastConfigInfo{
   @Source(SUSI_NETWORK_INFORMATION)  int getToServiceId();
   @Source(SUSI_NETWORK_INFORMATION)  int getFromServiceId();
   @Source(SUSI_NETWORK_INFORMATION)  int getFromCodeScheme();
   @Source(SUSI_NETWORK_INFORMATION)  int getToCodeScheme();
}
class SmsCbHeader{
   @Source(SUSI_NETWORK_INFORMATION)  int getSerialNumber();
   @Source(SUSI_NETWORK_INFORMATION)  int getServiceCategory();
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.SmsCbEtwsInfo getEtwsInfo();
   @Source(SUSI_NETWORK_INFORMATION)  int getGeographicalScope();
   @Source(SUSI_NETWORK_INFORMATION)  int getNumberOfPages();
   @Source(SUSI_NETWORK_INFORMATION)  int getDataCodingScheme();
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.SmsCbCmasInfo getCmasInfo();
   @Source(SUSI_NETWORK_INFORMATION)  int getPageIndex();
}
class SmsMessage{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(  java.lang.String arg0, java.lang.String arg1, int arg2, byte[] arg3, boolean arg4);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(  java.lang.String arg0, java.lang.String arg1, java.lang.String arg2, boolean arg3, byte[] arg4);
   @Source(SUSI_NETWORK_INFORMATION)  int getDataCodingScheme();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.SmsConstants$MessageClass getMessageClass();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(  java.lang.String arg0, java.lang.String arg1, java.lang.String arg2, boolean arg3);
   @Source(SUSI_NETWORK_INFORMATION)  int getProtocolIdentifier();
   @Source(SUSI_NETWORK_INFORMATION)  int getStatus();
   @Source(SUSI_NETWORK_INFORMATION)  int getTPLayerLengthForPDU(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(  java.lang.String arg0, java.lang.String arg1, java.lang.String arg2, boolean arg3, byte[] arg4, int arg5, int arg6, int arg7);
}
class SmsMessage$PduParser{
   @Source(SUSI_NETWORK_INFORMATION)  int getUserDataSeptetPadding();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getUserDataKSC5601(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getByte();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getUserDataGSM7Bit(  int arg0, int arg1, int arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getSCAddress();
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getUserData();
   @Source(SUSI_NETWORK_INFORMATION)  long getSCTimestampMillis();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.SmsHeader getUserDataHeader();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.gsm.GsmSmsAddress getAddress();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getUserDataUCS2(  int arg0);
}
class SpnOverride{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getSpn(  java.lang.String arg0);
}
class UsimPhoneBookManager{
   @Source(SUSI_CONTACT_INFORMATION)  java.util.ArrayList loadEfFilesFromUsim();
}
class UsimPhoneBookManager$PbrFile{
    void parseEf(  @Sink(SUSI_CONTACT_INFORMATION) com.android.internal.telephony.gsm.SimTlv arg0, @Sink(SUSI_CONTACT_INFORMATION) java.util.Map arg1, @Sink(SUSI_CONTACT_INFORMATION) int arg2);
    void parseTag(  @Sink(SUSI_CONTACT_INFORMATION) com.android.internal.telephony.gsm.SimTlv arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
}
class UsimServiceTable{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getTag();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object[] getValues();
}
class VoiceMailConstants{
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getVoiceMailNumber(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getCarrierName(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getVoiceMailTag(  java.lang.String arg0);
}

package org.xmlpull.v1;

class XmlPullParserException{
   @Source(SUSI_NO_CATEGORY)  int getLineNumber();
   @Source(SUSI_NO_CATEGORY)  int getColumnNumber();
   @Source(SUSI_NO_CATEGORY)  java.lang.Throwable getDetail();
}
class XmlPullParserFactory{
    void setNamespaceAware(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setValidating(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setFeature(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}

package com.android.internal.backup;

class IBackupTransport$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IBackupTransport$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  int startRestore(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) android.content.pm.PackageInfo[] arg1);
   @Source(SUSI_NO_CATEGORY)  int getRestoreData(  @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.backup.RestoreSet[] getAvailableRestoreSets();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NO_CATEGORY)  android.content.Intent configurationIntent();
   @Source(SUSI_NO_CATEGORY)  long getCurrentRestoreSet();
}
class LocalTransport{
    int performBackup(  @Sink(SUSI_LOG) android.content.pm.PackageInfo arg0, @Sink(SUSI_LOG) android.os.ParcelFileDescriptor arg1);
   @Source(SUSI_NO_CATEGORY)  android.app.backup.RestoreSet[] getAvailableRestoreSets();
   @Source(SUSI_NO_CATEGORY)  int getRestoreData(  @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg0);
   @Source(SUSI_NO_CATEGORY)  long getCurrentRestoreSet();
}

package java.lang.reflect;

class AccessibleObject{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSignature(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.annotation.Annotation getAnnotation(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getClassSignatureAttribute(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSignatureAttribute();
   @Source(SUSI_NO_CATEGORY)  java.lang.annotation.Annotation[] getDeclaredAnnotations();
   @Source(SUSI_NO_CATEGORY)  java.lang.annotation.Annotation[] getAnnotations();
}
class Array{
    void set(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object newInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0, @Sink(SUSI_NO_CATEGORY) int[] arg1);
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  float getFloat(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  double getDouble(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  long getLong(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object newInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  byte getByte(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getLength(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  char getChar(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  short getShort(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class Constructor{
   @Source(SUSI_NO_CATEGORY)  java.lang.Class getDeclaringClass();
   @Source(SUSI_NO_CATEGORY)  int getModifiers();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.TypeVariable[] getTypeParameters();
   @Source(SUSI_NO_CATEGORY)  java.lang.annotation.Annotation getAnnotation(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Type[] getGenericExceptionTypes();
   @Source(SUSI_NO_CATEGORY)  java.lang.annotation.Annotation[] getDeclaredAnnotations();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Type[] getGenericParameterTypes();
   @Source(SUSI_NO_CATEGORY)  java.lang.annotation.Annotation[][] getParameterAnnotations();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSignatureAttribute();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.Class[] getParameterTypes();
   @Source(SUSI_NO_CATEGORY)  java.lang.Class[] getExceptionTypes();
}
class Field{
    void setLong(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
    void setDouble(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) double arg1);
    void setByte(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) byte arg1);
    void setShort(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) short arg1);
    void set(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void setInt(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setChar(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) char arg1);
    void setFloat(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setBoolean(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSignatureAttribute();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  float getFloat(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  byte getByte(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Class getType();
   @Source(SUSI_NO_CATEGORY)  char getChar(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Class getDeclaringClass();
   @Source(SUSI_NO_CATEGORY)  double getDouble(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Type getGenericType();
   @Source(SUSI_NO_CATEGORY)  long getLong(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.annotation.Annotation[] getDeclaredAnnotations();
   @Source(SUSI_NO_CATEGORY)  int getModifiers();
   @Source(SUSI_NO_CATEGORY)  java.lang.annotation.Annotation getAnnotation(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0);
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  short getShort(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class InvocationTargetException{
   @Source(SUSI_NO_CATEGORY)  java.lang.Throwable getCause();
   @Source(SUSI_NO_CATEGORY)  java.lang.Throwable getTargetException();
}
class Method{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDefaultValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.Class getDeclaringClass();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSignatureAttribute();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Type[] getGenericExceptionTypes();
   @Source(SUSI_NO_CATEGORY)  int getModifiers();
   @Source(SUSI_NO_CATEGORY)  java.lang.Class getReturnType();
   @Source(SUSI_NO_CATEGORY)  java.lang.annotation.Annotation getAnnotation(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Class[] getExceptionTypes();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Type[] getGenericParameterTypes();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.TypeVariable[] getTypeParameters();
   @Source(SUSI_NO_CATEGORY)  java.lang.annotation.Annotation[] getDeclaredAnnotations();
   @Source(SUSI_NO_CATEGORY)  java.lang.annotation.Annotation[][] getParameterAnnotations();
   @Source(SUSI_NO_CATEGORY)  java.lang.Class[] getParameterTypes();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Type getGenericReturnType();
}
class Proxy{
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.InvocationHandler getInvocationHandler(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Class getProxyClass(  @Sink(SUSI_NO_CATEGORY) java.lang.ClassLoader arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Class[] arg1);
}
class UndeclaredThrowableException{
   @Source(SUSI_NO_CATEGORY)  java.lang.Throwable getCause();
   @Source(SUSI_NO_CATEGORY)  java.lang.Throwable getUndeclaredThrowable();
}

package com.android.systemui.power;

class PowerUI{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
}

package com.android.internal.textservice;

class ISpellCheckerService$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class ISpellCheckerService$Stub$Proxy{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.textservice.ISpellCheckerSession getISpellCheckerSession(  java.lang.String arg0, com.android.internal.textservice.ISpellCheckerSessionListener arg1, android.os.Bundle arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class ISpellCheckerSession$Stub{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class ISpellCheckerSession$Stub$Proxy{
    void onGetSuggestionsMultiple(  @Sink(SUSI_NO_CATEGORY) android.view.textservice.TextInfo[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void onGetSentenceSuggestionsMultiple(  @Sink(SUSI_NO_CATEGORY) android.view.textservice.TextInfo[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class ISpellCheckerSessionListener$Stub{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class ISpellCheckerSessionListener$Stub$Proxy{
    void onGetSuggestions(  @Sink(SUSI_NO_CATEGORY) android.view.textservice.SuggestionsInfo[] arg0);
    void onGetSentenceSuggestions(  @Sink(SUSI_NO_CATEGORY) android.view.textservice.SentenceSuggestionsInfo[] arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class ITextServicesManager$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class ITextServicesManager$Stub$Proxy{
    void finishSpellCheckerService(  @Sink(SUSI_NO_CATEGORY) com.android.internal.textservice.ISpellCheckerSessionListener arg0);
    void setCurrentSpellCheckerSubtype(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setCurrentSpellChecker(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setSpellCheckerEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(  java.lang.String arg0, boolean arg1);
    void getSpellCheckerService(  java.lang.String arg0, java.lang.String arg1, com.android.internal.textservice.ITextServicesSessionListener arg2, com.android.internal.textservice.ISpellCheckerSessionListener arg3, android.os.Bundle arg4);
   @Source(SUSI_NETWORK_INFORMATION)  android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class ITextServicesSessionListener$Stub{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class ITextServicesSessionListener$Stub$Proxy{
    void onServiceConnected(  @Sink(SUSI_NO_CATEGORY) com.android.internal.textservice.ISpellCheckerSession arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}

package org.kxml2.io;

class KXmlParser{
    void setProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void setInput(  @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void defineEntityReplacementText(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_FILE_INFORMATION)  java.lang.String getNamespaceUri(  int arg0);
   @Source(SUSI_NO_CATEGORY)  int getLineNumber();
   @Source(SUSI_NO_CATEGORY)  int getEventType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAttributeName(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getDepth();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNamespace();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNamespacePrefix(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAttributeValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  char[] getTextCharacters(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
   @Source(SUSI_NO_CATEGORY)  int getNamespaceCount(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getColumnNumber();
   @Source(SUSI_NO_CATEGORY)  int getAttributeCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAttributePrefix(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getText();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAttributeType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPublicId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRootElementName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAttributeNamespace(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPrefix();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAttributeValue(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSystemId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNamespace(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInputEncoding();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPositionDescription();
}

package com.android.emailcommon;

class TempDirectory{
   @Source(SUSI_NO_CATEGORY)  java.io.File getTempDirectory();
}
class TrafficFlags{
   @Source(SUSI_SYNCHRONIZATION_DATA)  int getSyncFlags(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.content.Context arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) com.android.emailcommon.provider.Account arg1);
   @Source(SUSI_NO_CATEGORY)  int getSmtpFlags(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.provider.Account arg1);
   @Source(SUSI_NO_CATEGORY)  int getAttachmentFlags(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.provider.Account arg1);
}

package java.beans;

class IndexedPropertyChangeEvent{
   @Source(SUSI_NO_CATEGORY)  int getIndex();
}
class PropertyChangeEvent{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPropertyName();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getNewValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getOldValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getPropagationId();
}
class PropertyChangeListenerProxy{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPropertyName();
}
class PropertyChangeSupport{
   @Source(SUSI_NO_CATEGORY)  java.beans.PropertyChangeListener[] getPropertyChangeListeners();
   @Source(SUSI_NO_CATEGORY)  java.beans.PropertyChangeListener[] getPropertyChangeListeners(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}

package org.apache.commons.logging.impl;

class Jdk14Logger{
   @Source(SUSI_NO_CATEGORY)  java.util.logging.Logger getLogger();
}

package com.android.deskclock.worldclock;

class Cities{
    void saveCitiesToSharedPrefs(  @Sink(SUSI_NO_CATEGORY) android.content.SharedPreferences arg0, @Sink(SUSI_NO_CATEGORY) java.util.HashMap arg1);
}
class CitiesActivity{
    void onCheckedChanged(  @Sink(SUSI_NO_CATEGORY) android.widget.CompoundButton arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class CitiesActivity$CityAdapter{
    void set24HoursMode(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  int getPositionForSection(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getSectionForPosition(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] getSections();
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class WorldClockAdapter{
    void loadCitiesDb(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
}

package libcore.net.http;

class AbstractHttpInputStream{
    void cacheWrite(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class ChunkedOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class FixedLengthOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class HttpConnection{
    void setupSecureSocket(  @Sink(SUSI_NO_CATEGORY) javax.net.ssl.SSLSocketFactory arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setSoTimeout(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setRecycled();
   @Source(SUSI_NO_CATEGORY)  java.net.Socket getSocket();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInputStream();
   @Source(SUSI_NO_CATEGORY)  libcore.net.http.HttpConnection$Address getAddress();
   @Source(SUSI_NO_CATEGORY)  javax.net.ssl.SSLSocket getSecureSocketIfConnected();
   @Source(SUSI_NO_CATEGORY)  java.io.OutputStream getOutputStream();
}
class HttpConnection$Address{
   @Source(SUSI_NO_CATEGORY)  java.net.Proxy getProxy();
}
class HttpConnectionPool{
    void recycle(  @Sink(SUSI_NO_CATEGORY) libcore.net.http.HttpConnection arg0);
}
class HttpEngine{
   @Source(SUSI_FILE_INFORMATION)  java.net.URI getUri();
   @Source(SUSI_NO_CATEGORY)  libcore.net.http.HttpConnection getConnection();
   @Source(SUSI_NO_CATEGORY)  libcore.net.http.RawHeaders getNetworkRequestHeaders();
   @Source(SUSI_NO_CATEGORY)  javax.net.ssl.SSLSocketFactory getSslSocketFactory();
   @Source(SUSI_NO_CATEGORY)  java.net.HttpURLConnection getHttpConnectionToCache();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getResponseBody();
   @Source(SUSI_NO_CATEGORY)  java.io.OutputStream getRequestBody();
   @Source(SUSI_NO_CATEGORY)  java.net.CacheResponse getCacheResponse();
   @Source(SUSI_NO_CATEGORY)  libcore.net.http.RequestHeaders getRequestHeaders();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getOriginAddress(  @Sink(SUSI_NO_CATEGORY) java.net.URL arg0);
   @Source(SUSI_NO_CATEGORY)  int getResponseCode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDefaultUserAgent();
   @Source(SUSI_NO_CATEGORY)  libcore.net.http.ResponseHeaders getResponseHeaders();
}
class HttpEngine$1{
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getBody();
   @Source(SUSI_NO_CATEGORY)  java.util.Map getHeaders();
}
class HttpHandler{
   @Source(SUSI_NO_CATEGORY)  int getDefaultPort();
}
class HttpURLConnectionImpl{
    void setRequestProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.security.Permission getPermission();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getResponseMessage();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInputStream();
   @Source(SUSI_NO_CATEGORY)  int getDefaultPort();
   @Source(SUSI_NO_CATEGORY)  java.util.Map getHeaderFields();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getErrorStream();
   @Source(SUSI_NO_CATEGORY)  int getChunkLength();
   @Source(SUSI_NO_CATEGORY)  int getFixedContentLength();
   @Source(SUSI_NO_CATEGORY)  java.io.OutputStream getOutputStream();
   @Source(SUSI_NO_CATEGORY)  java.util.Map getRequestProperties();
   @Source(SUSI_NO_CATEGORY)  libcore.net.http.HttpEngine getHttpEngine();
   @Source(SUSI_NO_CATEGORY)  java.net.Proxy getProxy();
}
class HttpsHandler{
   @Source(SUSI_NO_CATEGORY)  int getDefaultPort();
}
class HttpsURLConnectionImpl{
    void setIfModifiedSince(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setUseCaches(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setChunkedStreamingMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setRequestProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setRequestMethod(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setDoInput(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setInstanceFollowRedirects(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setFixedLengthStreamingMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setReadTimeout(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setAllowUserInteraction(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setDoOutput(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setDefaultUseCaches(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setConnectTimeout(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHeaderFieldKey(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Map getRequestProperties();
   @Source(SUSI_NO_CATEGORY)  int getReadTimeout();
   @Source(SUSI_NO_CATEGORY)  int getConnectTimeout();
   @Source(SUSI_NO_CATEGORY)  long getHeaderFieldDate(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  java.security.Principal getPeerPrincipal();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRequestProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  long getDate();
   @Source(SUSI_NO_CATEGORY)  java.util.Map getHeaderFields();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCipherSuite();
   @Source(SUSI_NO_CATEGORY)  java.io.OutputStream getOutputStream();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHeaderField(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.security.Permission getPermission();
   @Source(SUSI_NO_CATEGORY)  int getContentLength();
   @Source(SUSI_NO_CATEGORY)  java.net.URL getURL();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInputStream();
   @Source(SUSI_NO_CATEGORY)  long getLastModified();
   @Source(SUSI_NO_CATEGORY)  java.security.Principal getLocalPrincipal();
   @Source(SUSI_NO_CATEGORY)  long getExpiration();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRequestMethod();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getContent();
   @Source(SUSI_NO_CATEGORY)  long getIfModifiedSince();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getContent(  @Sink(SUSI_NO_CATEGORY) java.lang.Class[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getErrorStream();
   @Source(SUSI_NO_CATEGORY)  int getResponseCode();
   @Source(SUSI_NO_CATEGORY)  java.security.cert.Certificate[] getServerCertificates();
   @Source(SUSI_NO_CATEGORY)  java.security.cert.Certificate[] getLocalCertificates();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHeaderField(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getResponseMessage();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getContentType();
   @Source(SUSI_NO_CATEGORY)  libcore.net.http.HttpEngine getHttpEngine();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getContentEncoding();
}
class HttpsURLConnectionImpl$HttpUrlConnectionDelegate{
   @Source(SUSI_NO_CATEGORY)  javax.net.ssl.SSLSocket getSSLSocket();
   @Source(SUSI_NO_CATEGORY)  java.net.SecureCacheResponse getCacheResponse();
}
class HttpsURLConnectionImpl$HttpsEngine{
   @Source(SUSI_NO_CATEGORY)  javax.net.ssl.SSLSocketFactory getSslSocketFactory();
   @Source(SUSI_NO_CATEGORY)  java.net.HttpURLConnection getHttpConnectionToCache();
}
class HttpsURLConnectionImpl$ProxyConnectEngine{
   @Source(SUSI_NO_CATEGORY)  libcore.net.http.RawHeaders getNetworkRequestHeaders();
}
class RawHeaders{
    void setStatusLine(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void set(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getResponseCode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getHttpMinorVersion();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFieldName(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getResponseMessage();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getStatusLine();
   @Source(SUSI_NO_CATEGORY)  libcore.net.http.RawHeaders getAll(  @Sink(SUSI_NO_CATEGORY) java.util.Set arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class RequestHeaders{
    void setIfModifiedSince(  @Sink(SUSI_NO_CATEGORY) java.util.Date arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getConnection();
   @Source(SUSI_FILE_INFORMATION)  java.net.URI getUri();
   @Source(SUSI_NO_CATEGORY)  int getContentLength();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getIfModifiedSince();
   @Source(SUSI_NO_CATEGORY)  libcore.net.http.RawHeaders getHeaders();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUserAgent();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getContentType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getIfNoneMatch();
   @Source(SUSI_NO_CATEGORY)  int getMinFreshSeconds();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHost();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTransferEncoding();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAcceptEncoding();
   @Source(SUSI_NO_CATEGORY)  int getMaxAgeSeconds();
   @Source(SUSI_NO_CATEGORY)  int getMaxStaleSeconds();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProxyAuthorization();
}
class ResponseHeaders{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getConnection();
   @Source(SUSI_FILE_INFORMATION)  java.net.URI getUri();
   @Source(SUSI_NO_CATEGORY)  java.util.Date getExpires();
   @Source(SUSI_NO_CATEGORY)  int getMaxAgeSeconds();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getContentEncoding();
   @Source(SUSI_NO_CATEGORY)  int getSMaxAgeSeconds();
   @Source(SUSI_NO_CATEGORY)  java.util.Set getVaryFields();
   @Source(SUSI_NO_CATEGORY)  int getContentLength();
   @Source(SUSI_NO_CATEGORY)  java.util.Date getServedDate();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getEtag();
   @Source(SUSI_NO_CATEGORY)  java.util.Date getLastModified();
   @Source(SUSI_NO_CATEGORY)  libcore.net.http.RawHeaders getHeaders();
}
class RetryableOutputStream{
    void writeToSocket(  @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}

package android.filterpacks.videosink;

class MediaEncoderFilter{
    void open(  @Sink(SUSI_LOG) android.filterfw.core.FilterContext arg0);
    void process(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FilterContext arg0);
}

package android.support.v4.view;

class AccessibilityDelegateCompat{
   @Source(SUSI_NO_CATEGORY)  boolean performAccessibilityAction(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
    void sendAccessibilityEvent(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void sendAccessibilityEventUnchecked(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) android.view.accessibility.AccessibilityEvent arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getBridge();
   @Source(SUSI_NO_CATEGORY)  android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
}
class AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl{
    void sendAccessibilityEvent(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void sendAccessibilityEventUnchecked(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.accessibility.AccessibilityEvent arg2);
}
class AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl$1{
    void sendAccessibilityEvent(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl{
   @Source(SUSI_NO_CATEGORY)  boolean performAccessibilityAction(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg3);
   @Source(SUSI_NO_CATEGORY)  android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1);
}
class AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl$1{
    void sendAccessibilityEvent(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class AccessibilityDelegateCompat$AccessibilityDelegateStubImpl{
    void sendAccessibilityEvent(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1);
}
class AccessibilityDelegateCompatIcs{
    void sendAccessibilityEventUnchecked(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.accessibility.AccessibilityEvent arg2);
    void sendAccessibilityEvent(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class AccessibilityDelegateCompatIcs$1{
    void sendAccessibilityEvent(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class AccessibilityDelegateCompatJellyBean{
   @Source(SUSI_NO_CATEGORY)  boolean performAccessibilityAction(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg3);
}
class AccessibilityDelegateCompatJellyBean$1{
    void sendAccessibilityEvent(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
}
class MotionEventCompat{
   @Source(SUSI_NO_CATEGORY)  float getX(  @Sink(SUSI_NO_CATEGORY) android.view.MotionEvent arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  float getY(  @Sink(SUSI_NO_CATEGORY) android.view.MotionEvent arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getPointerId(  @Sink(SUSI_NO_CATEGORY) android.view.MotionEvent arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getActionIndex(  @Sink(SUSI_NO_CATEGORY) android.view.MotionEvent arg0);
   @Source(SUSI_NO_CATEGORY)  int getPointerCount(  @Sink(SUSI_NO_CATEGORY) android.view.MotionEvent arg0);
}
class MotionEventCompat$BaseMotionEventVersionImpl{
   @Source(SUSI_NO_CATEGORY)  int getPointerId(  @Sink(SUSI_NO_CATEGORY) android.view.MotionEvent arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  float getX(  @Sink(SUSI_NO_CATEGORY) android.view.MotionEvent arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  float getY(  @Sink(SUSI_NO_CATEGORY) android.view.MotionEvent arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getPointerCount(  @Sink(SUSI_NO_CATEGORY) android.view.MotionEvent arg0);
}
class MotionEventCompat$EclairMotionEventVersionImpl{
   @Source(SUSI_NO_CATEGORY)  float getX(  @Sink(SUSI_NO_CATEGORY) android.view.MotionEvent arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  float getY(  @Sink(SUSI_NO_CATEGORY) android.view.MotionEvent arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class PagerAdapter{
    void setPrimaryItem(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg2);
    void startUpdate(  @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg0);
    void setPrimaryItem(  @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg2);
   @Source(SUSI_NO_CATEGORY)  android.os.Parcelable saveState();
   @Source(SUSI_NO_CATEGORY)  float getPageWidth(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getPageTitle(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getItemPosition(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class VelocityTrackerCompat{
   @Source(SUSI_NO_CATEGORY)  float getYVelocity(  @Sink(SUSI_NO_CATEGORY) android.view.VelocityTracker arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  float getXVelocity(  @Sink(SUSI_NO_CATEGORY) android.view.VelocityTracker arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class VelocityTrackerCompat$BaseVelocityTrackerVersionImpl{
   @Source(SUSI_NO_CATEGORY)  float getXVelocity(  @Sink(SUSI_NO_CATEGORY) android.view.VelocityTracker arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  float getYVelocity(  @Sink(SUSI_NO_CATEGORY) android.view.VelocityTracker arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl{
   @Source(SUSI_NO_CATEGORY)  float getYVelocity(  @Sink(SUSI_NO_CATEGORY) android.view.VelocityTracker arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  float getXVelocity(  @Sink(SUSI_NO_CATEGORY) android.view.VelocityTracker arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class ViewCompat{
    void setAccessibilityDelegate(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) android.support.v4.view.AccessibilityDelegateCompat arg1);
}
class ViewCompat$BaseViewCompatImpl{
    void setAccessibilityDelegate(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) android.support.v4.view.AccessibilityDelegateCompat arg1);
}
class ViewCompat$ICSViewCompatImpl{
    void setAccessibilityDelegate(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) android.support.v4.view.AccessibilityDelegateCompat arg1);
}
class ViewCompatICS{
    void setAccessibilityDelegate(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
}
class ViewConfigurationCompat{
   @Source(SUSI_NO_CATEGORY)  int getScaledPagingTouchSlop(  @Sink(SUSI_NO_CATEGORY) android.view.ViewConfiguration arg0);
}
class ViewPager{
    void setCurrentItemInternal(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void draw(  @Sink(SUSI_NO_CATEGORY) android.graphics.Canvas arg0);
    void setCurrentItem(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setCurrentItemInternal(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void setCurrentItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.support.v4.view.PagerAdapter getAdapter();
   @Source(SUSI_NO_CATEGORY)  int getChildDrawingOrder(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getCurrentItem();
}
class ViewPager$2{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class ViewPager$MyAccessibilityDelegate{
   @Source(SUSI_NO_CATEGORY)  boolean performAccessibilityAction(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
}
class ViewPager$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}

package com.google.android.apps.lightcycle.storage;

class LocalFileStorageManager{
    boolean setPanoramaDestination(  @Sink(SUSI_LOG) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  com.google.android.apps.lightcycle.storage.LocalSessionStorage getLocalSessionStorage();
   @Source(SUSI_NO_CATEGORY)  java.io.File getSessionBaseDirectory();
   @Source(SUSI_NO_CATEGORY)  java.io.File getPanoDirectory();
}
class StorageManagerFactory{
   @Source(SUSI_NO_CATEGORY)  com.google.android.apps.lightcycle.storage.StorageManager getStorageManager();
}

package javax.security.cert;

class X509Certificate{
   @Source(SUSI_NO_CATEGORY)  javax.security.cert.X509Certificate getInstance(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  javax.security.cert.X509Certificate getInstance(  @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg0);
}
class X509Certificate$1{
   @Source(SUSI_NO_CATEGORY)  java.util.Date getNotBefore();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSigAlgName();
   @Source(SUSI_NO_CATEGORY)  java.security.PublicKey getPublicKey();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSigAlgOID();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getSerialNumber();
   @Source(SUSI_NO_CATEGORY)  java.security.Principal getIssuerDN();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  byte[] getSigAlgParams();
   @Source(SUSI_NO_CATEGORY)  java.util.Date getNotAfter();
   @Source(SUSI_NO_CATEGORY)  java.security.Principal getSubjectDN();
}

package java.math;

class BigDecimal{
   @Source(SUSI_NO_CATEGORY)  java.math.BigDecimal setScale(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.math.BigDecimal setScale(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.math.BigDecimal setScale(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.math.RoundingMode arg1);
   @Source(SUSI_NO_CATEGORY)  java.math.BigDecimal divideToIntegralValue(  @Sink(SUSI_NO_CATEGORY) java.math.BigDecimal arg0, @Sink(SUSI_NO_CATEGORY) java.math.MathContext arg1);
}
class BigInt{
    void setSign(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] bigEndianMagnitude();
   @Source(SUSI_NO_CATEGORY)  int getNativeBIGNUM();
}
class BigInteger{
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger setBit(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getLowestSetBit();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInt getBigInt();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger copy();
   @Source(SUSI_NO_CATEGORY)  int getFirstNonzeroDigit();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger shiftLeftOneBit();
   @Source(SUSI_NO_CATEGORY)  byte[] toByteArray();
}
class MathContext{
   @Source(SUSI_NO_CATEGORY)  int getPrecision();
   @Source(SUSI_NO_CATEGORY)  java.math.RoundingMode getRoundingMode();
}

package android.gesture;

class Gesture{
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap toBitmap(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
   @Source(SUSI_NO_CATEGORY)  android.graphics.RectF getBoundingBox();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap toBitmap(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getStrokes();
   @Source(SUSI_NO_CATEGORY)  int getStrokesCount();
   @Source(SUSI_NO_CATEGORY)  float getLength();
   @Source(SUSI_NO_CATEGORY)  long getID();
}
class GestureLibrary{
    void setSequenceType(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setOrientationStyle(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getOrientationStyle();
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList recognize(  @Sink(SUSI_NO_CATEGORY) android.gesture.Gesture arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Set getGestureEntries();
   @Source(SUSI_NO_CATEGORY)  android.gesture.Learner getLearner();
   @Source(SUSI_NO_CATEGORY)  int getSequenceType();
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getGestures(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class GestureStore{
    void addGesture(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.gesture.Gesture arg1);
    void save(  @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg0);
   @Source(SUSI_NO_CATEGORY)  android.gesture.Learner getLearner();
   @Source(SUSI_NO_CATEGORY)  java.util.Set getGestureEntries();
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList recognize(  @Sink(SUSI_NO_CATEGORY) android.gesture.Gesture arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getGestures(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getSequenceType();
   @Source(SUSI_NO_CATEGORY)  int getOrientationStyle();
}
class GestureStroke{
   @Source(SUSI_NO_CATEGORY)  android.graphics.Path getPath();
}
class Learner{
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getInstances();
}

package com.android.server.usb;

class UsbDebuggingManager{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1);
    void setAdbEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void access$700(  @Sink(SUSI_NO_CATEGORY) com.android.server.usb.UsbDebuggingManager arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class UsbDeviceManager{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  android.os.ParcelFileDescriptor openAccessory(  @Sink(SUSI_SYSTEM_SETTINGS) android.hardware.usb.UsbAccessory arg0);
    void setMassStorageBackingFile(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
    void setCurrentFunctions(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  android.hardware.usb.UsbAccessory getCurrentAccessory();
   @Source(SUSI_NO_CATEGORY)  java.lang.String access$400();
}
class UsbDeviceManager$UsbHandler{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1);
    void sendMessage(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg1, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg2);
    void sendMessage(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg1);
    void sendMessage(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  android.hardware.usb.UsbAccessory getCurrentAccessory();
}
class UsbHostManager{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1);
   @Source(SUSI_NO_CATEGORY)  android.os.ParcelFileDescriptor openDevice(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void getDeviceList(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
}
class UsbService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void setAccessoryPackage(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbAccessory arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  boolean hasDevicePermission(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbDevice arg0);
   @Source(SUSI_NO_CATEGORY)  boolean hasDefaults(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setCurrentFunction(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  boolean hasAccessoryPermission(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbAccessory arg0);
    void setDevicePackage(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbDevice arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  android.os.ParcelFileDescriptor openDevice(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setMassStorageBackingFile(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.ParcelFileDescriptor openAccessory(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbAccessory arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.hardware.usb.UsbAccessory getCurrentAccessory();
}
class UsbSettingsManager{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1);
   @Source(SUSI_NO_CATEGORY)  boolean hasPermission(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbAccessory arg0);
    void deviceDetached(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbDevice arg0);
    void accessoryDetached(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbAccessory arg0);
    void requestPermission(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbAccessory arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.app.PendingIntent arg2);
    void grantDevicePermission(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbDevice arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void grantAccessoryPermission(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbAccessory arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void requestPermission(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbDevice arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.app.PendingIntent arg2);
    void deviceAttached(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbDevice arg0);
    void setDevicePackage(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbDevice arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void accessoryAttached(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbAccessory arg0);
   @Source(SUSI_NO_CATEGORY)  boolean hasPermission(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbDevice arg0);
    void setAccessoryPackage(  @Sink(SUSI_NO_CATEGORY) android.hardware.usb.UsbAccessory arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}

package com.android.camera.ui;

class CameraSwitcher{
    void setOrientation(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class EffectSettingPopup{
    void setVisibility(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class InLineSettingItem{
    void setTitle(  @Sink(SUSI_NO_CATEGORY) com.android.camera.ListPreference arg0);
}
class InLineSettingSwitch{
    void setEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class ListPrefSettingPopup$ListPrefSettingAdapter{
    void setViewImage(  @Sink(SUSI_NO_CATEGORY) android.widget.ImageView arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class MoreSettingPopup{
    void setPreferenceEnabled(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class MoreSettingPopup$MoreSettingAdapter{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
}
class OverlayRenderer{
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  int getHeight();
}
class PieItem{
    void setBounds(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setImageResource(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  float getAnimationAngle();
   @Source(SUSI_NO_CATEGORY)  float getSweep();
   @Source(SUSI_NO_CATEGORY)  float getStartAngle();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicWidth();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Path getPath();
   @Source(SUSI_NO_CATEGORY)  int getInnerRadius();
   @Source(SUSI_NO_CATEGORY)  java.util.List getItems();
   @Source(SUSI_NO_CATEGORY)  int getOuterRadius();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicHeight();
   @Source(SUSI_NO_CATEGORY)  float getCenter();
}
class PieRenderer{
    void onDraw(  @Sink(SUSI_NO_CATEGORY) android.graphics.Canvas arg0);
   @Source(SUSI_NO_CATEGORY)  int getSize();
}
class PieRenderer$LinearAnimation{
   @Source(SUSI_NO_CATEGORY)  float getValue();
}
class PopupManager{
    void notifyShowPopup(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.camera.ui.PopupManager getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class RenderOverlay{
   @Source(SUSI_NO_CATEGORY)  int getWindowPositionY();
   @Source(SUSI_NO_CATEGORY)  int getWindowPositionX();
}
class RotateLayout{
    void setOrientation(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class Switch{
    void setChecked(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setSwitchTextAppearance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getCompoundPaddingRight();
}
class TimeIntervalPopup{
    void setTimeSelectionEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setVisibility(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class TwoStateImageView{
    void setEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class ZoomRenderer{
    void setZoom(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setZoomValue(  @Sink(SUSI_NO_CATEGORY) int arg0);
}

package libcore.net.url;

class FileURLConnection{
   @Source(SUSI_NO_CATEGORY)  java.security.Permission getPermission();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInputStream();
   @Source(SUSI_NO_CATEGORY)  int getContentLength();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getContentType();
}
class FtpHandler{
   @Source(SUSI_NO_CATEGORY)  int getDefaultPort();
}
class FtpURLConnection{
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInputStream();
   @Source(SUSI_NO_CATEGORY)  java.security.Permission getPermission();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getContentType();
   @Source(SUSI_NO_CATEGORY)  java.io.OutputStream getOutputStream();
}
class JarURLConnectionImpl{
    void setDefaultUseCaches(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setUseCaches(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.jar.JarFile getJarFile();
   @Source(SUSI_NO_CATEGORY)  java.util.jar.JarFile openJarFile();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getContent();
   @Source(SUSI_NO_CATEGORY)  boolean getDefaultUseCaches();
   @Source(SUSI_NO_CATEGORY)  java.util.jar.JarEntry getJarEntry();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInputStream();
   @Source(SUSI_NO_CATEGORY)  boolean getUseCaches();
   @Source(SUSI_NO_CATEGORY)  java.security.Permission getPermission();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getContentType();
   @Source(SUSI_NO_CATEGORY)  int getContentLength();
}
class UrlUtils{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSchemePrefix(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}

package com.android.org.bouncycastle.util.io.pem;

class PemGenerationException{
   @Source(SUSI_NO_CATEGORY)  java.lang.Throwable getCause();
}
class PemHeader{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
}
class PemObject{
   @Source(SUSI_NO_CATEGORY)  byte[] getContent();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType();
   @Source(SUSI_NO_CATEGORY)  java.util.List getHeaders();
}
class PemWriter{
   @Source(SUSI_NO_CATEGORY)  int getOutputSize(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.util.io.pem.PemObject arg0);
}

package com.android.bluetooth.a2dp;

class A2dpService{
    boolean connect(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0);
    boolean setPriority(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) int arg1);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getName();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getDevicesMatchingConnectionStates(  int[] arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  com.android.bluetooth.btservice.ProfileService$IProfileServiceBinder initBinder();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getConnectionState(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getPriority(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  com.android.bluetooth.a2dp.A2dpService getA2dpService();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getConnectedDevices();
}
class A2dpService$BluetoothA2dpBinder{
    boolean setPriority(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) int arg1);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getDevicesMatchingConnectionStates(  int[] arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getConnectedDevices();
}
class A2dpStateMachine{
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getDevicesMatchingConnectionStates(  int[] arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getConnectedDevices();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getConnectionState(  android.bluetooth.BluetoothDevice arg0);
}
class A2dpStateMachine$Connected{
    boolean processMessage(  @Sink(SUSI_BLUETOOTH) android.os.Message arg0);
}
class A2dpStateMachine$Disconnected{
    boolean processMessage(  @Sink(SUSI_BLUETOOTH) android.os.Message arg0);
}
class A2dpStateMachine$Pending{
    boolean processMessage(  @Sink(SUSI_BLUETOOTH) android.os.Message arg0);
}

package com.android.internal.os;

class AndroidPrintStream{
    void log(  @Sink(SUSI_LOG) java.lang.String arg0);
}
class AtomicFile{
   @Source(SUSI_NO_CATEGORY)  byte[] readFully();
   @Source(SUSI_NO_CATEGORY)  java.io.File getBaseFile();
}
class BatteryStatsImpl{
    void readFromParcelLocked(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0);
    void writeSummaryToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0);
    void writeToParcelWithoutUids(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setOnBattery(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void writeToParcelLocked(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setNumSpeedSteps(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void writeHistory(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void dumpLocked(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0);
    void setRadioScanningTimeout(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  long getTotalTcpBytesReceived(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  long getBatteryRealtime(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  int getBluetoothPingCount();
   @Source(SUSI_SYSTEM_SETTINGS)  long getWifiOnTime(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  int getInputEventCount(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  int getLowDischargeAmountSinceCharge();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.os.BatteryStatsImpl$SamplingTimer getKernelWakelockTimerLocked(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  int getDischargeAmountScreenOnSinceCharge();
   @Source(SUSI_SYSTEM_SETTINGS)  long getAwakeTimeBattery();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv getServiceStatsLocked(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2);
   @Source(SUSI_SYSTEM_SETTINGS)  long getGlobalWifiRunningTime(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  long getBatteryRealtimeLocked(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  long getPhoneSignalStrengthTime(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) long arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
   @Source(SUSI_SYSTEM_SETTINGS)  long getMobileTcpBytesSent(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  long getScreenOnTime(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  long getBluetoothOnTime(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  int getDischargeAmountScreenOffSinceCharge();
   @Source(SUSI_SYSTEM_SETTINGS)  long getPhoneOnTime(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  int getPhoneDataConnectionCount(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  java.util.Map getKernelWakelockStats();
   @Source(SUSI_SYSTEM_SETTINGS)  long getHistoryBaseTime();
   @Source(SUSI_SYSTEM_SETTINGS)  byte[] readFully(  @Sink(SUSI_SYSTEM_SETTINGS) java.io.FileInputStream arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  int getStartCount();
   @Source(SUSI_SYSTEM_SETTINGS)  int getDischargeStartLevel();
   @Source(SUSI_SYSTEM_SETTINGS)  long getPhoneDataConnectionTime(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) long arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
   @Source(SUSI_SYSTEM_SETTINGS)  long getScreenBrightnessTime(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) long arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
   @Source(SUSI_SYSTEM_SETTINGS)  android.util.SparseArray getUidStats();
   @Source(SUSI_SYSTEM_SETTINGS)  int getPhoneSignalStrengthCount(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  long getBatteryUptime(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  long getRadioDataUptime();
   @Source(SUSI_SYSTEM_SETTINGS)  long getAwakeTimePlugged();
   @Source(SUSI_SYSTEM_SETTINGS)  int getDischargeCurrentLevelLocked();
   @Source(SUSI_SYSTEM_SETTINGS)  int getDischargeAmountScreenOff();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.os.BatteryStatsImpl$Uid$Pkg getPackageStatsLocked(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  long getMobileTcpBytesReceived(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  int getHighDischargeAmountSinceCharge();
   @Source(SUSI_SYSTEM_SETTINGS)  long getRadioDataUptimeMs();
   @Source(SUSI_SYSTEM_SETTINGS)  long getPhoneSignalScanningTime(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  int getDischargeAmountScreenOn();
   @Source(SUSI_SYSTEM_SETTINGS)  int getDischargeCurrentLevel();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.os.BatteryStatsImpl$Uid getUidStatsLocked(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  long getBatteryUptimeLocked();
   @Source(SUSI_SYSTEM_SETTINGS)  long getTotalTcpBytesSent(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  int getCpuSpeedSteps();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getIsOnBattery();
   @Source(SUSI_SYSTEM_SETTINGS)  long getBatteryUptimeLocked(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  int getDischargeStartLevelLocked();
   @Source(SUSI_SYSTEM_SETTINGS)  long getProcessWakeTime(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) long arg2);
}
class BatteryStatsImpl$Counter{
    void logState(  @Sink(SUSI_NO_CATEGORY) android.util.Printer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void writeCounterToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) com.android.internal.os.BatteryStatsImpl$Counter arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  int getCountLocked(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
}
class BatteryStatsImpl$SamplingTimer{
    void logState(  @Sink(SUSI_NO_CATEGORY) android.util.Printer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void writeSummaryFromParcelLocked(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  int getUpdateVersion();
}
class BatteryStatsImpl$StopwatchTimer{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
    void logState(  @Sink(SUSI_NO_CATEGORY) android.util.Printer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class BatteryStatsImpl$Timer{
    void writeTimerToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) com.android.internal.os.BatteryStatsImpl$Timer arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
    void logState(  @Sink(SUSI_NO_CATEGORY) android.util.Printer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  long getTotalTimeLocked(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  int getCountLocked(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
}
class BatteryStatsImpl$Uid{
    void readFromParcelLocked(  @Sink(SUSI_NO_CATEGORY) java.util.ArrayList arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1);
    void writeToParcelLocked(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  long getWifiMulticastTime(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  java.util.Map getPackageStats();
   @Source(SUSI_SYSTEM_SETTINGS)  int getUid();
   @Source(SUSI_SYSTEM_SETTINGS)  android.os.BatteryStats$Uid$Pid getPidStatsLocked(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  long getWifiScanTime(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.os.BatteryStatsImpl getBatteryStats();
   @Source(SUSI_SYSTEM_SETTINGS)  android.util.SparseArray getPidStats();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.os.BatteryStatsImpl$StopwatchTimer getWakeTimerLocked(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  java.util.Map getSensorStats();
   @Source(SUSI_SYSTEM_SETTINGS)  int getUserActivityCount(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv getServiceStatsLocked(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  long getAudioTurnedOnTime(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.os.BatteryStatsImpl$Uid$Pkg getPackageStatsLocked(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  java.util.Map getWakelockStats();
   @Source(SUSI_SYSTEM_SETTINGS)  long getTcpBytesSent(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  long getVideoTurnedOnTime(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  long getFullWifiLockTime(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  long getTcpBytesReceived(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  java.util.Map getProcessStats();
   @Source(SUSI_SYSTEM_SETTINGS)  long getWifiRunningTime(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.os.BatteryStatsImpl$StopwatchTimer getSensorTimerLocked(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg1);
}
class BatteryStatsImpl$Uid$Pkg{
    void readFromParcelLocked(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0);
    void writeToParcelLocked(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  java.util.Map getServiceStats();
   @Source(SUSI_SYSTEM_SETTINGS)  int getWakeups(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.os.BatteryStatsImpl getBatteryStats();
}
class BatteryStatsImpl$Uid$Pkg$Serv{
   @Source(SUSI_SYSTEM_SETTINGS)  long getStartTimeToNowLocked(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  int getLaunches(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  int getStarts(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.os.BatteryStatsImpl getBatteryStats();
   @Source(SUSI_SYSTEM_SETTINGS)  long getLaunchTimeToNowLocked(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  long getStartTime(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
}
class BatteryStatsImpl$Uid$Proc{
    void writeToParcelLocked(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  long getTimeAtCpuSpeedStep(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  int getStarts(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  long getForegroundTime(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  long getUserTime(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.os.BatteryStatsImpl getBatteryStats();
   @Source(SUSI_SYSTEM_SETTINGS)  android.os.BatteryStats$Uid$Proc$ExcessivePower getExcessivePower(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  long getSystemTime(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
}
class BatteryStatsImpl$Uid$Sensor{
    void writeToParcelLocked(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  int getHandle();
   @Source(SUSI_SYSTEM_SETTINGS)  android.os.BatteryStats$Timer getSensorTime();
}
class BatteryStatsImpl$Uid$Wakelock{
    void writeToParcelLocked(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  android.os.BatteryStats$Timer getWakeTime(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
}
class BinderInternal{
    void forceGc(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  long getLastGcTime();
}
class HandlerCaller{
    void sendMessage(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
}
class IDropBoxManagerService$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IDropBoxManagerService$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  boolean isTagEnabled(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.DropBoxManager$Entry getNextEntry(  java.lang.String arg0, long arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class IResultReceiver$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IResultReceiver$Stub$Proxy{
    void send(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class LoggingPrintStream{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class PowerProfile{
   @Source(SUSI_NO_CATEGORY)  double getAveragePower(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  double getBatteryCapacity();
   @Source(SUSI_NO_CATEGORY)  double getAveragePower(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getNumSpeedSteps();
}
class ProcessStats{
   @Source(SUSI_NO_CATEGORY)  long[] getLastCpuSpeedTimes();
   @Source(SUSI_NO_CATEGORY)  int getLastSystemTime();
   @Source(SUSI_NO_CATEGORY)  int getLastSoftIrqTime();
   @Source(SUSI_NO_CATEGORY)  int getLastIrqTime();
   @Source(SUSI_NO_CATEGORY)  com.android.internal.os.ProcessStats$Stats getStats(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getCpuTimeForPid(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getLastUserTime();
   @Source(SUSI_NO_CATEGORY)  int getLastIoWaitTime();
   @Source(SUSI_NO_CATEGORY)  float getTotalCpuPercent();
   @Source(SUSI_NO_CATEGORY)  int getLastIdleTime();
   @Source(SUSI_NO_CATEGORY)  com.android.internal.os.ProcessStats$Stats getWorkingStats(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class RuntimeInit{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder getApplicationObject();
}
class RuntimeInit$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getId();
}
class ZygoteConnection{
   @Source(SUSI_NO_CATEGORY)  java.io.FileDescriptor getFileDesciptor();
}

package com.android.internal.view.menu;

class ActionMenuItem{
   @Source(SUSI_NO_CATEGORY)  android.view.MenuItem setShowAsActionFlags(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.MenuItem setTitle(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setShowAsAction(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.MenuItem setActionView(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.MenuItem setEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.MenuItem setChecked(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.internal.view.menu.ActionMenuItem setExclusiveCheckable(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.MenuItem setVisible(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.MenuItem setActionView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.MenuItem setCheckable(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.MenuItem setActionProvider(  @Sink(SUSI_NO_CATEGORY) android.view.ActionProvider arg0);
   @Source(SUSI_NO_CATEGORY)  int getOrder();
   @Source(SUSI_NO_CATEGORY)  android.view.SubMenu getSubMenu();
   @Source(SUSI_NO_CATEGORY)  int getGroupId();
   @Source(SUSI_NO_CATEGORY)  char getNumericShortcut();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getIcon();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTitleCondensed();
   @Source(SUSI_NO_CATEGORY)  int getItemId();
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getIntent();
   @Source(SUSI_NO_CATEGORY)  android.view.ContextMenu$ContextMenuInfo getMenuInfo();
   @Source(SUSI_NO_CATEGORY)  android.view.View getActionView();
   @Source(SUSI_NO_CATEGORY)  android.view.ActionProvider getActionProvider();
   @Source(SUSI_NO_CATEGORY)  char getAlphabeticShortcut();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTitle();
}
class ActionMenuItemView{
    void setChecked(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setCheckable(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setShortcut(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) char arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.internal.view.menu.MenuItemImpl getItemData();
}
class ActionMenuPresenter{
    void updateMenuView(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getItemView(  @Sink(SUSI_NO_CATEGORY) com.android.internal.view.menu.MenuItemImpl arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.internal.view.menu.MenuView getMenuView(  @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg0);
}
class ActionMenuView{
   @Source(SUSI_NO_CATEGORY)  boolean invokeItem(  @Sink(SUSI_NO_CATEGORY) com.android.internal.view.menu.MenuItemImpl arg0);
   @Source(SUSI_NO_CATEGORY)  int getWindowAnimations();
}
class BaseMenuPresenter{
   @Source(SUSI_NO_CATEGORY)  android.view.View getItemView(  @Sink(SUSI_NO_CATEGORY) com.android.internal.view.menu.MenuItemImpl arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.internal.view.menu.MenuView getMenuView(  @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg0);
   @Source(SUSI_NO_CATEGORY)  int getId();
}
class ListMenuItemView{
    void setCheckable(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setIcon(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
    void setChecked(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setShortcut(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) char arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.internal.view.menu.MenuItemImpl getItemData();
}
class MenuBuilder{
   @Source(SUSI_NO_CATEGORY)  com.android.internal.view.menu.MenuBuilder setHeaderViewInt(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
    void setGroupVisible(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.internal.view.menu.MenuBuilder setHeaderTitleInt(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void saveActionViewStates(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
   @Source(SUSI_NO_CATEGORY)  boolean performIdentifierAction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setGroupEnabled(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void restoreActionViewStates(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
    void setGroupCheckable(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void setShortcutsVisible(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.internal.view.menu.MenuBuilder setHeaderIconInt(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.internal.view.menu.MenuBuilder setHeaderIconInt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getActionViewStatesKey();
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getNonActionItems();
   @Source(SUSI_NO_CATEGORY)  com.android.internal.view.menu.MenuBuilder getRootMenu();
   @Source(SUSI_NO_CATEGORY)  com.android.internal.view.menu.MenuItemImpl getExpandedItem();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getHeaderTitle();
   @Source(SUSI_NO_CATEGORY)  android.view.MenuItem getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.res.Resources getResources();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getHeaderIcon();
   @Source(SUSI_NO_CATEGORY)  android.view.SubMenu addSubMenu(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg3);
   @Source(SUSI_NO_CATEGORY)  boolean getOptionalIconsVisible();
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getActionItems();
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getVisibleItems();
   @Source(SUSI_NO_CATEGORY)  int addIntentOptions(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg3, @Sink(SUSI_NO_CATEGORY) android.content.Intent[] arg4, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg5, @Sink(SUSI_NO_CATEGORY) int arg6, @Sink(SUSI_NO_CATEGORY) android.view.MenuItem[] arg7);
   @Source(SUSI_NO_CATEGORY)  android.view.View getHeaderView();
}
class MenuItemImpl{
   @Source(SUSI_NO_CATEGORY)  android.view.MenuItem setChecked(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.MenuItem setShowAsActionFlags(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setIsActionButton(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.MenuItem setAlphabeticShortcut(  @Sink(SUSI_NO_CATEGORY) char arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.MenuItem setVisible(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setExclusiveCheckable(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.MenuItem setTitle(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.MenuItem setEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setVisibleInt(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.MenuItem setActionView(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.MenuItem setCheckable(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  char getShortcut();
   @Source(SUSI_NO_CATEGORY)  char getNumericShortcut();
   @Source(SUSI_NO_CATEGORY)  java.lang.Runnable getCallback();
   @Source(SUSI_NO_CATEGORY)  android.view.ActionProvider getActionProvider();
   @Source(SUSI_NO_CATEGORY)  int getGroupId();
   @Source(SUSI_NO_CATEGORY)  android.view.SubMenu getSubMenu();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getShortcutLabel();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getIcon();
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getIntent();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTitleCondensed();
   @Source(SUSI_NO_CATEGORY)  int getOrder();
   @Source(SUSI_NO_CATEGORY)  int getOrdering();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTitleForItemView(  @Sink(SUSI_NO_CATEGORY) com.android.internal.view.menu.MenuView$ItemView arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getActionView();
   @Source(SUSI_NO_CATEGORY)  android.view.ContextMenu$ContextMenuInfo getMenuInfo();
   @Source(SUSI_NO_CATEGORY)  char getAlphabeticShortcut();
   @Source(SUSI_NO_CATEGORY)  int getItemId();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTitle();
}
class MenuPopupHelper{
    void onItemClick(  @Sink(SUSI_NO_CATEGORY) android.widget.AdapterView arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) long arg3);
   @Source(SUSI_NO_CATEGORY)  int getId();
   @Source(SUSI_NO_CATEGORY)  com.android.internal.view.menu.MenuView getMenuView(  @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg0);
}
class MenuPopupHelper$MenuAdapter{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.internal.view.menu.MenuItemImpl getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class SubMenuBuilder{
   @Source(SUSI_NO_CATEGORY)  android.view.SubMenu setHeaderTitle(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.SubMenu setHeaderIcon(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.SubMenu setHeaderIcon(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.SubMenu setIcon(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.SubMenu setHeaderView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
    void setShortcutsVisible(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setQwertyMode(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.SubMenu setIcon(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getActionViewStatesKey();
   @Source(SUSI_NO_CATEGORY)  android.view.MenuItem getItem();
   @Source(SUSI_NO_CATEGORY)  com.android.internal.view.menu.MenuBuilder getRootMenu();
   @Source(SUSI_NO_CATEGORY)  android.view.Menu getParentMenu();
}

package com.android.browser.addbookmark;

class FolderSpinner{
    void setSelection(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSelectionIgnoringSelectionChange(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class FolderSpinnerAdapter{
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getDropDownView(  @Sink(SUSI_BROWSER_INFORMATION) int arg0, @Sink(SUSI_BROWSER_INFORMATION) android.view.View arg1, @Sink(SUSI_BROWSER_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getView(  @Sink(SUSI_BROWSER_INFORMATION) int arg0, @Sink(SUSI_BROWSER_INFORMATION) android.view.View arg1, @Sink(SUSI_BROWSER_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_BROWSER_INFORMATION)  long getItemId(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getCount();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.Object getItem(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
}

package com.android.contacts.quickcontact;

class ActionMultiMap{
    void put(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.quickcontact.Action arg1, @Sink(SUSI_CONTACT_INFORMATION) boolean arg2);
}
class DataAction{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getBody();
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent getIntent();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getAlternateIconDescription();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getMimeType();
   @Source(SUSI_CONTACT_INFORMATION)  int getPresence();
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent getAlternateIntent();
   @Source(SUSI_CONTACT_INFORMATION)  android.graphics.drawable.Drawable getAlternateIcon();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getSubtitle();
}
class FloatingChildLayout{
    void setBackground(  @Sink(SUSI_CONTACT_INFORMATION) android.graphics.drawable.Drawable arg0);
    void setBackgroundColorAlpha(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class QuickContactActivity$ViewPagerAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Fragment getItem(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getCount();
}
class QuickContactListFragment$1{
   @Source(SUSI_CONTACT_INFORMATION)  long getItemId(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getCount();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Object getItem(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
}
class ResolveCache{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getDescription(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.quickcontact.Action arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.quickcontact.ResolveCache$Entry getEntry(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.quickcontact.Action arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.pm.ResolveInfo getBestResolve(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Intent arg0, @Sink(SUSI_CONTACT_INFORMATION) java.util.List arg1);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.quickcontact.ResolveCache getInstance(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.graphics.drawable.Drawable getIcon(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.quickcontact.Action arg0);
}

package com.android.wallpaper.fall;

class ScriptC_fall{
    void bind_g_Constants(  @Sink(SUSI_NO_CATEGORY) com.android.wallpaper.fall.ScriptField_Constants arg0);
}
class ScriptField_Constants{
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Element createElement(  @Sink(SUSI_NO_CATEGORY) android.renderscript.RenderScript arg0);
}

package com.android.systemui.media;

class NotificationPlayer{
    void setUsesWakeLock(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class RingtonePlayer{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
}

package com.googlecode.mp4parser.util;

class ByteBufferByteChannel{
   @Source(SUSI_NO_CATEGORY)  int write(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0);
}

package com.android.musicfx;

class Compatibility$Receiver{
    void onReceive(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1);
}
class ControlPanelEffect{
    void openSession(  @Sink(SUSI_LOG) android.content.Context arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) int arg2);
    void setParameterInt(  @Sink(SUSI_LOG) android.content.Context arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) int arg2, @Sink(SUSI_LOG) com.android.musicfx.ControlPanelEffect$Key arg3, @Sink(SUSI_LOG) int arg4, @Sink(SUSI_LOG) int arg5);
    void setParameterBoolean(  @Sink(SUSI_LOG) android.content.Context arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) int arg2, @Sink(SUSI_LOG) com.android.musicfx.ControlPanelEffect$Key arg3, @Sink(SUSI_LOG) boolean arg4);
    void initEffectsPreferences(  @Sink(SUSI_LOG) android.content.Context arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) int arg2);
    void setParameterInt(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) com.android.musicfx.ControlPanelEffect$Key arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
   @Source(SUSI_NO_CATEGORY)  com.android.musicfx.ControlPanelEffect$ControlMode getControlMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Boolean getParameterBoolean(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) com.android.musicfx.ControlPanelEffect$Key arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getParameterString(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) com.android.musicfx.ControlPanelEffect$Key arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
   @Source(SUSI_NO_CATEGORY)  int[] getParameterIntArray(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) com.android.musicfx.ControlPanelEffect$Key arg3);
   @Source(SUSI_NO_CATEGORY)  int getParameterInt(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getParameterString(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
   @Source(SUSI_NO_CATEGORY)  int getParameterInt(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) com.android.musicfx.ControlPanelEffect$Key arg3);
}

package android.filterfw.core;

class AsyncRunner{
    void setGraph(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FilterGraph arg0);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FilterGraph getGraph();
   @Source(SUSI_NO_CATEGORY)  java.lang.Exception getError();
}
class CachedFrameManager{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Frame newFrame(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg0);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Frame retainFrame(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.Frame arg0);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Frame newBoundFrame(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Frame releaseFrame(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.Frame arg0);
}
class FieldPort{
    void setFieldFrame(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.Frame arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setFrame(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.Frame arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getTarget();
}
class Filter{
    void addOutputPort(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) android.filterfw.core.FrameFormat arg1);
    void addProgramPort(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) java.lang.reflect.Field arg2, @Sink(SUSI_LOG) java.lang.Class arg3, @Sink(SUSI_LOG) boolean arg4);
    void addOutputBasedOnInput(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1);
    void addFieldPort(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.reflect.Field arg1, @Sink(SUSI_LOG) boolean arg2, @Sink(SUSI_LOG) boolean arg3);
    void addMaskedInputPort(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) android.filterfw.core.FrameFormat arg1);
    void setInputValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void setWaitsOnInputPort(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setInputFrame(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.Frame arg1);
    void setWaitsOnOutputPort(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  int getStatus();
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  int getNumberOfConnectedInputs();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getOutputPorts();
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getInputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.OutputPort getOutputPort(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getInputPorts();
   @Source(SUSI_NO_CATEGORY)  int getSleepDelay();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  int getNumberOfInputs();
   @Source(SUSI_NO_CATEGORY)  int getNumberOfOutputs();
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.InputPort getInputPort(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFilterClassName();
   @Source(SUSI_NO_CATEGORY)  int getNumberOfConnectedOutputs();
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class FilterContext{
    void storeFrame(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.Frame arg1);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.GLEnvironment getGLEnvironment();
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameManager getFrameManager();
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Frame fetchFrame(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class FilterFactory{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Filter createFilterByClassName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class FilterFunction{
    void setInputFrame(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.Frame arg1);
    void setInputValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FilterContext getContext();
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Filter getFilter();
}
class FilterGraph{
   @Source(SUSI_NO_CATEGORY)  boolean addFilter(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.Filter arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Set getFilters();
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Filter getFilter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class FilterPort{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Filter getFilter();
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getPortFormat();
}
class FilterSurfaceView{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.GLEnvironment getGLEnv();
   @Source(SUSI_NO_CATEGORY)  int getSurfaceId();
}
class FinalPort{
    void setFieldFrame(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.Frame arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class Frame{
    void setGenericObjectValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
    void setData(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setFormat(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg0);
    void setDataFromFrame(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.Frame arg0);
    void setData(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0);
    void setObjectValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Frame retain();
   @Source(SUSI_NO_CATEGORY)  long getBindingId();
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getFormat();
   @Source(SUSI_NO_CATEGORY)  long getTimestamp();
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameManager getFrameManager();
   @Source(SUSI_NO_CATEGORY)  int getCapacity();
   @Source(SUSI_NO_CATEGORY)  int getBindingType();
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Frame release();
   @Source(SUSI_NO_CATEGORY)  int getRefCount();
}
class FrameFormat{
   @Source(SUSI_NO_CATEGORY)  int getTarget();
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  int getBaseType();
   @Source(SUSI_NO_CATEGORY)  int getSize();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getMetaValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int[] getDimensions();
   @Source(SUSI_NO_CATEGORY)  int getNumberOfDimensions();
   @Source(SUSI_NO_CATEGORY)  int getLength();
   @Source(SUSI_NO_CATEGORY)  int getBytesPerSample();
   @Source(SUSI_NO_CATEGORY)  java.lang.Class getObjectClass();
   @Source(SUSI_NO_CATEGORY)  int getDepth();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  int getValuesPerSample();
   @Source(SUSI_NO_CATEGORY)  int getDimension(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getDimensionCount();
}
class FrameManager{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Frame duplicateFrame(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.Frame arg0);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Frame duplicateFrameToTarget(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.Frame arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FilterContext getContext();
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.GLEnvironment getGLEnvironment();
}
class GLEnvironment{
    void setSurfaceTimestamp(  @Sink(SUSI_NO_CATEGORY) long arg0);
}
class GLFrame{
    void setTextureParameter(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setBitmap(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0);
    void setViewport(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setInts(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
    void setFloats(  @Sink(SUSI_NO_CATEGORY) float[] arg0);
    void setViewport(  @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg0);
    void setData(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setDataFromFrame(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.Frame arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getObjectValue();
   @Source(SUSI_NO_CATEGORY)  float[] getFloats();
   @Source(SUSI_NO_CATEGORY)  int getFboId();
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer getData();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getBitmap();
   @Source(SUSI_NO_CATEGORY)  int[] getInts();
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.GLEnvironment getGLEnvironment();
   @Source(SUSI_NO_CATEGORY)  int getTextureId();
}
class GLFrameTimer{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.StopWatchMap get();
}
class GraphRunner{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FilterContext getContext();
}
class InputPort{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.OutputPort getSourcePort();
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getSourceFormat();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getTarget();
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Filter getSourceFilter();
}
class KeyValueMap{
    void setKeyValues(  @Sink(SUSI_NO_CATEGORY) java.lang.Object[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  float getFloat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class MutableFrameFormat{
    void setDimensions(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDimensions(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setDimensions(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setMetaValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void setDimensionCount(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDimensions(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
}
class NativeBuffer{
   @Source(SUSI_NO_CATEGORY)  int getElementSize();
}
class NativeFrame{
    void setData(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setInts(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
    void setFloats(  @Sink(SUSI_NO_CATEGORY) float[] arg0);
    void setBitmap(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0);
    void setDataFromFrame(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.Frame arg0);
   @Source(SUSI_NO_CATEGORY)  float[] getFloats();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getObjectValue();
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer getData();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getBitmap();
   @Source(SUSI_NO_CATEGORY)  int[] getInts();
   @Source(SUSI_NO_CATEGORY)  int getCapacity();
}
class NativeProgram{
    void setHostValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getHostValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class OutputPort{
    void setFrame(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.Frame arg0);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Filter getTargetFilter();
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.InputPort getBasePort();
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.InputPort getTargetPort();
}
class Scheduler{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FilterGraph getGraph();
}
class SerializedFrame{
    void setData(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setInts(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
    void setGenericObjectValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
    void setBitmap(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0);
    void setFloats(  @Sink(SUSI_NO_CATEGORY) float[] arg0);
   @Source(SUSI_NO_CATEGORY)  float[] getFloats();
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer getData();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getBitmap();
   @Source(SUSI_NO_CATEGORY)  int[] getInts();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getObjectValue();
}
class SerializedFrame$DirectByteOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getByteArray();
   @Source(SUSI_NO_CATEGORY)  int getSize();
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.SerializedFrame$DirectByteInputStream getInputStream();
}
class ShaderProgram{
    void setClearsOutput(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setTargetRect(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) float arg3);
    void setBlendEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setVertexCount(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSourceRect(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) float arg3);
    void setAttributeValues(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) float[] arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setTargetRegion(  @Sink(SUSI_NO_CATEGORY) android.filterfw.geometry.Quad arg0);
    void setDrawMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setHostValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void setSourceRegion(  @Sink(SUSI_NO_CATEGORY) android.filterfw.geometry.Quad arg0);
    void setClearColor(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2);
    void setBlendFunc(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setAttributeValues(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.VertexFrame arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) boolean arg6);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.GLEnvironment getGLEnvironment();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getHostValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class SimpleFrame{
    void setInts(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
    void setData(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setFloats(  @Sink(SUSI_NO_CATEGORY) float[] arg0);
    void setBitmap(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getBitmap();
   @Source(SUSI_NO_CATEGORY)  float[] getFloats();
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer getData();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getObjectValue();
   @Source(SUSI_NO_CATEGORY)  int[] getInts();
}
class SimpleFrameManager{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Frame releaseFrame(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.Frame arg0);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Frame newFrame(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg0);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Frame newBoundFrame(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Frame retainFrame(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.Frame arg0);
}
class StopWatchMap{
    void start(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class StreamPort{
    void setFrame(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.Frame arg0);
}
class SyncRunner{
   @Source(SUSI_NO_CATEGORY)  java.lang.Exception getError();
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FilterGraph getGraph();
}
class VertexFrame{
    void setInts(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
    void setBitmap(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0);
    void setDataFromFrame(  @Sink(SUSI_NO_CATEGORY) android.filterfw.core.Frame arg0);
    void setFloats(  @Sink(SUSI_NO_CATEGORY) float[] arg0);
    void setData(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getVboId();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getBitmap();
   @Source(SUSI_NO_CATEGORY)  int[] getInts();
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer getData();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getObjectValue();
   @Source(SUSI_NO_CATEGORY)  float[] getFloats();
}

package org.apache.http.impl.conn.tsccm;

class AbstractConnPool{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntry(  @Sink(SUSI_NO_CATEGORY) org.apache.http.conn.routing.HttpRoute arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) java.util.concurrent.TimeUnit arg3);
}
class BasicPoolEntry{
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.conn.OperatedClientConnection getConnection();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.conn.routing.HttpRoute getPlannedRoute();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.impl.conn.tsccm.BasicPoolEntryRef getWeakRef();
}
class BasicPoolEntryRef{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.conn.routing.HttpRoute getRoute();
}
class BasicPooledConnAdapter{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.conn.ClientConnectionManager getManager();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.impl.conn.AbstractPoolEntry getPoolEntry();
}
class ConnPoolByRoute{
   @Source(SUSI_NETWORK_INFORMATION)  int getConnectionsInPool(  org.apache.http.conn.routing.HttpRoute arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.impl.conn.tsccm.RouteSpecificPool getRoutePool(  @Sink(SUSI_NO_CATEGORY) org.apache.http.conn.routing.HttpRoute arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntryBlocking(  @Sink(SUSI_NO_CATEGORY) org.apache.http.conn.routing.HttpRoute arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) java.util.concurrent.TimeUnit arg3, @Sink(SUSI_NO_CATEGORY) org.apache.http.impl.conn.tsccm.WaitingThreadAborter arg4);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.impl.conn.tsccm.BasicPoolEntry getFreeEntry(  @Sink(SUSI_NO_CATEGORY) org.apache.http.impl.conn.tsccm.RouteSpecificPool arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
}
class RouteSpecificPool{
   @Source(SUSI_NO_CATEGORY)  int getMaxEntries();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.conn.routing.HttpRoute getRoute();
   @Source(SUSI_NO_CATEGORY)  int getEntryCount();
   @Source(SUSI_NO_CATEGORY)  int getCapacity();
}
class ThreadSafeClientConnManager{
   @Source(SUSI_NETWORK_INFORMATION)  int getConnectionsInPool(  org.apache.http.conn.routing.HttpRoute arg0);
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.conn.ClientConnectionOperator createConnectionOperator(  org.apache.http.conn.scheme.SchemeRegistry arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getConnectionsInPool();
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.conn.ClientConnectionRequest requestConnection(  org.apache.http.conn.routing.HttpRoute arg0, java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry();
}
class ThreadSafeClientConnManager$1{
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.conn.ManagedClientConnection getConnection(  long arg0, java.util.concurrent.TimeUnit arg1);
}
class WaitingThread{
   @Source(SUSI_NO_CATEGORY)  java.util.concurrent.locks.Condition getCondition();
   @Source(SUSI_NO_CATEGORY)  java.lang.Thread getThread();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.impl.conn.tsccm.RouteSpecificPool getPool();
}

package com.android.inputmethod.keyboard;

class Key{
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getIcon(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.internal.KeyboardIconsSet arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getPreviewIcon(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.internal.KeyboardIconsSet arg0);
   @Source(SUSI_NO_CATEGORY)  int getDrawX();
   @Source(SUSI_NO_CATEGORY)  int[] getCurrentDrawableState();
   @Source(SUSI_NO_CATEGORY)  int getDrawWidth();
   @Source(SUSI_NO_CATEGORY)  int getMoreKeyLabelFlags();
   @Source(SUSI_NO_CATEGORY)  int getAltCode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getOutputText();
   @Source(SUSI_NO_CATEGORY)  int getMoreKeysColumn();
}
class KeyDetector{
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.Keyboard getKeyboard();
   @Source(SUSI_NO_CATEGORY)  int getKeyHysteresisDistanceSquared(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int getTouchX(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getTouchY(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Keyboard{
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.Key getKey(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.Key[] getNearestKeys(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.ProximityInfo getProximityInfo();
}
class KeyboardLayoutSet{
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.Keyboard getKeyboard(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class KeyboardLayoutSet$Builder{
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.KeyboardLayoutSet$Builder setSubtype(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.InputMethodSubtype arg0);
}
class KeyboardSwitcher{
    void startLongPressTimer(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.KeyboardSwitcher getInstance();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.Keyboard getKeyboard();
   @Source(SUSI_NO_CATEGORY)  int getKeyboardShiftMode();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.MainKeyboardView getMainKeyboardView();
}
class KeyboardView{
    void setGesturePreviewMode(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  float getLabelWidth(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Paint arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.Keyboard getKeyboard();
}
class MainKeyboardView{
    boolean processMotionEvent(  @Sink(SUSI_LOG) android.view.MotionEvent arg0);
    void setGestureHandlingEnabledByUser(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setMainDictionaryAvailability(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setKeyboard(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.Keyboard arg0);
   @Source(SUSI_NO_CATEGORY)  int getLanguageOnSpacebarAnimAlpha();
   @Source(SUSI_NO_CATEGORY)  int getPointerCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFullDisplayName(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.InputMethodSubtype arg0, @Sink(SUSI_NO_CATEGORY) android.content.res.Resources arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.PointerTracker$DrawingProxy getDrawingProxy();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getShortDisplayName(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.InputMethodSubtype arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMiddleDisplayName(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.InputMethodSubtype arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.KeyDetector getKeyDetector();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.PointerTracker$TimerProxy getTimerProxy();
   @Source(SUSI_NO_CATEGORY)  int getAltCodeKeyWhileTypingAnimAlpha();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.KeyboardActionListener getKeyboardActionListener();
}
class MainKeyboardView$KeyTimerHandler{
    void startKeyRepeatTimer(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.PointerTracker arg0);
}
class MoreKeysKeyboard{
   @Source(SUSI_NO_CATEGORY)  int getDefaultCoordX();
}
class MoreKeysKeyboard$MoreKeyDivider{
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getIcon(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.internal.KeyboardIconsSet arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class MoreKeysKeyboard$MoreKeysKeyboardParams{
   @Source(SUSI_NO_CATEGORY)  int getY(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getDefaultKeyCoordX();
   @Source(SUSI_NO_CATEGORY)  int getColumnPos(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getX(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class MoreKeysKeyboardView{
    void setKeyPreviewPopupEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setKeyboard(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.Keyboard arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.PointerTracker$DrawingProxy getDrawingProxy();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.PointerTracker$TimerProxy getTimerProxy();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.KeyboardActionListener getKeyboardActionListener();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.KeyDetector getKeyDetector();
}
class PointerTracker{
    void setKeyDetector(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.KeyDetector arg0);
   @Source(SUSI_NO_CATEGORY)  int getDistance(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.internal.GestureStrokeWithPreviewPoints getGestureStrokeWithPreviewPoints();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.Key getKeyOn(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.Key getKey();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.PointerTracker getPointerTracker(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.PointerTracker$KeyEventHandler arg1);
   @Source(SUSI_NO_CATEGORY)  int getLastY();
   @Source(SUSI_NO_CATEGORY)  int getLastX();
   @Source(SUSI_NO_CATEGORY)  long getDownTime();
}
class PointerTracker$BogusMoveEventDetector{
    void setKeyboardGeometry(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getDistanceFromDownEvent(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class PointerTracker$TimeRecorder{
   @Source(SUSI_NO_CATEGORY)  long getLastLetterTypingTime();
}
class ProximityInfo{
   @Source(SUSI_NO_CATEGORY)  long getNativeProximityInfo();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.ProximityInfo createSpellCheckerProximityInfo(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.Key[] getNearestKeys(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}

package com.android.soundrecorder;

class Recorder{
   @Source(SUSI_NO_CATEGORY)  int getMaxAmplitude();
}
class RemainingTimeCalculator{
    void setFileSizeLimit(  @Sink(SUSI_FILE) java.io.File arg0, @Sink(SUSI_FILE) long arg1);
    void setBitRate(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class SoundRecorder{
    void onCreate(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
}

package android.test;

class InstrumentationTestCase{
    void sendKeys(  @Sink(SUSI_LOG) java.lang.String arg0);
    void sendKeys(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.Activity launchActivity(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Class arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
    void sendRepeatedKeys(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.Activity launchActivityWithIntent(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Class arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2);
   @Source(SUSI_NO_CATEGORY)  android.app.Instrumentation getInstrumentation();
}
class IsolatedContext{
    void sendBroadcast(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
    void sendOrderedBroadcast(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  boolean bindService(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.content.ServiceConnection arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.ContentResolver getContentResolver();
   @Source(SUSI_NO_CATEGORY)  java.io.File getFilesDir();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getSystemService(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getAndClearBroadcastIntents();
}
class IsolatedContext$MockAccountManager{
    void setPassword(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.Account[] getAccounts();
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.AccountManagerFuture getAuthToken(  android.accounts.Account arg0, java.lang.String arg1, android.os.Bundle arg2, android.app.Activity arg3, android.accounts.AccountManagerCallback arg4, android.os.Handler arg5);
   @Source(SUSI_ACCOUNT_INFORMATION)  java.lang.String getPassword(  android.accounts.Account arg0);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(  java.lang.String arg0, java.lang.String[] arg1, android.accounts.AccountManagerCallback arg2, android.os.Handler arg3);
   @Source(SUSI_ACCOUNT_INFORMATION)  java.lang.String peekAuthToken(  android.accounts.Account arg0, java.lang.String arg1);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.AccountManagerFuture getAuthToken(  android.accounts.Account arg0, java.lang.String arg1, boolean arg2, android.accounts.AccountManagerCallback arg3, android.os.Handler arg4);
}
class IsolatedContext$MockAccountManager$MockAccountManagerFuture{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getResult();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getResult(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) java.util.concurrent.TimeUnit arg1);
}

package java.util.jar;

class Attributes{
   @Source(SUSI_NO_CATEGORY)  java.lang.String putValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object put(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue(  @Sink(SUSI_NO_CATEGORY) java.util.jar.Attributes$Name arg0);
}
class Attributes$Name{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
}
class InitManifest{
   @Source(SUSI_NO_CATEGORY)  int getPos();
}
class JarEntry{
   @Source(SUSI_NO_CATEGORY)  java.security.cert.Certificate[] getCertificates();
   @Source(SUSI_NO_CATEGORY)  java.security.CodeSigner[] getCodeSigners();
   @Source(SUSI_NO_CATEGORY)  java.util.jar.Attributes getAttributes();
}
class JarFile{
   @Source(SUSI_NO_CATEGORY)  java.util.zip.ZipEntry getEntry(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.jar.Manifest getManifest();
   @Source(SUSI_NO_CATEGORY)  java.util.jar.JarEntry getJarEntry(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInputStream(  @Sink(SUSI_NO_CATEGORY) java.util.zip.ZipEntry arg0);
}
class JarFile$JarFileInputStream{
   @Source(SUSI_NO_CATEGORY)  int read(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class JarVerifier{
    void addMetaEntry(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1);
   @Source(SUSI_NO_CATEGORY)  java.security.cert.Certificate[] getCertificates(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Vector getSignerCertificates(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.Map arg1);
}
class JarVerifier$VerifierEntry{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void write(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Manifest{
    void write(  @Sink(SUSI_NO_CATEGORY) java.util.jar.Manifest arg0, @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg1);
    void write(  @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.jar.Manifest$Chunk getChunk(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Map getEntries();
   @Source(SUSI_NO_CATEGORY)  int getMainAttributesEnd();
   @Source(SUSI_NO_CATEGORY)  java.util.jar.Attributes getMainAttributes();
   @Source(SUSI_NO_CATEGORY)  java.util.jar.Attributes getAttributes(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}

package com.adobe.xmp;

class XMPException{
   @Source(SUSI_NO_CATEGORY)  int getErrorCode();
}
class XMPMetaFactory{
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.XMPVersionInfo getVersionInfo();
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.XMPSchemaRegistry getSchemaRegistry();
}
class XMPMetaFactory$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
}

package com.android.browser.homepages;

class HomeProvider{
   @Source(SUSI_BROWSER_INFORMATION)  android.os.ParcelFileDescriptor openFile(  @Sink(SUSI_BROWSER_INFORMATION) android.net.Uri arg0, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg1);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getType(  @Sink(SUSI_BROWSER_INFORMATION) android.net.Uri arg0);
}
class RequestHandler{
   @Source(SUSI_BROWSER_INFORMATION)  byte[] htmlEncode(  @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg0);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getUriResourcePath();
}
class RequestHandler$4{
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.homepages.Template$ListEntityIterator getListIterator(  @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg0);
}
class Template{
    void assign(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void assignLoop(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) com.android.browser.homepages.Template$ListEntityIterator arg1);
    void write(  @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg0, @Sink(SUSI_NO_CATEGORY) com.android.browser.homepages.Template$EntityData arg1);
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.homepages.Template getCachedTemplate(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0, @Sink(SUSI_BROWSER_INFORMATION) int arg1);
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.homepages.Template copy();
}
class Template$CursorListEntityWrapper{
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.homepages.Template$ListEntityIterator getListIterator(  @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.database.Cursor getCursor();
}
class Template$HashMapEntityData{
    void writeValue(  @Sink(SUSI_BROWSER_INFORMATION) java.io.OutputStream arg0, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg1);
   @Source(SUSI_BROWSER_INFORMATION)  com.android.browser.homepages.Template$ListEntityIterator getListIterator(  @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg0);
}
class Template$ListEntity{
    void write(  @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg0, @Sink(SUSI_NO_CATEGORY) com.android.browser.homepages.Template$EntityData arg1);
}
class Template$SimpleEntity{
    void write(  @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg0, @Sink(SUSI_NO_CATEGORY) com.android.browser.homepages.Template$EntityData arg1);
}

package com.google.android.picasasync;

class AlbumCollectorJson{
    void addThumbnailUrl(  @Sink(SUSI_NO_CATEGORY) com.google.android.picasasync.JsonReader arg0, @Sink(SUSI_NO_CATEGORY) android.content.ContentValues arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.Map getEntryFieldMap();
}
class Authorizer{
   @Source(SUSI_ACCOUNT_INFORMATION)  java.lang.String getAuthToken(  java.lang.String arg0);
   @Source(SUSI_ACCOUNT_INFORMATION)  java.lang.String getFreshAuthToken(  java.lang.String arg0, java.lang.String arg1);
}
class MetadataSync$MetadataSyncTask{
    void performSync(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.content.SyncResult arg0);
}
class PhotoCollectorJson{
   @Source(SUSI_NO_CATEGORY)  java.util.Map getEntryFieldMap();
}
class PhotoPrefetch$PrefetchAlbumCover{
    void performSync(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.content.SyncResult arg0);
}
class PhotoPrefetch$PrefetchFullImage{
    void performSync(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.content.SyncResult arg0);
}
class PhotoPrefetch$PrefetchScreenNail{
    void performSync(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.content.SyncResult arg0);
}
class PicasaApi{
    void setAuthToken(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getAlbumPhotos(  @Sink(SUSI_NO_CATEGORY) com.google.android.picasasync.AlbumEntry arg0, @Sink(SUSI_NO_CATEGORY) com.google.android.picasasync.PicasaApi$EntryHandler arg1);
   @Source(SUSI_NO_CATEGORY)  int getUploadedPhotos(  @Sink(SUSI_NO_CATEGORY) com.google.android.picasasync.AlbumEntry arg0, @Sink(SUSI_NO_CATEGORY) com.google.android.picasasync.PicasaApi$EntryHandler arg1);
   @Source(SUSI_NO_CATEGORY)  int getAlbums(  @Sink(SUSI_NO_CATEGORY) com.google.android.picasasync.UserEntry arg0, @Sink(SUSI_NO_CATEGORY) com.google.android.picasasync.PicasaApi$EntryHandler arg1);
}
class PicasaDatabaseHelper{
   @Source(SUSI_NO_CATEGORY)  long getUserId(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.database.sqlite.SQLiteDatabase getReadableDatabase();
   @Source(SUSI_NO_CATEGORY)  android.database.sqlite.SQLiteDatabase getWritableDatabase();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRealAlbumId(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUserAccount(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  com.google.android.picasasync.AlbumEntry getAlbumEntry(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  com.google.android.picasasync.PicasaDatabaseHelper get(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class PicasaFacade{
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.net.Uri requestImmediateSyncOnAlbum(  @Sink(SUSI_SYNCHRONIZATION_DATA) long arg0);
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.net.Uri requestImmediateSyncOnAlbumList(  @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg0);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getAlbumsUri();
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getPostPhotosUri();
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getUploadRecordsUri();
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getPhotosUri();
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getUsersUri();
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getUploadsUri();
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getSettingsUri();
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getPostAlbumsUri();
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getUploadUri(  long arg0);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getAlbumUri(  long arg0);
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.net.Uri getSyncRequestUri();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAuthority();
   @Source(SUSI_NO_CATEGORY)  com.google.android.picasasync.PicasaFacade get(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class PicasaJsonReaderParser$BooleanObjectField{
   @Source(SUSI_NO_CATEGORY)  int getValue(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class PicasaSyncHelper{
   @Source(SUSI_NO_CATEGORY)  android.database.sqlite.SQLiteDatabase getWritableDatabase();
   @Source(SUSI_NO_CATEGORY)  com.google.android.picasasync.PicasaSyncHelper getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getUsers();
}
class PicasaSyncHelper$SyncContext{
   @Source(SUSI_NO_CATEGORY)  boolean setAccount(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class PicasaSyncManager{
    void performSync(  @Sink(SUSI_SYNCHRONIZATION_DATA) com.google.android.picasasync.PicasaSyncManager$SyncSession arg0);
    void updateTasks(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  com.google.android.picasasync.PicasaSyncManager get(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class PrefetchHelper{
    void setAlbumCachingFlag(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  com.google.android.picasasync.PrefetchHelper get(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.File getAlbumCover(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  com.google.android.picasasync.PrefetchHelper$CacheStats getCacheStatistics(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class PrefetchHelper$PrefetchContext{
   @Source(SUSI_NO_CATEGORY)  int getDownloadFailCount();
}
class R{
    void init(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0);
}
class SyncState{
   @Source(SUSI_SYNCHRONIZATION_DATA)  boolean onSyncRequested(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getState(  @Sink(SUSI_NO_CATEGORY) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class SyncTask{
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
}
class UploadTaskEntry{
    void setFingerprint(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.common.Fingerprint arg0);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getContentUri();
   @Source(SUSI_NO_CATEGORY)  int getState();
   @Source(SUSI_NO_CATEGORY)  long getUploadedTime();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAccount();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAuthTokenType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUploadUrl();
   @Source(SUSI_NO_CATEGORY)  long getBytesUploaded();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayName();
   @Source(SUSI_NO_CATEGORY)  int getUid();
   @Source(SUSI_NO_CATEGORY)  android.net.Uri getUrl();
   @Source(SUSI_NO_CATEGORY)  int getPercentageUploaded();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlbumTitle();
   @Source(SUSI_NO_CATEGORY)  com.android.gallery3d.common.Fingerprint getFingerprint();
   @Source(SUSI_NO_CATEGORY)  long getBytesTotal();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRequestTemplate();
   @Source(SUSI_NO_CATEGORY)  java.lang.Throwable getError();
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getComponentName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCaption();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlbumId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMimeType();
   @Source(SUSI_NO_CATEGORY)  com.google.android.picasasync.UploadTaskEntry createNew(  @Sink(SUSI_NO_CATEGORY) android.content.ContentValues arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class UploadsDatabaseHelper{
   @Source(SUSI_NO_CATEGORY)  android.database.sqlite.SQLiteDatabase getWritableDatabase();
   @Source(SUSI_NO_CATEGORY)  android.database.sqlite.SQLiteDatabase getReadableDatabase();
}
class UploadsManager{
   @Source(SUSI_NO_CATEGORY)  boolean access$1300(  @Sink(SUSI_NO_CATEGORY) com.google.android.picasasync.UploadsManager arg0, @Sink(SUSI_NO_CATEGORY) com.google.android.picasasync.UploadTaskEntry arg1, @Sink(SUSI_NO_CATEGORY) com.google.android.picasasync.UploadedEntry arg2, @Sink(SUSI_NO_CATEGORY) android.content.SyncResult arg3);
   @Source(SUSI_NO_CATEGORY)  com.google.android.picasasync.UploadsManager getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  com.google.android.picasasync.SyncTaskProvider getManualVideoUploadTaskProvider();
   @Source(SUSI_NO_CATEGORY)  com.google.android.picasasync.UploadsDatabaseHelper getUploadsDatabaseHelper();
   @Source(SUSI_NO_CATEGORY)  com.google.android.picasasync.SyncTaskProvider getManualPhotoUploadTaskProvider();
   @Source(SUSI_NO_CATEGORY)  long addManualUpload(  @Sink(SUSI_NO_CATEGORY) com.google.android.picasasync.UploadTaskEntry arg0);
}
class UploadsManager$UploadTask{
    void performSync(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.content.SyncResult arg0);
   @Source(SUSI_NO_CATEGORY)  com.google.android.picasasync.UploadTaskEntry getNextUpload();
}

package com.google.android.apps.lightcycle.camera;

class CameraApiProxyAndroidImpl$CameraProxyAndroidImpl{
    void setPreviewDisplay(  @Sink(SUSI_NO_CATEGORY) android.view.SurfaceHolder arg0);
    void setDisplayOrientation(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void enableShutterSound(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setPreviewCallbackWithBuffer(  @Sink(SUSI_NO_CATEGORY) android.hardware.Camera$PreviewCallback arg0);
    void setPreviewTexture(  @Sink(SUSI_NO_CATEGORY) android.graphics.SurfaceTexture arg0);
    void setParameters(  @Sink(SUSI_NO_CATEGORY) android.hardware.Camera$Parameters arg0);
    void setPreviewCallback(  @Sink(SUSI_NO_CATEGORY) android.hardware.Camera$PreviewCallback arg0);
   @Source(SUSI_NO_CATEGORY)  android.hardware.Camera$Parameters getParameters();
}
class CameraPreview$Util{
    void setPictureWidth(  @Sink(SUSI_NO_CATEGORY) com.google.android.apps.lightcycle.camera.CameraUtility arg0, @Sink(SUSI_NO_CATEGORY) android.hardware.Camera$Parameters arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class CameraUtility{
    void setFrameRate(  @Sink(SUSI_NO_CATEGORY) android.hardware.Camera$Parameters arg0);
    void setPictureWidth(  @Sink(SUSI_NO_CATEGORY) android.hardware.Camera$Parameters arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  com.google.android.apps.lightcycle.util.Size getPhotoSize();
   @Source(SUSI_NO_CATEGORY)  float getFieldOfView();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFocusMode(  @Sink(SUSI_NO_CATEGORY) com.google.android.apps.lightcycle.camera.CameraApiProxy$CameraProxy arg0);
   @Source(SUSI_NO_CATEGORY)  com.google.android.apps.lightcycle.util.Size getPreviewSize();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFlashMode(  @Sink(SUSI_NO_CATEGORY) com.google.android.apps.lightcycle.camera.CameraApiProxy$CameraProxy arg0);
}
class NullSurfaceCameraPreview{
    void setPictureWidth(  @Sink(SUSI_NO_CATEGORY) android.hardware.Camera$Parameters arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setFastShutter(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setMainView(  @Sink(SUSI_NO_CATEGORY) com.google.android.apps.lightcycle.panorama.LightCycleView arg0);
   @Source(SUSI_NO_CATEGORY)  com.google.android.apps.lightcycle.camera.CameraApiProxy$CameraProxy getCamera();
   @Source(SUSI_NO_CATEGORY)  float getReportedHorizontalFovDegrees();
   @Source(SUSI_NO_CATEGORY)  com.google.android.apps.lightcycle.util.Size getPhotoSize();
}
class TextureCameraPreview{
    void setPictureWidth(  @Sink(SUSI_NO_CATEGORY) android.hardware.Camera$Parameters arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setFastShutter(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setMainView(  @Sink(SUSI_NO_CATEGORY) com.google.android.apps.lightcycle.panorama.LightCycleView arg0);
   @Source(SUSI_NO_CATEGORY)  com.google.android.apps.lightcycle.util.Size getPhotoSize();
   @Source(SUSI_NO_CATEGORY)  com.google.android.apps.lightcycle.camera.CameraApiProxy$CameraProxy getCamera();
   @Source(SUSI_NO_CATEGORY)  float getReportedHorizontalFovDegrees();
}

package com.android.internal.util;

class AsyncChannel{
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.os.Message sendMessageSynchronously(  @Sink(SUSI_SYNCHRONIZATION_DATA) int arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) int arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) int arg2);
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.os.Message sendMessageSynchronously(  @Sink(SUSI_SYNCHRONIZATION_DATA) int arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) int arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) int arg2, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.Object arg3);
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.os.Message sendMessageSynchronously(  @Sink(SUSI_SYNCHRONIZATION_DATA) int arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) int arg1);
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.os.Message sendMessageSynchronously(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.os.Message arg0);
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.os.Message sendMessageSynchronously(  @Sink(SUSI_SYNCHRONIZATION_DATA) int arg0);
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.os.Message sendMessageSynchronously(  @Sink(SUSI_SYNCHRONIZATION_DATA) int arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.Object arg1);
    void sendMessage(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void sendMessage(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void sendMessage(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void sendMessage(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg3);
    void sendMessage(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
    void sendMessage(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
}
class AsyncService{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Handler getHandler();
}
class BitwiseInputStream{
   @Source(SUSI_NO_CATEGORY)  byte[] readByteArray(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class BitwiseOutputStream{
   @Source(SUSI_NO_CATEGORY)  byte[] toByteArray();
}
class FastXmlSerializer{
    void setOutput(  @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setPrefix(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void setFeature(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPrefix(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNamespace();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getDepth();
}
class FileRotator$1{
    void write(  @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg0);
}
class IndentingPrintWriter{
    void write(  @Sink(SUSI_NO_CATEGORY) char[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class LocalLog{
   @Source(SUSI_NO_CATEGORY)  boolean dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
}
class MemInfoReader{
   @Source(SUSI_NO_CATEGORY)  long getFreeSize();
   @Source(SUSI_NO_CATEGORY)  long getTotalSize();
   @Source(SUSI_NO_CATEGORY)  long getCachedSize();
}
class State{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
}
class StateMachine{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void sendMessageAtFrontOfQueue(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
    void sendMessageDelayed(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
    void sendMessage(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
    void setDbg(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setLogRecSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void sendMessageDelayed(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
    void sendMessageDelayed(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLogRecString(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.internal.util.StateMachine$LogRec getLogRec(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getLogRecCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getWhatToString(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Handler getHandler();
   @Source(SUSI_NO_CATEGORY)  int getLogRecSize();
   @Source(SUSI_NO_CATEGORY)  com.android.internal.util.IState getCurrentState();
   @Source(SUSI_NO_CATEGORY)  android.os.Message getCurrentMessage();
}
class StateMachine$LogRec{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInfo();
   @Source(SUSI_NO_CATEGORY)  long getTime();
   @Source(SUSI_NO_CATEGORY)  long getWhat();
   @Source(SUSI_NO_CATEGORY)  com.android.internal.util.State getState();
   @Source(SUSI_NO_CATEGORY)  com.android.internal.util.State getOriginalState();
}
class StateMachine$LogRecords{
   @Source(SUSI_NO_CATEGORY)  com.android.internal.util.StateMachine$LogRec get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class StateMachine$SmHandler$HaltingState{
   @Source(SUSI_NO_CATEGORY)  boolean processMessage(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
}
class StateMachine$SmHandler$QuittingState{
   @Source(SUSI_NO_CATEGORY)  boolean processMessage(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
}
class TypedProperties{
   @Source(SUSI_NO_CATEGORY)  byte getByte(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  short getShort(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) short arg1);
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  double getDouble(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  long getLong(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  long getLong(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getStringInfo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  double getDouble(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) double arg1);
   @Source(SUSI_NO_CATEGORY)  byte getByte(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) byte arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  float getFloat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_NO_CATEGORY)  float getFloat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  short getShort(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class XmlUtils{
    void writeValueXml(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) org.xmlpull.v1.XmlSerializer arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList readListXml(  @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg0);
}

package com.android.inputmethod.latin;

class AdditionalSubtype{
   @Source(SUSI_NO_CATEGORY)  android.view.inputmethod.InputMethodSubtype createAdditionalSubtype(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.inputmethod.InputMethodSubtype[] createAdditionalSubtypesArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class BinaryDictionary{
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getSuggestionsWithSessionId(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.latin.WordComposer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1, @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.ProximityInfo arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getSuggestions(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.latin.WordComposer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1, @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.ProximityInfo arg2);
}
class BinaryDictionaryGetter{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTempFileName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.content.Context arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getDictionaryFiles(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0, @Sink(SUSI_NO_CATEGORY) android.content.Context arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCacheFileName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.content.Context arg2);
}
class DebugSettingsActivity{
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getIntent();
}
class DicTraverseSession{
   @Source(SUSI_NO_CATEGORY)  long getSession();
}
class Dictionary{
   @Source(SUSI_NO_CATEGORY)  int getFrequency(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getSuggestionsWithSessionId(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.latin.WordComposer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1, @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.ProximityInfo arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
}
class DictionaryCollection{
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getSuggestions(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.latin.WordComposer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1, @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.ProximityInfo arg2);
}
class DictionaryFactory{
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.DictionaryCollection createMainDictionaryFromManager(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.util.Locale arg1);
}
class ExpandableBinaryDictionary{
    void setRequiresReload(  @Sink(SUSI_LOG) boolean arg0);
    void setBigram(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getSuggestions(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.latin.WordComposer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1, @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.ProximityInfo arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFilenameWithLocale(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class ExpandableDictionary{
   @Source(SUSI_NO_CATEGORY)  int setBigramAndGetFrequency(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.latin.UserHistoryForgettingCurveUtils$ForgettingCurveParams arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getWordsInner(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.latin.WordComposer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1, @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.ProximityInfo arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getSuggestions(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.latin.WordComposer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1, @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.ProximityInfo arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.ExpandableDictionary$NextWord getBigramWord(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
}
class ExpandableDictionary$NextHistoryWord{
   @Source(SUSI_NO_CATEGORY)  int getFrequency();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.UserHistoryForgettingCurveUtils$ForgettingCurveParams getFcParams();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.ExpandableDictionary$Node getWordNode();
}
class ExpandableDictionary$NextStaticWord{
   @Source(SUSI_NO_CATEGORY)  int getFrequency();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.UserHistoryForgettingCurveUtils$ForgettingCurveParams getFcParams();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.ExpandableDictionary$Node getWordNode();
}
class FileTransforms{
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getDecryptedStream(  @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getUncompressedStream(  @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg0);
}
class ImfUtils{
    void setAdditionalInputMethodSubtypes(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.InputMethodSubtype[] arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.inputmethod.InputMethodInfo getInputMethodInfoOfThisIme(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.InputMethodSubtype arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInputMethodIdOfThisIme(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.inputmethod.InputMethodManager getInputMethodManager(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class InputPointers{
    void set(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.latin.InputPointers arg0);
   @Source(SUSI_NO_CATEGORY)  int getPointerSize();
   @Source(SUSI_NO_CATEGORY)  int[] getYCoordinates();
   @Source(SUSI_NO_CATEGORY)  int[] getPointerIds();
   @Source(SUSI_NO_CATEGORY)  int[] getXCoordinates();
   @Source(SUSI_NO_CATEGORY)  int[] getTimes();
}
class LastComposedWord{
   @Source(SUSI_NO_CATEGORY)  int getSeparatorLength(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class LatinIME{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void setCandidatesView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
    void setInputView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  int getCurrentAutoCapsState();
}
class LatinIME$BatchInputUpdater{
   @Source(SUSI_NO_CATEGORY)  boolean handleMessage(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.LatinIME$BatchInputUpdater getInstance();
}
class LatinImeLogger{
    void logOnManualSuggestion(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) int arg2, @Sink(SUSI_LOG) com.android.inputmethod.latin.SuggestedWords arg3);
    void onStartInputView(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.EditorInfo arg0);
    void onAddSuggestedWord(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class LatinImeLogger$LogEntry{
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getLogStrings();
}
class LocaleUtils{
   @Source(SUSI_NO_CATEGORY)  java.util.Locale constructLocaleFromString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.HashMap localeAndTimeStrToHashMap(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class LocaleUtils$RunInLocale{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object runInLocale(  @Sink(SUSI_NO_CATEGORY) android.content.res.Resources arg0, @Sink(SUSI_NO_CATEGORY) java.util.Locale arg1);
}
class LogEntries$AutoCorrectionCancelledEntry{
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getLogStrings();
}
class LogEntries$DeviceInfoEntry{
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getLogStrings();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.LogEntries$DeviceInfoEntry getInstance(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) android.content.Context arg1);
}
class ResizableIntArray{
    void set(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.latin.ResizableIntArray arg0);
   @Source(SUSI_NO_CATEGORY)  int getLength();
   @Source(SUSI_NO_CATEGORY)  int[] getPrimitiveArray();
   @Source(SUSI_NO_CATEGORY)  int get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ResourceUtils{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDeviceOverrideValue(  @Sink(SUSI_NO_CATEGORY) android.content.res.Resources arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  float getDimensionOrFraction(  @Sink(SUSI_NO_CATEGORY) android.content.res.TypedArray arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) float arg3);
   @Source(SUSI_NO_CATEGORY)  float getFraction(  @Sink(SUSI_NO_CATEGORY) android.content.res.TypedArray arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) float arg2);
   @Source(SUSI_NO_CATEGORY)  float getFraction(  @Sink(SUSI_NO_CATEGORY) android.content.res.TypedArray arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class RichInputConnection{
    void sendKeyEvent(  @Sink(SUSI_NO_CATEGORY) android.view.KeyEvent arg0);
    void performEditorAction(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getCursorCapsMode(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.util.Locale arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getWordAtCursor(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getNthPreviousWord(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getCodePointBeforeCursor();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTextAfterCursor(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.RichInputConnection$Range getWordRangeAtCursor(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getWordBeforeCursorIfAtEndOfWord(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.latin.SettingsValues arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTextBeforeCursor(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class SettingsActivity{
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getIntent();
}
class SettingsValues{
    void setLastUserHistoryWriteTime(  @Sink(SUSI_NO_CATEGORY) android.content.SharedPreferences arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.inputmethod.InputMethodSubtype[] getAdditionalSubtypes();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPrefAdditionalSubtypes(  @Sink(SUSI_NO_CATEGORY) android.content.SharedPreferences arg0, @Sink(SUSI_NO_CATEGORY) android.content.res.Resources arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInputAttributesDebugString();
}
class StaticInnerHandlerWrapper{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getOuterInstance();
}
class SubtypeLocale{
    void init(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getPredefinedKeyboardLayoutSet();
   @Source(SUSI_NO_CATEGORY)  java.util.Locale getSubtypeLocale(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.InputMethodSubtype arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getKeyboardLayoutSetDisplayName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSubtypeLocaleDisplayName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSubtypeDisplayName(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.InputMethodSubtype arg0, @Sink(SUSI_NO_CATEGORY) android.content.res.Resources arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getKeyboardLayoutSetDisplayName(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.InputMethodSubtype arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getKeyboardLayoutSetName(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.InputMethodSubtype arg0);
}
class SubtypeSwitcher{
   @Source(SUSI_NO_CATEGORY)  java.util.Locale getCurrentSubtypeLocale();
   @Source(SUSI_NO_CATEGORY)  android.view.inputmethod.InputMethodSubtype getNoLanguageSubtype();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.SubtypeSwitcher getInstance();
   @Source(SUSI_NO_CATEGORY)  android.view.inputmethod.InputMethodSubtype getCurrentSubtype();
}
class Suggest{
    void setUserHistoryDictionary(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.latin.UserHistoryDictionary arg0);
    void setUserDictionary(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.latin.UserBinaryDictionary arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.ContactsBinaryDictionary getContactsDictionary();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.SuggestedWords getSuggestedWords(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.latin.WordComposer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1, @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.ProximityInfo arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
   @Source(SUSI_NO_CATEGORY)  java.util.concurrent.ConcurrentHashMap getUnigramDictionaries();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.Dictionary getMainDictionary();
}
class SuggestedWords{
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getTypedWordAndPreviousSuggestions(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg0, @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.latin.SuggestedWords arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getWord(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo getInfo(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo getWordInfo(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getFromApplicationSpecifiedCompletions(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.CompletionInfo[] arg0);
}
class SuggestedWords$SuggestedWordInfo{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDebugString();
}
class SynchronouslyLoadedContactsBinaryDictionary{
   @Source(SUSI_CONTACT_INFORMATION)  java.util.ArrayList getSuggestions(  @Sink(SUSI_CONTACT_INFORMATION) com.android.inputmethod.latin.WordComposer arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.CharSequence arg1, @Sink(SUSI_CONTACT_INFORMATION) com.android.inputmethod.keyboard.ProximityInfo arg2);
}
class SynchronouslyLoadedUserBinaryDictionary{
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getSuggestions(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.latin.WordComposer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1, @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.ProximityInfo arg2);
}
class TargetApplicationGetter{
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ApplicationInfo doInBackground(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ApplicationInfo getCachedApplicationInfo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class UserBinaryDictionary{
    void addWordToUserDictionary(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class UserHistoryDictIOUtils{
    void writeDictionaryBinary(  @Sink(SUSI_LOG) java.io.OutputStream arg0, @Sink(SUSI_LOG) com.android.inputmethod.latin.UserHistoryDictIOUtils$BigramDictionaryInterface arg1, @Sink(SUSI_LOG) com.android.inputmethod.latin.UserHistoryDictionaryBigramList arg2, @Sink(SUSI_LOG) com.android.inputmethod.latin.makedict.FormatSpec$FormatOptions arg3);
}
class UserHistoryDictionary{
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getWordsInner(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.latin.WordComposer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1, @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.ProximityInfo arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.UserHistoryDictionary getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.content.SharedPreferences arg2);
}
class UserHistoryDictionary$1{
    void setBigram(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setUnigram(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class UserHistoryDictionaryBigramList{
    void updateBigram(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) byte arg2);
    void addBigram(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) byte arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.HashMap getBigrams(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class UserHistoryForgettingCurveUtils$ForgettingCurveParams{
   @Source(SUSI_NO_CATEGORY)  byte getFc();
   @Source(SUSI_NO_CATEGORY)  int getFrequency();
}
class Utils{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getStackTrace();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDebugInfo(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.latin.SuggestedWords arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getStackTrace(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Utils$RingCharBuffer{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLastWord(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Utils$UsabilityStudyLogUtils{
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.Utils$UsabilityStudyLogUtils getInstance();
}
class VibratorUtils{
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.VibratorUtils getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class WordComposer{
    void setBatchInputPointers(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.latin.InputPointers arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTypedWord();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getAutoCorrectionOrNull();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.InputPointers getInputPointers();
   @Source(SUSI_NO_CATEGORY)  int getCodeAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
}

package com.android.mms.ui;

class AttachmentTypeSelectorAdapter{
   @Source(SUSI_NO_CATEGORY)  java.util.List getData(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.Context arg1);
}
class AttachmentTypeSelectorAdapter$AttachmentListItem{
   @Source(SUSI_NO_CATEGORY)  int getCommand();
}
class AudioAttachmentView{
    void setTextVisibility(  @Sink(SUSI_SMS_MMS) boolean arg0);
    void setImage(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) android.graphics.Bitmap arg1);
    void setVideoThumbnail(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) android.graphics.Bitmap arg1);
    void setImageRegionFit(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
    void setVideoVisibility(  @Sink(SUSI_SMS_MMS) boolean arg0);
    void setText(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1);
    void setImageVisibility(  @Sink(SUSI_SMS_MMS) boolean arg0);
}
class BasicSlideEditorView{
    void setImage(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) android.graphics.Bitmap arg1);
    void setVideo(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) android.net.Uri arg1);
    void setAudio(  @Sink(SUSI_SMS_MMS) android.net.Uri arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) java.util.Map arg2);
    void setText(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1);
    void setVideoThumbnail(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) android.graphics.Bitmap arg1);
    void setImageRegionFit(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
    void setVideoVisibility(  @Sink(SUSI_SMS_MMS) boolean arg0);
    void setTextVisibility(  @Sink(SUSI_SMS_MMS) boolean arg0);
    void setImageVisibility(  @Sink(SUSI_SMS_MMS) boolean arg0);
}
class ChipsRecipientAdapter{
   @Source(SUSI_NO_CATEGORY)  int getItemLayout();
}
class ComposeMessageActivity{
    void startActivityForResult(  @Sink(SUSI_SMS_MMS) android.content.Intent arg0, @Sink(SUSI_SMS_MMS) int arg1);
    void onSaveInstanceState(  @Sink(SUSI_SMS_MMS) android.os.Bundle arg0);
   @Source(SUSI_SYNCHRONIZATION_DATA)  com.android.mms.ui.AsyncDialog getAsyncDialog();
}
class ComposeMessageActivity$43{
   @Source(SUSI_SMS_MMS)  boolean setViewValue(  @Sink(SUSI_SMS_MMS) android.view.View arg0, @Sink(SUSI_SMS_MMS) java.lang.Object arg1, @Sink(SUSI_SMS_MMS) java.lang.String arg2);
}
class ConversationList{
   @Source(SUSI_SMS_MMS)  android.content.Intent createAddContactIntent(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
}
class ConversationList$4{
   @Source(SUSI_SMS_MMS)  boolean onQueryTextSubmit(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
}
class ConversationListAdapter{
    void bindView(  @Sink(SUSI_SMS_MMS) android.view.View arg0, @Sink(SUSI_SMS_MMS) android.content.Context arg1, @Sink(SUSI_SMS_MMS) android.database.Cursor arg2);
}
class ConversationListItem{
    void setChecked(  @Sink(SUSI_SMS_MMS) boolean arg0);
}
class DeliveryReportActivity$MmsReportRequest{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRecipient();
}
class DeliveryReportAdapter{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
}
class IconListAdapter{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
}
class IconListAdapter$IconListItem{
   @Source(SUSI_NO_CATEGORY)  int getResource();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTitle();
}
class LayoutSelectorAdapter{
   @Source(SUSI_NO_CATEGORY)  java.util.List getData(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class ManageSimMessages{
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor access$102(  @Sink(SUSI_NO_CATEGORY) com.android.mms.ui.ManageSimMessages arg0, @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg1);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor access$100(  @Sink(SUSI_NO_CATEGORY) com.android.mms.ui.ManageSimMessages arg0);
}
class MessageItem{
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getCachedFormattedMessage();
   @Source(SUSI_NO_CATEGORY)  com.android.mms.model.SlideshowModel getSlideshow();
   @Source(SUSI_NO_CATEGORY)  int getMmsDownloadStatus();
   @Source(SUSI_NO_CATEGORY)  long getMessageId();
}
class MessageListAdapter{
    void bindView(  @Sink(SUSI_SMS_MMS) android.view.View arg0, @Sink(SUSI_SMS_MMS) android.content.Context arg1, @Sink(SUSI_SMS_MMS) android.database.Cursor arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.mms.ui.MessageItem getCachedMessageItem(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg2);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor getCursorForItem(  @Sink(SUSI_NO_CATEGORY) com.android.mms.ui.MessageItem arg0);
   @Source(SUSI_NO_CATEGORY)  int getViewTypeCount();
   @Source(SUSI_NO_CATEGORY)  int getItemViewType(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class MessageListItem{
    void setTextVisibility(  @Sink(SUSI_SMS_MMS) boolean arg0);
    void setVideoThumbnail(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) android.graphics.Bitmap arg1);
    void setVideoVisibility(  @Sink(SUSI_SMS_MMS) boolean arg0);
    void setVideo(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) android.net.Uri arg1);
    void setText(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1);
    void setImageRegionFit(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
    void setImageVisibility(  @Sink(SUSI_SMS_MMS) boolean arg0);
    void setAudio(  @Sink(SUSI_SMS_MMS) android.net.Uri arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) java.util.Map arg2);
    void setImage(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) android.graphics.Bitmap arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.mms.ui.MessageItem getMessageItem();
}
class MessageListItem$5{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
}
class MessageUtils{
    void recordSound(  @Sink(SUSI_SMS_MMS) android.app.Activity arg0, @Sink(SUSI_SMS_MMS) int arg1, @Sink(SUSI_SMS_MMS) long arg2);
    void selectAudio(  @Sink(SUSI_SMS_MMS) android.app.Activity arg0, @Sink(SUSI_SMS_MMS) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessageDetails(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLocalNumber();
}
class MessagingPreferenceActivity{
    void enableNotifications(  @Sink(SUSI_SMS_MMS) boolean arg0, @Sink(SUSI_SMS_MMS) android.content.Context arg1);
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog onCreateDialog(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class NoConfirmationSendService{
    void onHandleIntent(  @Sink(SUSI_SMS_MMS) android.content.Intent arg0);
}
class Presenter{
   @Source(SUSI_NO_CATEGORY)  com.android.mms.ui.ViewInterface getView();
   @Source(SUSI_NO_CATEGORY)  com.android.mms.model.Model getModel();
}
class PresenterFactory{
   @Source(SUSI_NO_CATEGORY)  com.android.mms.ui.Presenter getPresenter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.content.Context arg1, @Sink(SUSI_NO_CATEGORY) com.android.mms.ui.ViewInterface arg2, @Sink(SUSI_NO_CATEGORY) com.android.mms.model.Model arg3);
}
class QuickContactDivot{
   @Source(SUSI_CONTACT_INFORMATION)  float getCloseOffset();
}
class RecipientListActivity$RecipientListAdapter{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
}
class RecipientsEditor{
   @Source(SUSI_NO_CATEGORY)  android.view.ContextMenu$ContextMenuInfo getContextMenuInfo();
   @Source(SUSI_NO_CATEGORY)  java.util.List getNumbers();
   @Source(SUSI_NO_CATEGORY)  int getRecipientCount();
}
class RecipientsEditor$RecipientsEditorTokenizer{
   @Source(SUSI_NO_CATEGORY)  java.util.List getNumbers();
}
class SlideListItemView{
    void setImageRegionFit(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
    void setVideo(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) android.net.Uri arg1);
    void setText(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1);
    void setAudio(  @Sink(SUSI_SMS_MMS) android.net.Uri arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) java.util.Map arg2);
    void setVideoThumbnail(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) android.graphics.Bitmap arg1);
    void setTextVisibility(  @Sink(SUSI_SMS_MMS) boolean arg0);
    void setImage(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) android.graphics.Bitmap arg1);
    void setImageVisibility(  @Sink(SUSI_SMS_MMS) boolean arg0);
    void setVideoVisibility(  @Sink(SUSI_SMS_MMS) boolean arg0);
}
class SlideView{
    void setVideoRegion(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) int arg1, @Sink(SUSI_SMS_MMS) int arg2, @Sink(SUSI_SMS_MMS) int arg3);
    void setImageRegionFit(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
    void setImage(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) android.graphics.Bitmap arg1);
    void setTextRegion(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) int arg1, @Sink(SUSI_SMS_MMS) int arg2, @Sink(SUSI_SMS_MMS) int arg3);
    void setVideo(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) android.net.Uri arg1);
    void setTextVisibility(  @Sink(SUSI_SMS_MMS) boolean arg0);
    void setImageVisibility(  @Sink(SUSI_SMS_MMS) boolean arg0);
    void setImageRegion(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) int arg1, @Sink(SUSI_SMS_MMS) int arg2, @Sink(SUSI_SMS_MMS) int arg3);
    void setVideoThumbnail(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) android.graphics.Bitmap arg1);
    void enableMMSConformanceMode(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) int arg1, @Sink(SUSI_SMS_MMS) int arg2, @Sink(SUSI_SMS_MMS) int arg3);
    void setAudio(  @Sink(SUSI_SMS_MMS) android.net.Uri arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) java.util.Map arg2);
    void setVideoVisibility(  @Sink(SUSI_SMS_MMS) boolean arg0);
    void setText(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1);
}
class SlideshowActivity$SmilPlayerController{
   @Source(SUSI_NO_CATEGORY)  int getCurrentPosition();
   @Source(SUSI_NO_CATEGORY)  int getDuration();
   @Source(SUSI_NO_CATEGORY)  int getBufferPercentage();
}
class SlideshowAttachmentView{
    void setVideoVisibility(  @Sink(SUSI_SMS_MMS) boolean arg0);
    void setTextVisibility(  @Sink(SUSI_SMS_MMS) boolean arg0);
    void setImageVisibility(  @Sink(SUSI_SMS_MMS) boolean arg0);
    void setVideoThumbnail(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) android.graphics.Bitmap arg1);
    void setImageRegionFit(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
    void setText(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1);
    void setImage(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) android.graphics.Bitmap arg1);
    void setVideo(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) android.net.Uri arg1);
}
class SlideshowEditActivity$SlideListAdapter{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
}
class UriImage{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSrc();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getContentType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPath();
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  byte[] getResizedImageData(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg5, @Sink(SUSI_NO_CATEGORY) android.content.Context arg6);
   @Source(SUSI_NO_CATEGORY)  com.google.android.mms.pdu.PduPart getResizedImageAsPart(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getWidth();
}
class VideoAttachmentView{
    void setImageVisibility(  @Sink(SUSI_SMS_MMS) boolean arg0);
    void setImage(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) android.graphics.Bitmap arg1);
    void setVideoVisibility(  @Sink(SUSI_SMS_MMS) boolean arg0);
    void setTextVisibility(  @Sink(SUSI_SMS_MMS) boolean arg0);
    void setImageRegionFit(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
    void setVideoThumbnail(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) android.graphics.Bitmap arg1);
    void setText(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1);
    void setVideo(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) android.net.Uri arg1);
}

package com.android.email.mail;

class Sender{
   @Source(SUSI_NO_CATEGORY)  java.lang.Class getSettingActivityClass();
   @Source(SUSI_NO_CATEGORY)  com.android.email.mail.Sender getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.provider.Account arg1);
}
class Store{
   @Source(SUSI_NO_CATEGORY)  com.android.email.mail.Store getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.provider.Account arg0, @Sink(SUSI_NO_CATEGORY) android.content.Context arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.mail.Folder getFolder(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle autoDiscover(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.Class getSettingActivityClass();
}

package gov.nist.javax.sip.header;

class Accept{
    void setContentType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setContentSubType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setQValue(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getContentType();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.MediaRange getMediaRange();
   @Source(SUSI_NO_CATEGORY)  float getQValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getContentSubType();
}
class AcceptEncoding{
    void setQValue(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  float getQValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getEncoding();
}
class AcceptLanguage{
    void setAcceptLanguage(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
    void setQValue(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setLanguageRange(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  float getQValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLanguageRange();
   @Source(SUSI_NO_CATEGORY)  java.util.Locale getAcceptLanguage();
}
class AcceptLanguageList{
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.AcceptLanguage getLast();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.AcceptLanguage getFirst();
}
class AddressParametersHeader{
   @Source(SUSI_NO_CATEGORY)  javax.sip.address.Address getAddress();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
}
class AlertInfo{
   @Source(SUSI_NO_CATEGORY)  javax.sip.address.URI getAlertInfo();
}
class Allow{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMethod();
}
class AllowEvents{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getEventType();
}
class AllowEventsList{
   @Source(SUSI_NO_CATEGORY)  java.util.ListIterator getMethods();
}
class AllowList{
   @Source(SUSI_NO_CATEGORY)  java.util.ListIterator getMethods();
}
class AuthenticationHeader{
    void setDomain(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setIntegrityProtected(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setQop(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setRealm(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setOpaque(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setIK(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setCK(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setNonceCount(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setResponse(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setChallenge(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.header.Challenge arg0);
    void setUsername(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setAlgorithm(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setNonce(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setCNonce(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setStale(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_FILE_INFORMATION)  javax.sip.address.URI getURI();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRealm();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getResponse();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUsername();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCNonce();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getIntegrityProtected();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDomain();
   @Source(SUSI_NO_CATEGORY)  int getNonceCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlgorithm();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNonce();
   @Source(SUSI_NO_CATEGORY)  java.lang.String encodeBody();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCK();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getIK();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getOpaque();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getQop();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getScheme();
}
class AuthenticationInfo{
    void setCNonce(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setResponse(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setQop(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setNextNonce(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setNonceCount(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNextNonce();
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.NameValue getAuthInfo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getNonceCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAuthenticationInfo();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getResponse();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCNonce();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getQop();
}
class CSeq{
    void setSequenceNumber(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setMethod(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setSeqNumber(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  long getSeqNumber();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMethod();
   @Source(SUSI_NO_CATEGORY)  int getSequenceNumber();
}
class CallID{
    void setCallId(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCallId();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.CallIdentifier getCallIdentifer();
}
class CallIdentifier{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHost();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLocalId();
}
class CallInfo{
    void setPurpose(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPurpose();
   @Source(SUSI_NO_CATEGORY)  javax.sip.address.URI getInfo();
}
class Challenge{
    void setParameter(  @Sink(SUSI_NO_CATEGORY) gov.nist.core.NameValue arg0);
   @Source(SUSI_FILE_INFORMATION)  java.lang.String getURI();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getScheme();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getQOP();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRealm();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSignedBy();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getOpaque();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getStale();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDomain();
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.NameValueList getAuthParams();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlgorithm();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getResponse();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSignature();
}
class Contact{
    void setQValue(  @Sink(SUSI_CONTACT_INFORMATION) float arg0);
    void setSipInstanceParam(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
    void setExpires(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
    void setWildCardFlag(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
    void setTempGruuParam(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
    void setParameter(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
    void setPubGruuParam(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  gov.nist.javax.sip.header.ContactList getContactList();
   @Source(SUSI_CONTACT_INFORMATION)  gov.nist.core.NameValueList getContactParms();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getTempGruuParam();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getPubGruuParam();
   @Source(SUSI_CONTACT_INFORMATION)  javax.sip.address.Address getAddress();
   @Source(SUSI_CONTACT_INFORMATION)  boolean getWildCardFlag();
   @Source(SUSI_CONTACT_INFORMATION)  int getExpires();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getSipInstanceParam();
}
class ContentDisposition{
    void setHandling(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDispositionType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getContentDisposition();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHandling();
}
class ContentEncoding{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getEncoding();
}
class ContentLanguage{
    void setLanguageTag(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLanguageTag();
   @Source(SUSI_NO_CATEGORY)  java.util.Locale getContentLanguage();
}
class ContentLength{
    void setContentLength(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getContentLength();
}
class ContentType{
    void setContentType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setContentType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setContentSubType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getContentSubType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMediaSubType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMediaType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCharset();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.MediaRange getMediaRange();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getContentType();
}
class ErrorInfo{
    void setErrorMessage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getErrorMessage();
   @Source(SUSI_NO_CATEGORY)  javax.sip.address.URI getErrorInfo();
}
class Event{
    void setEventId(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getEventId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getEventType();
}
class Expires{
   @Source(SUSI_NO_CATEGORY)  int getExpires();
}
class ExtensionHeaderImpl{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHeaderValue();
}
class From{
    void setTag(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUserAtHostPort();
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.HostPort getHostPort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTag();
}
class HeaderFactoryImpl{
    void setPrettyEncoding(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.extensions.SessionExpiresHeader createSessionExpiresHeader(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.Header createHeader(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.MimeVersionHeader createMimeVersionHeader(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.DateHeader createDateHeader(  @Sink(SUSI_NO_CATEGORY) java.util.Calendar arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.RSeqHeader createRSeqHeader(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.ExpiresHeader createExpiresHeader(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.MinExpiresHeader createMinExpiresHeader(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.TimeStampHeader createTimeStampHeader(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.MaxForwardsHeader createMaxForwardsHeader(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.RSeqHeader createRSeqHeader(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.ContentLengthHeader createContentLengthHeader(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.RetryAfterHeader createRetryAfterHeader(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.CSeqHeader createCSeqHeader(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.ContentLanguageHeader createContentLanguageHeader(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.AcceptLanguageHeader createAcceptLanguageHeader(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.ExtensionHeader createMinSEHeader(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.extensions.ReferencesHeader createReferencesHeader(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.RAckHeader createRAckHeader(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
}
class InReplyTo{
    void setCallId(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCallId();
}
class Indentation{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getIndentation();
   @Source(SUSI_NO_CATEGORY)  int getCount();
}
class MaxForwards{
   @Source(SUSI_NO_CATEGORY)  int getMaxForwards();
}
class MediaRange{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSubtype();
}
class MimeVersion{
   @Source(SUSI_NO_CATEGORY)  int getMajorVersion();
   @Source(SUSI_NO_CATEGORY)  int getMinorVersion();
}
class MinExpires{
   @Source(SUSI_NO_CATEGORY)  int getExpires();
}
class NameMap{
    void addExtensionHeader(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Class getClassFromName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class Organization{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getOrganization();
}
class ParametersHeader{
    void setMultiParameter(  @Sink(SUSI_NO_CATEGORY) gov.nist.core.NameValue arg0);
    void setMultiParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setParameter(  @Sink(SUSI_NO_CATEGORY) gov.nist.core.NameValue arg0);
    void setParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void setParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setQuotedParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_FILE_INFORMATION)  gov.nist.javax.sip.address.GenericURI getParameterAsURI(  java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getParameterValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  long getParameterAsLong(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getParameterAsInt(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.NameValueList getParameters();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getMultiParameterValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getParameterAsBoolean(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator getMultiParameterNames();
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator getParameterNames();
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.NameValue getNameValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMultiParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  float getParameterAsFloat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.DuplicateNameValueList getMultiParameters();
   @Source(SUSI_NO_CATEGORY)  int getParameterAsHexInt(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class Priority{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPriority();
}
class Protocol{
    void setProtocol(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTransport();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProtocolVersion();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProtocol();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProtocolName();
}
class ProxyAuthenticate{
   @Source(SUSI_FILE_INFORMATION)  javax.sip.address.URI getURI();
}
class ProxyRequire{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getOptionTag();
}
class RAck{
    void setRSeqNumber(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setCSeqNumber(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getCSequenceNumber();
   @Source(SUSI_NO_CATEGORY)  long getRSequenceNumber();
   @Source(SUSI_NO_CATEGORY)  int getRSeqNumber();
   @Source(SUSI_NO_CATEGORY)  long getCSeqNumberLong();
   @Source(SUSI_NO_CATEGORY)  int getCSeqNumber();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMethod();
}
class RSeq{
    void setSequenceNumber(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getSequenceNumber();
   @Source(SUSI_NO_CATEGORY)  long getSeqNumber();
}
class Reason{
    void setText(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setCause(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getCause();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getText();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProtocol();
}
class ReplyTo{
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.HostPort getHostPort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayName();
}
class RequestLine{
   @Source(SUSI_FILE_INFORMATION)  gov.nist.javax.sip.address.GenericURI getUri();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getVersionMajor();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMethod();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSipVersion();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getVersionMinor();
}
class Require{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getOptionTag();
}
class RetryAfter{
    void setDuration(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setRetryAfter(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getComment();
   @Source(SUSI_NO_CATEGORY)  int getDuration();
   @Source(SUSI_NO_CATEGORY)  int getRetryAfter();
}
class SIPDate{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMonth();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getWkday();
   @Source(SUSI_NO_CATEGORY)  int getYear();
   @Source(SUSI_NO_CATEGORY)  int getDeltaSeconds();
   @Source(SUSI_NO_CATEGORY)  int getMinute();
   @Source(SUSI_NO_CATEGORY)  int getHour();
   @Source(SUSI_NO_CATEGORY)  java.util.Calendar getJavaCal();
   @Source(SUSI_NO_CATEGORY)  int getSecond();
}
class SIPDateHeader{
    void setDate(  @Sink(SUSI_NO_CATEGORY) java.util.Calendar arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Calendar getDate();
}
class SIPETag{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getETag();
}
class SIPHeader{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHeaderName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHeaderValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String encode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  java.lang.StringBuffer encodeBody(  @Sink(SUSI_NO_CATEGORY) java.lang.StringBuffer arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue();
}
class SIPHeaderList{
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.SIPHeader set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.header.SIPHeader arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String debugDump();
   @Source(SUSI_NO_CATEGORY)  java.util.List getHeadersAsEncodedStrings();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.SIPHeader remove(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.StringBuffer encodeBody(  @Sink(SUSI_NO_CATEGORY) java.lang.StringBuffer arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] toArray(  @Sink(SUSI_NO_CATEGORY) java.lang.Object[] arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.Header getLast();
   @Source(SUSI_NO_CATEGORY)  java.lang.Class getMyClass();
   @Source(SUSI_NO_CATEGORY)  java.lang.String encodeBody();
   @Source(SUSI_NO_CATEGORY)  java.lang.String encode();
   @Source(SUSI_NO_CATEGORY)  int indexOf(  @Sink(SUSI_NO_CATEGORY) gov.nist.core.GenericObject arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.SIPHeader get(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator iterator();
   @Source(SUSI_NO_CATEGORY)  java.util.List getHeaderList();
   @Source(SUSI_NO_CATEGORY)  java.util.ListIterator listIterator(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
   @Source(SUSI_NO_CATEGORY)  java.util.List subList(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int indexOf(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  int lastIndexOf(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.Header getFirst();
   @Source(SUSI_NO_CATEGORY)  java.util.ListIterator listIterator();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] toArray();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
}
class SIPIfMatch{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getETag();
}
class SIPObject{
   @Source(SUSI_NO_CATEGORY)  java.lang.String debugDump();
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
}
class Server{
   @Source(SUSI_NO_CATEGORY)  java.util.ListIterator getProduct();
}
class StatusLine{
   @Source(SUSI_NO_CATEGORY)  int getStatusCode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getVersionMajor();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getVersionMinor();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getReasonPhrase();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSipVersion();
}
class Subject{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSubject();
}
class SubscriptionState{
   @Source(SUSI_NO_CATEGORY)  int getExpires();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getReasonCode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getState();
   @Source(SUSI_NO_CATEGORY)  int getRetryAfter();
}
class Supported{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getOptionTag();
}
class TimeStamp{
   @Source(SUSI_NO_CATEGORY)  float getDelay();
   @Source(SUSI_NO_CATEGORY)  long getTime();
   @Source(SUSI_NO_CATEGORY)  int getTimeDelay();
   @Source(SUSI_NO_CATEGORY)  float getTimeStamp();
}
class To{
    void setTag(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUserAtHostPort();
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.HostPort getHostPort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTag();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayName();
}
class Unsupported{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getOptionTag();
}
class UserAgent{
   @Source(SUSI_NO_CATEGORY)  java.util.ListIterator getProduct();
}
class Via{
    void setHost(  @Sink(SUSI_NO_CATEGORY) gov.nist.core.Host arg0);
    void setTTL(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setReceived(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setMAddr(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setProtocolVersion(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setTransport(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setPort(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setProtocol(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setHost(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setBranch(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMAddr();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getBranch();
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.HostPort getSentBy();
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.NameValueList getViaParms();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getReceived();
   @Source(SUSI_NO_CATEGORY)  int getRPort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTransport();
   @Source(SUSI_NO_CATEGORY)  int getTTL();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProtocolVersion();
   @Source(SUSI_NO_CATEGORY)  int getPort();
   @Source(SUSI_NO_CATEGORY)  javax.sip.address.Hop getHop();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProtocol();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.Protocol getSentProtocol();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSentProtocolField();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHost();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getComment();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSentByField();
}
class WWWAuthenticate{
   @Source(SUSI_FILE_INFORMATION)  javax.sip.address.URI getURI();
}
class Warning{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAgent();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getText();
   @Source(SUSI_NO_CATEGORY)  int getCode();
}

package com.android.videoeditor.widgets;

class AudioTrackLinearLayout{
    void setWaveformExtractionComplete(  @Sink(SUSI_LOG) java.lang.String arg0);
    void setWaveformExtractionProgress(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) int arg1);
    void setSelected(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog onCreateDialog(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
}
class AudioTrackView{
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.WaveformData getWaveformData();
}
class HorizontalScrollView{
   @Source(SUSI_NO_CATEGORY)  boolean performAccessibilityAction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void draw(  @Sink(SUSI_NO_CATEGORY) android.graphics.Canvas arg0);
    void setOverScrollMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getMaxScrollAmount();
   @Source(SUSI_NO_CATEGORY)  float getRightFadingEdgeStrength();
   @Source(SUSI_NO_CATEGORY)  float getLeftFadingEdgeStrength();
}
class ImageViewTouchBase{
    void setImageBitmapResetBase(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  float getMaxZoom();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getImageBitmap();
   @Source(SUSI_NO_CATEGORY)  float getScale();
}
class MediaItemView{
    boolean setBitmap(  @Sink(SUSI_LOG) android.graphics.Bitmap arg0, @Sink(SUSI_LOG) int arg1, @Sink(SUSI_LOG) int arg2);
   @Source(SUSI_NO_CATEGORY)  android.view.View$DragShadowBuilder getShadowBuilder();
}
class MediaLinearLayout{
    android.view.View addTransition(  @Sink(SUSI_LOG) com.android.videoeditor.service.MovieTransition arg0, @Sink(SUSI_LOG) java.lang.String arg1);
    void setSelected(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setTransitionThumbnails(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap[] arg1);
   @Source(SUSI_NO_CATEGORY)  boolean setMediaItemThumbnail(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setSelectedView(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getSelectedViewPos();
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog onCreateDialog(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
}
class OverlayLinearLayout{
    void setSelected(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog onCreateDialog(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
}
class OverlayLinearLayout$1{
   @Source(SUSI_NO_CATEGORY)  boolean onSingleTapConfirmed(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.view.MotionEvent arg2);
}
class OverlayView{
    void setSelected(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int getState();
}
class ProgressBar{
   @Source(SUSI_NO_CATEGORY)  com.android.videoeditor.widgets.ProgressBar getProgressBar(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  int getHeight();
}
class ThumbnailCache{
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap get(  @Sink(SUSI_NO_CATEGORY) com.android.videoeditor.widgets.ThumbnailKey arg0);
}
class TimelineHorizontalScrollView{
    void setScaleListener(  @Sink(SUSI_NO_CATEGORY) android.view.ScaleGestureDetector$SimpleOnScaleGestureListener arg0);
}
class TimelineRelativeLayout{
    void setSelected(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}

package android.accounts;

class AbstractAccountAuthenticator{
   @Source(SUSI_ACCOUNT_INFORMATION)  android.os.Bundle getAccountRemovalAllowed(  android.accounts.AccountAuthenticatorResponse arg0, android.accounts.Account arg1);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder getIBinder();
}
class AbstractAccountAuthenticator$Transport{
    void updateCredentials(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.IAccountAuthenticatorResponse arg0, @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg1, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg2, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Bundle arg3);
    void getAuthTokenLabel(  @Sink(SUSI_LOG) android.accounts.IAccountAuthenticatorResponse arg0, @Sink(SUSI_LOG) java.lang.String arg1);
}
class Account{
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
}
class AccountAndUser{
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
}
class AccountAuthenticatorActivity{
    void setWallpaper(  @Sink(SUSI_ACCOUNT_SETTINGS) java.io.InputStream arg0);
    void setRequestedOrientation(  @Sink(SUSI_ACCOUNT_SETTINGS) int arg0);
    void sendOrderedBroadcast(  @Sink(SUSI_ACCOUNT_SETTINGS) android.content.Intent arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1, @Sink(SUSI_ACCOUNT_SETTINGS) android.content.BroadcastReceiver arg2, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Handler arg3, @Sink(SUSI_ACCOUNT_SETTINGS) int arg4, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg5, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Bundle arg6);
    void sendBroadcast(  @Sink(SUSI_ACCOUNT_SETTINGS) android.content.Intent arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1);
    android.content.ComponentName startService(  @Sink(SUSI_ACCOUNT_SETTINGS) android.content.Intent arg0);
}
class AccountAuthenticatorCache{
   @Source(SUSI_NO_CATEGORY)  android.content.pm.RegisteredServicesCache$ServiceInfo getServiceInfo(  @Sink(SUSI_NO_CATEGORY) android.accounts.AuthenticatorDescription arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.accounts.AuthenticatorDescription parseServiceAttributes(  @Sink(SUSI_NO_CATEGORY) android.content.res.Resources arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.util.AttributeSet arg2);
}
class AccountAuthenticatorCache$MySerializer{
    void writeAsXml(  @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.Object arg0, @Sink(SUSI_ACCOUNT_SETTINGS) org.xmlpull.v1.XmlSerializer arg1);
}
class AccountManager{
    void invalidateAuthToken(  @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1);
    android.accounts.AccountManagerFuture updateCredentials(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Bundle arg2, @Sink(SUSI_ACCOUNT_SETTINGS) android.app.Activity arg3, @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.AccountManagerCallback arg4, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Handler arg5);
    void setUserData(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg2);
    android.content.Intent newChooseAccountIntent(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.util.ArrayList arg1, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String[] arg2, @Sink(SUSI_ACCOUNT_SETTINGS) boolean arg3, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg4, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg5, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String[] arg6, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Bundle arg7);
    void updateAppPermission(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1, @Sink(SUSI_ACCOUNT_SETTINGS) int arg2, @Sink(SUSI_ACCOUNT_SETTINGS) boolean arg3);
    void setAuthToken(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg2);
    void setPassword(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1);
    void addOnAccountsUpdatedListener(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.OnAccountsUpdateListener arg0, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Handler arg1, @Sink(SUSI_ACCOUNT_SETTINGS) boolean arg2);
    android.accounts.AccountManagerFuture addAccount(  @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String[] arg2, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Bundle arg3, @Sink(SUSI_ACCOUNT_SETTINGS) android.app.Activity arg4, @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.AccountManagerCallback arg5, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Handler arg6);
    boolean addAccountExplicitly(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Bundle arg2);
   @Source(SUSI_ACCOUNT_INFORMATION)  java.lang.String blockingGetAuthToken(  android.accounts.Account arg0, java.lang.String arg1, boolean arg2);
   @Source(SUSI_ACCOUNT_INFORMATION)  java.lang.String getPassword(  android.accounts.Account arg0);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.AccountManagerFuture getAuthTokenByFeatures(  java.lang.String arg0, java.lang.String arg1, java.lang.String[] arg2, android.app.Activity arg3, android.os.Bundle arg4, android.os.Bundle arg5, android.accounts.AccountManagerCallback arg6, android.os.Handler arg7);
   @Source(SUSI_ACCOUNT_INFORMATION)  java.util.HashMap access$1300(  android.accounts.AccountManager arg0);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.AccountManagerFuture confirmCredentials(  android.accounts.Account arg0, android.os.Bundle arg1, android.app.Activity arg2, android.accounts.AccountManagerCallback arg3, android.os.Handler arg4);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.AccountManagerFuture getAuthToken(  android.accounts.Account arg0, java.lang.String arg1, boolean arg2, android.accounts.AccountManagerCallback arg3, android.os.Handler arg4);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.Account[] getAccountsByTypeAsUser(  java.lang.String arg0, android.os.UserHandle arg1);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.AccountManagerFuture getAuthToken(  android.accounts.Account arg0, java.lang.String arg1, android.os.Bundle arg2, boolean arg3, android.accounts.AccountManagerCallback arg4, android.os.Handler arg5);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.AccountManager get(  android.content.Context arg0);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.Account[] getAccountsByType(  java.lang.String arg0);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.AccountManagerFuture getAuthTokenLabel(  java.lang.String arg0, java.lang.String arg1, android.accounts.AccountManagerCallback arg2, android.os.Handler arg3);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.AccountManagerFuture editProperties(  java.lang.String arg0, android.app.Activity arg1, android.accounts.AccountManagerCallback arg2, android.os.Handler arg3);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.AccountManagerFuture getAuthToken(  android.accounts.Account arg0, java.lang.String arg1, android.os.Bundle arg2, android.app.Activity arg3, android.accounts.AccountManagerCallback arg4, android.os.Handler arg5);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.AccountManagerFuture confirmCredentialsAsUser(  android.accounts.Account arg0, android.os.Bundle arg1, android.app.Activity arg2, android.accounts.AccountManagerCallback arg3, android.os.Handler arg4, android.os.UserHandle arg5);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.Account[] getAccounts();
   @Source(SUSI_ACCOUNT_INFORMATION)  java.lang.String peekAuthToken(  android.accounts.Account arg0, java.lang.String arg1);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.os.Handler access$600(  android.accounts.AccountManager arg0);
   @Source(SUSI_ACCOUNT_INFORMATION)  java.lang.Exception access$400(  android.accounts.AccountManager arg0, int arg1, java.lang.String arg2);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.AccountManagerFuture hasFeatures(  android.accounts.Account arg0, java.lang.String[] arg1, android.accounts.AccountManagerCallback arg2, android.os.Handler arg3);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.IAccountManager access$000(  android.accounts.AccountManager arg0);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.AccountManagerFuture removeAccount(  android.accounts.Account arg0, android.accounts.AccountManagerCallback arg1, android.os.Handler arg2);
   @Source(SUSI_ACCOUNT_INFORMATION)  java.lang.String getUserData(  android.accounts.Account arg0, java.lang.String arg1);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(  java.lang.String arg0, java.lang.String[] arg1, android.accounts.AccountManagerCallback arg2, android.os.Handler arg3);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.AuthenticatorDescription[] getAuthenticatorTypes();
}
class AccountManager$AmsTask{
    void set(  @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Bundle arg0);
    void set(  @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.Object arg0);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.os.Bundle getResult(  long arg0, java.util.concurrent.TimeUnit arg1);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.os.Bundle getResult();
}
class AccountManager$AmsTask$Response{
    void onResult(  @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Bundle arg0);
    void onError(  @Sink(SUSI_ACCOUNT_SETTINGS) int arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1);
}
class AccountManager$Future2Task{
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.AccountManager$Future2Task start();
   @Source(SUSI_ACCOUNT_INFORMATION)  java.lang.Object getResult();
   @Source(SUSI_ACCOUNT_INFORMATION)  java.lang.Object getResult(  long arg0, java.util.concurrent.TimeUnit arg1);
}
class AccountManager$GetAuthTokenByTypeAndFeaturesTask$1{
    void run(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.AccountManagerFuture arg0);
}
class AccountManagerService{
    boolean access$1100(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.AccountManagerService arg0, @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.AccountManagerService$UserAccounts arg1, @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg2, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg3, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg4);
    void installNotification(  @Sink(SUSI_ACCOUNT_SETTINGS) int arg0, @Sink(SUSI_ACCOUNT_SETTINGS) android.app.Notification arg1, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.UserHandle arg2);
    void getAuthToken(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.IAccountManagerResponse arg0, @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg1, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg2, @Sink(SUSI_ACCOUNT_SETTINGS) boolean arg3, @Sink(SUSI_ACCOUNT_SETTINGS) boolean arg4, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Bundle arg5);
    java.util.HashMap readAuthTokensForAccountFromDatabaseLocked(  @Sink(SUSI_ACCOUNT_SETTINGS) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg1);
    boolean addAccount(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Bundle arg2);
    void setPassword(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1);
    void writeUserDataIntoCacheLocked(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.AccountManagerService$UserAccounts arg0, @Sink(SUSI_ACCOUNT_SETTINGS) android.database.sqlite.SQLiteDatabase arg1, @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg2, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg3, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg4);
    java.util.HashMap readUserDataForAccountFromDatabaseLocked(  @Sink(SUSI_ACCOUNT_SETTINGS) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg1);
    java.lang.String readAuthTokenInternal(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.AccountManagerService$UserAccounts arg0, @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg1, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg2);
    void updateAppPermission(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1, @Sink(SUSI_ACCOUNT_SETTINGS) int arg2, @Sink(SUSI_ACCOUNT_SETTINGS) boolean arg3);
    void writeAuthTokenIntoCacheLocked(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.AccountManagerService$UserAccounts arg0, @Sink(SUSI_ACCOUNT_SETTINGS) android.database.sqlite.SQLiteDatabase arg1, @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg2, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg3, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg4);
    void setUserData(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg2);
    void invalidateAuthToken(  @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1);
    void setAuthToken(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg2);
    java.lang.String peekAuthToken(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1);
    java.lang.String readUserDataInternal(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.AccountManagerService$UserAccounts arg0, @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg1, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg2);
    void getAccountsByFeatures(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.IAccountManagerResponse arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String[] arg2);
    android.os.IBinder onBind(  @Sink(SUSI_ACCOUNT_SETTINGS) android.content.Intent arg0);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.AccountAndUser[] getAllAccounts();
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.AuthenticatorDescription[] getAuthenticatorTypes();
   @Source(SUSI_ACCOUNT_INFORMATION)  java.lang.String getUserData(  android.accounts.Account arg0, java.lang.String arg1);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.Account[] getAccountsAsUser(  java.lang.String arg0, int arg1);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.Account[] getAccounts(  int arg0);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.Account[] getAccountsFromCacheLocked(  android.accounts.AccountManagerService$UserAccounts arg0, java.lang.String arg1);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.AccountManagerService getSingleton();
   @Source(SUSI_ACCOUNT_INFORMATION)  java.lang.String getPassword(  android.accounts.Account arg0);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.AccountAndUser[] getRunningAccounts();
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.AccountManagerService$UserAccounts getUserAccounts(  int arg0);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.Account[] getAccounts(  java.lang.String arg0);
}
class AccountManagerService$3{
    void onResult(  @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Bundle arg0);
}
class AccountManagerService$4{
    void onResult(  @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Bundle arg0);
}
class AccountManagerService$GetAccountsByTypeAndFeatureSession{
    void sendResult();
}
class AccountManagerService$RemoveAccountSession{
    void onResult(  @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Bundle arg0);
}
class AccountManagerService$Session{
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.IAccountManagerResponse getResponseAndClose();
   @Source(SUSI_ACCOUNT_INFORMATION)  java.lang.String toDebugString();
}
class AccountManagerService$TestFeaturesSession{
    void onResult(  @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Bundle arg0);
}
class AuthenticatorDescription{
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
}
class ChooseAccountTypeActivity$AccountArrayAdapter{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
}
class IAccountAuthenticator$Stub{
    boolean onTransact(  @Sink(SUSI_ACCOUNT_SETTINGS) int arg0, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Parcel arg1, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Parcel arg2, @Sink(SUSI_ACCOUNT_SETTINGS) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
   @Source(SUSI_NO_CATEGORY)  android.accounts.IAccountAuthenticator asInterface(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
}
class IAccountAuthenticator$Stub$Proxy{
    void getAccountRemovalAllowed(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.IAccountAuthenticatorResponse arg0, @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg1);
    void hasFeatures(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.IAccountAuthenticatorResponse arg0, @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg1, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String[] arg2);
    void getAuthTokenLabel(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.IAccountAuthenticatorResponse arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1);
    void updateCredentials(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.IAccountAuthenticatorResponse arg0, @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg1, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg2, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Bundle arg3);
    void editProperties(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.IAccountAuthenticatorResponse arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1);
    void getAuthToken(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.IAccountAuthenticatorResponse arg0, @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg1, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg2, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Bundle arg3);
    void addAccount(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.IAccountAuthenticatorResponse arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg2, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String[] arg3, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Bundle arg4);
    void confirmCredentials(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.IAccountAuthenticatorResponse arg0, @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg1, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Bundle arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IAccountAuthenticatorResponse$Stub{
   @Source(SUSI_NO_CATEGORY)  android.accounts.IAccountAuthenticatorResponse asInterface(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IAccountAuthenticatorResponse$Stub$Proxy{
    void onError(  @Sink(SUSI_ACCOUNT_SETTINGS) int arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IAccountManager$Stub{
    boolean onTransact(  @Sink(SUSI_ACCOUNT_SETTINGS) int arg0, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Parcel arg1, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Parcel arg2, @Sink(SUSI_ACCOUNT_SETTINGS) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.accounts.IAccountManager asInterface(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IAccountManager$Stub$Proxy{
    void updateAppPermission(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1, @Sink(SUSI_ACCOUNT_SETTINGS) int arg2, @Sink(SUSI_ACCOUNT_SETTINGS) boolean arg3);
    void removeAccount(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.IAccountManagerResponse arg0, @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg1);
    void setAuthToken(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg2);
    void updateCredentials(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.IAccountManagerResponse arg0, @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg1, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg2, @Sink(SUSI_ACCOUNT_SETTINGS) boolean arg3, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Bundle arg4);
    void getAuthToken(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.IAccountManagerResponse arg0, @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg1, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg2, @Sink(SUSI_ACCOUNT_SETTINGS) boolean arg3, @Sink(SUSI_ACCOUNT_SETTINGS) boolean arg4, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Bundle arg5);
    void hasFeatures(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.IAccountManagerResponse arg0, @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg1, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String[] arg2);
    void getAccountsByFeatures(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.IAccountManagerResponse arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String[] arg2);
    java.lang.String peekAuthToken(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1);
    void setPassword(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1);
    void setUserData(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg2);
    void getAuthTokenLabel(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.IAccountManagerResponse arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg2);
    void editProperties(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.IAccountManagerResponse arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1, @Sink(SUSI_ACCOUNT_SETTINGS) boolean arg2);
    void confirmCredentialsAsUser(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.IAccountManagerResponse arg0, @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg1, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Bundle arg2, @Sink(SUSI_ACCOUNT_SETTINGS) boolean arg3, @Sink(SUSI_ACCOUNT_SETTINGS) int arg4);
    boolean addAccount(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.Account arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Bundle arg2);
    void invalidateAuthToken(  @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1);
    void addAcount(  @Sink(SUSI_ACCOUNT_SETTINGS) android.accounts.IAccountManagerResponse arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg2, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String[] arg3, @Sink(SUSI_ACCOUNT_SETTINGS) boolean arg4, @Sink(SUSI_ACCOUNT_SETTINGS) android.os.Bundle arg5);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.Account[] getAccountsAsUser(  java.lang.String arg0, int arg1);
   @Source(SUSI_ACCOUNT_INFORMATION)  java.lang.String getPassword(  android.accounts.Account arg0);
   @Source(SUSI_ACCOUNT_INFORMATION)  android.accounts.Account[] getAccounts(  java.lang.String arg0);
   @Source(SUSI_ACCOUNT_INFORMATION)  java.lang.String getUserData(  android.accounts.Account arg0, java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NO_CATEGORY)  android.accounts.AuthenticatorDescription[] getAuthenticatorTypes();
}
class IAccountManagerResponse$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
   @Source(SUSI_NO_CATEGORY)  android.accounts.IAccountManagerResponse asInterface(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
}
class IAccountManagerResponse$Stub$Proxy{
    void onError(  @Sink(SUSI_ACCOUNT_SETTINGS) int arg0, @Sink(SUSI_ACCOUNT_SETTINGS) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}

package com.android.systemui.statusbar.tablet;

class InputMethodButton{
    void setIconImage(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class NotificationPanel{
    void setSettingsEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getClearButton();
}
class NotificationPanelTitle{
    void setPressed(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class TabletStatusBar{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void setHardKeyboardStatus(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setSystemUiVisibility(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setLightsOn(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
   @Source(SUSI_NO_CATEGORY)  android.view.WindowManager$LayoutParams getSearchLayoutParams(  @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup$LayoutParams arg0);
   @Source(SUSI_NO_CATEGORY)  int getStatusBarGravity();
   @Source(SUSI_NO_CATEGORY)  int getStatusBarHeight();
   @Source(SUSI_NO_CATEGORY)  android.view.View getStatusBarView();
}
class TabletStatusBarView{
    void setDelegateView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
    void setIgnoreChildren(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.View arg2);
    void setBar(  @Sink(SUSI_NO_CATEGORY) com.android.systemui.statusbar.BaseStatusBar arg0);
}

package javax.security.auth.x500;

class X500Principal{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.Map arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}

package com.android.contacts.vcard;

class CancelActivity{
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Dialog onCreateDialog(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg1);
}
class ExportProcessor{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.vcard.ExportRequest getRequest();
   @Source(SUSI_CONTACT_INFORMATION)  int getType();
}
class ExportVCardActivity{
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Dialog onCreateDialog(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg1);
}
class ImportProcessor{
   @Source(SUSI_CONTACT_INFORMATION)  int getType();
}
class ImportVCardActivity{
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Dialog onCreateDialog(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg1);
}
class ImportVCardActivity$VCardCacheThread{
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri[] getSourceUris();
}
class ImportVCardActivity$VCardFile{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getCanonicalPath();
   @Source(SUSI_CONTACT_INFORMATION)  long getLastModified();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getName();
}
class NfcImportVCardActivity$ImportTask{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.vcard.ImportRequest doInBackground(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.vcard.VCardService[] arg0);
}
class ProcessorBase{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Object get();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Object get(  @Sink(SUSI_CONTACT_INFORMATION) long arg0, @Sink(SUSI_CONTACT_INFORMATION) java.util.concurrent.TimeUnit arg1);
}
class VCardService$MyBinder{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.vcard.VCardService getService();
}

package com.android.emailcommon.provider;

class Account{
    void refresh(  @Sink(SUSI_EMAIL) android.content.Context arg0);
    void writeToParcel(  @Sink(SUSI_EMAIL) android.os.Parcel arg0, @Sink(SUSI_EMAIL) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProtocol(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  android.net.Uri save(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.provider.Account restoreAccountWithId(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
}
class EmailContent{
   @Source(SUSI_EMAIL)  int update(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) android.content.ContentValues arg1);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getUri();
   @Source(SUSI_NO_CATEGORY)  android.net.Uri save(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.provider.EmailContent getContent(  @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Class arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.provider.EmailContent restoreContentWithId(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Class arg1, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3, @Sink(SUSI_NO_CATEGORY) long arg4);
}
class EmailContent$Attachment{
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.provider.EmailContent$Attachment restoreAttachmentWithId(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.provider.EmailContent$Attachment[] restoreAttachmentsWithMessageId(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
}
class EmailContent$Body{
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.provider.EmailContent$Body restoreBodyWithMessageId(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
}
class EmailContent$Message{
   @Source(SUSI_EMAIL)  android.net.Uri save(  @Sink(SUSI_EMAIL) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.provider.EmailContent$Message restoreMessageWithId(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
}
class HostAuth{
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.provider.HostAuth restoreHostAuthWithId(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
}
class Mailbox{
    void writeToParcel(  @Sink(SUSI_EMAIL) android.os.Parcel arg0, @Sink(SUSI_EMAIL) int arg1);
   @Source(SUSI_EMAIL)  com.android.emailcommon.provider.Mailbox restoreMailboxOfType(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) int arg2);
   @Source(SUSI_EMAIL)  com.android.emailcommon.provider.Mailbox restoreMailboxWithId(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) long arg1);
   @Source(SUSI_EMAIL)  long findMailboxOfType(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) int arg2);
}
class Policy{
    void setAttachmentFlagsForNewPolicy(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) com.android.emailcommon.provider.Account arg1, @Sink(SUSI_EMAIL) com.android.emailcommon.provider.Policy arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.provider.Policy restorePolicyWithId(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  android.net.Uri save(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}

package android.server.search;

class SearchManagerService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getSearchablesInGlobalSearch();
   @Source(SUSI_NETWORK_INFORMATION)  android.app.SearchableInfo getSearchableInfo(  android.content.ComponentName arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getGlobalSearchActivities();
   @Source(SUSI_NETWORK_INFORMATION)  android.content.ComponentName getWebSearchActivity();
   @Source(SUSI_NETWORK_INFORMATION)  android.content.ComponentName getGlobalSearchActivity();
   @Source(SUSI_NETWORK_INFORMATION)  android.content.ComponentName getAssistIntent(  int arg0);
}
class Searchables{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getSearchablesList();
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getGlobalSearchActivities();
   @Source(SUSI_NO_CATEGORY)  android.app.SearchableInfo getSearchableInfo(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getSearchablesInGlobalSearchList();
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getWebSearchActivity();
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getGlobalSearchActivity();
}

package android.content.res;

class AssetFileDescriptor{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  long getDeclaredLength();
   @Source(SUSI_NO_CATEGORY)  java.io.FileDescriptor getFileDescriptor();
   @Source(SUSI_NO_CATEGORY)  long getLength();
   @Source(SUSI_NO_CATEGORY)  long getStartOffset();
   @Source(SUSI_NO_CATEGORY)  android.os.ParcelFileDescriptor getParcelFileDescriptor();
}
class AssetFileDescriptor$AutoCloseOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void write(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class AssetManager{
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream open(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream openNonAsset(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.res.AssetFileDescriptor openNonAssetFd(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.res.XmlResourceParser openXmlResourceParser(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream open(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream openNonAsset(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream openNonAsset(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.res.AssetFileDescriptor openNonAssetFd(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.res.AssetFileDescriptor openFd(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream openNonAsset(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.res.XmlResourceParser openXmlResourceParser(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int createTheme();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getResourceStringArray(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getThemeValue(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.util.TypedValue arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence[] getResourceTextArray(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.res.AssetManager getSystem();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getPooledString(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getResourceText(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getResourceBagText(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean getResourceValue(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.util.TypedValue arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
}
class AssetManager$AssetInputStream{
   @Source(SUSI_NO_CATEGORY)  int getAssetInt();
}
class ColorStateList{
   @Source(SUSI_NO_CATEGORY)  android.content.res.ColorStateList valueOf(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getColorForState(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getDefaultColor();
   @Source(SUSI_NO_CATEGORY)  android.content.res.ColorStateList createFromXml(  @Sink(SUSI_NO_CATEGORY) android.content.res.Resources arg0, @Sink(SUSI_NO_CATEGORY) org.xmlpull.v1.XmlPullParser arg1);
}
class CompatibilityInfo{
   @Source(SUSI_NO_CATEGORY)  android.content.res.CompatibilityInfo$Translator getTranslator();
}
class CompatibilityInfo$Translator{
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getTranslatedContentInsets(  @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getTranslatedVisibleInsets(  @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Region getTranslatedTouchableArea(  @Sink(SUSI_NO_CATEGORY) android.graphics.Region arg0);
}
class Configuration{
    void setTo(  @Sink(SUSI_NO_CATEGORY) android.content.res.Configuration arg0);
    void setLayoutDirection(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  int getLayoutDirection();
}
class Resources{
    void updateConfiguration(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.res.Configuration arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.util.DisplayMetrics arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getText(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.res.XmlResourceParser getLayout(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.res.ColorStateList getColorStateList(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.res.XmlResourceParser loadXmlResourceParser(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
   @Source(SUSI_NO_CATEGORY)  android.content.res.AssetManager getAssets();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getResourcePackageName(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Movie getMovie(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getText(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getQuantityString(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Object[] arg2);
   @Source(SUSI_NO_CATEGORY)  int[] getIntArray(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getStringArray(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getResourceTypeName(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getDimensionPixelSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getColor(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getDimension(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.res.ColorStateList loadColorStateList(  @Sink(SUSI_NO_CATEGORY) android.util.TypedValue arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.res.Resources getSystem();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence[] getTextArray(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getInteger(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getDimensionPixelOffset(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object[] arg1);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable loadDrawable(  @Sink(SUSI_NO_CATEGORY) android.util.TypedValue arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getQuantityString(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.res.CompatibilityInfo getCompatibilityInfo();
   @Source(SUSI_NO_CATEGORY)  android.content.res.XmlResourceParser getXml(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.util.DisplayMetrics getDisplayMetrics();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getResourceEntryName(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.res.XmlResourceParser loadXmlResourceParser(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.res.Configuration getConfiguration();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getDrawableForDensity(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getQuantityText(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getDrawable(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getFraction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getIdentifier(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getResourceName(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.res.XmlResourceParser getAnimation(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.res.TypedArray obtainTypedArray(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Resources$Theme{
    void setTo(  @Sink(SUSI_NO_CATEGORY) android.content.res.Resources$Theme arg0);
    void dump(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
}
class StringBlock{
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class TypedArray{
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence[] getTextArray(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getDrawable(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getFloat(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNonConfigurationString(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getLayoutDimension(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getIndexCount();
   @Source(SUSI_NO_CATEGORY)  android.content.res.Resources getResources();
   @Source(SUSI_NO_CATEGORY)  int getDimensionPixelOffset(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  float getFraction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) float arg3);
   @Source(SUSI_NO_CATEGORY)  int getIndex(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getDimension(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_NO_CATEGORY)  int getColor(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.res.ColorStateList getColorStateList(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNonResourceString(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getLayoutDimension(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getText(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPositionDescription();
   @Source(SUSI_NO_CATEGORY)  int getInteger(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getResourceId(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getDimensionPixelSize(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class XmlBlock$Parser{
    void setFeature(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setInput(  @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void setInput(  @Sink(SUSI_NO_CATEGORY) java.io.Reader arg0);
   @Source(SUSI_FILE_INFORMATION)  java.lang.String getNamespaceUri(  int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getText();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAttributeValue(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAttributeValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNamespace(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getStyleAttribute();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPositionDescription();
   @Source(SUSI_NO_CATEGORY)  int getAttributeResourceValue(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getPooledString(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getDepth();
   @Source(SUSI_NO_CATEGORY)  int getAttributeNameResource(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getColumnNumber();
   @Source(SUSI_NO_CATEGORY)  char[] getTextCharacters(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNamespace();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAttributePrefix(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getAttributeCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAttributeName(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getAttributeUnsignedIntValue(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  int getLineNumber();
   @Source(SUSI_NO_CATEGORY)  int getNamespaceCount(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getAttributeFloatValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) float arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getClassAttribute();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAttributeNamespace(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInputEncoding();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNamespacePrefix(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getAttributeIntValue(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPrefix();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getIdAttribute();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAttributeType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getEventType();
   @Source(SUSI_NO_CATEGORY)  float getAttributeFloatValue(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
}

package com.android.nfc;

class LlcpPacket{
   @Source(SUSI_NFC)  byte[] getDataBuffer();
   @Source(SUSI_NFC)  int getRemoteSap();
}
class NfcDispatcher{
   @Source(SUSI_NFC)  boolean tryTech(  @Sink(SUSI_NFC) com.android.nfc.NfcDispatcher$DispatchInfo arg0, @Sink(SUSI_NFC) android.nfc.Tag arg1);
    void dump(  @Sink(SUSI_NFC) java.io.FileDescriptor arg0, @Sink(SUSI_NFC) java.io.PrintWriter arg1, @Sink(SUSI_NFC) java.lang.String[] arg2);
   @Source(SUSI_NFC)  android.content.Intent getAppSearchIntent(  @Sink(SUSI_NFC) java.lang.String arg0);
}
class NfcDispatcher$DispatchInfo{
   @Source(SUSI_NFC)  boolean tryStartActivity(  @Sink(SUSI_NFC) android.content.Intent arg0);
   @Source(SUSI_NFC)  android.content.Intent setTagIntent();
   @Source(SUSI_NFC)  android.content.Intent setTechIntent();
}
class NfcService{
    void dump(  @Sink(SUSI_NFC) java.io.FileDescriptor arg0, @Sink(SUSI_NFC) java.io.PrintWriter arg1, @Sink(SUSI_NFC) java.lang.String[] arg2);
    void onSeApduReceived(  @Sink(SUSI_NFC) byte[] arg0);
    void onCardEmulationAidSelected(  @Sink(SUSI_NFC) byte[] arg0);
    void onSeMifareAccess(  @Sink(SUSI_NFC) byte[] arg0);
    void saveNfcOnSetting(  @Sink(SUSI_NFC) boolean arg0);
    void sendMockNdefTag(  @Sink(SUSI_NFC) android.nfc.NdefMessage arg0);
   @Source(SUSI_NFC)  byte[] doTransceiveNoLock(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) byte[] arg1);
   @Source(SUSI_NFC)  com.android.nfc.DeviceHost$LlcpSocket createLlcpSocket(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) int arg1, @Sink(SUSI_NFC) int arg2, @Sink(SUSI_NFC) int arg3);
   @Source(SUSI_NFC)  com.android.nfc.NfcService getInstance();
   @Source(SUSI_NFC)  com.android.nfc.DeviceHost$LlcpServerSocket createLlcpServerSocket(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) java.lang.String arg1, @Sink(SUSI_NFC) int arg2, @Sink(SUSI_NFC) int arg3, @Sink(SUSI_NFC) int arg4);
   @Source(SUSI_NFC)  com.android.nfc.DeviceHost$LlcpConnectionlessSocket createLlcpConnectionLessSocket(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) java.lang.String arg1);
   @Source(SUSI_NFC)  byte[] doTransceive(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) byte[] arg1);
}
class NfcService$NfcAdapterExtrasService{
    void setCardEmulationRoute(  @Sink(SUSI_NFC) java.lang.String arg0, @Sink(SUSI_NFC) int arg1);
   @Source(SUSI_NFC)  android.os.Bundle open(  @Sink(SUSI_NFC) java.lang.String arg0, @Sink(SUSI_NFC) android.os.IBinder arg1);
   @Source(SUSI_NFC)  java.lang.String getDriverName(  @Sink(SUSI_NFC) java.lang.String arg0);
   @Source(SUSI_NFC)  int getCardEmulationRoute(  @Sink(SUSI_NFC) java.lang.String arg0);
}
class NfcService$NfcAdapterService{
    void setForegroundDispatch(  @Sink(SUSI_NFC) android.app.PendingIntent arg0, @Sink(SUSI_NFC) android.content.IntentFilter[] arg1, @Sink(SUSI_NFC) android.nfc.TechListParcel arg2);
    void dump(  @Sink(SUSI_NFC) java.io.FileDescriptor arg0, @Sink(SUSI_NFC) java.io.PrintWriter arg1, @Sink(SUSI_NFC) java.lang.String[] arg2);
    void setNdefPushCallback(  @Sink(SUSI_NFC) android.nfc.INdefPushCallback arg0);
    void setP2pModes(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) int arg1);
    void dispatch(  @Sink(SUSI_NFC) android.nfc.Tag arg0);
   @Source(SUSI_NFC)  android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface(  @Sink(SUSI_NFC) java.lang.String arg0);
   @Source(SUSI_NFC)  int getState();
   @Source(SUSI_NFC)  android.nfc.INfcTag getNfcTagInterface();
}
class NfcService$NfcServiceHandler{
    void handleMessage(  @Sink(SUSI_NFC) android.os.Message arg0);
}
class NfcService$TagService{
   @Source(SUSI_NFC)  android.nfc.Tag rediscover(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  int ndefWrite(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) android.nfc.NdefMessage arg1);
   @Source(SUSI_NFC)  int setTimeout(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) int arg1);
   @Source(SUSI_NFC)  int getTimeout(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  int getMaxTransceiveLength(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  int[] getTechList(  @Sink(SUSI_NFC) int arg0);
}
class NfceeAccessControl{
   @Source(SUSI_NFC)  boolean check(  @Sink(SUSI_NFC) android.content.pm.ApplicationInfo arg0);
   @Source(SUSI_NFC)  boolean check(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) java.lang.String arg1);
    void dump(  @Sink(SUSI_NFC) java.io.FileDescriptor arg0, @Sink(SUSI_NFC) java.io.PrintWriter arg1, @Sink(SUSI_NFC) java.lang.String[] arg2);
}
class P2pLinkManager{
    void dump(  @Sink(SUSI_NFC) java.io.FileDescriptor arg0, @Sink(SUSI_NFC) java.io.PrintWriter arg1, @Sink(SUSI_NFC) java.lang.String[] arg2);
    void onSendComplete(  @Sink(SUSI_NFC) android.nfc.NdefMessage arg0, @Sink(SUSI_NFC) long arg1);
   @Source(SUSI_NFC)  boolean handleMessage(  @Sink(SUSI_NFC) android.os.Message arg0);
    void onReceiveComplete(  @Sink(SUSI_NFC) android.nfc.NdefMessage arg0);
   @Source(SUSI_NFC)  java.lang.String getMessageType(  @Sink(SUSI_NFC) android.nfc.NdefMessage arg0);
   @Source(SUSI_NFC)  int getMessageAarPresent(  @Sink(SUSI_NFC) android.nfc.NdefMessage arg0);
   @Source(SUSI_NFC)  android.nfc.NdefMessage createDefaultNdef(  @Sink(SUSI_NFC) java.lang.String arg0);
   @Source(SUSI_NFC)  int getMessageTnf(  @Sink(SUSI_NFC) android.nfc.NdefMessage arg0);
   @Source(SUSI_NFC)  int getMessageSize(  @Sink(SUSI_NFC) android.nfc.NdefMessage arg0);
}
class RegisteredComponentCache{
   @Source(SUSI_NFC)  java.util.ArrayList getComponents();
}
class SendUi{
   @Source(SUSI_NFC)  float getDegreesForRotation(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  android.graphics.Bitmap createScreenshot();
}

package android.opengl;

class EGLObjectHandle{
   @Source(SUSI_NO_CATEGORY)  int getHandle();
}
class GLException{
   @Source(SUSI_NO_CATEGORY)  int getError();
}
class GLLogWrapper$PointerInfo{
   @Source(SUSI_NO_CATEGORY)  int getStride();
}
class GLSurfaceView{
    void setRenderMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setEGLConfigChooser(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setEGLConfigChooser(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
   @Source(SUSI_NO_CATEGORY)  int getDebugFlags();
   @Source(SUSI_NO_CATEGORY)  boolean getPreserveEGLContextOnPause();
   @Source(SUSI_NO_CATEGORY)  int getRenderMode();
}
class GLSurfaceView$GLThread{
   @Source(SUSI_NO_CATEGORY)  int getRenderMode();
}
class GLUtils{
   @Source(SUSI_NO_CATEGORY)  int getType(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0);
   @Source(SUSI_NO_CATEGORY)  int getInternalFormat(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getEGLErrorString(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ManagedEGLContext{
   @Source(SUSI_NO_CATEGORY)  javax.microedition.khronos.egl.EGLContext getContext();
}

package com.android.contacts.test;

class InjectedServices{
    void setSystemService(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.Object arg1);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.SharedPreferences getSharedPreferences();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Object getSystemService(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.ContentResolver getContentResolver();
}

package com.android.bluetooth.opp;

class BluetoothOppBatch{
   @Source(SUSI_BLUETOOTH_INFORMATION)  com.android.bluetooth.opp.BluetoothOppShareInfo getPendingShare();
}
class BluetoothOppManager{
    void saveSendingFileInfo(  @Sink(SUSI_BLUETOOTH) java.lang.String arg0, @Sink(SUSI_BLUETOOTH) java.lang.String arg1, @Sink(SUSI_BLUETOOTH) boolean arg2);
    void saveSendingFileInfo(  @Sink(SUSI_BLUETOOTH) java.lang.String arg0, @Sink(SUSI_BLUETOOTH) java.util.ArrayList arg1, @Sink(SUSI_BLUETOOTH) boolean arg2);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getBatchSize();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getDeviceName(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  com.android.bluetooth.opp.BluetoothOppManager getInstance(  android.content.Context arg0);
}
class BluetoothOppPreference{
    void setChannel(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) int arg1, @Sink(SUSI_BLUETOOTH) int arg2);
    void setName(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) java.lang.String arg1);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getName(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  com.android.bluetooth.opp.BluetoothOppPreference getInstance(  android.content.Context arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getChannel(  android.bluetooth.BluetoothDevice arg0, int arg1);
}
class BluetoothOppReceiveFileInfo{
   @Source(SUSI_BLUETOOTH_INFORMATION)  com.android.bluetooth.opp.BluetoothOppReceiveFileInfo generateFileInfo(  android.content.Context arg0, int arg1);
}
class BluetoothOppReceiver{
    void onReceive(  @Sink(SUSI_BLUETOOTH) android.content.Context arg0, @Sink(SUSI_BLUETOOTH) android.content.Intent arg1);
}
class BluetoothOppRfcommTransport{
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getRemoteAddress();
}
class BluetoothOppSendFileInfo{
   @Source(SUSI_BLUETOOTH_INFORMATION)  com.android.bluetooth.opp.BluetoothOppSendFileInfo generateFileInfo(  android.content.Context arg0, android.net.Uri arg1, java.lang.String arg2);
}
class BluetoothOppService$2{
    void handleMessage(  @Sink(SUSI_BLUETOOTH) android.os.Message arg0);
}
class BluetoothOppTransfer{
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getBatchId();
}
class BluetoothOppUtility{
    void openReceivedFile(  @Sink(SUSI_BLUETOOTH) android.content.Context arg0, @Sink(SUSI_BLUETOOTH) java.lang.String arg1, @Sink(SUSI_BLUETOOTH) java.lang.String arg2, @Sink(SUSI_BLUETOOTH) java.lang.Long arg3, @Sink(SUSI_BLUETOOTH) android.net.Uri arg4);
    void retryTransfer(  @Sink(SUSI_BLUETOOTH) android.content.Context arg0, @Sink(SUSI_BLUETOOTH) com.android.bluetooth.opp.BluetoothOppTransferInfo arg1);
   @Source(SUSI_BLUETOOTH_INFORMATION)  com.android.bluetooth.opp.BluetoothOppSendFileInfo getSendFileInfo(  android.net.Uri arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getStatusDescription(  android.content.Context arg0, int arg1, java.lang.String arg2);
}
class Constants{
    void updateShareStatus(  @Sink(SUSI_BLUETOOTH) android.content.Context arg0, @Sink(SUSI_BLUETOOTH) int arg1, @Sink(SUSI_BLUETOOTH) int arg2);
}
class TestTcpServer{
    int onPut(  @Sink(SUSI_BLUETOOTH) javax.obex.Operation arg0);
}

package com.android.commands.uiautomator;

class Launcher$Command{
   @Source(SUSI_NO_CATEGORY)  java.lang.String name();
}
class RunTestCommand{
   @Source(SUSI_NO_CATEGORY)  com.android.uiautomator.testrunner.UiAutomatorTestRunner getRunner();
}

package android.os;

class AsyncTask{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get();
   @Source(SUSI_NO_CATEGORY)  android.os.AsyncTask$Status getStatus();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) java.util.concurrent.TimeUnit arg1);
}
class BatteryStats{
    void dumpLocked(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void dumpLocked(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0);
    void dumpCheckinLocked(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1, @Sink(SUSI_NO_CATEGORY) java.util.List arg2);
   @Source(SUSI_NO_CATEGORY)  long getRadioDataUptimeMs();
}
class BatteryStats$HistoryItem{
    void writeDelta(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) android.os.BatteryStats$HistoryItem arg1);
    void setTo(  @Sink(SUSI_NO_CATEGORY) android.os.BatteryStats$HistoryItem arg0);
}
class Binder{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.lang.String[] arg1);
    void dumpAsync(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.lang.String[] arg1);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NO_CATEGORY)  android.os.UserHandle getCallingUserHandle();
}
class Build{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRadioVersion();
}
class Bundle{
    void putBoolean(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void putBundle(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void putByteArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1);
    void putLongArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long[] arg1);
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle forPair(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void putLong(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
    void putFloat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void putByte(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) byte arg1);
    void putCharSequenceArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence[] arg1);
    void putDouble(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) double arg1);
    void putCharSequence(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1);
    void putParcelableArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcelable[] arg1);
    void putBooleanArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean[] arg1);
    void putIntegerArrayList(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.ArrayList arg1);
    void putParcelable(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcelable arg1);
    void putCharSequenceArrayList(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.ArrayList arg1);
    void putParcelableArrayList(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.ArrayList arg1);
    void putStringArrayList(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.ArrayList arg1);
    void putShort(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) short arg1);
    void putString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void putShortArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) short[] arg1);
    void putCharArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) char[] arg1);
    void putChar(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) char arg1);
    void putIBinder(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1);
    void putInt(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void putDoubleArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) double[] arg1);
    void putIntArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int[] arg1);
    void putAll(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
    void putSerializable(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.io.Serializable arg1);
    void putFloatArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) float[] arg1);
    void putStringArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1);
    void putSparseParcelableArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.util.SparseArray arg1);
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getCharSequenceArrayList(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  short getShort(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) short arg1);
   @Source(SUSI_NO_CATEGORY)  long getLong(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  short[] getShortArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence[] getCharSequenceArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  byte getByte(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  double getDouble(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Parcelable getParcelable(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  long[] getLongArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getByteArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getIntegerArrayList(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  char[] getCharArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getStringArrayList(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  double[] getDoubleArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getCharSequence(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPairValue();
   @Source(SUSI_NO_CATEGORY)  double getDouble(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) double arg1);
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle getBundle(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.ClassLoader getClassLoader();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Parcelable[] getParcelableArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  boolean[] getBooleanArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getStringArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  float getFloat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_NO_CATEGORY)  java.io.Serializable getSerializable(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  float[] getFloatArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getCharSequence(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder getIBinder(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  short getShort(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getParcelableArrayList(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Byte getByte(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) byte arg1);
   @Source(SUSI_NO_CATEGORY)  boolean getBoolean(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  int[] getIntArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  char getChar(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) char arg1);
   @Source(SUSI_NO_CATEGORY)  char getChar(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  long getLong(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  float getFloat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.util.SparseArray getSparseParcelableArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class CommonTimeConfig{
   @Source(SUSI_SYNCHRONIZATION_DATA)  int setClientSyncInterval(  @Sink(SUSI_SYNCHRONIZATION_DATA) int arg0);
   @Source(SUSI_NO_CATEGORY)  int setMasterElectionGroupId(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  int setMasterAnnounceInterval(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int setMasterElectionPriority(  @Sink(SUSI_NO_CATEGORY) byte arg0);
   @Source(SUSI_NO_CATEGORY)  int setNetworkBinding(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int setMasterElectionEndpoint(  @Sink(SUSI_NO_CATEGORY) java.net.InetSocketAddress arg0);
   @Source(SUSI_NO_CATEGORY)  int setPanicThreshold(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int setAutoDisable(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_SYNCHRONIZATION_DATA)  int getClientSyncInterval();
   @Source(SUSI_NO_CATEGORY)  long getMasterElectionGroupId();
   @Source(SUSI_NO_CATEGORY)  java.net.InetSocketAddress getMasterElectionEndpoint();
   @Source(SUSI_NO_CATEGORY)  int getPanicThreshold();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceBinding();
   @Source(SUSI_NO_CATEGORY)  boolean getAutoDisable();
   @Source(SUSI_NO_CATEGORY)  int getMasterAnnounceInterval();
   @Source(SUSI_NO_CATEGORY)  byte getMasterElectionPriority();
}
class CommonTimeUtils{
   @Source(SUSI_NO_CATEGORY)  int transactSetLong(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  int transactSetInt(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int transactSetString(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int transactSetSockaddr(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.net.InetSocketAddress arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String transactGetString(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class CountDownTimer{
   @Source(SUSI_NO_CATEGORY)  android.os.CountDownTimer start();
}
class Debug{
    void startMethodTracing(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) java.io.FileDescriptor arg1, @Sink(SUSI_FILE) int arg2, @Sink(SUSI_FILE) int arg3);
    boolean dumpService(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) java.io.FileDescriptor arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void dumpHprofData(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) java.io.FileDescriptor arg1);
    void startMethodTracing(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void startMethodTracing(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setFieldsOn(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0);
    void startMethodTracing(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getGlobalGcInvocationCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCallers(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getThreadGcInvocationCount();
   @Source(SUSI_NO_CATEGORY)  int getLoadedClassCount();
   @Source(SUSI_NO_CATEGORY)  int getGlobalFreedCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCallers(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getThreadAllocCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getVmFeatureList();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCaller();
   @Source(SUSI_NO_CATEGORY)  int getGlobalAllocCount();
   @Source(SUSI_NO_CATEGORY)  int getGlobalClassInitTime();
   @Source(SUSI_NO_CATEGORY)  int getGlobalClassInitCount();
   @Source(SUSI_NO_CATEGORY)  int getGlobalExternalAllocCount();
   @Source(SUSI_NO_CATEGORY)  int getGlobalAllocSize();
   @Source(SUSI_NO_CATEGORY)  int getThreadExternalAllocCount();
   @Source(SUSI_NO_CATEGORY)  int getGlobalExternalAllocSize();
   @Source(SUSI_NO_CATEGORY)  int getThreadExternalAllocSize();
   @Source(SUSI_NO_CATEGORY)  int getGlobalExternalFreedSize();
   @Source(SUSI_NO_CATEGORY)  int getThreadAllocSize();
   @Source(SUSI_NO_CATEGORY)  int getGlobalFreedSize();
   @Source(SUSI_NO_CATEGORY)  int getGlobalExternalFreedCount();
}
class Debug$MemoryInfo{
   @Source(SUSI_NO_CATEGORY)  int getTotalPrivateDirty();
   @Source(SUSI_NO_CATEGORY)  int getTotalPss();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getOtherLabel(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getOtherSharedDirty(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getTotalSharedDirty();
   @Source(SUSI_NO_CATEGORY)  int getOtherPrivateDirty(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getOtherPss(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class DropBoxManager{
    void addFile(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) java.io.File arg1, @Sink(SUSI_FILE) int arg2);
   @Source(SUSI_NO_CATEGORY)  boolean isTagEnabled(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.DropBoxManager$Entry getNextEntry(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
}
class DropBoxManager$Entry{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTag();
   @Source(SUSI_NO_CATEGORY)  long getTimeMillis();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getText(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInputStream();
   @Source(SUSI_NO_CATEGORY)  int getFlags();
}
class Environment{
   @Source(SUSI_NO_CATEGORY)  java.io.File getLegacyExternalStorageObbDirectory();
   @Source(SUSI_NO_CATEGORY)  java.io.File getDirectory(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.io.File getEmulatedStorageSource(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.File getDownloadCacheDirectory();
   @Source(SUSI_NO_CATEGORY)  java.io.File getExternalStorageAppObbDirectory(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.File getSystemSecureDirectory();
   @Source(SUSI_NO_CATEGORY)  java.io.File getLegacyExternalStorageDirectory();
   @Source(SUSI_NO_CATEGORY)  java.io.File getMediaStorageDirectory();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getExternalStorageState();
   @Source(SUSI_NO_CATEGORY)  java.io.File getDataDirectory();
   @Source(SUSI_NO_CATEGORY)  java.io.File getExternalStorageDirectory();
   @Source(SUSI_NO_CATEGORY)  java.io.File getSecureDataDirectory();
   @Source(SUSI_NO_CATEGORY)  java.io.File getExternalStorageAppCacheDirectory(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.File getExternalStorageAndroidDataDir();
   @Source(SUSI_NO_CATEGORY)  java.io.File getExternalStorageAppFilesDirectory(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.File getEmulatedStorageObbSource();
   @Source(SUSI_NO_CATEGORY)  java.io.File getRootDirectory();
   @Source(SUSI_NO_CATEGORY)  java.io.File getExternalStorageAppDataDirectory(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.File getUserSystemDirectory(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.File getExternalStoragePublicDirectory(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.File getExternalStorageAppMediaDirectory(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class Environment$UserEnvironment{
   @Source(SUSI_NO_CATEGORY)  java.io.File getExternalStorageAppMediaDirectory(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.File getExternalStorageAppObbDirectory(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.File getMediaStorageDirectory();
   @Source(SUSI_NO_CATEGORY)  java.io.File getExternalStorageAndroidDataDir();
   @Source(SUSI_NO_CATEGORY)  java.io.File getExternalStoragePublicDirectory(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.File getExternalStorageObbDirectory();
   @Source(SUSI_NO_CATEGORY)  java.io.File getExternalStorageAppFilesDirectory(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.File getExternalStorageAppDataDirectory(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.File getExternalStorageAppCacheDirectory(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.File getExternalStorageDirectory();
}
class FileObserver$ObserverThread{
   @Source(SUSI_NO_CATEGORY)  int startWatching(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.FileObserver arg2);
}
class FileUtils{
    java.lang.String readTextFile(  @Sink(SUSI_FILE) java.io.File arg0, @Sink(SUSI_FILE) int arg1, @Sink(SUSI_FILE) java.lang.String arg2);
    void stringToFile(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) java.lang.String arg1);
    boolean copyToFile(  @Sink(SUSI_FILE) java.io.InputStream arg0, @Sink(SUSI_FILE) java.io.File arg1);
}
class Handler{
   @Source(SUSI_NO_CATEGORY)  boolean sendMessage(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
    void dump(  @Sink(SUSI_NO_CATEGORY) android.util.Printer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  boolean sendEmptyMessageAtTime(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  boolean sendEmptyMessageDelayed(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  boolean sendMessageDelayed(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  boolean sendEmptyMessage(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Looper getLooper();
   @Source(SUSI_NO_CATEGORY)  android.os.IMessenger getIMessenger();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessageName(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
}
class Handler$MessengerImpl{
    void send(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
}
class HandlerThread{
   @Source(SUSI_NO_CATEGORY)  android.os.Looper getLooper();
   @Source(SUSI_NO_CATEGORY)  int getThreadId();
}
class ICancellationSignal$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class ICancellationSignal$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IHardwareService$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IHardwareService$Stub$Proxy{
    void setFlashlightEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IMessenger$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IMessenger$Stub$Proxy{
    void send(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class INetworkManagementService$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class INetworkManagementService$Stub$Proxy{
    void wifiFirmwareReload(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void disableNat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void detachPppd(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void removeInterfaceQuota(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void disableIpv6(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void clearInterfaceAddresses(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void removeInterfaceAlert(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setUidNetworkRules(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setFirewallUidRule(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void stopAccessPoint(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setInterfaceUp(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void addSecondaryRoute(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.net.RouteInfo arg1);
    void setFirewallInterfaceRule(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void addIdleTimer(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void setIpForwardingEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setDefaultInterfaceForDns(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void enableIpv6(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setGlobalAlert(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setInterfaceIpv6PrivacyExtensions(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void removeIdleTimer(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void attachPppd(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4);
    void untetherInterface(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void startReverseTethering(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void startTethering(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
    void tetherInterface(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void flushInterfaceDnsCache(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setDnsServersForInterface(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1);
    void setInterfaceDown(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void removeSecondaryRoute(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.net.RouteInfo arg1);
    void removeRoute(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.net.RouteInfo arg1);
    void enableNat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setAccessPoint(  @Sink(SUSI_NO_CATEGORY) android.net.wifi.WifiConfiguration arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setInterfaceConfig(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.net.InterfaceConfiguration arg1);
    void setFirewallEgressSourceRule(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void addRoute(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.net.RouteInfo arg1);
    void setFirewallEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setFirewallEgressDestRule(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void setInterfaceQuota(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
    void startAccessPoint(  @Sink(SUSI_NO_CATEGORY) android.net.wifi.WifiConfiguration arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setInterfaceThrottle(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setInterfaceAlert(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
    void setDnsForwarders(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStats getNetworkStatsSummaryDev();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getDnsForwarders();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.InterfaceConfiguration getInterfaceConfig(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStats getNetworkStatsDetail();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStats getNetworkStatsSummaryXt();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStats getNetworkStatsTethering(  java.lang.String[] arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] listTetheredInterfaces();
   @Source(SUSI_NETWORK_INFORMATION)  int getInterfaceRxThrottle(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStats getNetworkStatsUidDetail(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] listTtys();
   @Source(SUSI_NETWORK_INFORMATION)  int getInterfaceTxThrottle(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.RouteInfo[] getRoutes(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] listInterfaces();
}
class IPermissionController$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IPermissionController$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  boolean checkPermission(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IPowerManager$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IPowerManager$Stub$Proxy{
    void setAttentionLight(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setMaximumScreenOffTimeoutFromDeviceAdmin(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void updateWakeLockWorkSource(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) android.os.WorkSource arg1);
    void userActivity(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void nap(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void releaseWakeLock(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void goToSleep(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setStayOnSetting(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void wakeUp(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void acquireWakeLock(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.os.WorkSource arg3);
    void setTemporaryScreenAutoBrightnessAdjustmentSettingOverride(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void crash(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void reboot(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void setTemporaryScreenBrightnessSettingOverride(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean isWakeLockLevelSupported(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IRemoteCallback$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IRemoteCallback$Stub$Proxy{
    void sendResult(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class ISchedulingPolicyService$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class ISchedulingPolicyService$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  int requestPriority(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IUpdateLock$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IUpdateLock$Stub$Proxy{
    void releaseUpdateLock(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
    void acquireUpdateLock(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IUserManager$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IUserManager$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  boolean removeUser(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setGuestEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void wipeUser(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setUserName(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setUserIcon(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg1);
   @Source(SUSI_NO_CATEGORY)  int getUserSerialNumber(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getUserIcon(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.UserInfo createUser(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NO_CATEGORY)  android.content.pm.UserInfo getUserInfo(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getUsers(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int getUserHandle(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class IVibratorService$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IVibratorService$Stub$Proxy{
    void cancelVibrate(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
    void vibratePattern(  @Sink(SUSI_NO_CATEGORY) long[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg2);
    void vibrate(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class Looper{
   @Source(SUSI_NO_CATEGORY)  android.os.MessageQueue getQueue();
   @Source(SUSI_NO_CATEGORY)  android.os.Looper getMainLooper();
   @Source(SUSI_NO_CATEGORY)  java.lang.Thread getThread();
}
class MemoryFile{
   @Source(SUSI_NO_CATEGORY)  int getSize(  @Sink(SUSI_NO_CATEGORY) java.io.FileDescriptor arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.OutputStream getOutputStream();
   @Source(SUSI_NO_CATEGORY)  java.io.FileDescriptor getFileDescriptor();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInputStream();
}
class MemoryFile$MemoryOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class Message{
    void setAsynchronous(  @Sink(SUSI_SYNCHRONIZATION_DATA) boolean arg0);
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.os.Handler getTarget();
   @Source(SUSI_NO_CATEGORY)  long getWhen();
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle getData();
   @Source(SUSI_NO_CATEGORY)  java.lang.Runnable getCallback();
}
class Messenger{
    void send(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
    void writeMessengerOrNullToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Messenger arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder getBinder();
}
class NullVibrator{
   @Source(SUSI_NO_CATEGORY)  android.os.NullVibrator getInstance();
}
class Parcel{
    void writeFloatArray(  @Sink(SUSI_NO_CATEGORY) float[] arg0);
    void writeException(  @Sink(SUSI_NO_CATEGORY) java.lang.Exception arg0);
    void writeTypedArray(  @Sink(SUSI_NO_CATEGORY) android.os.Parcelable[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setDataCapacity(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void writeSparseArray(  @Sink(SUSI_NO_CATEGORY) android.util.SparseArray arg0);
    void writeByteArray(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
    void writeCharArray(  @Sink(SUSI_NO_CATEGORY) char[] arg0);
    void writeCharSequenceArray(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence[] arg0);
    void setDataSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDataPosition(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void writeSparseBooleanArray(  @Sink(SUSI_NO_CATEGORY) android.util.SparseBooleanArray arg0);
    void writeParcelableArray(  @Sink(SUSI_NO_CATEGORY) android.os.Parcelable[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void writeArray(  @Sink(SUSI_NO_CATEGORY) java.lang.Object[] arg0);
    void writeStringArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
    void writeBinderArray(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder[] arg0);
    void writeLongArray(  @Sink(SUSI_NO_CATEGORY) long[] arg0);
    void writeDoubleArray(  @Sink(SUSI_NO_CATEGORY) double[] arg0);
    void writeValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
    void writeIntArray(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
    void writeByte(  @Sink(SUSI_NO_CATEGORY) byte arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] marshall();
   @Source(SUSI_NO_CATEGORY)  byte[] createByteArray();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object readValue(  @Sink(SUSI_NO_CATEGORY) java.lang.ClassLoader arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence readCharSequence();
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList createTypedArrayList(  @Sink(SUSI_NO_CATEGORY) android.os.Parcelable$Creator arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] readTypedArray(  @Sink(SUSI_NO_CATEGORY) android.os.Parcelable$Creator arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.Serializable readSerializable();
   @Source(SUSI_NO_CATEGORY)  android.os.Parcelable readParcelable(  @Sink(SUSI_NO_CATEGORY) java.lang.ClassLoader arg0);
}
class ParcelFileDescriptor{
    android.os.ParcelFileDescriptor open(  @Sink(SUSI_FILE) java.io.File arg0, @Sink(SUSI_FILE) int arg1);
    android.os.ParcelFileDescriptor fromData(  @Sink(SUSI_FILE) byte[] arg0, @Sink(SUSI_FILE) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.io.FileDescriptor getFileDescriptor();
   @Source(SUSI_NO_CATEGORY)  int getFd();
}
class ParcelUuid{
   @Source(SUSI_NO_CATEGORY)  java.util.UUID getUuid();
}
class PatternMatcher{
   @Source(SUSI_NO_CATEGORY)  int getType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPath();
}
class PerformanceCollector{
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle addIteration(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void addMeasurement(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
    void startTiming(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void addMeasurement(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void beginSnapshot(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void addMeasurement(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle stopTiming(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class PowerManager{
    void setBacklightBrightness(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getDefaultScreenBrightnessSetting();
   @Source(SUSI_NO_CATEGORY)  android.os.PowerManager$WakeLock newWakeLock(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getMaximumScreenBrightnessSetting();
   @Source(SUSI_NO_CATEGORY)  int getMinimumScreenBrightnessSetting();
   @Source(SUSI_NO_CATEGORY)  boolean isWakeLockLevelSupported(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class PowerManager$WakeLock{
    void setWorkSource(  @Sink(SUSI_NO_CATEGORY) android.os.WorkSource arg0);
}
class Registrant{
    void notifyResult(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
    void notifyRegistrant(  @Sink(SUSI_NO_CATEGORY) android.os.AsyncResult arg0);
    void notifyException(  @Sink(SUSI_NO_CATEGORY) java.lang.Throwable arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Handler getHandler();
}
class RegistrantList{
    void notifyResult(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
    void notifyException(  @Sink(SUSI_NO_CATEGORY) java.lang.Throwable arg0);
    void notifyRegistrants(  @Sink(SUSI_NO_CATEGORY) android.os.AsyncResult arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class RemoteCallback{
    void sendResult(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
}
class RemoteCallback$LocalCallback{
    void sendResult(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
}
class RemoteCallbackList{
   @Source(SUSI_NO_CATEGORY)  android.os.IInterface getBroadcastItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getBroadcastCookie(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getRegisteredCallbackCount();
}
class ResultReceiver{
    void send(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
}
class ResultReceiver$MyResultReceiver{
    void send(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
}
class SELinux{
    boolean restorecon(  @Sink(SUSI_FILE) java.io.File arg0);
}
class ServiceManager{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder getService(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class ServiceManagerNative{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class ServiceManagerProxy{
    void addService(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder checkService(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setPermissionController(  @Sink(SUSI_NO_CATEGORY) android.os.IPermissionController arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder getService(  java.lang.String arg0);
}
class StatFs{
   @Source(SUSI_NO_CATEGORY)  int getBlockCount();
   @Source(SUSI_NO_CATEGORY)  int getBlockSize();
   @Source(SUSI_NO_CATEGORY)  int getFreeBlocks();
   @Source(SUSI_NO_CATEGORY)  int getAvailableBlocks();
}
class StrictMode{
    void onVmPolicyViolation(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.Throwable arg1);
    void setThreadPolicy(  @Sink(SUSI_NO_CATEGORY) android.os.StrictMode$ThreadPolicy arg0);
    void incrementExpectedActivityCount(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.StrictMode$VmPolicy getVmPolicy();
   @Source(SUSI_NO_CATEGORY)  int getThreadPolicyMask();
   @Source(SUSI_NO_CATEGORY)  android.os.StrictMode$ThreadPolicy getThreadPolicy();
}
class StrictMode$AndroidBlockGuardPolicy{
    void handleViolation(  @Sink(SUSI_LOG) android.os.StrictMode$ViolationInfo arg0);
   @Source(SUSI_NO_CATEGORY)  int getPolicyMask();
}
class StrictMode$ViolationInfo{
    void dump(  @Sink(SUSI_NO_CATEGORY) android.util.Printer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class StrictMode$VmPolicy$Builder{
   @Source(SUSI_NO_CATEGORY)  android.os.StrictMode$VmPolicy$Builder setClassInstanceLimit(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class SystemProperties{
    void set(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  long getLong(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class SystemService{
   @Source(SUSI_NO_CATEGORY)  android.os.SystemService$State getState(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class UEventObserver{
   @Source(SUSI_NO_CATEGORY)  java.lang.String access$100();
}
class UEventObserver$UEvent{
   @Source(SUSI_NO_CATEGORY)  java.lang.String get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class UserHandle{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1);
   @Source(SUSI_NO_CATEGORY)  int getIdentifier();
}
class UserManager{
    void setGuestEnabled(  @Sink(SUSI_LOG) boolean arg0);
    void setUserIcon(  @Sink(SUSI_LOG) int arg0, @Sink(SUSI_LOG) android.graphics.Bitmap arg1);
    void setUserName(  @Sink(SUSI_LOG) int arg0, @Sink(SUSI_LOG) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getUserSerialNumber(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.UserHandle getUserForSerialNumber(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.UserInfo getUserInfo(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getUserHandle(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getMaxSupportedUsers();
   @Source(SUSI_NO_CATEGORY)  android.content.pm.UserInfo createUser(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.List getUsers(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  long getSerialNumberForUser(  @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUserName();
   @Source(SUSI_NO_CATEGORY)  int getUserHandle();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getUserIcon(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getUsers();
   @Source(SUSI_NO_CATEGORY)  int getUserCount();
}
class WorkSource{
    void set(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void set(  @Sink(SUSI_NO_CATEGORY) android.os.WorkSource arg0);
   @Source(SUSI_NO_CATEGORY)  boolean add(  @Sink(SUSI_NO_CATEGORY) android.os.WorkSource arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.WorkSource[] setReturningDiffs(  @Sink(SUSI_NO_CATEGORY) android.os.WorkSource arg0);
   @Source(SUSI_NO_CATEGORY)  int get(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.WorkSource addReturningNewbs(  @Sink(SUSI_NO_CATEGORY) android.os.WorkSource arg0);
}

package com.google.common.io;

class ByteStreams{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) com.google.common.io.OutputSupplier arg1);
   @Source(SUSI_NO_CATEGORY)  long copy(  @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg0, @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg1);
}
class ByteStreams$1{
   @Source(SUSI_NO_CATEGORY)  java.io.ByteArrayInputStream getInput();
}
class ByteStreams$4{
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInput();
}
class ByteStreams$5{
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInput();
}
class ByteStreams$ByteArrayDataOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void writeBytes(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void writeUTF(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void writeChars(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void writeInt(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void writeChar(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void writeByte(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void writeLong(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void writeFloat(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void writeBoolean(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
    void writeDouble(  @Sink(SUSI_NO_CATEGORY) double arg0);
    void writeShort(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class CharStreams$1{
   @Source(SUSI_NO_CATEGORY)  java.io.StringReader getInput();
}
class CharStreams$2{
   @Source(SUSI_NO_CATEGORY)  java.io.InputStreamReader getInput();
}
class CharStreams$3{
   @Source(SUSI_NO_CATEGORY)  java.io.OutputStreamWriter getOutput();
}
class CharStreams$4{
   @Source(SUSI_NO_CATEGORY)  java.io.Reader getInput();
}
class Files{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) java.io.File arg1);
}
class Files$1{
   @Source(SUSI_NO_CATEGORY)  java.io.FileInputStream getInput();
}
class Files$2{
   @Source(SUSI_NO_CATEGORY)  java.io.FileOutputStream getOutput();
}
class Resources$1{
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInput();
}

package com.android.mms.dom.events;

class EventImpl{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType();
   @Source(SUSI_NO_CATEGORY)  boolean getBubbles();
   @Source(SUSI_NO_CATEGORY)  int getSeekTo();
}

package com.android.contacts.preference;

class ContactsPreferences{
    void setSortOrder(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
    void setDisplayOrder(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getDefaultDisplayOrder();
   @Source(SUSI_CONTACT_INFORMATION)  int getSortOrder();
   @Source(SUSI_CONTACT_INFORMATION)  int getDefaultSortOrder();
   @Source(SUSI_CONTACT_INFORMATION)  int getDisplayOrder();
}
class DisplayOrderPreference{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getSummary();
}
class SortOrderPreference{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getSummary();
}

package javax.xml.validation;

class Validator{
    void setProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void setFeature(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getFeature(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class ValidatorHandler{
    void setProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void setFeature(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getFeature(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}

package android.mtp;

class MtpDatabase{
    void addStorage(  @Sink(SUSI_NO_CATEGORY) android.mtp.MtpStorage arg0);
}
class MtpDevice{
   @Source(SUSI_NO_CATEGORY)  byte[] getThumbnail(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getParent(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.mtp.MtpStorageInfo getStorageInfo(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int[] getObjectHandles(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  long getStorageId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.mtp.MtpObjectInfo getObjectInfo(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int[] getStorageIds();
   @Source(SUSI_NO_CATEGORY)  int getDeviceId();
   @Source(SUSI_NO_CATEGORY)  byte[] getObject(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.mtp.MtpDeviceInfo getDeviceInfo();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDeviceName();
}
class MtpDeviceInfo{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSerialNumber();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getVersion();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getModel();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getManufacturer();
}
class MtpObjectInfo{
   @Source(SUSI_NO_CATEGORY)  int getThumbPixHeight();
   @Source(SUSI_NO_CATEGORY)  int getThumbPixWidth();
   @Source(SUSI_NO_CATEGORY)  int getImagePixDepth();
   @Source(SUSI_NO_CATEGORY)  int getImagePixWidth();
   @Source(SUSI_NO_CATEGORY)  int getCompressedSize();
   @Source(SUSI_NO_CATEGORY)  int getThumbFormat();
   @Source(SUSI_NO_CATEGORY)  int getSequenceNumber();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  int getImagePixHeight();
   @Source(SUSI_NO_CATEGORY)  long getDateModified();
   @Source(SUSI_NO_CATEGORY)  int getThumbCompressedSize();
   @Source(SUSI_NO_CATEGORY)  long getDateCreated();
   @Source(SUSI_NO_CATEGORY)  int getProtectionStatus();
   @Source(SUSI_NO_CATEGORY)  int getFormat();
   @Source(SUSI_NO_CATEGORY)  int getAssociationType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getKeywords();
   @Source(SUSI_NO_CATEGORY)  int getStorageId();
   @Source(SUSI_NO_CATEGORY)  int getParent();
   @Source(SUSI_NO_CATEGORY)  int getObjectHandle();
   @Source(SUSI_NO_CATEGORY)  int getAssociationDesc();
}
class MtpPropertyGroup{
   @Source(SUSI_NO_CATEGORY)  android.mtp.MtpPropertyList getPropertyList(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class MtpServer{
    void sendObjectRemoved(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void sendObjectAdded(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class MtpStorage{
   @Source(SUSI_NO_CATEGORY)  int getStorageId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPath();
   @Source(SUSI_NO_CATEGORY)  long getMaxFileSize();
   @Source(SUSI_NO_CATEGORY)  int getStorageId();
   @Source(SUSI_NO_CATEGORY)  long getReserveSpace();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDescription();
}
class MtpStorageInfo{
   @Source(SUSI_NO_CATEGORY)  long getFreeSpace();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDescription();
   @Source(SUSI_NO_CATEGORY)  long getMaxCapacity();
   @Source(SUSI_NO_CATEGORY)  int getStorageId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getVolumeIdentifier();
}

package org.xml.sax.helpers;

class AttributesImpl{
    void setLocalName(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setType(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setAttribute(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5);
    void setURI(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setQName(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setValue(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_FILE_INFORMATION)  java.lang.String getURI(  int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getQName(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLocalName(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getLength();
   @Source(SUSI_NO_CATEGORY)  int getIndex(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getIndex(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class LocatorImpl{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSystemId();
   @Source(SUSI_NO_CATEGORY)  int getLineNumber();
   @Source(SUSI_NO_CATEGORY)  int getColumnNumber();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPublicId();
}
class NamespaceSupport{
   @Source(SUSI_FILE_INFORMATION)  java.lang.String getURI(  java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Enumeration getPrefixes();
   @Source(SUSI_NO_CATEGORY)  java.util.Enumeration getDeclaredPrefixes();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPrefix(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Enumeration getPrefixes(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class NamespaceSupport$Context{
    void declarePrefix(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_FILE_INFORMATION)  java.lang.String getURI(  java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Enumeration getDeclaredPrefixes();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] processName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPrefix(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Enumeration getPrefixes();
}
class NewInstance{
   @Source(SUSI_NO_CATEGORY)  java.lang.ClassLoader getClassLoader();
}
class ParserAdapter{
    void setProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void startElement(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) org.xml.sax.AttributeList arg1);
   @Source(SUSI_NO_CATEGORY)  org.xml.sax.DTDHandler getDTDHandler();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  org.xml.sax.ContentHandler getContentHandler();
   @Source(SUSI_NO_CATEGORY)  org.xml.sax.EntityResolver getEntityResolver();
   @Source(SUSI_NO_CATEGORY)  org.xml.sax.ErrorHandler getErrorHandler();
}
class ParserAdapter$AttributeListAdapter{
   @Source(SUSI_FILE_INFORMATION)  java.lang.String getURI(  int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLocalName(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getQName(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getLength();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}

package java.util.logging;

class ErrorManager{
    void error(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Exception arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class Formatter{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTail(  @Sink(SUSI_NO_CATEGORY) java.util.logging.Handler arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHead(  @Sink(SUSI_NO_CATEGORY) java.util.logging.Handler arg0);
}
class Handler{
    void setEncoding(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.logging.Level getLevel();
   @Source(SUSI_NO_CATEGORY)  java.util.logging.ErrorManager getErrorManager();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getEncoding();
   @Source(SUSI_NO_CATEGORY)  java.util.logging.Filter getFilter();
   @Source(SUSI_NO_CATEGORY)  java.util.logging.Formatter getFormatter();
}
class Level{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getResourceBundleName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLocalizedName();
}
class LogManager{
   @Source(SUSI_NO_CATEGORY)  boolean addLogger(  @Sink(SUSI_NO_CATEGORY) java.util.logging.Logger arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.logging.LogManager getLogManager();
   @Source(SUSI_NO_CATEGORY)  java.util.logging.Logger getOrCreate(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.Enumeration getLoggerNames();
   @Source(SUSI_NO_CATEGORY)  java.util.logging.LoggingMXBean getLoggingMXBean();
   @Source(SUSI_NO_CATEGORY)  java.util.logging.Logger getLogger(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getInstanceByClass(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class LogRecord{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLoggerName();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] getParameters();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
   @Source(SUSI_NO_CATEGORY)  int getThreadID();
   @Source(SUSI_NO_CATEGORY)  long getMillis();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSourceMethodName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSourceClassName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getResourceBundleName();
   @Source(SUSI_NO_CATEGORY)  long getSequenceNumber();
   @Source(SUSI_NO_CATEGORY)  java.lang.Throwable getThrown();
   @Source(SUSI_NO_CATEGORY)  java.util.ResourceBundle getResourceBundle();
   @Source(SUSI_NO_CATEGORY)  java.util.logging.Level getLevel();
}
class Logger{
    void setParent(  @Sink(SUSI_NO_CATEGORY) java.util.logging.Logger arg0);
    void setLevel(  @Sink(SUSI_NO_CATEGORY) java.util.logging.Level arg0);
    void setManager(  @Sink(SUSI_NO_CATEGORY) java.util.logging.LogManager arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.ResourceBundle getResourceBundle();
   @Source(SUSI_NO_CATEGORY)  java.util.logging.Filter getFilter();
   @Source(SUSI_NO_CATEGORY)  boolean getUseParentHandlers();
   @Source(SUSI_NO_CATEGORY)  java.util.logging.Logger getLogger(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.logging.Logger getAnonymousLogger();
   @Source(SUSI_NO_CATEGORY)  java.util.logging.Logger getGlobal();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.util.logging.Handler[] getHandlers();
   @Source(SUSI_NO_CATEGORY)  java.util.logging.Logger getLogger(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.logging.Level getLevel();
   @Source(SUSI_NO_CATEGORY)  java.util.logging.Logger getParent();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getResourceBundleName();
   @Source(SUSI_NO_CATEGORY)  java.util.logging.Logger getAnonymousLogger(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class LoggingPermission{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getActions();
}

package com.android.calendar.widget;

class CalendarAppWidgetProvider{
    void onReceive(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.content.Intent arg1);
    void onUpdate(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.appwidget.AppWidgetManager arg1, @Sink(SUSI_CALENDAR_INFORMATION) int[] arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  android.app.PendingIntent getLaunchPendingIntentTemplate(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  android.content.ComponentName getComponentName(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  android.content.Intent getLaunchFillInIntent(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) long arg1, @Sink(SUSI_CALENDAR_INFORMATION) long arg2, @Sink(SUSI_CALENDAR_INFORMATION) long arg3, @Sink(SUSI_CALENDAR_INFORMATION) boolean arg4);
   @Source(SUSI_CALENDAR_INFORMATION)  android.app.PendingIntent getUpdateIntent(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0);
}
class CalendarAppWidgetService$CalendarFactory{
   @Source(SUSI_CALENDAR_INFORMATION)  android.widget.RemoteViews getViewAt(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getViewTypeCount();
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String access$500(  @Sink(SUSI_CALENDAR_INFORMATION) com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  android.widget.RemoteViews getLoadingView();
   @Source(SUSI_CALENDAR_INFORMATION)  long getItemId(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getCount();
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.Runnable access$800(  @Sink(SUSI_CALENDAR_INFORMATION) com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg1, @Sink(SUSI_CALENDAR_INFORMATION) android.content.BroadcastReceiver$PendingResult arg2, @Sink(SUSI_CALENDAR_INFORMATION) int arg3);
   @Source(SUSI_CALENDAR_INFORMATION)  android.net.Uri access$200(  @Sink(SUSI_CALENDAR_INFORMATION) com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory arg0);
}

package com.android.gallery3d.settings;

class GallerySettings{
    void addAccount(  @Sink(SUSI_NO_CATEGORY) android.app.Activity arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}

package org.apache.harmony.luni.lang.reflect;

class GenericSignatureParser{
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Type parseTypeArgument();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Type parseTypeSignature();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Type parseReturnType();
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.luni.lang.reflect.ListOfTypes parseOptTypeArguments();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Type parseFieldTypeSignature();
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.luni.lang.reflect.ImplForVariable parseFormalTypeParameter();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Type parseClassTypeSignature();
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.luni.lang.reflect.ImplForVariable parseTypeVariableSignature();
}
class ImplForArray{
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Type getGenericComponentType();
}
class ImplForType{
   @Source(SUSI_NO_CATEGORY)  java.lang.Class getRawType();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Type getResolvedType();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Type getOwnerType();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Type[] getActualTypeArguments();
}
class ImplForVariable{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Type[] getBounds();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.GenericDeclaration getGenericDeclaration();
}
class ImplForWildcard{
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Type[] getUpperBounds();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Type[] getLowerBounds();
}
class ListOfTypes{
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Type[] getResolvedTypes();
}
class ListOfVariables{
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.TypeVariable[] getArray();
}
class Types{
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Type[] getClonedTypeArray(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.luni.lang.reflect.ListOfTypes arg0);
}

package com.android.internal.policy;

class PolicyManager{
   @Source(SUSI_NO_CATEGORY)  android.view.Window makeNewWindow(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.LayoutInflater makeNewLayoutInflater(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.FallbackEventHandler makeNewFallbackEventHandler(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}

package com.android.i18n.phonenumbers;

class AsYouTypeFormatter{
   @Source(SUSI_NO_CATEGORY)  int getRememberedPosition();
}
class CountryCodeToRegionCodeMap{
   @Source(SUSI_NO_CATEGORY)  java.util.Map getCountryCodeToRegionCodeMap();
}
class NumberParseException{
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.NumberParseException$ErrorType getErrorType();
}
class PhoneNumberUtil{
   @Source(SUSI_NO_CATEGORY)  int maybeExtractCountryCode(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata arg1, @Sink(SUSI_NO_CATEGORY) java.lang.StringBuilder arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3, @Sink(SUSI_NO_CATEGORY) com.android.i18n.phonenumbers.Phonenumber$PhoneNumber arg4);
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(  @Sink(SUSI_NO_CATEGORY) com.android.i18n.phonenumbers.Phonenumber$PhoneNumber arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getLengthOfGeographicalAreaCode(  @Sink(SUSI_NO_CATEGORY) com.android.i18n.phonenumbers.Phonenumber$PhoneNumber arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRegionCodeForNumber(  @Sink(SUSI_NO_CATEGORY) com.android.i18n.phonenumbers.Phonenumber$PhoneNumber arg0);
   @Source(SUSI_NO_CATEGORY)  int getLengthOfNationalDestinationCode(  @Sink(SUSI_NO_CATEGORY) com.android.i18n.phonenumbers.Phonenumber$PhoneNumber arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.PhoneNumberUtil getInstance();
   @Source(SUSI_NO_CATEGORY)  java.util.Set getSupportedRegions();
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForNonGeographicalRegion(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNddPrefixForRegion(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.Phonenumber$PhoneNumber getExampleNumber(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.Phonenumber$PhoneNumber getExampleNumberForNonGeoEntity(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.Phonenumber$PhoneNumber getExampleNumberForType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.Set getSupportedGlobalNetworkCallingCodes();
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.PhoneNumberUtil getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.Map arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberType(  @Sink(SUSI_NO_CATEGORY) com.android.i18n.phonenumbers.Phonenumber$PhoneNumber arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNationalSignificantNumber(  @Sink(SUSI_NO_CATEGORY) com.android.i18n.phonenumbers.Phonenumber$PhoneNumber arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRegionCodeForCountryCode(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getCountryCodeForRegion(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.AsYouTypeFormatter getAsYouTypeFormatter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getNumberDescByType(  @Sink(SUSI_NO_CATEGORY) com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata arg0, @Sink(SUSI_NO_CATEGORY) com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType arg1);
}
class Phonemetadata$NumberFormat{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLeadingDigitsPattern(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFormat();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPattern();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDomesticCarrierCodeFormattingRule();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNationalPrefixFormattingRule();
   @Source(SUSI_NO_CATEGORY)  java.util.List leadingDigitPatterns();
}
class Phonemetadata$PhoneMetadata{
    void writeExternal(  @Sink(SUSI_NO_CATEGORY) java.io.ObjectOutput arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.Phonemetadata$NumberFormat getNumberFormat(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getPremiumRate();
   @Source(SUSI_NO_CATEGORY)  boolean getMainCountryForCode();
   @Source(SUSI_NO_CATEGORY)  int getCountryCode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getId();
   @Source(SUSI_NO_CATEGORY)  java.util.List numberFormats();
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getSharedCost();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInternationalPrefix();
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getPager();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLeadingDigits();
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getVoicemail();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNationalPrefixForParsing();
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getMobile();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNationalPrefix();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNationalPrefixTransformRule();
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getEmergency();
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getNoInternationalDialling();
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getVoip();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPreferredExtnPrefix();
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getGeneralDesc();
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.Phonemetadata$NumberFormat getIntlNumberFormat(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPreferredInternationalPrefix();
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getFixedLine();
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getPersonalNumber();
   @Source(SUSI_NO_CATEGORY)  java.util.List intlNumberFormats();
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getUan();
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getTollFree();
}
class Phonemetadata$PhoneMetadataCollection{
    void writeExternal(  @Sink(SUSI_NO_CATEGORY) java.io.ObjectOutput arg0);
   @Source(SUSI_NO_CATEGORY)  int getMetadataCount();
   @Source(SUSI_NO_CATEGORY)  java.util.List getMetadataList();
}
class Phonemetadata$PhoneNumberDesc{
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc mergeFrom(  @Sink(SUSI_NO_CATEGORY) com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPossibleNumberPattern();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getExampleNumber();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNationalNumberPattern();
}
class Phonenumber$PhoneNumber{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPreferredDomesticCarrierCode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRawInput();
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.Phonenumber$PhoneNumber mergeFrom(  @Sink(SUSI_NO_CATEGORY) com.android.i18n.phonenumbers.Phonenumber$PhoneNumber arg0);
   @Source(SUSI_NO_CATEGORY)  int getCountryCode();
   @Source(SUSI_NO_CATEGORY)  long getNationalNumber();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getExtension();
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource getCountryCodeSource();
}
class RegexCache{
   @Source(SUSI_NO_CATEGORY)  java.util.regex.Pattern getPatternForRegex(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class RegexCache$LRUCache{
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}

package com.android.gallery3d.common;

class BlobCache{
   @Source(SUSI_IMAGE)  byte[] lookup(  long arg0);
}
class EntrySchema{
    void objectToValues(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.common.Entry arg0, @Sink(SUSI_NO_CATEGORY) android.content.ContentValues arg1);
   @Source(SUSI_IMAGE)  com.android.gallery3d.common.EntrySchema$ColumnInfo getColumn(  java.lang.String arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.common.Entry valuesToObject(  android.content.ContentValues arg0, com.android.gallery3d.common.Entry arg1);
   @Source(SUSI_IMAGE)  int getColumnIndex(  java.lang.String arg0);
   @Source(SUSI_IMAGE)  java.lang.String[] getProjection();
   @Source(SUSI_IMAGE)  java.lang.String getTableName();
}
class Fingerprint{
   @Source(SUSI_IMAGE)  byte[] getBytes();
}
class LongSparseArray{
   @Source(SUSI_IMAGE)  java.lang.Object get(  long arg0);
   @Source(SUSI_IMAGE)  java.lang.Object get(  long arg0, java.lang.Object arg1);
}
class LruCache{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object put(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_IMAGE)  java.lang.Object get(  java.lang.Object arg0);
}
class OverScroller{
    void startScroll(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
   @Source(SUSI_IMAGE)  float getCurrVelocity();
   @Source(SUSI_IMAGE)  int getCurrX();
   @Source(SUSI_IMAGE)  int getFinalX();
}
class Utils{
   @Source(SUSI_IMAGE)  byte[] getBytes(  java.lang.String arg0);
   @Source(SUSI_IMAGE)  java.lang.String getUserAgent(  android.content.Context arg0);
}

package android.support.v4.content;

class LocalBroadcastManager{
    boolean sendBroadcast(  @Sink(SUSI_LOG) android.content.Intent arg0);
    void registerReceiver(  @Sink(SUSI_NO_CATEGORY) android.content.BroadcastReceiver arg0, @Sink(SUSI_NO_CATEGORY) android.content.IntentFilter arg1);
   @Source(SUSI_NO_CATEGORY)  android.support.v4.content.LocalBroadcastManager getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}

package org.apache.harmony.dalvik.ddmc;

class ChunkHandler{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class DdmServer{
    void registerHandler(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) org.apache.harmony.dalvik.ddmc.ChunkHandler arg1);
}

package com.android.calendar.alerts;

class AlertActivity{
   @Source(SUSI_CALENDAR_INFORMATION)  android.database.Cursor access$002(  @Sink(SUSI_CALENDAR_INFORMATION) com.android.calendar.alerts.AlertActivity arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.database.Cursor arg1);
   @Source(SUSI_CALENDAR_INFORMATION)  android.database.Cursor getItemForView(  @Sink(SUSI_CALENDAR_INFORMATION) android.view.View arg0);
}
class AlertAdapter{
    void bindView(  @Sink(SUSI_CALENDAR_INFORMATION) android.view.View arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg1, @Sink(SUSI_CALENDAR_INFORMATION) android.database.Cursor arg2);
}
class AlertReceiver{
    void onReceive(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.content.Intent arg1);
   @Source(SUSI_CALENDAR_INFORMATION)  com.android.calendar.alerts.AlertService$NotificationWrapper makeDigestNotification(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.util.ArrayList arg1, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg2, @Sink(SUSI_CALENDAR_INFORMATION) boolean arg3);
   @Source(SUSI_CALENDAR_INFORMATION)  android.content.Intent createEmailIntent(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) long arg1, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg2);
}
class AlertService{
   @Source(SUSI_CALENDAR_INFORMATION)  boolean generateAlerts(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) com.android.calendar.alerts.NotificationMgr arg1, @Sink(SUSI_CALENDAR_INFORMATION) com.android.calendar.alerts.AlarmManagerInterface arg2, @Sink(SUSI_CALENDAR_INFORMATION) android.content.SharedPreferences arg3, @Sink(SUSI_CALENDAR_INFORMATION) android.database.Cursor arg4, @Sink(SUSI_CALENDAR_INFORMATION) long arg5, @Sink(SUSI_CALENDAR_INFORMATION) int arg6);
   @Source(SUSI_CALENDAR_INFORMATION)  int processQuery(  @Sink(SUSI_CALENDAR_INFORMATION) android.database.Cursor arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg1, @Sink(SUSI_CALENDAR_INFORMATION) long arg2, @Sink(SUSI_CALENDAR_INFORMATION) java.util.ArrayList arg3, @Sink(SUSI_CALENDAR_INFORMATION) java.util.ArrayList arg4, @Sink(SUSI_CALENDAR_INFORMATION) java.util.ArrayList arg5);
   @Source(SUSI_CALENDAR_INFORMATION)  boolean updateAlertNotification(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0);
}
class AlertService$NotificationMgrWrapper{
    void notify(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0, @Sink(SUSI_CALENDAR_INFORMATION) com.android.calendar.alerts.AlertService$NotificationWrapper arg1);
}
class AlertUtils{
    void setAlertFiredInSharedPrefs(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) long arg1, @Sink(SUSI_CALENDAR_INFORMATION) long arg2, @Sink(SUSI_CALENDAR_INFORMATION) long arg3);
   @Source(SUSI_CALENDAR_INFORMATION)  android.content.Intent buildEventViewIntent(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) long arg1, @Sink(SUSI_CALENDAR_INFORMATION) long arg2, @Sink(SUSI_CALENDAR_INFORMATION) long arg3);
   @Source(SUSI_CALENDAR_INFORMATION)  android.content.ContentValues makeContentValues(  @Sink(SUSI_CALENDAR_INFORMATION) long arg0, @Sink(SUSI_CALENDAR_INFORMATION) long arg1, @Sink(SUSI_CALENDAR_INFORMATION) long arg2, @Sink(SUSI_CALENDAR_INFORMATION) long arg3, @Sink(SUSI_CALENDAR_INFORMATION) int arg4);
   @Source(SUSI_CALENDAR_INFORMATION)  android.content.SharedPreferences getFiredAlertsTable(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String formatTimeLocation(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) long arg1, @Sink(SUSI_CALENDAR_INFORMATION) boolean arg2, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg3);
}
class AlertUtils$1{
    void set(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0, @Sink(SUSI_CALENDAR_INFORMATION) long arg1, @Sink(SUSI_CALENDAR_INFORMATION) android.app.PendingIntent arg2);
}
class DismissAlarmsService{
    void onHandleIntent(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Intent arg0);
}
class SnoozeAlarmsService{
    void onHandleIntent(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Intent arg0);
}

package android.inputmethodservice;

class AbstractInputMethodService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NETWORK_INFORMATION)  android.view.KeyEvent$DispatcherState getKeyDispatcherState();
}
class ExtractEditLayout$ExtractActionMode{
    void setCustomView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
    void setTitle(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSubtitle(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.view.Menu getMenu();
   @Source(SUSI_NETWORK_INFORMATION)  android.view.View getCustomView();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.CharSequence getSubtitle();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.CharSequence getTitle();
   @Source(SUSI_NETWORK_INFORMATION)  android.view.MenuInflater getMenuInflater();
}
class ExtractEditText{
    void setCursorPosition_internal(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setExtractedText(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.ExtractedText arg0);
    void setSpan_internal(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
}
class IInputMethodSessionWrapper{
    void executeMessage(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.view.inputmethod.InputMethodSession getInternalInputMethodSession();
}
class IInputMethodWrapper{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void executeMessage(  @Sink(SUSI_FILE) android.os.Message arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.view.inputmethod.InputMethod getInternalInputMethod();
}
class InputMethodService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void setExtractViewShown(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  boolean sendDefaultEditorAction(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  boolean onExtractTextContextMenuItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setCandidatesViewShown(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setCandidatesView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
    void sendDownUpKeyEvents(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void sendKeyChar(  @Sink(SUSI_NO_CATEGORY) char arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.app.Dialog getWindow();
   @Source(SUSI_NETWORK_INFORMATION)  android.view.inputmethod.EditorInfo getCurrentInputEditorInfo();
   @Source(SUSI_NETWORK_INFORMATION)  android.view.inputmethod.InputBinding getCurrentInputBinding();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.CharSequence getTextForImeAction(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getBackDisposition();
   @Source(SUSI_NETWORK_INFORMATION)  android.view.LayoutInflater getLayoutInflater();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getCurrentInputStarted();
   @Source(SUSI_NETWORK_INFORMATION)  android.view.inputmethod.InputConnection getCurrentInputConnection();
   @Source(SUSI_NO_CATEGORY)  int getMaxWidth();
   @Source(SUSI_NO_CATEGORY)  int getCandidatesHiddenVisibility();
}
class Keyboard{
   @Source(SUSI_NETWORK_INFORMATION)  int[] getNearestKeys(  int arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getHeight();
   @Source(SUSI_NETWORK_INFORMATION)  int[] getShiftKeyIndices();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getKeys();
   @Source(SUSI_NETWORK_INFORMATION)  int getKeyHeight();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getModifierKeys();
   @Source(SUSI_NETWORK_INFORMATION)  int getVerticalGap();
   @Source(SUSI_NETWORK_INFORMATION)  int getShiftKeyIndex();
   @Source(SUSI_NETWORK_INFORMATION)  int getHorizontalGap();
   @Source(SUSI_NETWORK_INFORMATION)  int getDimensionOrFraction(  android.content.res.TypedArray arg0, int arg1, int arg2, int arg3);
   @Source(SUSI_NO_CATEGORY)  int getKeyWidth();
   @Source(SUSI_NO_CATEGORY)  int getMinWidth();
}
class Keyboard$Key{
   @Source(SUSI_NETWORK_INFORMATION)  int[] getCurrentDrawableState();
}
class KeyboardView{
    void setVerticalCorrection(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean onLongPress(  @Sink(SUSI_NO_CATEGORY) android.inputmethodservice.Keyboard$Key arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setShifted(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.inputmethodservice.KeyboardView$OnKeyboardActionListener getOnKeyboardActionListener();
   @Source(SUSI_NETWORK_INFORMATION)  android.inputmethodservice.Keyboard getKeyboard();
}
class KeyboardView$SwipeTracker{
   @Source(SUSI_NETWORK_INFORMATION)  float getYVelocity();
   @Source(SUSI_NO_CATEGORY)  float getXVelocity();
}
class SoftInputWindow{
    void setGravity(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getSize();
}

package com.android.gallery3d.util;

class CacheManager{
   @Source(SUSI_IMAGE)  com.android.gallery3d.common.BlobCache getCache(  android.content.Context arg0, java.lang.String arg1, int arg2, int arg3, int arg4);
}
class GalleryUtils{
   @Source(SUSI_NO_CATEGORY)  boolean isEditorAvailable(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_IMAGE)  byte[] getBytes(  java.lang.String arg0);
   @Source(SUSI_IMAGE)  int getBucketId(  java.lang.String arg0);
}
class HelpUtils{
   @Source(SUSI_IMAGE)  android.content.Intent getHelpIntent(  android.content.Context arg0, int arg1);
}
class IdentityCache{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object put(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_IMAGE)  java.lang.Object get(  java.lang.Object arg0);
}
class IntArray{
   @Source(SUSI_IMAGE)  int[] getInternalArray();
}
class InterruptableOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void write(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class JobLimiter$JobWrapper{
   @Source(SUSI_IMAGE)  java.lang.Object get();
}
class LightCycleHelper{
   @Source(SUSI_IMAGE)  com.android.gallery3d.util.LightCycleHelper$PanoramaMetadata getPanoramaMetadata(  android.content.Context arg0, android.net.Uri arg1);
}
class LightCycleHelper$PanoramaViewHelper{
    void onPanoramaInfoLoaded(  @Sink(SUSI_LOG) com.google.android.gms.common.ConnectionResult arg0, @Sink(SUSI_LOG) int arg1, @Sink(SUSI_LOG) android.content.Intent arg2);
}
class RangeArray{
   @Source(SUSI_IMAGE)  java.lang.Object get(  int arg0);
}
class RangeIntArray{
   @Source(SUSI_IMAGE)  int get(  int arg0);
}
class ReverseGeocoder{
   @Source(SUSI_NO_CATEGORY)  android.location.Address lookupAddress(  @Sink(SUSI_NO_CATEGORY) double arg0, @Sink(SUSI_NO_CATEGORY) double arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void writeUTF(  @Sink(SUSI_NO_CATEGORY) java.io.DataOutputStream arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class ThreadPool$JobContextStub{
   @Source(SUSI_NO_CATEGORY)  boolean setMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ThreadPool$Worker{
   @Source(SUSI_IMAGE)  java.lang.Object get();
}
class XmpUtilHelper{
   @Source(SUSI_NO_CATEGORY)  boolean writeXMPMeta(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
}

package com.android.browser.preferences;

class WebsiteSettingsFragment$Site{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_BROWSER_INFORMATION)  int getFeatureCount();
   @Source(SUSI_BROWSER_INFORMATION)  int getFeatureByIndex(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getPrettyOrigin();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getOrigin();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getPrettyTitle();
   @Source(SUSI_BROWSER_INFORMATION)  android.graphics.Bitmap getIcon();
}
class WebsiteSettingsFragment$SiteAdapter{
    void onItemClick(  @Sink(SUSI_BROWSER_INFORMATION) android.widget.AdapterView arg0, @Sink(SUSI_BROWSER_INFORMATION) android.view.View arg1, @Sink(SUSI_BROWSER_INFORMATION) int arg2, @Sink(SUSI_BROWSER_INFORMATION) long arg3);
    void setIconForUsage(  @Sink(SUSI_NO_CATEGORY) android.widget.ImageView arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_BROWSER_INFORMATION)  int getCount();
   @Source(SUSI_BROWSER_INFORMATION)  android.view.View getView(  @Sink(SUSI_BROWSER_INFORMATION) int arg0, @Sink(SUSI_BROWSER_INFORMATION) android.view.View arg1, @Sink(SUSI_BROWSER_INFORMATION) android.view.ViewGroup arg2);
}

package android.drm;

class DrmEvent{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
   @Source(SUSI_NO_CATEGORY)  int getType();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getAttribute(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getUniqueId();
}
class DrmInfo{
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getData();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMimeType();
   @Source(SUSI_NO_CATEGORY)  int getInfoType();
}
class DrmInfoRequest{
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  int getInfoType();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMimeType();
}
class DrmManagerClient{
   @Source(SUSI_NO_CATEGORY)  int saveRights(  @Sink(SUSI_NO_CATEGORY) android.drm.DrmRights arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void notify(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
   @Source(SUSI_NO_CATEGORY)  android.content.ContentValues getMetadata(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.ContentValues getConstraints(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getOriginalMimeType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getOriginalMimeType(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getAvailableDrmEngines();
   @Source(SUSI_NO_CATEGORY)  int getDrmObjectType(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.ContentValues getConstraints(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getDrmObjectType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.ContentValues getMetadata(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
}
class DrmManagerClient$EventHandler{
    void handleMessage(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
}
class DrmRights{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSubscriptionId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMimeType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAccountId();
   @Source(SUSI_NO_CATEGORY)  byte[] getData();
}
class DrmSupportInfo{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDescriprition();
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator getMimeTypeIterator();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDescription();
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator getFileSuffixIterator();
}
class DrmUtils{
   @Source(SUSI_NO_CATEGORY)  byte[] readBytes(  @Sink(SUSI_NO_CATEGORY) java.io.File arg0);
   @Source(SUSI_NO_CATEGORY)  android.drm.DrmUtils$ExtendedMetadataParser getExtendedMetadataParser(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] readBytes(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class DrmUtils$ExtendedMetadataParser{
   @Source(SUSI_NO_CATEGORY)  java.lang.String get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class ProcessedData{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAccountId();
   @Source(SUSI_NO_CATEGORY)  byte[] getData();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSubscriptionId();
}

package com.android.systemui;

class ExpandHelper{
    void setGlow(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class ExpandHelper$ViewScaler{
    void setHeight(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  float getHeight();
   @Source(SUSI_NO_CATEGORY)  int getNaturalHeight(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class SearchPanelView{
    void setStatusBarView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
}
class SystemUI{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
}
class SystemUIService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
}

package javax.security.auth.callback;

class PasswordCallback{
   @Source(SUSI_NO_CATEGORY)  char[] getPassword();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPrompt();
}
class UnsupportedCallbackException{
   @Source(SUSI_NO_CATEGORY)  javax.security.auth.callback.Callback getCallback();
}

package android.net.rtp;

class AudioCodec{
   @Source(SUSI_NETWORK_INFORMATION)  android.net.rtp.AudioCodec[] getCodecs();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.rtp.AudioCodec getCodec(  int arg0, java.lang.String arg1, java.lang.String arg2);
}
class AudioGroup{
    void add(  @Sink(SUSI_NETWORK) android.net.rtp.AudioStream arg0);
    void sendDtmf(  @Sink(SUSI_NETWORK) int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getMode();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.rtp.AudioStream[] getStreams();
}
class AudioStream{
   @Source(SUSI_NETWORK_INFORMATION)  android.net.rtp.AudioCodec getCodec();
   @Source(SUSI_NETWORK_INFORMATION)  int getDtmfType();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.rtp.AudioGroup getGroup();
}
class RtpStream{
   @Source(SUSI_NETWORK_INFORMATION)  int getSocket();
   @Source(SUSI_NETWORK_INFORMATION)  java.net.InetAddress getRemoteAddress();
   @Source(SUSI_NETWORK_INFORMATION)  int getMode();
   @Source(SUSI_NETWORK_INFORMATION)  int getRemotePort();
   @Source(SUSI_NETWORK_INFORMATION)  int getLocalPort();
   @Source(SUSI_NETWORK_INFORMATION)  java.net.InetAddress getLocalAddress();
}

package android.app.backup;

class BackupAgent{
    void onRestoreFile(  @Sink(SUSI_FILE) android.os.ParcelFileDescriptor arg0, @Sink(SUSI_FILE) long arg1, @Sink(SUSI_FILE) java.io.File arg2, @Sink(SUSI_FILE) int arg3, @Sink(SUSI_FILE) long arg4, @Sink(SUSI_FILE) long arg5);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder onBind();
}
class BackupAgentHelper{
    void setWallpaper(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0);
    void onBackup(  @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg0, @Sink(SUSI_NO_CATEGORY) android.app.backup.BackupDataOutput arg1, @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg2);
    void onRestore(  @Sink(SUSI_NO_CATEGORY) android.app.backup.BackupDataInput arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg2);
   @Source(SUSI_NO_CATEGORY)  android.app.backup.BackupHelperDispatcher getDispatcher();
}
class BackupDataInput{
   @Source(SUSI_NO_CATEGORY)  int getDataSize();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getKey();
}
class BackupDataInputStream{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getKey();
}
class BackupDataOutput{
   @Source(SUSI_NO_CATEGORY)  int writeEntityHeader(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setKeyPrefix(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int writeEntityData(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class BackupHelperDispatcher{
    void performRestore(  @Sink(SUSI_LOG) android.app.backup.BackupDataInput arg0, @Sink(SUSI_LOG) int arg1, @Sink(SUSI_LOG) android.os.ParcelFileDescriptor arg2);
    void addHelper(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.app.backup.BackupHelper arg1);
}
class BackupManager{
   @Source(SUSI_NO_CATEGORY)  android.app.backup.RestoreSession beginRestoreSession();
   @Source(SUSI_NO_CATEGORY)  int requestRestore(  @Sink(SUSI_NO_CATEGORY) android.app.backup.RestoreObserver arg0);
}
class FullBackup{
    void restoreFile(  @Sink(SUSI_FILE) android.os.ParcelFileDescriptor arg0, @Sink(SUSI_FILE) long arg1, @Sink(SUSI_FILE) int arg2, @Sink(SUSI_FILE) long arg3, @Sink(SUSI_FILE) long arg4, @Sink(SUSI_FILE) java.io.File arg5);
}
class FullBackupDataOutput{
   @Source(SUSI_NO_CATEGORY)  android.app.backup.BackupDataOutput getData();
}
class IBackupManager$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IBackupManager$Stub$Proxy{
    void dataChanged(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void agentConnected(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1);
    void setAutoRestore(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setBackupEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.backup.IRestoreSession beginRestoreSession(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void clearBackupData(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String selectBackupTransport(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void opComplete(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setBackupPassword(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void agentDisconnected(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void fullBackup(  @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg5);
    void setBackupProvisioned(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void acknowledgeFullBackupOrRestore(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) android.app.backup.IFullBackupRestoreObserver arg4);
    void restoreAtInstall(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] listAllTransports();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCurrentTransport();
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getConfigurationIntent(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDestinationString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class IFullBackupRestoreObserver$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IFullBackupRestoreObserver$Stub$Proxy{
    void onRestorePackage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void onBackupPackage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IRestoreObserver$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IRestoreObserver$Stub$Proxy{
    void restoreFinished(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void onUpdate(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void restoreStarting(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void restoreSetsAvailable(  @Sink(SUSI_NO_CATEGORY) android.app.backup.RestoreSet[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IRestoreSession$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IRestoreSession$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  int restoreSome(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) android.app.backup.IRestoreObserver arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg2);
   @Source(SUSI_NO_CATEGORY)  int restoreAll(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) android.app.backup.IRestoreObserver arg1);
   @Source(SUSI_NO_CATEGORY)  int restorePackage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.app.backup.IRestoreObserver arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NO_CATEGORY)  int getAvailableRestoreSets(  @Sink(SUSI_NO_CATEGORY) android.app.backup.IRestoreObserver arg0);
}
class RestoreSession{
    int restoreSome(  @Sink(SUSI_LOG) long arg0, @Sink(SUSI_LOG) android.app.backup.RestoreObserver arg1, @Sink(SUSI_LOG) java.lang.String[] arg2);
    int restorePackage(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) android.app.backup.RestoreObserver arg1);
   @Source(SUSI_NO_CATEGORY)  int getAvailableRestoreSets(  @Sink(SUSI_NO_CATEGORY) android.app.backup.RestoreObserver arg0);
   @Source(SUSI_NO_CATEGORY)  int restoreAll(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) android.app.backup.RestoreObserver arg1);
}
class RestoreSession$RestoreObserverWrapper{
    void restoreStarting(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void restoreSetsAvailable(  @Sink(SUSI_NO_CATEGORY) android.app.backup.RestoreSet[] arg0);
    void restoreFinished(  @Sink(SUSI_NO_CATEGORY) int arg0);
}

package java.text;

class Annotation{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue();
}
class AttributedCharacterIterator$Attribute{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
}
class AttributedString{
    void addAttribute(  @Sink(SUSI_NO_CATEGORY) java.text.AttributedCharacterIterator$Attribute arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void addAttribute(  @Sink(SUSI_NO_CATEGORY) java.text.AttributedCharacterIterator$Attribute arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.text.AttributedCharacterIterator getIterator(  @Sink(SUSI_NO_CATEGORY) java.text.AttributedCharacterIterator$Attribute[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.text.AttributedCharacterIterator getIterator(  @Sink(SUSI_NO_CATEGORY) java.text.AttributedCharacterIterator$Attribute[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.text.AttributedCharacterIterator getIterator();
}
class AttributedString$AttributedIterator{
   @Source(SUSI_NO_CATEGORY)  int getRunLimit();
   @Source(SUSI_NO_CATEGORY)  int getIndex();
   @Source(SUSI_NO_CATEGORY)  int getBeginIndex();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getAttribute(  @Sink(SUSI_NO_CATEGORY) java.text.AttributedCharacterIterator$Attribute arg0);
   @Source(SUSI_NO_CATEGORY)  int getRunStart(  @Sink(SUSI_NO_CATEGORY) java.text.AttributedCharacterIterator$Attribute arg0);
   @Source(SUSI_NO_CATEGORY)  int getRunLimit(  @Sink(SUSI_NO_CATEGORY) java.text.AttributedCharacterIterator$Attribute arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Set getAllAttributeKeys();
   @Source(SUSI_NO_CATEGORY)  java.util.Map getAttributes();
   @Source(SUSI_NO_CATEGORY)  int getEndIndex();
   @Source(SUSI_NO_CATEGORY)  int getRunStart();
}
class BreakIterator{
    void setText(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.text.BreakIterator getCharacterInstance();
   @Source(SUSI_NO_CATEGORY)  java.text.BreakIterator getLineInstance();
   @Source(SUSI_NO_CATEGORY)  java.text.BreakIterator getSentenceInstance(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
   @Source(SUSI_NO_CATEGORY)  java.text.BreakIterator getSentenceInstance();
   @Source(SUSI_NO_CATEGORY)  java.text.BreakIterator getLineInstance(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  java.text.BreakIterator getWordInstance(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  java.text.BreakIterator getWordInstance();
   @Source(SUSI_NO_CATEGORY)  java.text.BreakIterator getCharacterInstance(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Locale[] getAvailableLocales();
}
class ChoiceFormat{
   @Source(SUSI_NO_CATEGORY)  java.lang.Number parse(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.text.ParsePosition arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] getFormats();
   @Source(SUSI_NO_CATEGORY)  double[] getLimits();
}
class CollationElementIterator{
    void setOffset(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setText(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getMaxExpansion(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getOffset();
}
class CollationKey{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSourceString();
   @Source(SUSI_NO_CATEGORY)  int compareTo(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Collator{
    void setDecomposition(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setStrength(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getDecomposition();
   @Source(SUSI_NO_CATEGORY)  java.text.Collator getInstance(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  int getStrength();
   @Source(SUSI_NO_CATEGORY)  int compare(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
   @Source(SUSI_NO_CATEGORY)  java.text.Collator getInstance();
   @Source(SUSI_NO_CATEGORY)  java.util.Locale[] getAvailableLocales();
}
class DateFormat{
    void setTimeZone(  @Sink(SUSI_NO_CATEGORY) java.util.TimeZone arg0);
    void setLenient(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  java.text.DateFormat getTimeInstance();
   @Source(SUSI_NO_CATEGORY)  java.text.DateFormat getDateInstance(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.text.DateFormat getDateInstance(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.util.Locale arg1);
   @Source(SUSI_NO_CATEGORY)  java.text.DateFormat getTimeInstance(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.text.DateFormat getDateTimeInstance(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.Date parse(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.text.DateFormat getDateInstance();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object parseObject(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.text.ParsePosition arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.StringBuffer format(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.StringBuffer arg1, @Sink(SUSI_NO_CATEGORY) java.text.FieldPosition arg2);
   @Source(SUSI_NO_CATEGORY)  java.text.DateFormat getTimeInstance(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.util.Locale arg1);
   @Source(SUSI_NO_CATEGORY)  java.text.NumberFormat getNumberFormat();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
   @Source(SUSI_NO_CATEGORY)  java.text.DateFormat getInstance();
   @Source(SUSI_NO_CATEGORY)  java.util.Locale[] getAvailableLocales();
   @Source(SUSI_NO_CATEGORY)  java.util.Calendar getCalendar();
   @Source(SUSI_NO_CATEGORY)  java.text.DateFormat getDateTimeInstance(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.util.Locale arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String format(  @Sink(SUSI_NO_CATEGORY) java.util.Date arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.TimeZone getTimeZone();
   @Source(SUSI_NO_CATEGORY)  java.text.DateFormat getDateTimeInstance();
}
class DateFormat$Field{
   @Source(SUSI_NO_CATEGORY)  int getCalendarField();
}
class DateFormatSymbols{
    void setZoneStrings(  @Sink(SUSI_NO_CATEGORY) java.lang.String[][] arg0);
    void setMonths(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
    void setShortMonths(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
    void setEras(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
    void setAmPmStrings(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
    void setShortWeekdays(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
    void setWeekdays(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.text.DateFormatSymbols getInstance();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[][] getZoneStrings();
   @Source(SUSI_NO_CATEGORY)  java.util.Locale[] getAvailableLocales();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getEras();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLocalPatternChars();
   @Source(SUSI_NO_CATEGORY)  java.text.DateFormatSymbols getInstance(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getShortMonths();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getMonths();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getAmPmStrings();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[][] internalZoneStrings();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getShortWeekdays();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getWeekdays();
}
class DecimalFormat{
    void setMultiplier(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setGroupingSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setParseIntegerOnly(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setNegativePrefix(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setNegativeSuffix(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setGroupingUsed(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setMinimumIntegerDigits(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDecimalFormatSymbols(  @Sink(SUSI_NO_CATEGORY) java.text.DecimalFormatSymbols arg0);
    void setMaximumFractionDigits(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setMinimumFractionDigits(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setParseBigDecimal(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setPositiveSuffix(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setCurrency(  @Sink(SUSI_NO_CATEGORY) java.util.Currency arg0);
    void setMaximumIntegerDigits(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setPositivePrefix(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setDecimalSeparatorAlwaysShown(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int getMultiplier();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPositivePrefix();
   @Source(SUSI_NO_CATEGORY)  int getGroupingSize();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPositiveSuffix();
   @Source(SUSI_NO_CATEGORY)  java.util.Currency getCurrency();
   @Source(SUSI_NO_CATEGORY)  java.math.RoundingMode getRoundingMode();
   @Source(SUSI_NO_CATEGORY)  java.text.DecimalFormatSymbols getDecimalFormatSymbols();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNegativePrefix();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNegativeSuffix();
}
class DecimalFormatSymbols{
    void setInternationalCurrencySymbol(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNaN();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInternationalCurrencySymbol();
   @Source(SUSI_NO_CATEGORY)  char getZeroDigit();
   @Source(SUSI_NO_CATEGORY)  char getMonetaryDecimalSeparator();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCurrencySymbol();
   @Source(SUSI_NO_CATEGORY)  char getPatternSeparator();
   @Source(SUSI_NO_CATEGORY)  java.text.DecimalFormatSymbols getInstance();
   @Source(SUSI_NO_CATEGORY)  java.util.Locale[] getAvailableLocales();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getExponentSeparator();
   @Source(SUSI_NO_CATEGORY)  char getPercent();
   @Source(SUSI_NO_CATEGORY)  char getMinusSign();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInfinity();
   @Source(SUSI_NO_CATEGORY)  char getDigit();
   @Source(SUSI_NO_CATEGORY)  char getPerMill();
   @Source(SUSI_NO_CATEGORY)  java.text.DecimalFormatSymbols getInstance(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  char getDecimalSeparator();
   @Source(SUSI_NO_CATEGORY)  java.util.Currency getCurrency();
   @Source(SUSI_NO_CATEGORY)  char getGroupingSeparator();
}
class FieldPosition{
   @Source(SUSI_NO_CATEGORY)  int getEndIndex();
   @Source(SUSI_NO_CATEGORY)  int getField();
   @Source(SUSI_NO_CATEGORY)  java.text.Format$Field getFieldAttribute();
   @Source(SUSI_NO_CATEGORY)  int getBeginIndex();
}
class Format{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object parseObject(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String format(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class MessageFormat{
    void setFormats(  @Sink(SUSI_NO_CATEGORY) java.text.Format[] arg0);
    void setFormatByArgumentIndex(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.text.Format arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] parse(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.text.ParsePosition arg1);
    void setFormat(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.text.Format arg1);
    void setFormatsByArgumentIndex(  @Sink(SUSI_NO_CATEGORY) java.text.Format[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Locale getLocale();
   @Source(SUSI_NO_CATEGORY)  java.text.Format[] getFormats();
   @Source(SUSI_NO_CATEGORY)  java.text.Format[] getFormatsByArgumentIndex();
}
class NumberFormat{
    void setCurrency(  @Sink(SUSI_NO_CATEGORY) java.util.Currency arg0);
    void setRoundingMode(  @Sink(SUSI_NO_CATEGORY) java.math.RoundingMode arg0);
   @Source(SUSI_NO_CATEGORY)  java.text.NumberFormat getCurrencyInstance(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  java.text.NumberFormat getPercentInstance(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  java.text.NumberFormat getNumberInstance(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Locale[] getAvailableLocales();
   @Source(SUSI_NO_CATEGORY)  java.util.Currency getCurrency();
   @Source(SUSI_NO_CATEGORY)  java.text.NumberFormat getCurrencyInstance();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object parseObject(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.text.ParsePosition arg1);
   @Source(SUSI_NO_CATEGORY)  java.text.NumberFormat getInstance(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  int getMinimumIntegerDigits();
   @Source(SUSI_NO_CATEGORY)  java.text.NumberFormat getPercentInstance();
   @Source(SUSI_NO_CATEGORY)  java.text.NumberFormat getIntegerInstance(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  java.math.RoundingMode getRoundingMode();
   @Source(SUSI_NO_CATEGORY)  int getMinimumFractionDigits();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
   @Source(SUSI_NO_CATEGORY)  java.lang.String format(  @Sink(SUSI_NO_CATEGORY) double arg0);
   @Source(SUSI_NO_CATEGORY)  int getMaximumFractionDigits();
   @Source(SUSI_NO_CATEGORY)  java.lang.StringBuffer format(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.StringBuffer arg1, @Sink(SUSI_NO_CATEGORY) java.text.FieldPosition arg2);
   @Source(SUSI_NO_CATEGORY)  java.text.NumberFormat getIntegerInstance();
   @Source(SUSI_NO_CATEGORY)  java.lang.Number parse(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String format(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  int getMaximumIntegerDigits();
   @Source(SUSI_NO_CATEGORY)  java.text.NumberFormat getNumberInstance();
   @Source(SUSI_NO_CATEGORY)  java.text.NumberFormat getInstance();
}
class ParseException{
   @Source(SUSI_NO_CATEGORY)  int getErrorOffset();
}
class ParsePosition{
   @Source(SUSI_NO_CATEGORY)  int getIndex();
   @Source(SUSI_NO_CATEGORY)  int getErrorIndex();
}
class RuleBasedBreakIterator{
    void setText(  @Sink(SUSI_NO_CATEGORY) java.text.CharacterIterator arg0);
   @Source(SUSI_NO_CATEGORY)  java.text.CharacterIterator getText();
}
class RuleBasedCollator{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRules();
   @Source(SUSI_NO_CATEGORY)  java.text.CollationElementIterator getCollationElementIterator(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.text.CollationKey getCollationKey(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.text.CollationElementIterator getCollationElementIterator(  @Sink(SUSI_NO_CATEGORY) java.text.CharacterIterator arg0);
}
class SimpleDateFormat{
    void setDateFormatSymbols(  @Sink(SUSI_NO_CATEGORY) java.text.DateFormatSymbols arg0);
    void set2DigitYearStart(  @Sink(SUSI_NO_CATEGORY) java.util.Date arg0);
   @Source(SUSI_NO_CATEGORY)  java.text.DateFormatSymbols getDateFormatSymbols();
   @Source(SUSI_NO_CATEGORY)  java.util.Date get2DigitYearStart();
   @Source(SUSI_NO_CATEGORY)  java.util.Date parse(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.text.ParsePosition arg1);
}
class StringCharacterIterator{
   @Source(SUSI_NO_CATEGORY)  int getIndex();
   @Source(SUSI_NO_CATEGORY)  int getBeginIndex();
   @Source(SUSI_NO_CATEGORY)  int getEndIndex();
}

package com.android.musicfx.seekbar;

class AbsSeekBar{
    void setMax(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getThumbOffset();
}
class ProgressBar{
    void setInterpolator(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setProgress(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setVisibility(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getCurrentDrawable();
   @Source(SUSI_NO_CATEGORY)  int getMax();
   @Source(SUSI_NO_CATEGORY)  int getProgress();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.shapes.Shape getDrawableShape();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getProgressDrawable();
}
class ProgressBar$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}

package android.media;

class AsyncPlayer{
    void setUsesWakeLock(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class AudioManager{
    void setRingerMode(  @Sink(SUSI_AUDIO) int arg0);
    void setMasterVolume(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1);
    void setBluetoothA2dpOn(  @Sink(SUSI_AUDIO) boolean arg0);
    void setRouting(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1, @Sink(SUSI_AUDIO) int arg2);
    void setMode(  @Sink(SUSI_AUDIO) int arg0);
    void setStreamMute(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) boolean arg1);
    void setParameter(  @Sink(SUSI_AUDIO) java.lang.String arg0, @Sink(SUSI_AUDIO) java.lang.String arg1);
    void setVibrateSetting(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1);
    void setRemoteSubmixOn(  @Sink(SUSI_AUDIO) boolean arg0, @Sink(SUSI_AUDIO) int arg1);
    void setWiredDeviceConnectionState(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1, @Sink(SUSI_AUDIO) java.lang.String arg2);
    void setParameters(  @Sink(SUSI_AUDIO) java.lang.String arg0);
    void setMasterMute(  @Sink(SUSI_AUDIO) boolean arg0, @Sink(SUSI_AUDIO) int arg1);
    void setMasterMute(  @Sink(SUSI_AUDIO) boolean arg0);
    void setBluetoothScoOn(  @Sink(SUSI_AUDIO) boolean arg0);
    void setMicrophoneMute(  @Sink(SUSI_AUDIO) boolean arg0);
    void setStreamSolo(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) boolean arg1);
    void setStreamVolume(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1, @Sink(SUSI_AUDIO) int arg2);
    void setWiredHeadsetOn(  @Sink(SUSI_AUDIO) boolean arg0);
    void setSpeakerphoneOn(  @Sink(SUSI_AUDIO) boolean arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int setBluetoothA2dpDeviceConnectionState(  android.bluetooth.BluetoothDevice arg0, int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean isSpeechRecognitionActive();
   @Source(SUSI_NO_CATEGORY)  android.media.IRingtonePlayer getRingtonePlayer();
   @Source(SUSI_NO_CATEGORY)  boolean isMusicActive();
   @Source(SUSI_NO_CATEGORY)  int getMasterStreamType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getMode();
   @Source(SUSI_NO_CATEGORY)  int getDevicesForStream(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getMasterMaxVolume();
   @Source(SUSI_NO_CATEGORY)  int getStreamMaxVolume(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getRingerMode();
   @Source(SUSI_NO_CATEGORY)  int getRouting(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getLastAudibleStreamVolume(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getLastAudibleMasterVolume();
   @Source(SUSI_NO_CATEGORY)  int getVibrateSetting(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getParameters(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getMasterVolume();
   @Source(SUSI_NO_CATEGORY)  boolean isMicrophoneMute();
   @Source(SUSI_NO_CATEGORY)  int getStreamVolume(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class AudioManager$FocusEventHandlerDelegate{
   @Source(SUSI_NO_CATEGORY)  android.os.Handler getHandler();
}
class AudioRecord{
    int setNotificationMarkerPosition(  @Sink(SUSI_AUDIO) int arg0);
    int setPositionNotificationPeriod(  @Sink(SUSI_AUDIO) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getRecordingState();
   @Source(SUSI_NO_CATEGORY)  int getPositionNotificationPeriod();
   @Source(SUSI_NO_CATEGORY)  int getState();
   @Source(SUSI_NO_CATEGORY)  int getSampleRate();
   @Source(SUSI_NO_CATEGORY)  int getChannelConfiguration();
   @Source(SUSI_NO_CATEGORY)  int getAudioFormat();
   @Source(SUSI_NO_CATEGORY)  int getAudioSessionId();
   @Source(SUSI_NO_CATEGORY)  int getNotificationMarkerPosition();
   @Source(SUSI_NO_CATEGORY)  int getChannelCount();
   @Source(SUSI_NO_CATEGORY)  int getAudioSource();
}
class AudioRoutesInfo{
    void writeToParcel(  @Sink(SUSI_AUDIO) android.os.Parcel arg0, @Sink(SUSI_AUDIO) int arg1);
}
class AudioService{
    void setRemoteStreamVolume(  @Sink(SUSI_AUDIO) int arg0);
    void setStreamVolume(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1, @Sink(SUSI_AUDIO) int arg2);
    void setRingerMode(  @Sink(SUSI_AUDIO) int arg0);
    void setMasterMute(  @Sink(SUSI_AUDIO) boolean arg0, @Sink(SUSI_AUDIO) int arg1, @Sink(SUSI_AUDIO) android.os.IBinder arg2);
    void setVibrateSetting(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1);
    void setWiredDeviceConnectionState(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1, @Sink(SUSI_AUDIO) java.lang.String arg2);
    void setSpeakerphoneOn(  @Sink(SUSI_AUDIO) boolean arg0);
    void registerRemoteVolumeObserverForRcc(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) android.media.IRemoteVolumeObserver arg1);
    void setPlaybackInfoForRcc(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1, @Sink(SUSI_AUDIO) int arg2);
    void setStreamMute(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) boolean arg1, @Sink(SUSI_AUDIO) android.os.IBinder arg2);
    boolean onTransact(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) android.os.Parcel arg1, @Sink(SUSI_AUDIO) android.os.Parcel arg2, @Sink(SUSI_AUDIO) int arg3);
    void adjustStreamVolume(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1, @Sink(SUSI_AUDIO) int arg2);
    void setBluetoothScoOn(  @Sink(SUSI_AUDIO) boolean arg0);
    void playSoundEffect(  @Sink(SUSI_AUDIO) int arg0);
    void setMasterVolume(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1);
    void setRemoteSubmixOn(  @Sink(SUSI_AUDIO) boolean arg0, @Sink(SUSI_AUDIO) int arg1);
    void setMode(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) android.os.IBinder arg1);
    void setStreamSolo(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) boolean arg1, @Sink(SUSI_AUDIO) android.os.IBinder arg2);
    void playSoundEffectVolume(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) float arg1);
    int setBluetoothA2dpDeviceConnectionState(  @Sink(SUSI_AUDIO) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_AUDIO) int arg1);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NETWORK_INFORMATION)  int getMasterVolume();
   @Source(SUSI_NETWORK_INFORMATION)  int getLastAudibleStreamVolume(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getStreamVolume(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getValueForVibrateSetting(  int arg0, int arg1, int arg2);
   @Source(SUSI_NETWORK_INFORMATION)  int getRemoteStreamVolume();
   @Source(SUSI_NETWORK_INFORMATION)  int getMasterMaxVolume();
   @Source(SUSI_NETWORK_INFORMATION)  int getRingerMode();
   @Source(SUSI_NETWORK_INFORMATION)  int getRemoteStreamMaxVolume();
   @Source(SUSI_NETWORK_INFORMATION)  int getLastAudibleMasterVolume();
   @Source(SUSI_NETWORK_INFORMATION)  int getMode();
   @Source(SUSI_NETWORK_INFORMATION)  int getMasterStreamType();
   @Source(SUSI_NETWORK_INFORMATION)  android.media.IRingtonePlayer getRingtonePlayer();
   @Source(SUSI_NETWORK_INFORMATION)  int getVibrateSetting(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getStreamMaxVolume(  int arg0);
}
class AudioService$AudioFocusDeathHandler{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder getBinder();
}
class AudioService$AudioHandler{
    void handleMessage(  @Sink(SUSI_AUDIO) android.os.Message arg0);
}
class AudioService$RcClientDeathHandler{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder getBinder();
}
class AudioService$ScoClient{
   @Source(SUSI_NETWORK_INFORMATION)  int getCount();
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder getBinder();
   @Source(SUSI_NO_CATEGORY)  int getPid();
}
class AudioService$SetModeDeathHandler{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder getBinder();
   @Source(SUSI_NETWORK_INFORMATION)  int getMode();
   @Source(SUSI_NO_CATEGORY)  int getPid();
}
class AudioService$VolumeStreamState{
    boolean setIndex(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1, @Sink(SUSI_AUDIO) boolean arg2);
    void setLastAudibleIndex(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1);
    void setAllIndexes(  @Sink(SUSI_AUDIO) android.media.AudioService$VolumeStreamState arg0, @Sink(SUSI_AUDIO) boolean arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getStreamType();
   @Source(SUSI_NETWORK_INFORMATION)  int getMaxIndex();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.concurrent.ConcurrentHashMap getAllIndexes(  boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getIndex(  int arg0, boolean arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getSettingNameForDevice(  boolean arg0, int arg1);
}
class AudioSystem{
   @Source(SUSI_NO_CATEGORY)  int getNumStreamTypes();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDeviceName(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class AudioTrack{
    int setPositionNotificationPeriod(  @Sink(SUSI_AUDIO) int arg0);
    int setPlaybackRate(  @Sink(SUSI_AUDIO) int arg0);
    int setStereoVolume(  @Sink(SUSI_AUDIO) float arg0, @Sink(SUSI_AUDIO) float arg1);
    int setNotificationMarkerPosition(  @Sink(SUSI_AUDIO) int arg0);
    int setAuxEffectSendLevel(  @Sink(SUSI_AUDIO) float arg0);
    int setLoopPoints(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1, @Sink(SUSI_AUDIO) int arg2);
    int setPlaybackHeadPosition(  @Sink(SUSI_AUDIO) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getNativeOutputSampleRate(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getChannelConfiguration();
   @Source(SUSI_NO_CATEGORY)  float getMaxVolume();
   @Source(SUSI_NO_CATEGORY)  int getAudioFormat();
   @Source(SUSI_NO_CATEGORY)  float getMinVolume();
   @Source(SUSI_NO_CATEGORY)  int getPositionNotificationPeriod();
   @Source(SUSI_NO_CATEGORY)  int getStreamType();
   @Source(SUSI_NO_CATEGORY)  int getPlayState();
   @Source(SUSI_NO_CATEGORY)  int getNativeFrameCount();
   @Source(SUSI_NO_CATEGORY)  int getSampleRate();
   @Source(SUSI_NO_CATEGORY)  int getState();
   @Source(SUSI_NO_CATEGORY)  int getAudioSessionId();
   @Source(SUSI_NO_CATEGORY)  int getChannelCount();
   @Source(SUSI_NO_CATEGORY)  int getPlaybackHeadPosition();
   @Source(SUSI_NO_CATEGORY)  int getPlaybackRate();
   @Source(SUSI_NO_CATEGORY)  int getNotificationMarkerPosition();
}
class AudioTrack$NativeEventHandlerDelegate{
   @Source(SUSI_NO_CATEGORY)  android.os.Handler getHandler();
}
class CamcorderProfile{
   @Source(SUSI_NO_CATEGORY)  android.media.CamcorderProfile get(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.media.CamcorderProfile get(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class DecoderCapabilities{
   @Source(SUSI_NO_CATEGORY)  java.util.List getVideoDecoders();
   @Source(SUSI_NO_CATEGORY)  java.util.List getAudioDecoders();
}
class ExifInterface{
    void setAttribute(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  long getDateTime();
   @Source(SUSI_NO_CATEGORY)  long getGpsDateTime();
   @Source(SUSI_NO_CATEGORY)  double getAltitude(  @Sink(SUSI_NO_CATEGORY) double arg0);
   @Source(SUSI_NO_CATEGORY)  double getAttributeDouble(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) double arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] getThumbnail();
   @Source(SUSI_NO_CATEGORY)  int getAttributeInt(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAttribute(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class IAudioFocusDispatcher$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IAudioFocusDispatcher$Stub$Proxy{
    void dispatchAudioFocusChange(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IAudioRoutesObserver$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IAudioRoutesObserver$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IAudioService$Stub{
    boolean onTransact(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) android.os.Parcel arg1, @Sink(SUSI_AUDIO) android.os.Parcel arg2, @Sink(SUSI_AUDIO) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IAudioService$Stub$Proxy{
    android.media.AudioRoutesInfo startWatchingRoutes(  @Sink(SUSI_AUDIO) android.media.IAudioRoutesObserver arg0);
    void setRingtonePlayer(  @Sink(SUSI_AUDIO) android.media.IRingtonePlayer arg0);
    int abandonAudioFocus(  @Sink(SUSI_AUDIO) android.media.IAudioFocusDispatcher arg0, @Sink(SUSI_AUDIO) java.lang.String arg1);
    void setBluetoothA2dpOn(  @Sink(SUSI_AUDIO) boolean arg0);
    void playSoundEffect(  @Sink(SUSI_AUDIO) int arg0);
    void unregisterAudioFocusClient(  @Sink(SUSI_AUDIO) java.lang.String arg0);
    void setStreamMute(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) boolean arg1, @Sink(SUSI_AUDIO) android.os.IBinder arg2);
    void unregisterRemoteControlDisplay(  @Sink(SUSI_AUDIO) android.media.IRemoteControlDisplay arg0);
    boolean shouldVibrate(  @Sink(SUSI_AUDIO) int arg0);
    void setStreamVolume(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1, @Sink(SUSI_AUDIO) int arg2);
    void stopBluetoothSco(  @Sink(SUSI_AUDIO) android.os.IBinder arg0);
    void unregisterRemoteControlClient(  @Sink(SUSI_AUDIO) android.app.PendingIntent arg0, @Sink(SUSI_AUDIO) android.media.IRemoteControlClient arg1);
    void setSpeakerphoneOn(  @Sink(SUSI_AUDIO) boolean arg0);
    void setMode(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) android.os.IBinder arg1);
    void setRemoteSubmixOn(  @Sink(SUSI_AUDIO) boolean arg0, @Sink(SUSI_AUDIO) int arg1);
    void setRingerMode(  @Sink(SUSI_AUDIO) int arg0);
    void setWiredDeviceConnectionState(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1, @Sink(SUSI_AUDIO) java.lang.String arg2);
    int setBluetoothA2dpDeviceConnectionState(  @Sink(SUSI_AUDIO) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_AUDIO) int arg1);
    void setStreamSolo(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) boolean arg1, @Sink(SUSI_AUDIO) android.os.IBinder arg2);
    void setVibrateSetting(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1);
    void startBluetoothSco(  @Sink(SUSI_AUDIO) android.os.IBinder arg0);
    void registerRemoteControlDisplay(  @Sink(SUSI_AUDIO) android.media.IRemoteControlDisplay arg0);
    void adjustLocalOrRemoteStreamVolume(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1);
    void adjustSuggestedStreamVolume(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1, @Sink(SUSI_AUDIO) int arg2);
    void adjustVolume(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1);
    void adjustMasterVolume(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1);
    void adjustStreamVolume(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1, @Sink(SUSI_AUDIO) int arg2);
    void setPlaybackInfoForRcc(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1, @Sink(SUSI_AUDIO) int arg2);
    void setRemoteStreamVolume(  @Sink(SUSI_AUDIO) int arg0);
    void forceVolumeControlStream(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) android.os.IBinder arg1);
    int requestAudioFocus(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1, @Sink(SUSI_AUDIO) android.os.IBinder arg2, @Sink(SUSI_AUDIO) android.media.IAudioFocusDispatcher arg3, @Sink(SUSI_AUDIO) java.lang.String arg4, @Sink(SUSI_AUDIO) java.lang.String arg5);
    void setMasterVolume(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) int arg1);
    int registerRemoteControlClient(  @Sink(SUSI_AUDIO) android.app.PendingIntent arg0, @Sink(SUSI_AUDIO) android.media.IRemoteControlClient arg1, @Sink(SUSI_AUDIO) java.lang.String arg2);
    void registerRemoteVolumeObserverForRcc(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) android.media.IRemoteVolumeObserver arg1);
    void remoteControlDisplayUsesBitmapSize(  @Sink(SUSI_AUDIO) android.media.IRemoteControlDisplay arg0, @Sink(SUSI_AUDIO) int arg1, @Sink(SUSI_AUDIO) int arg2);
    void setMasterMute(  @Sink(SUSI_AUDIO) boolean arg0, @Sink(SUSI_AUDIO) int arg1, @Sink(SUSI_AUDIO) android.os.IBinder arg2);
    void playSoundEffectVolume(  @Sink(SUSI_AUDIO) int arg0, @Sink(SUSI_AUDIO) float arg1);
    void setBluetoothScoOn(  @Sink(SUSI_AUDIO) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getRemoteStreamMaxVolume();
   @Source(SUSI_NETWORK_INFORMATION)  int getMasterStreamType();
   @Source(SUSI_NETWORK_INFORMATION)  int getStreamMaxVolume(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getVibrateSetting(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getMasterVolume();
   @Source(SUSI_NETWORK_INFORMATION)  int getRingerMode();
   @Source(SUSI_NETWORK_INFORMATION)  android.media.IRingtonePlayer getRingtonePlayer();
   @Source(SUSI_NETWORK_INFORMATION)  int getLastAudibleMasterVolume();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NETWORK_INFORMATION)  int getRemoteStreamVolume();
   @Source(SUSI_NETWORK_INFORMATION)  int getMode();
   @Source(SUSI_NETWORK_INFORMATION)  int getLastAudibleStreamVolume(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getStreamVolume(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  boolean isStreamMute(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getMasterMaxVolume();
}
class IMediaScannerListener$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IMediaScannerListener$Stub$Proxy{
    void scanCompleted(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IMediaScannerService$Stub{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IMediaScannerService$Stub$Proxy{
    void scanFile(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void requestScanFile(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.media.IMediaScannerListener arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class IRemoteControlClient$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IRemoteControlClient$Stub$Proxy{
    void setCurrentClientGenerationId(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void plugRemoteControlDisplay(  @Sink(SUSI_NO_CATEGORY) android.media.IRemoteControlDisplay arg0);
    void unplugRemoteControlDisplay(  @Sink(SUSI_NO_CATEGORY) android.media.IRemoteControlDisplay arg0);
    void onInformationRequested(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IRemoteControlDisplay$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IRemoteControlDisplay$Stub$Proxy{
    void setArtwork(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg1);
    void setTransportControlFlags(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setMetadata(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void setPlaybackState(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
    void setAllMetadata(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg2);
    void setCurrentClientId(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.app.PendingIntent arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IRemoteVolumeObserver$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IRemoteVolumeObserver$Stub$Proxy{
    void dispatchRemoteVolumeUpdate(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IRingtonePlayer$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IRingtonePlayer$Stub$Proxy{
    void playAsync(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.net.Uri arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) android.os.UserHandle arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) boolean arg2, @Sink(SUSI_SYNCHRONIZATION_DATA) int arg3);
   @Source(SUSI_NO_CATEGORY)  boolean isPlaying(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
    void stop(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class MediaFile{
    void addFileType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void addFileType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMimeTypeForFormatCode(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFileTitle(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.media.MediaFile$MediaFileType getFileType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMimeTypeForFile(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class MediaMetadataRetriever{
    void setDataSource(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0);
    void setDataSource(  @Sink(SUSI_FILE) java.lang.String arg0);
    void setDataSource(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.Map arg1);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getFrameAtTime(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getFrameAtTime();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getFrameAtTime(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getEmbeddedPicture();
}
class MediaPlayer{
    void addTimedTextSource(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) long arg1, @Sink(SUSI_FILE) long arg2, @Sink(SUSI_FILE) java.lang.String arg3);
    void addTimedTextSource(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.lang.String arg1);
    void setDataSource(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0);
    void setSurface(  @Sink(SUSI_LOG) android.view.Surface arg0);
    void setRetransmitEndpoint(  @Sink(SUSI_NO_CATEGORY) java.net.InetSocketAddress arg0);
    void setWakeMode(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setDataSource(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.Map arg1);
    void setVideoScalingMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDataSource(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setParameter(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int setMetadataFilter(  @Sink(SUSI_NO_CATEGORY) java.util.Set arg0, @Sink(SUSI_NO_CATEGORY) java.util.Set arg1);
   @Source(SUSI_NO_CATEGORY)  boolean setParameter(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getIntParameter(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Parcel getParcelParameter(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getStringParameter(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.media.MediaPlayer$TrackInfo[] getTrackInfo();
   @Source(SUSI_NO_CATEGORY)  android.media.Metadata getMetadata(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  android.media.MediaPlayer create(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1);
}
class MediaPlayer$TrackInfo{
   @Source(SUSI_NO_CATEGORY)  int getTrackType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLanguage();
}
class MediaRecorder{
    void setOutputFile(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0);
    void setAuxiliaryOutputFile(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0);
    void setAuxiliaryOutputFile(  @Sink(SUSI_LOG) java.lang.String arg0);
    void setAudioSamplingRate(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setProfile(  @Sink(SUSI_NO_CATEGORY) android.media.CamcorderProfile arg0);
    void setOrientationHint(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setLocation(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setAudioChannels(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setVideoEncodingBitRate(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setAudioEncodingBitRate(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setCaptureRate(  @Sink(SUSI_NO_CATEGORY) double arg0);
   @Source(SUSI_NO_CATEGORY)  int getAudioSourceMax();
}
class MediaRouter{
   @Source(SUSI_NO_CATEGORY)  android.media.MediaRouter$RouteInfo getRouteAtStatic(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.media.MediaRouter$RouteCategory getCategoryAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getCategoryCount();
   @Source(SUSI_NO_CATEGORY)  android.media.MediaRouter$RouteCategory getSystemAudioCategory();
   @Source(SUSI_NO_CATEGORY)  android.media.MediaRouter$RouteInfo getRouteAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.media.MediaRouter$RouteInfo getSelectedRoute(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.media.MediaRouter$RouteInfo getSystemAudioRoute();
   @Source(SUSI_NO_CATEGORY)  int getRouteCountStatic();
   @Source(SUSI_NO_CATEGORY)  int getRouteCount();
}
class MediaRouter$RouteCategory{
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getName(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  int getSupportedTypes();
   @Source(SUSI_NO_CATEGORY)  java.util.List getRoutes(  @Sink(SUSI_NO_CATEGORY) java.util.List arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getName(  @Sink(SUSI_NO_CATEGORY) android.content.res.Resources arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getName();
}
class MediaRouter$RouteGroup{
    void setIconResource(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.media.MediaRouter$RouteInfo getRouteAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getName(  @Sink(SUSI_NO_CATEGORY) android.content.res.Resources arg0);
   @Source(SUSI_NO_CATEGORY)  int getRouteCount();
}
class MediaRouter$RouteInfo{
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getIconDrawable();
   @Source(SUSI_NO_CATEGORY)  int getSupportedTypes();
   @Source(SUSI_NO_CATEGORY)  android.view.Display getPresentationDisplay();
   @Source(SUSI_NO_CATEGORY)  android.media.MediaRouter$RouteGroup getGroup();
   @Source(SUSI_NO_CATEGORY)  int getPlaybackType();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getName(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getTag();
   @Source(SUSI_NO_CATEGORY)  int getVolume();
   @Source(SUSI_NO_CATEGORY)  int getVolumeHandling();
   @Source(SUSI_NO_CATEGORY)  int getVolumeMax();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getStatus();
   @Source(SUSI_NO_CATEGORY)  int getStatusCode();
   @Source(SUSI_NO_CATEGORY)  android.media.MediaRouter$RouteCategory getCategory();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getName(  @Sink(SUSI_NO_CATEGORY) android.content.res.Resources arg0);
   @Source(SUSI_NO_CATEGORY)  int getPlaybackStream();
}
class MediaRouter$Static{
    void onDisplayAdded(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void onDisplayChanged(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void onDisplayRemoved(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.Display[] getAllPresentationDisplays();
}
class MediaRouter$UserRouteInfo{
    void setVolume(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setIconResource(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setVolumeCallback(  @Sink(SUSI_NO_CATEGORY) android.media.MediaRouter$VolumeCallback arg0);
   @Source(SUSI_NO_CATEGORY)  android.media.RemoteControlClient getRemoteControlClient();
}
class MediaRouter$WifiDisplayStatusChangedReceiver{
    void onReceive(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1);
}
class MediaScanner{
    void scanMtpFile(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) int arg2, @Sink(SUSI_LOG) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.media.MediaScanner$FileEntry makeEntryFor(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class MediaScanner$MyMediaScannerClient{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getGenreName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class MediaScanner$WplHandler{
   @Source(SUSI_NO_CATEGORY)  org.xml.sax.ContentHandler getContentHandler();
}
class MediaSyncEvent{
   @Source(SUSI_NO_CATEGORY)  int getType();
   @Source(SUSI_NO_CATEGORY)  int getAudioSessionId();
}
class Metadata{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  double getDouble(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getLong(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getByteArray(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Date getDate(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class MiniThumbFile{
    void saveMiniThumbToFile(  @Sink(SUSI_LOG) byte[] arg0, @Sink(SUSI_LOG) long arg1, @Sink(SUSI_LOG) long arg2);
   @Source(SUSI_NO_CATEGORY)  byte[] getMiniThumbFromFile(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1);
   @Source(SUSI_NO_CATEGORY)  long getMagic(  @Sink(SUSI_NO_CATEGORY) long arg0);
}
class RemoteControlClient{
    void setPlaybackInformation(  @Sink(SUSI_LOG) int arg0, @Sink(SUSI_LOG) int arg1);
    void setPlaybackState(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.PendingIntent getRcMediaIntent();
   @Source(SUSI_NO_CATEGORY)  android.media.IRemoteControlClient getIRemoteControlClient();
   @Source(SUSI_NO_CATEGORY)  int getIntPlaybackInformation(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getRcseId();
}
class RemoteControlClient$MetadataEditor{
    android.media.RemoteControlClient$MetadataEditor putLong(  @Sink(SUSI_LOG) int arg0, @Sink(SUSI_LOG) long arg1);
    android.media.RemoteControlClient$MetadataEditor putString(  @Sink(SUSI_LOG) int arg0, @Sink(SUSI_LOG) java.lang.String arg1);
}
class Ringtone{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getUri();
   @Source(SUSI_NO_CATEGORY)  int getStreamType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTitle(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class RingtoneManager{
    void setActualDefaultRingtoneUri(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg2);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getDefaultUri(  int arg0);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getRingtoneUri(  int arg0);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getActualDefaultRingtoneUri(  android.content.Context arg0, int arg1);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getValidRingtoneUri(  android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  android.media.Ringtone getRingtone(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor getCursor();
   @Source(SUSI_NO_CATEGORY)  android.media.Ringtone getRingtone(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1);
   @Source(SUSI_NO_CATEGORY)  int getDefaultType(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getStopPreviousRingtone();
   @Source(SUSI_NO_CATEGORY)  boolean getIncludeDrm();
   @Source(SUSI_NO_CATEGORY)  int getRingtonePosition(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
}
class ThumbnailUtils{
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap createVideoThumbnail(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class TimedText{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getText();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getBounds();
}
class ToneGenerator{
   @Source(SUSI_NO_CATEGORY)  boolean startTone(  @Sink(SUSI_NO_CATEGORY) int arg0);
}

package com.android.internal.view;

class ActionBarPolicy{
   @Source(SUSI_NO_CATEGORY)  int getEmbeddedMenuWidthLimit();
   @Source(SUSI_NO_CATEGORY)  com.android.internal.view.ActionBarPolicy get(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  int getMaxActionButtons();
   @Source(SUSI_NO_CATEGORY)  int getStackedTabMaxWidth();
   @Source(SUSI_NO_CATEGORY)  int getTabContainerHeight();
}
class BaseSurfaceHolder{
   @Source(SUSI_NO_CATEGORY)  int getRequestedFormat();
   @Source(SUSI_NO_CATEGORY)  int getRequestedWidth();
   @Source(SUSI_NO_CATEGORY)  android.view.Surface getSurface();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Canvas lockCanvas();
   @Source(SUSI_NO_CATEGORY)  int getRequestedType();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getSurfaceFrame();
   @Source(SUSI_NO_CATEGORY)  int getRequestedHeight();
   @Source(SUSI_NO_CATEGORY)  android.view.SurfaceHolder$Callback[] getCallbacks();
}
class IInputConnectionWrapper{
    void setSelection(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void dispatchMessage(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
    void setComposingRegion(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class IInputContext$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IInputContext$Stub$Proxy{
    void performPrivateCommand(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void setSelection(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void performContextMenuAction(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void performEditorAction(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setComposingRegion(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void commitText(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setComposingText(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void deleteSurroundingText(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void clearMetaKeyStates(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void getCursorCapsMode(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputContextCallback arg2);
    void getTextAfterCursor(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputContextCallback arg3);
    void getTextBeforeCursor(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputContextCallback arg3);
    void getExtractedText(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.ExtractedTextRequest arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputContextCallback arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
    void getSelectedText(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputContextCallback arg2);
}
class IInputContextCallback$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IInputContextCallback$Stub$Proxy{
    void setCursorCapsMode(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setTextAfterCursor(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setTextBeforeCursor(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setExtractedText(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.ExtractedText arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setSelectedText(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IInputMethod$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IInputMethod$Stub$Proxy{
    void startInput(  @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputContext arg0, @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.EditorInfo arg1);
    void createSession(  @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputMethodCallback arg0);
    void hideSoftInput(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.ResultReceiver arg1);
    void setSessionEnabled(  @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputMethodSession arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void revokeSession(  @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputMethodSession arg0);
    void restartInput(  @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputContext arg0, @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.EditorInfo arg1);
    void attachToken(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
    void showSoftInput(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.ResultReceiver arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IInputMethodCallback$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IInputMethodCallback$Stub$Proxy{
    void sessionCreated(  @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputMethodSession arg0);
    void finishedEvent(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IInputMethodClient$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IInputMethodClient$Stub$Proxy{
    void setUsingInputMethod(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void onUnbindMethod(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setActive(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IInputMethodManager$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IInputMethodManager$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  boolean hideSoftInput(  @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputMethodClient arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.ResultReceiver arg2);
    void setInputMethod(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void showMySoftInput(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void addClient(  @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputMethodClient arg0, @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputContext arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setImeWindowStatus(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  boolean setCurrentInputMethodSubtype(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.InputMethodSubtype arg0);
   @Source(SUSI_NO_CATEGORY)  boolean switchToNextInputMethod(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void showInputMethodPickerFromClient(  @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputMethodClient arg0);
    void finishInput(  @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputMethodClient arg0);
    void updateStatusIcon(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setInputMethodAndSubtype(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.InputMethodSubtype arg2);
    void removeClient(  @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputMethodClient arg0);
   @Source(SUSI_NO_CATEGORY)  boolean switchToLastInputMethod(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.internal.view.InputBindResult startInput(  @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputMethodClient arg0, @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputContext arg1, @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.EditorInfo arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void showInputMethodAndSubtypeEnablerFromClient(  @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputMethodClient arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  boolean showSoftInput(  @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputMethodClient arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.ResultReceiver arg2);
    void registerSuggestionSpansForNotification(  @Sink(SUSI_NO_CATEGORY) android.text.style.SuggestionSpan[] arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setInputMethodEnabled(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void hideMySoftInput(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean notifySuggestionPicked(  @Sink(SUSI_NO_CATEGORY) android.text.style.SuggestionSpan arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setAdditionalInputMethodSubtypes(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.InputMethodSubtype[] arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.List getEnabledInputMethodList();
   @Source(SUSI_NO_CATEGORY)  android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype();
   @Source(SUSI_NO_CATEGORY)  android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype();
   @Source(SUSI_NO_CATEGORY)  com.android.internal.view.InputBindResult windowGainedFocus(  @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputMethodClient arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.EditorInfo arg5, @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputContext arg6);
   @Source(SUSI_NO_CATEGORY)  java.util.List getInputMethodList();
   @Source(SUSI_NO_CATEGORY)  java.util.List getShortcutInputMethodsAndSubtypes();
   @Source(SUSI_NO_CATEGORY)  java.util.List getEnabledInputMethodSubtypeList(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.InputMethodInfo arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IInputMethodSession$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IInputMethodSession$Stub$Proxy{
    void appPrivateCommand(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void toggleSoftInput(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void dispatchKeyEvent(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.KeyEvent arg1, @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputMethodCallback arg2);
    void updateExtractedText(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.ExtractedText arg1);
    void dispatchTrackballEvent(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.MotionEvent arg1, @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputMethodCallback arg2);
    void displayCompletions(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.CompletionInfo[] arg0);
    void updateSelection(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
    void dispatchGenericMotionEvent(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.MotionEvent arg1, @Sink(SUSI_NO_CATEGORY) com.android.internal.view.IInputMethodCallback arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class InputConnectionWrapper{
   @Source(SUSI_NO_CATEGORY)  boolean setComposingRegion(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean sendKeyEvent(  @Sink(SUSI_NO_CATEGORY) android.view.KeyEvent arg0);
   @Source(SUSI_NO_CATEGORY)  boolean performEditorAction(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean performPrivateCommand(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
   @Source(SUSI_NO_CATEGORY)  boolean performContextMenuAction(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setSelection(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getSelectedText(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTextAfterCursor(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.inputmethod.ExtractedText getExtractedText(  @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.ExtractedTextRequest arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTextBeforeCursor(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getCursorCapsMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class RotationPolicy{
    void setRotationLockForAccessibility(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setRotationLock(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class WindowManagerPolicyThread{
   @Source(SUSI_NO_CATEGORY)  android.os.Looper getLooper();
   @Source(SUSI_NO_CATEGORY)  java.lang.Thread getThread();
}

package android.os.storage;

class IMountService$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IMountService$Stub$Proxy{
    void registerListener(  @Sink(SUSI_NO_CATEGORY) android.os.storage.IMountServiceListener arg0);
    void unmountVolume(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void unregisterListener(  @Sink(SUSI_NO_CATEGORY) android.os.storage.IMountServiceListener arg0);
   @Source(SUSI_NO_CATEGORY)  int mountVolume(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void shutdown(  @Sink(SUSI_NO_CATEGORY) android.os.storage.IMountShutdownObserver arg0);
    void setUsbMassStorageEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int destroySecureContainer(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  boolean isObbMounted(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void unmountObb(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) android.os.storage.IObbActionListener arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  int fixPermissionsSecureContainer(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  int mountSecureContainer(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  boolean isSecureContainerMounted(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void mountObb(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.os.storage.IObbActionListener arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
   @Source(SUSI_NO_CATEGORY)  int formatVolume(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int finalizeSecureContainer(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int renameSecureContainer(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int verifyEncryptionPassword(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int unmountSecureContainer(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  int decryptStorage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int encryptStorage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int createSecureContainer(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) boolean arg5);
   @Source(SUSI_NO_CATEGORY)  int changeEncryptionPassword(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int[] getStorageUsers(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.storage.StorageVolume[] getVolumeList();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSecureContainerFilesystemPath(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getSecureContainerList();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSecureContainerPath(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getEncryptionState();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getVolumeState(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMountedObbPath(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IMountServiceListener$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IMountServiceListener$Stub$Proxy{
    void onStorageStateChanged(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IMountShutdownObserver$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IMountShutdownObserver$Stub$Proxy{
    void onShutDownComplete(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IObbActionListener$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IObbActionListener$Stub$Proxy{
    void onObbResult(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class StorageManager{
   @Source(SUSI_NO_CATEGORY)  android.os.storage.StorageVolume getPrimaryVolume();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getVolumePaths();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getVolumeState(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMountedObbPath(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.storage.StorageVolume[] getVolumeList();
   @Source(SUSI_NO_CATEGORY)  android.os.storage.StorageVolume getPrimaryVolume(  @Sink(SUSI_NO_CATEGORY) android.os.storage.StorageVolume[] arg0);
   @Source(SUSI_NO_CATEGORY)  boolean isObbMounted(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List access$000(  @Sink(SUSI_NO_CATEGORY) android.os.storage.StorageManager arg0);
}
class StorageManager$ListenerDelegate{
    void sendShareAvailabilityChanged(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void sendStorageStateChanged(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  android.os.storage.StorageEventListener getListener();
}
class StorageManager$MountServiceBinderListener{
    void onUsbMassStorageConnectionChanged(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void onStorageStateChanged(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
}
class StorageManager$ObbActionListener{
   @Source(SUSI_NO_CATEGORY)  int addListener(  @Sink(SUSI_NO_CATEGORY) android.os.storage.OnObbStateChangeListener arg0);
}
class StorageManager$ObbListenerDelegate{
    void sendObbStateChanged(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.os.storage.OnObbStateChangeListener getListener();
}
class StorageManager$StorageEvent{
   @Source(SUSI_NO_CATEGORY)  android.os.Message getMessage();
}
class StorageVolume{
    void writeToParcel(  @Sink(SUSI_FILE) android.os.Parcel arg0, @Sink(SUSI_FILE) int arg1);
    void setStorageId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPath();
   @Source(SUSI_NO_CATEGORY)  android.os.UserHandle getOwner();
   @Source(SUSI_NO_CATEGORY)  int getDescriptionId();
   @Source(SUSI_NO_CATEGORY)  int getStorageId();
   @Source(SUSI_NO_CATEGORY)  int getMtpReserveSpace();
   @Source(SUSI_NO_CATEGORY)  long getMaxFileSize();
   @Source(SUSI_NO_CATEGORY)  java.io.File getPathFile();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDescription(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}

package org.apache.http.client.methods;

class HttpEntityEnclosingRequestBase{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpEntity getEntity();
}
class HttpGet{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMethod();
}
class HttpHead{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMethod();
}
class HttpOptions{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMethod();
   @Source(SUSI_NO_CATEGORY)  java.util.Set getAllowedMethods(  @Sink(SUSI_NO_CATEGORY) org.apache.http.HttpResponse arg0);
}
class HttpPost{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMethod();
}
class HttpPut{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMethod();
}
class HttpRequestBase{
   @Source(SUSI_FILE_INFORMATION)  java.net.URI getURI();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.ProtocolVersion getProtocolVersion();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.RequestLine getRequestLine();
}

package com.android.gallery3d.gadget;

class LocalPhotoSource{
   @Source(SUSI_IMAGE)  android.net.Uri getContentUri(  int arg0);
   @Source(SUSI_IMAGE)  android.graphics.Bitmap getImage(  int arg0);
}
class MediaSetSource{
   @Source(SUSI_IMAGE)  android.graphics.Bitmap getImage(  int arg0);
   @Source(SUSI_IMAGE)  android.net.Uri getContentUri(  int arg0);
}
class WidgetService$EmptySource{
   @Source(SUSI_IMAGE)  android.graphics.Bitmap getImage(  int arg0);
   @Source(SUSI_IMAGE)  android.net.Uri getContentUri(  int arg0);
}
class WidgetService$PhotoRVFactory{
   @Source(SUSI_IMAGE)  int getViewTypeCount();
   @Source(SUSI_IMAGE)  int getCount();
   @Source(SUSI_IMAGE)  long getItemId(  int arg0);
   @Source(SUSI_IMAGE)  android.widget.RemoteViews getViewAt(  int arg0);
   @Source(SUSI_IMAGE)  android.widget.RemoteViews getLoadingView();
}
class WidgetUtils{
   @Source(SUSI_IMAGE)  android.graphics.Bitmap createWidgetBitmap(  android.graphics.Bitmap arg0, int arg1);
}

package org.apache.harmony.xml.dom;

class AttrImpl{
    void setPrefix(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.TypeInfo getSchemaTypeInfo();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNamespaceURI();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNodeName();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPrefix();
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.Element getOwnerElement();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getValue();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getLocalName();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getName();
   @Source(SUSI_NETWORK_INFORMATION)  short getNodeType();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getSpecified();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNodeValue();
}
class CDATASectionImpl{
   @Source(SUSI_NETWORK_INFORMATION)  short getNodeType();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNodeName();
}
class CharacterDataImpl{
    void setData(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getLength();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNodeValue();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getData();
}
class CommentImpl{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNodeName();
   @Source(SUSI_NETWORK_INFORMATION)  short getNodeType();
}
class DOMConfigurationImpl{
    void setParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.DOMStringList getParameterNames();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object getParameter(  java.lang.String arg0);
}
class DOMConfigurationImpl$1{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object get(  org.apache.harmony.xml.dom.DOMConfigurationImpl arg0);
}
class DOMConfigurationImpl$10{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object get(  org.apache.harmony.xml.dom.DOMConfigurationImpl arg0);
}
class DOMConfigurationImpl$11{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object get(  org.apache.harmony.xml.dom.DOMConfigurationImpl arg0);
}
class DOMConfigurationImpl$12{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object get(  org.apache.harmony.xml.dom.DOMConfigurationImpl arg0);
}
class DOMConfigurationImpl$13{
   @Source(SUSI_NETWORK_INFORMATION)  int getLength();
}
class DOMConfigurationImpl$2{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object get(  org.apache.harmony.xml.dom.DOMConfigurationImpl arg0);
}
class DOMConfigurationImpl$3{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object get(  org.apache.harmony.xml.dom.DOMConfigurationImpl arg0);
}
class DOMConfigurationImpl$4{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object get(  org.apache.harmony.xml.dom.DOMConfigurationImpl arg0);
}
class DOMConfigurationImpl$5{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object get(  org.apache.harmony.xml.dom.DOMConfigurationImpl arg0);
}
class DOMConfigurationImpl$6{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object get(  org.apache.harmony.xml.dom.DOMConfigurationImpl arg0);
}
class DOMConfigurationImpl$7{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object get(  org.apache.harmony.xml.dom.DOMConfigurationImpl arg0);
}
class DOMConfigurationImpl$8{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object get(  org.apache.harmony.xml.dom.DOMConfigurationImpl arg0);
}
class DOMConfigurationImpl$9{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object get(  org.apache.harmony.xml.dom.DOMConfigurationImpl arg0);
}
class DOMConfigurationImpl$FixedParameter{
    void set(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.xml.dom.DOMConfigurationImpl arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object get(  org.apache.harmony.xml.dom.DOMConfigurationImpl arg0);
}
class DOMErrorImpl{
   @Source(SUSI_NETWORK_INFORMATION)  short getSeverity();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getMessage();
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.DOMLocator getLocation();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object getRelatedData();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getType();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object getRelatedException();
}
class DOMErrorImpl$1{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getUri();
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.Node getRelatedNode();
}
class DOMImplementationImpl{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object getFeature(  java.lang.String arg0, java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.harmony.xml.dom.DOMImplementationImpl getInstance();
}
class DocumentFragmentImpl{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNodeName();
   @Source(SUSI_NETWORK_INFORMATION)  short getNodeType();
}
class DocumentImpl{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getXmlVersion();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInputEncoding();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getTextContent();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNodeName();
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.NodeList getElementsByTagNameNS(  java.lang.String arg0, java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getDocumentURI();
   @Source(SUSI_NETWORK_INFORMATION)  short getNodeType();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getXmlEncoding();
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.DOMConfiguration getDomConfig();
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.DocumentType getDoctype();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Map getUserDataMap(  org.apache.harmony.xml.dom.NodeImpl arg0);
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.DOMImplementation getImplementation();
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.NodeList getElementsByTagName(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  boolean getStrictErrorChecking();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Map getUserDataMapForRead(  org.apache.harmony.xml.dom.NodeImpl arg0);
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.Element getDocumentElement();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getXmlStandalone();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.Element getElementById(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class DocumentTypeImpl{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getName();
   @Source(SUSI_NETWORK_INFORMATION)  short getNodeType();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getTextContent();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInternalSubset();
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.NamedNodeMap getNotations();
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.NamedNodeMap getEntities();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNodeName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPublicId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSystemId();
}
class ElementImpl{
    void setIdAttribute(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setIdAttributeNS(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void setAttribute(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setAttributeNS(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void setPrefix(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.TypeInfo getSchemaTypeInfo();
   @Source(SUSI_NETWORK_INFORMATION)  short getNodeType();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAttributeNS(  java.lang.String arg0, java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getLocalName();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNodeName();
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.NamedNodeMap getAttributes();
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.NodeList getElementsByTagNameNS(  java.lang.String arg0, java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.harmony.xml.dom.AttrImpl getAttributeNode(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAttribute(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.harmony.xml.dom.AttrImpl getAttributeNodeNS(  java.lang.String arg0, java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.NodeList getElementsByTagName(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getTagName();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNamespaceURI();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPrefix();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.Element getElementById(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class ElementImpl$ElementAttrNamedNodeMapImpl{
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.Node getNamedItemNS(  java.lang.String arg0, java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.Node getNamedItem(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getLength();
}
class EntityReferenceImpl{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNodeName();
   @Source(SUSI_NETWORK_INFORMATION)  short getNodeType();
}
class InnerNodeImpl{
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.Node getFirstChild();
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.NodeList getChildNodes();
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.Node getNextSibling();
    void getElementsByTagName(  org.apache.harmony.xml.dom.NodeListImpl arg0, java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.Node getLastChild();
    void getTextContent(  java.lang.StringBuilder arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getTextContent();
    void getElementsByTagNameNS(  org.apache.harmony.xml.dom.NodeListImpl arg0, java.lang.String arg1, java.lang.String arg2);
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.Node insertChildAt(  org.w3c.dom.Node arg0, int arg1);
}
class LeafNodeImpl{
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.Node getPreviousSibling();
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.Node getParentNode();
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.Node getNextSibling();
}
class NodeImpl{
    void setPrefix(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setNodeValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object setUserData(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1, @Sink(SUSI_NO_CATEGORY) org.w3c.dom.UserDataHandler arg2);
    void setTextContent(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.Node getLastChild();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPrefix();
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.Node getPreviousSibling();
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.Document getOwnerDocument();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNodeName();
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.Node getNextSibling();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object getUserData(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.NamedNodeMap getAttributes();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNamespaceURI();
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.NodeList getChildNodes();
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.Node getFirstChild();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getBaseURI();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNodeValue();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getLocalName();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getTextContent();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object getFeature(  java.lang.String arg0, java.lang.String arg1);
    void getTextContent(  java.lang.StringBuilder arg0);
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.Node getParentNode();
}
class NodeImpl$1{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getTypeName();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getTypeNamespace();
}
class NodeListImpl{
   @Source(SUSI_NETWORK_INFORMATION)  int getLength();
}
class ProcessingInstructionImpl{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getTarget();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNodeValue();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getData();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNodeName();
   @Source(SUSI_NETWORK_INFORMATION)  short getNodeType();
}
class TextImpl{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getWholeText();
   @Source(SUSI_NETWORK_INFORMATION)  short getNodeType();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNodeName();
}

package android.support.v4.os;

class ParcelableCompat$CompatCreator{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object createFromParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0);
}
class ParcelableCompatCreatorHoneycombMR2{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object createFromParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) java.lang.ClassLoader arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object createFromParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0);
}

package com.android.contacts.voicemail;

class VoicemailPlaybackFragment$ActivityReference{
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Activity get();
}
class VoicemailPlaybackFragment$PlaybackViewImpl{
    void setVolumeControlStream(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
    void sendFetchVoicemailRequest(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0);
    void setPositionSeekListener(  @Sink(SUSI_CONTACT_INFORMATION) android.widget.SeekBar$OnSeekBarChangeListener arg0);
    void setClipPosition(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
    void setRateDisplay(  @Sink(SUSI_CONTACT_INFORMATION) float arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
    void setStartStopListener(  @Sink(SUSI_CONTACT_INFORMATION) android.view.View$OnClickListener arg0);
    void setSpeakerphoneListener(  @Sink(SUSI_CONTACT_INFORMATION) android.view.View$OnClickListener arg0);
    void setIsBuffering();
    void setRateIncreaseButtonListener(  @Sink(SUSI_CONTACT_INFORMATION) android.view.View$OnClickListener arg0);
    void setSpeakerPhoneOn(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
    void setFetchContentTimeout();
    void setRateDecreaseButtonListener(  @Sink(SUSI_CONTACT_INFORMATION) android.view.View$OnClickListener arg0);
    void setIsFetchingContent();
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Context getDataSourceContext();
   @Source(SUSI_CONTACT_INFORMATION)  int getDesiredClipPosition();
}
class VoicemailPlaybackFragment$TextViewWithMessagesController{
    void setPermanentText(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
    void setTemporaryText(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1, @Sink(SUSI_CONTACT_INFORMATION) java.util.concurrent.TimeUnit arg2);
}
class VoicemailPlaybackPresenter$FetchResultHandler{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Runnable getTimeoutRunnable();
}
class VoicemailStatusHelperImpl{
   @Source(SUSI_CONTACT_INFORMATION)  int getNumberActivityVoicemailSources(  @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.util.List getStatusMessages(  @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg0);
}
class VoicemailStatusHelperImpl$Action{
   @Source(SUSI_CONTACT_INFORMATION)  int getMessageId();
}
class VoicemailStatusHelperImpl$OverallState{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.voicemail.VoicemailStatusHelperImpl$Action getAction();
   @Source(SUSI_CONTACT_INFORMATION)  int getCallDetailsMessageId();
   @Source(SUSI_CONTACT_INFORMATION)  int getCallLogMessageId();
   @Source(SUSI_CONTACT_INFORMATION)  int getPriority();
}

package com.google.android.gms.common;

class ConnectionResult{
   @Source(SUSI_NO_CATEGORY)  int getErrorCode();
}

package org.apache.harmony.security.pkcs7;

class AuthenticatedAttributes{
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  java.util.List getAttributes();
}
class ContentInfo{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getContent();
   @Source(SUSI_NO_CATEGORY)  int[] getContentType();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.pkcs7.SignedData getSignedData();
}
class ContentInfo$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class SignedData{
   @Source(SUSI_NO_CATEGORY)  java.util.List getCertificates();
   @Source(SUSI_NO_CATEGORY)  java.util.List getCRLs();
   @Source(SUSI_NO_CATEGORY)  java.util.List getSignerInfos();
   @Source(SUSI_NO_CATEGORY)  int getVersion();
}
class SignedData$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class SignerInfo{
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getSerialNumber();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncodedAuthenticatedAttributes();
   @Source(SUSI_NO_CATEGORY)  byte[] access$600(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.pkcs7.SignerInfo arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getEncryptedDigest();
   @Source(SUSI_NO_CATEGORY)  javax.security.auth.x500.X500Principal getIssuer();
   @Source(SUSI_NO_CATEGORY)  java.util.List getAuthenticatedAttributes();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDigestEncryptionAlgorithm();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDigestAlgorithm();
}
class SignerInfo$2{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}

package com.android.mms.data;

class Contact{
   @Source(SUSI_CONTACT_INFORMATION)  byte[] access$1700(  @Sink(SUSI_CONTACT_INFORMATION) com.android.mms.data.Contact arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.mms.data.Contact get(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) boolean arg1);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.mms.data.Contact getMe(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
   @Source(SUSI_CONTACT_INFORMATION)  byte[] access$1702(  @Sink(SUSI_CONTACT_INFORMATION) com.android.mms.data.Contact arg0, @Sink(SUSI_CONTACT_INFORMATION) byte[] arg1);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getName();
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getPhoneUri();
   @Source(SUSI_CONTACT_INFORMATION)  int getContactMethodType();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.List getByPhoneUris(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Parcelable[] arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getUri();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getNameAndNumber();
   @Source(SUSI_CONTACT_INFORMATION)  android.graphics.drawable.Drawable getAvatar(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) android.graphics.drawable.Drawable arg1);
   @Source(SUSI_CONTACT_INFORMATION)  long getRecipientId();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getNumber();
   @Source(SUSI_CONTACT_INFORMATION)  boolean getSendToVoicemail();
}
class Contact$ContactsCache{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.mms.data.Contact get(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) boolean arg1);
   @Source(SUSI_CONTACT_INFORMATION)  java.util.List getContactInfoForPhoneUris(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Parcelable[] arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.mms.data.Contact getMe(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
}
class ContactList{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.mms.data.ContactList getByIds(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) boolean arg1);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String[] getNumbers();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String[] getNumbers(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.mms.data.ContactList getByNumbers(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) boolean arg1, @Sink(SUSI_CONTACT_INFORMATION) boolean arg2);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.mms.data.ContactList getByNumbers(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.Iterable arg0, @Sink(SUSI_CONTACT_INFORMATION) boolean arg1);
}
class Conversation{
    void setDraftState(  @Sink(SUSI_SMS_MMS) boolean arg0);
    void startDeleteAll(  @Sink(SUSI_SMS_MMS) com.android.mms.data.Conversation$ConversationQueryHandler arg0, @Sink(SUSI_SMS_MMS) int arg1, @Sink(SUSI_SMS_MMS) boolean arg2);
    void startDelete(  @Sink(SUSI_SMS_MMS) com.android.mms.data.Conversation$ConversationQueryHandler arg0, @Sink(SUSI_SMS_MMS) int arg1, @Sink(SUSI_SMS_MMS) boolean arg2, @Sink(SUSI_SMS_MMS) java.util.Collection arg3);
    void startQuery(  @Sink(SUSI_SMS_MMS) android.content.AsyncQueryHandler arg0, @Sink(SUSI_SMS_MMS) int arg1, @Sink(SUSI_SMS_MMS) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  android.net.Uri getUri(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.mms.data.Conversation get(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  long getThreadId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String verifySingleRecipient(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  long getOrCreateThreadId(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRecipients(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.mms.data.Conversation get(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSnippet();
   @Source(SUSI_NO_CATEGORY)  com.android.mms.data.ContactList getRecipients();
   @Source(SUSI_NO_CATEGORY)  android.net.Uri getUri();
   @Source(SUSI_NO_CATEGORY)  int getMessageCount();
   @Source(SUSI_NO_CATEGORY)  long getDate();
   @Source(SUSI_NO_CATEGORY)  com.android.mms.data.Conversation get(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) com.android.mms.data.ContactList arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
}
class Conversation$Cache{
   @Source(SUSI_NO_CATEGORY)  com.android.mms.data.Conversation get(  @Sink(SUSI_NO_CATEGORY) com.android.mms.data.ContactList arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.mms.data.Conversation get(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.mms.data.Conversation$Cache getInstance();
}
class RecipientIdCache{
    void updateNumbers(  @Sink(SUSI_SMS_MMS) long arg0, @Sink(SUSI_SMS_MMS) com.android.mms.data.ContactList arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSingleAddressFromCanonicalAddressInDb(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.List getAddresses(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class WorkingMessage{
    void setHasMultipleRecipients(  @Sink(SUSI_SMS_MMS) boolean arg0, @Sink(SUSI_SMS_MMS) boolean arg1);
    void setHasEmail(  @Sink(SUSI_SMS_MMS) boolean arg0, @Sink(SUSI_SMS_MMS) boolean arg1);
    void setLengthRequiresMms(  @Sink(SUSI_SMS_MMS) boolean arg0, @Sink(SUSI_SMS_MMS) boolean arg1);
    void send(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.mms.model.SlideshowModel getSlideshow();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getText();
   @Source(SUSI_NO_CATEGORY)  com.android.mms.data.Conversation getConversation();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getWorkingRecipients();
   @Source(SUSI_NO_CATEGORY)  android.net.Uri access$1300(  @Sink(SUSI_NO_CATEGORY) com.google.android.mms.pdu.PduPersister arg0, @Sink(SUSI_NO_CATEGORY) com.google.android.mms.pdu.SendReq arg1, @Sink(SUSI_NO_CATEGORY) com.android.mms.model.SlideshowModel arg2, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg3, @Sink(SUSI_NO_CATEGORY) android.content.Context arg4, @Sink(SUSI_NO_CATEGORY) java.util.HashMap arg5);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getSubject();
   @Source(SUSI_NO_CATEGORY)  com.android.mms.data.WorkingMessage loadDraft(  @Sink(SUSI_NO_CATEGORY) com.android.mms.ui.ComposeMessageActivity arg0, @Sink(SUSI_NO_CATEGORY) com.android.mms.data.Conversation arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Runnable arg2);
}

package org.apache.commons.codec.binary;

class Base64{
   @Source(SUSI_NO_CATEGORY)  byte[] decode(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] discardWhitespace(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] discardNonBase64(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] encode(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
}
class Hex{
   @Source(SUSI_NO_CATEGORY)  byte[] decode(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] encode(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
}

package org.apache.http.conn.routing;

class HttpRoute{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpHost getTargetHost();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.conn.routing.RouteInfo$LayerType getLayerType();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getLocalAddress();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpHost getHopTarget(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getHopCount();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.conn.routing.RouteInfo$TunnelType getTunnelType();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpHost getProxyHost();
}
class RouteTracker{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.conn.routing.RouteInfo$LayerType getLayerType();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpHost getHopTarget(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getLocalAddress();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpHost getProxyHost();
   @Source(SUSI_NO_CATEGORY)  int getHopCount();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.conn.routing.RouteInfo$TunnelType getTunnelType();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpHost getTargetHost();
}

package com.android.commands.svc;

class Svc$1{
    void run(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
}
class Svc$Command{
   @Source(SUSI_NO_CATEGORY)  java.lang.String name();
}

package android.content.pm;

class ActivityInfo{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void dump(  @Sink(SUSI_NO_CATEGORY) android.util.Printer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getRealConfigChanged();
   @Source(SUSI_NO_CATEGORY)  int getThemeResource();
}
class ApplicationInfo{
    void dump(  @Sink(SUSI_NO_CATEGORY) android.util.Printer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ApplicationInfo getApplicationInfo();
}
class ComponentInfo{
    void dumpFront(  @Sink(SUSI_NO_CATEGORY) android.util.Printer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void dumpBack(  @Sink(SUSI_NO_CATEGORY) android.util.Printer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getIconResource();
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ApplicationInfo getApplicationInfo();
}
class ConfigurationInfo{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getGlEsVersion();
}
class ContainerEncryptionParams{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMacAlgorithm();
   @Source(SUSI_NO_CATEGORY)  javax.crypto.SecretKey getMacKey();
   @Source(SUSI_NO_CATEGORY)  byte[] getMacTag();
   @Source(SUSI_NO_CATEGORY)  java.security.spec.AlgorithmParameterSpec getMacSpec();
   @Source(SUSI_NO_CATEGORY)  javax.crypto.SecretKey getEncryptionKey();
   @Source(SUSI_NO_CATEGORY)  long getDataEnd();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getEncryptionAlgorithm();
   @Source(SUSI_NO_CATEGORY)  long getAuthenticatedDataStart();
   @Source(SUSI_NO_CATEGORY)  java.security.spec.AlgorithmParameterSpec getEncryptionSpec();
   @Source(SUSI_NO_CATEGORY)  long getEncryptedDataStart();
}
class FeatureInfo{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getGlEsVersion();
}
class IPackageDataObserver$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IPackageDataObserver$Stub$Proxy{
    void onRemoveCompleted(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IPackageDeleteObserver$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IPackageDeleteObserver$Stub$Proxy{
    void packageDeleted(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IPackageInstallObserver$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IPackageInstallObserver$Stub$Proxy{
    void packageInstalled(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IPackageManager$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IPackageManager$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  boolean hasSystemFeature(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setApplicationEnabledSetting(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void installPackage(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) android.content.pm.IPackageInstallObserver arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
   @Source(SUSI_NO_CATEGORY)  int checkUidSignatures(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int checkUidPermission(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean isPermissionEnforced(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void installPackageWithVerificationAndEncryption(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) android.content.pm.IPackageInstallObserver arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) android.content.pm.VerificationParams arg4, @Sink(SUSI_NO_CATEGORY) android.content.pm.ContainerEncryptionParams arg5);
    void addPreferredActivity(  @Sink(SUSI_NO_CATEGORY) android.content.IntentFilter arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName[] arg2, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
    void freeStorageAndNotify(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) android.content.pm.IPackageDataObserver arg1);
    void setComponentEnabledSetting(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void grantPermission(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setPackageStoppedState(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setPermissionEnforced(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void addPackageToPreferred(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  boolean isProtectedBroadcast(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void extendVerificationTimeout(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
    void clearApplicationUserData(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.content.pm.IPackageDataObserver arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void revokePermission(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setInstallerPackageName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void freeStorage(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) android.content.IntentSender arg1);
   @Source(SUSI_NO_CATEGORY)  int installExistingPackage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void clearPackagePreferredActivities(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void deletePackage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.content.pm.IPackageDeleteObserver arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void installPackageWithVerification(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) android.content.pm.IPackageInstallObserver arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg4, @Sink(SUSI_NO_CATEGORY) android.content.pm.ManifestDigest arg5, @Sink(SUSI_NO_CATEGORY) android.content.pm.ContainerEncryptionParams arg6);
   @Source(SUSI_NO_CATEGORY)  int checkSignatures(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void deleteApplicationCacheFiles(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.content.pm.IPackageDataObserver arg1);
    void replacePreferredActivity(  @Sink(SUSI_NO_CATEGORY) android.content.IntentFilter arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName[] arg2, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg3);
   @Source(SUSI_NO_CATEGORY)  boolean performDexOpt(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void removePermission(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setInstallLocation(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void finishPackageInstall(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int checkPermission(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void removePackageFromPreferred(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void movePackage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.content.pm.IPackageMoveObserver arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void verifyPendingInstall(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.List queryIntentReceivers(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ActivityInfo getActivityInfo(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int[] getPackageGids(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.PackageInfo getPackageInfo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getPackageUid(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ParceledListSlice getInstalledPackages(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.PermissionInfo getPermissionInfo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.List queryContentProviders(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.List queryIntentServices(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ProviderInfo getProviderInfo(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getPackagesForUid(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ParceledListSlice getInstalledApplications(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getComponentEnabledSetting(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getApplicationEnabledSetting(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNameForUid(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void getPackageSizeInfo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.pm.IPackageStatsObserver arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ActivityInfo getReceiverInfo(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.List getAllPermissionGroups(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getPreferredPackages(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ServiceInfo getServiceInfo(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInstallerPackageName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List queryInstrumentation(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] currentToCanonicalPackageNames(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getPersistentApplications(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ProviderInfo resolveContentProvider(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getSystemSharedLibraryNames();
   @Source(SUSI_NO_CATEGORY)  android.content.pm.InstrumentationInfo getInstrumentationInfo(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.List queryPermissionsByGroup(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ResolveInfo resolveService(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.FeatureInfo[] getSystemAvailableFeatures();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] canonicalToCurrentPackageNames(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
   @Source(SUSI_NO_CATEGORY)  int getInstallLocation();
   @Source(SUSI_NO_CATEGORY)  int getPreferredActivities(  @Sink(SUSI_NO_CATEGORY) java.util.List arg0, @Sink(SUSI_NO_CATEGORY) java.util.List arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.PermissionGroupInfo getPermissionGroupInfo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.List queryIntentActivities(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.PackageCleanItem nextPackageToClean(  @Sink(SUSI_NO_CATEGORY) android.content.pm.PackageCleanItem arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NO_CATEGORY)  int getUidForSharedUser(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List queryIntentActivityOptions(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent[] arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg2, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) int arg6);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ApplicationInfo getApplicationInfo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ResolveInfo resolveIntent(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity();
}
class IPackageMoveObserver$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IPackageMoveObserver$Stub$Proxy{
    void packageMoved(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IPackageStatsObserver$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IPackageStatsObserver$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class InstrumentationInfo{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class LabeledIntent{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getNonLocalizedLabel();
   @Source(SUSI_NO_CATEGORY)  int getIconResource();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSourcePackage();
   @Source(SUSI_NO_CATEGORY)  int getLabelResource();
}
class PackageInfo{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class PackageInfoLite{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class PackageItemInfo{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void dumpFront(  @Sink(SUSI_NO_CATEGORY) android.util.Printer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ApplicationInfo getApplicationInfo();
}
class PackageManager{
    void getPackageSizeInfo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.content.pm.IPackageStatsObserver arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDataDirForUser(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.PackageInfo getPackageArchiveInfo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class PackageParser{
   @Source(SUSI_NO_CATEGORY)  int getParseError();
}
class PackageParser$Component{
    void setPackageName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getComponentShortName();
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getComponentName();
}
class PackageParser$Service{
    void setPackageName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class ParceledListSlice{
   @Source(SUSI_NO_CATEGORY)  android.os.Parcelable populateList(  @Sink(SUSI_NO_CATEGORY) java.util.List arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcelable$Creator arg1);
}
class PathPermission{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getWritePermission();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getReadPermission();
}
class PermissionGroupInfo{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class PermissionInfo{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class ProviderInfo{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class RegisteredServicesCache{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2, @Sink(SUSI_FILE) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.pm.RegisteredServicesCache$ServiceInfo getServiceInfo(  java.lang.Object arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.pm.RegisteredServicesCacheListener getListener();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Collection getAllServices(  int arg0);
}
class ResolveInfo{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void dump(  @Sink(SUSI_NO_CATEGORY) android.util.Printer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getIconResource();
}
class ServiceInfo{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void dump(  @Sink(SUSI_NO_CATEGORY) android.util.Printer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class Signature{
   @Source(SUSI_NO_CATEGORY)  java.security.PublicKey getPublicKey();
   @Source(SUSI_NO_CATEGORY)  byte[] toByteArray();
}
class UserInfo{
   @Source(SUSI_NO_CATEGORY)  android.os.UserHandle getUserHandle();
}
class VerificationParams{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getOriginatingURI();
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getVerificationURI();
   @Source(SUSI_NO_CATEGORY)  android.net.Uri getReferrer();
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ManifestDigest getManifestDigest();
   @Source(SUSI_NO_CATEGORY)  int getOriginatingUid();
   @Source(SUSI_NO_CATEGORY)  int getInstallerUid();
}

package com.android.gallery3d.filtershow.imageshow;

class GeometryMath{
   @Source(SUSI_IMAGE)  float[] getUnitVectorFromPoints(  float[] arg0, float[] arg1);
}
class GeometryMetadata{
    void setCropBounds(  @Sink(SUSI_NO_CATEGORY) android.graphics.RectF arg0);
    void setPhotoBounds(  @Sink(SUSI_NO_CATEGORY) android.graphics.RectF arg0);
    void set(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.filtershow.imageshow.GeometryMetadata arg0);
   @Source(SUSI_IMAGE)  android.graphics.Matrix getFlipMatrix(  float arg0, float arg1, com.android.gallery3d.filtershow.imageshow.GeometryMetadata$FLIP arg2);
   @Source(SUSI_IMAGE)  android.graphics.Matrix getOriginalToScreen(  boolean arg0, float arg1, float arg2, float arg3, float arg4);
   @Source(SUSI_IMAGE)  android.graphics.RectF getCropBounds(  android.graphics.Bitmap arg0);
   @Source(SUSI_IMAGE)  float getScaleFactor();
   @Source(SUSI_IMAGE)  android.graphics.RectF getPhotoBounds();
   @Source(SUSI_IMAGE)  com.android.gallery3d.filtershow.imageshow.GeometryMetadata$FLIP getFlipType();
   @Source(SUSI_IMAGE)  float getStraightenRotation();
   @Source(SUSI_IMAGE)  android.graphics.Matrix getHorizontalMatrix(  float arg0);
   @Source(SUSI_IMAGE)  android.graphics.Matrix getVerticalMatrix(  float arg0);
   @Source(SUSI_IMAGE)  android.graphics.Matrix getMatrixOriginalOrientation(  int arg0, float arg1, float arg2);
   @Source(SUSI_IMAGE)  android.graphics.Matrix getFlipMatrix(  float arg0, float arg1);
   @Source(SUSI_IMAGE)  android.graphics.RectF getPreviewCropBounds();
   @Source(SUSI_IMAGE)  float getRotation();
}
class ImageCrop{
    void setActionDown(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setActionMove(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setCropBounds(  @Sink(SUSI_NO_CATEGORY) android.graphics.RectF arg0);
   @Source(SUSI_IMAGE)  java.lang.String getName();
   @Source(SUSI_IMAGE)  android.graphics.RectF getCropBoundsDisplayed();
   @Source(SUSI_IMAGE)  android.graphics.Matrix getCropRotationMatrix(  float arg0, android.graphics.RectF arg1);
   @Source(SUSI_IMAGE)  android.graphics.Matrix getCropBoundDisplayMatrix();
}
class ImageFlip{
    void setActionDown(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setActionMove(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_IMAGE)  java.lang.String getName();
}
class ImageGeometry{
    void setLocalStraighten(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setLocalFlip(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.filtershow.imageshow.GeometryMetadata$FLIP arg0);
    void setLocalRotation(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setLocalCropBounds(  @Sink(SUSI_NO_CATEGORY) android.graphics.RectF arg0);
    void setLocalScale(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_IMAGE)  android.graphics.RectF unrotatedCropBounds();
   @Source(SUSI_IMAGE)  android.graphics.RectF getUntranslatedStraightenCropBounds(  android.graphics.RectF arg0, float arg1);
   @Source(SUSI_IMAGE)  java.lang.String getName();
   @Source(SUSI_IMAGE)  android.graphics.Matrix getLocalGeoFlipMatrix(  float arg0, float arg1);
   @Source(SUSI_IMAGE)  int getLocalValue();
   @Source(SUSI_IMAGE)  android.graphics.Matrix getGeoMatrix(  android.graphics.RectF arg0, boolean arg1);
   @Source(SUSI_IMAGE)  android.graphics.RectF getLocalCropBounds();
   @Source(SUSI_IMAGE)  float getLocalStraighten();
   @Source(SUSI_IMAGE)  float getLocalRotation();
   @Source(SUSI_IMAGE)  float getLocalScale();
   @Source(SUSI_IMAGE)  android.graphics.RectF getLocalDisplayBounds();
   @Source(SUSI_IMAGE)  float getCurrentTouchAngle();
   @Source(SUSI_IMAGE)  android.graphics.RectF straightenBounds();
   @Source(SUSI_IMAGE)  android.graphics.RectF getLocalPhotoBounds();
   @Source(SUSI_IMAGE)  com.android.gallery3d.filtershow.imageshow.GeometryMetadata$FLIP getLocalFlip();
}
class ImageRotate{
    void setActionDown(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setActionMove(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_IMAGE)  java.lang.String getName();
   @Source(SUSI_IMAGE)  int getLocalValue();
}
class ImageShow{
    void setImagePreset(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.filtershow.presets.ImagePreset arg0);
    void setupGestureDetector(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
    void saveImage(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.filtershow.FilterShowActivity arg0, @Sink(SUSI_NO_CATEGORY) java.io.File arg1);
    void onNewValue(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setOriginalText(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_IMAGE)  android.graphics.Bitmap getGeometryOnlyImage();
   @Source(SUSI_IMAGE)  com.android.gallery3d.filtershow.PanelController getPanelController();
   @Source(SUSI_IMAGE)  int getDefaultBackgroundColor();
   @Source(SUSI_IMAGE)  com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset();
   @Source(SUSI_IMAGE)  android.graphics.Bitmap getFiltersOnlyImage();
   @Source(SUSI_IMAGE)  android.graphics.Bitmap getFilteredImage();
   @Source(SUSI_IMAGE)  android.widget.ArrayAdapter getImageStateAdapter();
   @Source(SUSI_IMAGE)  android.graphics.Rect getDisplayedImageBounds();
   @Source(SUSI_IMAGE)  boolean getDirtyGeometryFlag();
   @Source(SUSI_IMAGE)  com.android.gallery3d.filtershow.HistoryAdapter getHistory();
   @Source(SUSI_IMAGE)  com.android.gallery3d.filtershow.imageshow.GeometryMetadata getGeometry();
   @Source(SUSI_IMAGE)  com.android.gallery3d.filtershow.filters.ImageFilter getCurrentFilter();
}
class ImageSlave{
    void setCurrentFilter(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.filtershow.filters.ImageFilter arg0);
    void setPanelController(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.filtershow.PanelController arg0);
    void updateImagePresets(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setImagePreset(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.filtershow.presets.ImagePreset arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_IMAGE)  com.android.gallery3d.filtershow.imageshow.ImageShow getMaster();
   @Source(SUSI_IMAGE)  com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset();
   @Source(SUSI_IMAGE)  com.android.gallery3d.filtershow.PanelController getPanelController();
   @Source(SUSI_IMAGE)  android.graphics.Bitmap getFilteredImage();
   @Source(SUSI_IMAGE)  com.android.gallery3d.filtershow.HistoryAdapter getHistory();
   @Source(SUSI_IMAGE)  com.android.gallery3d.filtershow.filters.ImageFilter getCurrentFilter();
   @Source(SUSI_IMAGE)  android.graphics.Rect getDisplayedImageBounds();
}
class ImageSmallFilter{
   @Source(SUSI_IMAGE)  com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset();
}
class ImageStraighten{
    void setActionDown(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setActionMove(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_IMAGE)  int getLocalValue();
   @Source(SUSI_IMAGE)  java.lang.String getName();
}
class ImageTinyPlanet{
   @Source(SUSI_IMAGE)  float getCurrentTouchAngle();
}

package android.filterfw.format;

class ImageFormat{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.MutableFrameFormat create(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.MutableFrameFormat create(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.MutableFrameFormat create(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class PrimitiveFormat{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.MutableFrameFormat createByteFormat(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.MutableFrameFormat createFloatFormat(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.MutableFrameFormat createDoubleFormat(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.MutableFrameFormat createInt16Format(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.MutableFrameFormat createInt32Format(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.MutableFrameFormat createFloatFormat(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.MutableFrameFormat createInt16Format(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.MutableFrameFormat createDoubleFormat(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.MutableFrameFormat createInt32Format(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.MutableFrameFormat createByteFormat(  @Sink(SUSI_NO_CATEGORY) int arg0);
}

package org.apache.http.impl.cookie;

class AbstractCookieSpec{
    void registerAttribHandler(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.cookie.CookieAttributeHandler arg1);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.cookie.CookieAttributeHandler getAttribHandler(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.cookie.CookieAttributeHandler findAttribHandler(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getAttribHandlers();
}
class BasicClientCookie{
    void setDomain(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setAttribute(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDomain();
   @Source(SUSI_NO_CATEGORY)  java.util.Date getExpiryDate();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPath();
   @Source(SUSI_NO_CATEGORY)  int getVersion();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getComment();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCommentURL();
   @Source(SUSI_NO_CATEGORY)  int[] getPorts();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAttribute(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class BasicClientCookie2{
   @Source(SUSI_NO_CATEGORY)  int[] getPorts();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCommentURL();
}
class BestMatchSpec{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.Header getVersionHeader();
   @Source(SUSI_NO_CATEGORY)  int getVersion();
}
class BrowserCompatSpec{
   @Source(SUSI_BROWSER_INFORMATION)  org.apache.http.Header getVersionHeader();
   @Source(SUSI_BROWSER_INFORMATION)  int getVersion();
}
class CookieSpecBase{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDefaultDomain(  @Sink(SUSI_NO_CATEGORY) org.apache.http.cookie.CookieOrigin arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List parse(  @Sink(SUSI_NO_CATEGORY) org.apache.http.HeaderElement[] arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.cookie.CookieOrigin arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDefaultPath(  @Sink(SUSI_NO_CATEGORY) org.apache.http.cookie.CookieOrigin arg0);
}
class DateUtils$DateFormatHolder{
   @Source(SUSI_NO_CATEGORY)  java.text.SimpleDateFormat formatFor(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class NetscapeDraftSpec{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.Header getVersionHeader();
   @Source(SUSI_NO_CATEGORY)  int getVersion();
}
class RFC2109Spec{
   @Source(SUSI_NO_CATEGORY)  int getVersion();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.Header getVersionHeader();
}
class RFC2965Spec{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.Header getVersionHeader();
   @Source(SUSI_NO_CATEGORY)  java.util.List parse(  @Sink(SUSI_NO_CATEGORY) org.apache.http.Header arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.cookie.CookieOrigin arg1);
   @Source(SUSI_NO_CATEGORY)  int getVersion();
}

package com.android.bluetooth;

class Utils{
    byte[] uuidsToByteArray(  @Sink(SUSI_BLUETOOTH) android.os.ParcelUuid[] arg0);
    void copyStream(  @Sink(SUSI_BLUETOOTH) java.io.InputStream arg0, @Sink(SUSI_BLUETOOTH) java.io.OutputStream arg1, @Sink(SUSI_BLUETOOTH) int arg2);
    byte[] uuidToByteArray(  @Sink(SUSI_BLUETOOTH) android.os.ParcelUuid arg0);
    byte[] intToByteArray(  @Sink(SUSI_BLUETOOTH) int arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  byte[] getByteAddress(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  byte[] getBytesFromAddress(  java.lang.String arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getAddressStringFromByte(  byte[] arg0);
}

package com.android.providers.calendar;

class CalendarAlarmManager{
    void scheduleNextAlarm(  @Sink(SUSI_LOG) boolean arg0);
    void set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) android.app.PendingIntent arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  android.os.PowerManager$WakeLock getScheduleNextAlarmWakeLock();
}
class CalendarCache{
    void writeData(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1);
    void writeTimezoneInstances(  @Sink(SUSI_LOG) java.lang.String arg0);
    void writeTimezoneInstancesPrevious(  @Sink(SUSI_LOG) java.lang.String arg0);
    void writeDataLocked(  @Sink(SUSI_NO_CATEGORY) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void writeTimezoneDatabaseVersion(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void writeTimezoneType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String readDataLocked(  @Sink(SUSI_CALENDAR_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg1);
}
class CalendarDatabaseHelper{
    void scheduleSync(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) boolean arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg2);
   @Source(SUSI_DATABASE_INFORMATION)  com.android.common.content.SyncStateContentProviderHelper getSyncState();
   @Source(SUSI_CALENDAR_INFORMATION)  com.android.providers.calendar.CalendarDatabaseHelper getInstance(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  android.database.sqlite.SQLiteDatabase getWritableDatabase();
}
class CalendarInstancesHelper{
    void performInstanceExpansion(  @Sink(SUSI_LOG) long arg0, @Sink(SUSI_LOG) long arg1, @Sink(SUSI_LOG) java.lang.String arg2, @Sink(SUSI_LOG) android.database.Cursor arg3);
    void expandInstanceRangeLocked(  @Sink(SUSI_LOG) long arg0, @Sink(SUSI_LOG) long arg1, @Sink(SUSI_LOG) java.lang.String arg2);
    void updateInstancesLocked(  @Sink(SUSI_LOG) android.content.ContentValues arg0, @Sink(SUSI_LOG) long arg1, @Sink(SUSI_LOG) boolean arg2, @Sink(SUSI_LOG) android.database.sqlite.SQLiteDatabase arg3);
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.lang.String getSyncIdKey(  @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) long arg1);
}
class CalendarInstancesHelper$EventInstancesMap{
    void add(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.content.ContentValues arg1);
}
class CalendarProvider2{
    int updateInTransaction(  @Sink(SUSI_LOG) android.net.Uri arg0, @Sink(SUSI_LOG) android.content.ContentValues arg1, @Sink(SUSI_LOG) java.lang.String arg2, @Sink(SUSI_LOG) java.lang.String[] arg3, @Sink(SUSI_LOG) boolean arg4);
    android.net.Uri insertInTransaction(  @Sink(SUSI_LOG) android.net.Uri arg0, @Sink(SUSI_LOG) android.content.ContentValues arg1, @Sink(SUSI_LOG) boolean arg2);
    void acquireInstanceRangeLocked(  @Sink(SUSI_LOG) long arg0, @Sink(SUSI_LOG) long arg1, @Sink(SUSI_LOG) boolean arg2, @Sink(SUSI_LOG) boolean arg3, @Sink(SUSI_LOG) java.lang.String arg4, @Sink(SUSI_LOG) boolean arg5);
    void doProcessEventRawTimes(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void notifyChange(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String getType(  @Sink(SUSI_CALENDAR_INFORMATION) android.net.Uri arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  com.android.providers.calendar.CalendarAlarmManager getOrCreateCalendarAlarmManager();
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String getTimezoneDatabaseVersion();
   @Source(SUSI_CALENDAR_INFORMATION)  com.android.providers.calendar.CalendarProvider2 getInstance();
   @Source(SUSI_CALENDAR_INFORMATION)  android.database.Cursor query(  @Sink(SUSI_CALENDAR_INFORMATION) android.net.Uri arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String[] arg1, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg2, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String[] arg3, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg4);
}
class CalendarProviderBroadcastReceiver{
    void onReceive(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1);
}
class MetaData{
    void writeLocked(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  com.android.providers.calendar.MetaData$Fields getFieldsLocked();
}
class QueryParameterUtils{
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String getQueryParameter(  @Sink(SUSI_CALENDAR_INFORMATION) android.net.Uri arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg1);
}
class SQLiteContentProvider{
   @Source(SUSI_SYNCHRONIZATION_DATA)  boolean getIsCallerSyncAdapter(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.net.Uri arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  android.net.Uri insert(  @Sink(SUSI_CALENDAR_INFORMATION) android.net.Uri arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.content.ContentValues arg1);
   @Source(SUSI_CALENDAR_INFORMATION)  int update(  @Sink(SUSI_CALENDAR_INFORMATION) android.net.Uri arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.content.ContentValues arg1, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg2, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String[] arg3);
   @Source(SUSI_CALENDAR_INFORMATION)  android.database.sqlite.SQLiteOpenHelper getDatabaseHelper();
   @Source(SUSI_CALENDAR_INFORMATION)  int bulkInsert(  @Sink(SUSI_CALENDAR_INFORMATION) android.net.Uri arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.content.ContentValues[] arg1);
}

package com.googlecode.mp4parser;

class AbstractBox{
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.ContainerBox getParent();
   @Source(SUSI_NO_CATEGORY)  long getSize();
   @Source(SUSI_NO_CATEGORY)  byte[] getUserType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType();
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.IsoFile getIsoFile();
}
class AbstractContainerBox{
   @Source(SUSI_NO_CATEGORY)  java.util.List getBoxes(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0);
   @Source(SUSI_NO_CATEGORY)  long getContentSize();
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
    void getContent(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getBoxes(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.List getBoxes();
}
class AbstractFullBox{
   @Source(SUSI_NO_CATEGORY)  int getFlags();
   @Source(SUSI_NO_CATEGORY)  int getVersion();
}
class FullContainerBox{
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  java.util.List getBoxes(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0);
   @Source(SUSI_NO_CATEGORY)  long getContentSize();
   @Source(SUSI_NO_CATEGORY)  java.util.List getBoxes();
   @Source(SUSI_NO_CATEGORY)  java.util.List getBoxes(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void getContent(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0);
}

package java.util.concurrent.locks;

class AbstractOwnableSynchronizer{
   @Source(SUSI_NO_CATEGORY)  java.lang.Thread getExclusiveOwnerThread();
}
class AbstractQueuedSynchronizer{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getExclusiveQueuedThreads();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getWaitingThreads(  @Sink(SUSI_NO_CATEGORY) java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  int getState();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getSharedQueuedThreads();
   @Source(SUSI_NO_CATEGORY)  java.lang.Thread getFirstQueuedThread();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getQueuedThreads();
   @Source(SUSI_NO_CATEGORY)  int getQueueLength();
   @Source(SUSI_NO_CATEGORY)  int getWaitQueueLength(  @Sink(SUSI_NO_CATEGORY) java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject arg0);
}
class AbstractQueuedSynchronizer$ConditionObject{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getWaitingThreads();
   @Source(SUSI_NO_CATEGORY)  int getWaitQueueLength();
}
class LockSupport{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getBlocker(  @Sink(SUSI_NO_CATEGORY) java.lang.Thread arg0);
}
class ReentrantLock{
   @Source(SUSI_NO_CATEGORY)  int getQueueLength();
   @Source(SUSI_NO_CATEGORY)  int getHoldCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.Thread getOwner();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getQueuedThreads();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getWaitingThreads(  @Sink(SUSI_NO_CATEGORY) java.util.concurrent.locks.Condition arg0);
}
class ReentrantLock$Sync{
   @Source(SUSI_NO_CATEGORY)  java.lang.Thread getOwner();
   @Source(SUSI_NO_CATEGORY)  int getHoldCount();
}
class ReentrantReadWriteLock{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getWaitingThreads(  @Sink(SUSI_NO_CATEGORY) java.util.concurrent.locks.Condition arg0);
   @Source(SUSI_NO_CATEGORY)  int getReadHoldCount();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getQueuedReaderThreads();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getQueuedWriterThreads();
   @Source(SUSI_NO_CATEGORY)  java.lang.Thread getOwner();
   @Source(SUSI_NO_CATEGORY)  int getReadLockCount();
   @Source(SUSI_NO_CATEGORY)  int getWriteHoldCount();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getQueuedThreads();
   @Source(SUSI_NO_CATEGORY)  int getQueueLength();
}
class ReentrantReadWriteLock$Sync{
   @Source(SUSI_NO_CATEGORY)  java.lang.Thread getOwner();
   @Source(SUSI_NO_CATEGORY)  int getReadHoldCount();
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  int getReadLockCount();
   @Source(SUSI_NO_CATEGORY)  int getWriteHoldCount();
}
class ReentrantReadWriteLock$WriteLock{
   @Source(SUSI_NO_CATEGORY)  int getHoldCount();
}

package org.apache.http.client.utils;

class URIUtils{
   @Source(SUSI_NO_CATEGORY)  java.net.URI resolve(  @Sink(SUSI_NO_CATEGORY) java.net.URI arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.net.URI resolve(  @Sink(SUSI_NO_CATEGORY) java.net.URI arg0, @Sink(SUSI_NO_CATEGORY) java.net.URI arg1);
}

package com.android.email.provider;

class ContentCache{
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor getCachedCursor(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.email.provider.ContentCache$CacheToken getCacheToken(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Map getSnapshot();
}
class ContentCache$CacheToken{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getId();
}
class ContentCache$CachedCursor{
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  android.database.CursorWindow getWindow();
   @Source(SUSI_NO_CATEGORY)  int getPosition();
}
class ContentCache$CounterMap{
    void add(  @Sink(SUSI_EMAIL) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  int getCount(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class EmailProvider{
    void restoreIfNeeded(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) android.database.sqlite.SQLiteDatabase arg1);
   @Source(SUSI_NO_CATEGORY)  android.net.Uri insert(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) android.content.ContentValues arg1);
   @Source(SUSI_NO_CATEGORY)  int update(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) android.content.ContentValues arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor query(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor mostRecentMessageQuery(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
   @Source(SUSI_NO_CATEGORY)  android.database.sqlite.SQLiteDatabase getReadableDatabase(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor notificationQuery(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
   @Source(SUSI_NO_CATEGORY)  android.database.sqlite.SQLiteDatabase getDatabase(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class WidgetProvider$WidgetService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
}

package com.android.systemui.screenshot;

class GlobalScreenshot{
    void notifyScreenshotError(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.app.NotificationManager arg1);
}
class GlobalScreenshot$10{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class GlobalScreenshot$4{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class GlobalScreenshot$5{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class SaveImageInBackgroundTask{
    com.android.systemui.screenshot.SaveImageInBackgroundData doInBackground(  @Sink(SUSI_FILE) com.android.systemui.screenshot.SaveImageInBackgroundData[] arg0);
    void onPostExecute(  @Sink(SUSI_NO_CATEGORY) com.android.systemui.screenshot.SaveImageInBackgroundData arg0);
}

package com.android.gallery3d.ui;

class ActionModeHandler{
    void setTitle(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class AlbumLabelMaker{
   @Source(SUSI_IMAGE)  int getBorderSize();
}
class AlbumLabelMaker$LazyLoadedBitmap{
   @Source(SUSI_IMAGE)  android.graphics.Bitmap get();
}
class AlbumSetSlidingWindow{
   @Source(SUSI_IMAGE)  com.android.gallery3d.ui.AlbumSetSlidingWindow$AlbumSetEntry get(  int arg0);
}
class AlbumSetSlotRenderer{
    void setModel(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.app.AlbumSetDataLoader arg0);
}
class AlbumSlidingWindow{
   @Source(SUSI_IMAGE)  com.android.gallery3d.ui.AlbumSlidingWindow$AlbumEntry get(  int arg0);
}
class AlbumSlotRenderer{
    void setModel(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.app.AlbumDataLoader arg0);
}
class AnimationTime{
   @Source(SUSI_IMAGE)  long get();
}
class BasicTexture{
   @Source(SUSI_IMAGE)  int getWidth();
   @Source(SUSI_IMAGE)  int getTextureWidth();
   @Source(SUSI_IMAGE)  int getHeight();
   @Source(SUSI_IMAGE)  int getId();
   @Source(SUSI_IMAGE)  int getTextureHeight();
}
class BitmapLoader{
   @Source(SUSI_IMAGE)  android.graphics.Bitmap getBitmap();
}
class BitmapScreenNail{
   @Source(SUSI_IMAGE)  int getHeight();
   @Source(SUSI_IMAGE)  int getWidth();
}
class BitmapTexture{
    void setOpaque(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_IMAGE)  android.graphics.Bitmap getBitmap();
   @Source(SUSI_IMAGE)  int getId();
   @Source(SUSI_IMAGE)  int getTextureHeight();
   @Source(SUSI_IMAGE)  int getHeight();
   @Source(SUSI_IMAGE)  int getWidth();
   @Source(SUSI_IMAGE)  int getTextureWidth();
}
class BitmapTileProvider{
   @Source(SUSI_IMAGE)  com.android.gallery3d.ui.ScreenNail getScreenNail();
   @Source(SUSI_IMAGE)  int getImageWidth();
   @Source(SUSI_IMAGE)  int getLevelCount();
   @Source(SUSI_IMAGE)  android.graphics.Bitmap getTile(  int arg0, int arg1, int arg2, int arg3, int arg4, com.android.gallery3d.data.BitmapPool arg5);
   @Source(SUSI_IMAGE)  int getImageHeight();
}
class CacheStorageUsageInfo{
   @Source(SUSI_IMAGE)  long getExpectedUsedBytes();
   @Source(SUSI_IMAGE)  long getUsedBytes();
   @Source(SUSI_IMAGE)  long getFreeBytes();
   @Source(SUSI_IMAGE)  long getTotalBytes();
}
class CanvasTexture{
   @Source(SUSI_IMAGE)  android.graphics.Bitmap onGetBitmap();
}
class ColorTexture{
   @Source(SUSI_IMAGE)  int getWidth();
   @Source(SUSI_IMAGE)  int getHeight();
}
class CropView{
   @Source(SUSI_IMAGE)  int getImageWidth();
   @Source(SUSI_IMAGE)  int getImageHeight();
   @Source(SUSI_IMAGE)  android.graphics.RectF getCropRectangle();
}
class CropView$AnimationController{
   @Source(SUSI_IMAGE)  int getCenterY();
   @Source(SUSI_IMAGE)  int getCenterX();
   @Source(SUSI_IMAGE)  float getScale();
}
class CropView$HighlightRectangle{
    void setRectangle(  @Sink(SUSI_NO_CATEGORY) android.graphics.RectF arg0);
}
class DetailsHelper{
   @Source(SUSI_IMAGE)  java.lang.String getDetailsName(  android.content.Context arg0, int arg1);
}
class DialogDetailsView$DetailsAdapter{
   @Source(SUSI_IMAGE)  long getItemId(  int arg0);
   @Source(SUSI_IMAGE)  java.lang.Object getItem(  int arg0);
   @Source(SUSI_IMAGE)  android.view.View getView(  int arg0, android.view.View arg1, android.view.ViewGroup arg2);
   @Source(SUSI_IMAGE)  int getCount();
}
class EdgeAnimation{
   @Source(SUSI_IMAGE)  float getValue();
}
class EdgeEffect$Drawable{
    void setBounds(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_IMAGE)  int getIntrinsicWidth();
   @Source(SUSI_IMAGE)  int getIntrinsicHeight();
}
class ExtTexture{
   @Source(SUSI_IMAGE)  int getWidth();
   @Source(SUSI_IMAGE)  int getHeight();
   @Source(SUSI_IMAGE)  int getId();
   @Source(SUSI_IMAGE)  int getTextureHeight();
   @Source(SUSI_IMAGE)  int getTextureWidth();
   @Source(SUSI_IMAGE)  int getTarget();
}
class FadeTexture{
   @Source(SUSI_IMAGE)  float getRatio();
   @Source(SUSI_IMAGE)  int getHeight();
   @Source(SUSI_IMAGE)  int getWidth();
}
class FlingScroller{
   @Source(SUSI_IMAGE)  int getFinalY();
   @Source(SUSI_IMAGE)  int getFinalX();
   @Source(SUSI_IMAGE)  int getCurrY();
   @Source(SUSI_IMAGE)  int getCurrX();
   @Source(SUSI_IMAGE)  int getDuration();
   @Source(SUSI_IMAGE)  int getCurrVelocityY();
   @Source(SUSI_IMAGE)  int getCurrVelocityX();
}
class GLCanvasImpl{
    void drawTexture(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.ui.BasicTexture arg0, @Sink(SUSI_NO_CATEGORY) float[] arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
    void drawTexture(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.ui.BasicTexture arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.RectF arg1, @Sink(SUSI_NO_CATEGORY) android.graphics.RectF arg2);
    void drawMixed(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.ui.BasicTexture arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) android.graphics.RectF arg3, @Sink(SUSI_NO_CATEGORY) android.graphics.RectF arg4);
   @Source(SUSI_IMAGE)  javax.microedition.khronos.opengles.GL11 getGLInstance();
   @Source(SUSI_IMAGE)  float getAlpha();
}
class GLCanvasImpl$ConfigState{
    void restore(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.ui.GLCanvasImpl arg0);
}
class GLCanvasImpl$GLState{
    void setColorMode(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
}
class GLPaint{
   @Source(SUSI_IMAGE)  float getLineWidth();
   @Source(SUSI_IMAGE)  int getColor();
}
class GLRootView{
    void setLightsOutMode(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_IMAGE)  android.graphics.Matrix getCompensationMatrix();
   @Source(SUSI_IMAGE)  int getCompensation();
   @Source(SUSI_IMAGE)  int getDisplayRotation();
}
class GLView{
    void setVisibility(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_IMAGE)  int getVisibility();
   @Source(SUSI_IMAGE)  int getMeasuredHeight();
   @Source(SUSI_IMAGE)  int getMeasuredWidth();
   @Source(SUSI_IMAGE)  int getComponentCount();
   @Source(SUSI_IMAGE)  int getWidth();
   @Source(SUSI_IMAGE)  float[] getBackgroundColor();
   @Source(SUSI_IMAGE)  com.android.gallery3d.ui.GLRoot getGLRoot();
   @Source(SUSI_IMAGE)  com.android.gallery3d.ui.GLView getComponent(  int arg0);
   @Source(SUSI_IMAGE)  int getHeight();
}
class MenuExecutor{
    void startAction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.ui.MenuExecutor$ProgressListener arg2);
   @Source(SUSI_IMAGE)  java.lang.String getMimeType(  int arg0);
}
class NinePatchTexture{
   @Source(SUSI_IMAGE)  com.android.gallery3d.ui.NinePatchChunk getNinePatchChunk();
   @Source(SUSI_IMAGE)  android.graphics.Rect getPaddings();
}
class NinePatchTexture$SmallCache{
   @Source(SUSI_IMAGE)  java.lang.Object get(  int arg0);
}
class Paper{
   @Source(SUSI_IMAGE)  float[] getTransform(  android.graphics.Rect arg0, float arg1);
}
class PhotoView{
    void setSwipingEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void notifyDataChange(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void notifyImageChange(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_IMAGE)  boolean getFilmMode();
}
class PhotoView$FullPicture{
    void setScreenNail(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.ui.ScreenNail arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.ui.PhotoView$Size getSize();
}
class PhotoView$MyGestureListener{
    void setSwipingEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class PhotoView$ScreenNailPicture{
   @Source(SUSI_IMAGE)  com.android.gallery3d.ui.PhotoView$Size getSize();
}
class PhotoView$ZInterpolator{
   @Source(SUSI_IMAGE)  float getInterpolation(  float arg0);
}
class PopupList$ItemDataAdapter{
   @Source(SUSI_IMAGE)  android.view.View getView(  int arg0, android.view.View arg1, android.view.ViewGroup arg2);
   @Source(SUSI_IMAGE)  java.lang.Object getItem(  int arg0);
   @Source(SUSI_IMAGE)  long getItemId(  int arg0);
   @Source(SUSI_IMAGE)  int getCount();
}
class PositionController{
    void setConstrainedFrame(  @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg0);
    void moveBox(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3, @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.ui.PhotoView$Size[] arg4);
    void setViewSize(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setImageSize(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.ui.PhotoView$Size arg1, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg2);
    void zoomIn(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2);
   @Source(SUSI_IMAGE)  android.graphics.Rect getPosition(  int arg0);
   @Source(SUSI_IMAGE)  int getImageAtEdges();
   @Source(SUSI_IMAGE)  float getFilmRatio();
   @Source(SUSI_IMAGE)  int getImageHeight();
   @Source(SUSI_IMAGE)  float getImageScale();
   @Source(SUSI_IMAGE)  int getImageWidth();
}
class PreparePageFadeoutTexture{
    void prepareFadeOutTexture(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.app.AbstractGalleryActivity arg0, @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.ui.GLView arg1);
   @Source(SUSI_IMAGE)  com.android.gallery3d.ui.RawTexture get();
}
class RawTexture{
   @Source(SUSI_IMAGE)  int getTextureWidth();
   @Source(SUSI_IMAGE)  int getWidth();
   @Source(SUSI_IMAGE)  int getId();
   @Source(SUSI_IMAGE)  int getHeight();
   @Source(SUSI_IMAGE)  int getTextureHeight();
   @Source(SUSI_IMAGE)  int getTarget();
}
class RelativePosition{
    void setReferencePosition(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class ResourceTexture{
    void setOpaque(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_IMAGE)  int getHeight();
   @Source(SUSI_IMAGE)  int getTextureHeight();
   @Source(SUSI_IMAGE)  int getWidth();
   @Source(SUSI_IMAGE)  int getTextureWidth();
   @Source(SUSI_IMAGE)  int getId();
}
class ScrollerHelper{
    void setPosition(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_IMAGE)  int getPosition();
   @Source(SUSI_IMAGE)  float getCurrVelocity();
}
class SelectionManager{
   @Source(SUSI_IMAGE)  java.util.ArrayList getSelected(  boolean arg0);
   @Source(SUSI_IMAGE)  int getSelectedCount();
}
class SlideshowView$SlideshowAnimation{
   @Source(SUSI_IMAGE)  int getCanvasSaveFlags();
}
class SlotView{
   @Source(SUSI_NO_CATEGORY)  boolean setSlotCount(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setCenterIndex(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSlotSpec(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.ui.SlotView$Spec arg0);
    void setScrollPosition(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_IMAGE)  int getVisibleStart();
   @Source(SUSI_IMAGE)  int getVisibleEnd();
   @Source(SUSI_IMAGE)  android.graphics.Rect getSlotRect(  int arg0, com.android.gallery3d.ui.GLView arg1);
   @Source(SUSI_IMAGE)  int getScrollY();
   @Source(SUSI_IMAGE)  int getScrollX();
   @Source(SUSI_IMAGE)  android.graphics.Rect getSlotRect(  int arg0);
}
class SlotView$IntegerAnimation{
   @Source(SUSI_IMAGE)  int get();
   @Source(SUSI_IMAGE)  int getTarget();
}
class SlotView$Layout{
   @Source(SUSI_IMAGE)  int getVisibleStart();
   @Source(SUSI_IMAGE)  int getSlotIndexByPosition(  float arg0, float arg1);
   @Source(SUSI_IMAGE)  int getVisibleEnd();
   @Source(SUSI_IMAGE)  android.graphics.Rect getSlotRect(  int arg0, android.graphics.Rect arg1);
   @Source(SUSI_IMAGE)  int getScrollLimit();
}
class StringTexture{
   @Source(SUSI_IMAGE)  android.text.TextPaint getDefaultPaint(  float arg0, int arg1);
}
class SurfaceTextureScreenNail{
   @Source(SUSI_IMAGE)  int getHeight();
   @Source(SUSI_IMAGE)  int getWidth();
   @Source(SUSI_IMAGE)  android.graphics.SurfaceTexture getSurfaceTexture();
}
class TileImageView$Tile{
   @Source(SUSI_IMAGE)  int getTextureWidth();
   @Source(SUSI_IMAGE)  int getTextureHeight();
   @Source(SUSI_IMAGE)  com.android.gallery3d.ui.TileImageView$Tile getParentTile();
}
class TileImageViewAdapter{
    void setRegionDecoder(  @Sink(SUSI_NO_CATEGORY) android.graphics.BitmapRegionDecoder arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.ui.ScreenNail getScreenNail();
   @Source(SUSI_IMAGE)  android.graphics.Bitmap getTile(  int arg0, int arg1, int arg2, int arg3, int arg4, com.android.gallery3d.data.BitmapPool arg5);
   @Source(SUSI_IMAGE)  int getImageHeight();
   @Source(SUSI_IMAGE)  int getLevelCount();
   @Source(SUSI_IMAGE)  int getImageWidth();
}
class TiledScreenNail{
   @Source(SUSI_IMAGE)  int getWidth();
   @Source(SUSI_IMAGE)  int getHeight();
   @Source(SUSI_IMAGE)  com.android.gallery3d.ui.TiledTexture getTexture();
}
class TiledTexture{
   @Source(SUSI_IMAGE)  int getWidth();
   @Source(SUSI_IMAGE)  int getHeight();
}
class UndoBarView{
    void setVisibility(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class UploadedTexture{
   @Source(SUSI_IMAGE)  int getWidth();
   @Source(SUSI_IMAGE)  int getHeight();
   @Source(SUSI_IMAGE)  int getTarget();
}
class WakeLockHoldingProgressListener{
   @Source(SUSI_IMAGE)  com.android.gallery3d.app.AbstractGalleryActivity getActivity();
}

package org.apache.james.mime4j.decoder;

class DecoderUtil{
   @Source(SUSI_NO_CATEGORY)  byte[] decodeBaseQuotedPrintable(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] decodeBase64(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}

package android.database;

class AbstractCursor{
   @Source(SUSI_DATABASE_INFORMATION)  int getColumnCount();
   @Source(SUSI_DATABASE_INFORMATION)  android.net.Uri getNotificationUri();
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String getColumnName(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  boolean getWantsAllOnMoveCalls();
   @Source(SUSI_DATABASE_INFORMATION)  int getColumnIndexOrThrow(  java.lang.String arg0);
   @Source(SUSI_DATABASE_INFORMATION)  byte[] getBlob(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  int getColumnIndex(  java.lang.String arg0);
   @Source(SUSI_DATABASE_INFORMATION)  android.os.Bundle getExtras();
   @Source(SUSI_DATABASE_INFORMATION)  android.database.CursorWindow getWindow();
   @Source(SUSI_DATABASE_INFORMATION)  int getPosition();
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.Object getUpdatedField(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  int getType(  int arg0);
}
class AbstractWindowedCursor{
   @Source(SUSI_DATABASE_INFORMATION)  short getShort(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String getString(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  double getDouble(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  int getInt(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  android.database.CursorWindow getWindow();
   @Source(SUSI_DATABASE_INFORMATION)  byte[] getBlob(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  float getFloat(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  int getType(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  long getLong(  int arg0);
}
class BulkCursorDescriptor{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class BulkCursorNative{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_DATABASE_INFORMATION)  android.os.IBinder asBinder();
}
class BulkCursorProxy{
    void onMove(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int requery(  @Sink(SUSI_NO_CATEGORY) android.database.IContentObserver arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle respond(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
   @Source(SUSI_DATABASE_INFORMATION)  android.os.Bundle getExtras();
   @Source(SUSI_DATABASE_INFORMATION)  android.database.CursorWindow getWindow(  int arg0);
}
class BulkCursorToCursorAdaptor{
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String[] getColumnNames();
   @Source(SUSI_DATABASE_INFORMATION)  int getCount();
   @Source(SUSI_DATABASE_INFORMATION)  android.database.IContentObserver getObserver();
   @Source(SUSI_DATABASE_INFORMATION)  android.os.Bundle getExtras();
}
class ContentObservable{
    void notifyChange(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class ContentObserver{
   @Source(SUSI_DATABASE_INFORMATION)  android.database.IContentObserver releaseContentObserver();
   @Source(SUSI_DATABASE_INFORMATION)  android.database.IContentObserver getContentObserver();
}
class CrossProcessCursorWrapper{
   @Source(SUSI_DATABASE_INFORMATION)  android.database.CursorWindow getWindow();
}
class CursorToBulkCursorAdaptor{
   @Source(SUSI_DATABASE_INFORMATION)  android.os.Bundle getExtras();
   @Source(SUSI_DATABASE_INFORMATION)  android.database.BulkCursorDescriptor getBulkCursorDescriptor();
   @Source(SUSI_DATABASE_INFORMATION)  android.database.CursorWindow getWindow(  int arg0);
}
class CursorWindow{
   @Source(SUSI_NO_CATEGORY)  boolean setNumColumns(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  double getDouble(  int arg0, int arg1);
   @Source(SUSI_DATABASE_INFORMATION)  long getLong(  int arg0, int arg1);
   @Source(SUSI_DATABASE_INFORMATION)  android.database.CursorWindow newFromParcel(  android.os.Parcel arg0);
   @Source(SUSI_DATABASE_INFORMATION)  short getShort(  int arg0, int arg1);
   @Source(SUSI_DATABASE_INFORMATION)  int getStartPosition();
   @Source(SUSI_DATABASE_INFORMATION)  int getInt(  int arg0, int arg1);
   @Source(SUSI_DATABASE_INFORMATION)  byte[] getBlob(  int arg0, int arg1);
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String getName();
   @Source(SUSI_DATABASE_INFORMATION)  int getType(  int arg0, int arg1);
   @Source(SUSI_DATABASE_INFORMATION)  int getNumRows();
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String getString(  int arg0, int arg1);
   @Source(SUSI_DATABASE_INFORMATION)  float getFloat(  int arg0, int arg1);
}
class CursorWrapper{
   @Source(SUSI_DATABASE_INFORMATION)  int getCount();
   @Source(SUSI_DATABASE_INFORMATION)  float getFloat(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  int getColumnIndexOrThrow(  java.lang.String arg0);
   @Source(SUSI_DATABASE_INFORMATION)  int getType(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  int getColumnCount();
   @Source(SUSI_DATABASE_INFORMATION)  long getLong(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  android.os.Bundle getExtras();
   @Source(SUSI_DATABASE_INFORMATION)  int getPosition();
   @Source(SUSI_DATABASE_INFORMATION)  byte[] getBlob(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  double getDouble(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  int getInt(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  int getColumnIndex(  java.lang.String arg0);
   @Source(SUSI_DATABASE_INFORMATION)  android.database.Cursor getWrappedCursor();
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String getString(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  short getShort(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String getColumnName(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  boolean getWantsAllOnMoveCalls();
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String[] getColumnNames();
}
class DatabaseUtils{
    void dumpCursor(  @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg0, @Sink(SUSI_NO_CATEGORY) java.io.PrintStream arg1);
    void dumpCurrentRow(  @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg0, @Sink(SUSI_NO_CATEGORY) java.io.PrintStream arg1);
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String getHexCollationKey(  java.lang.String arg0);
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String getCollationKey(  java.lang.String arg0);
}
class DatabaseUtils$InsertHelper{
    void bindNull(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void bind(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void bind(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void bind(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
    void bind(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void bind(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1);
    void bind(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) double arg1);
    void bind(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_DATABASE_INFORMATION)  int getColumnIndex(  java.lang.String arg0);
}
class IContentObserver$Stub{
   @Source(SUSI_DATABASE_INFORMATION)  android.os.IBinder asBinder();
}
class IContentObserver$Stub$Proxy{
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class MatrixCursor{
   @Source(SUSI_DATABASE_INFORMATION)  byte[] getBlob(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  int getType(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String[] getColumnNames();
   @Source(SUSI_DATABASE_INFORMATION)  int getInt(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  long getLong(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  short getShort(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  int getCount();
   @Source(SUSI_DATABASE_INFORMATION)  float getFloat(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  double getDouble(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String getString(  int arg0);
}
class MergeCursor{
   @Source(SUSI_DATABASE_INFORMATION)  short getShort(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  int getCount();
   @Source(SUSI_DATABASE_INFORMATION)  byte[] getBlob(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  int getType(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  long getLong(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String[] getColumnNames();
   @Source(SUSI_DATABASE_INFORMATION)  int getInt(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  java.lang.String getString(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  float getFloat(  int arg0);
   @Source(SUSI_DATABASE_INFORMATION)  double getDouble(  int arg0);
}

package org.apache.http.protocol;

class BasicHttpContext{
    void setAttribute(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getAttribute(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class BasicHttpProcessor{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpRequestInterceptor getRequestInterceptor(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getRequestInterceptorCount();
   @Source(SUSI_NO_CATEGORY)  int getResponseInterceptorCount();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpResponseInterceptor getResponseInterceptor(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class DefaultedHttpContext{
    void setAttribute(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getAttribute(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.protocol.HttpContext getDefaults();
}

package android.support.v4.view.accessibility;

class AccessibilityNodeInfoCompat{
    void setVisibleToUser(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setBoundsInScreen(  @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg0);
    void setSource(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setParent(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
    void setBoundsInParent(  @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getInfo();
}
class AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl{
    void setBoundsInParent(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg1);
    void setClassName(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1);
    void setParent(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1);
    void setBoundsInScreen(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg1);
    void setEnabled(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setPackageName(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1);
    void setContentDescription(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1);
}
class AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanImpl{
    void setVisibleToUser(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setSource(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl{
    void setBoundsInScreen(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg1);
    void setEnabled(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setClassName(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1);
    void setParent(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1);
    void setContentDescription(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1);
    void setVisibleToUser(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setSource(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setBoundsInParent(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg1);
    void setPackageName(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1);
}
class AccessibilityNodeInfoCompatIcs{
    void setClassName(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1);
    void setContentDescription(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1);
    void setEnabled(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setBoundsInScreen(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg1);
    void setPackageName(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1);
    void setParent(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1);
    void setBoundsInParent(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg1);
}
class AccessibilityNodeInfoCompatJellyBean{
    void setSource(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setVisibleToUser(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class AccessibilityNodeProviderCompat{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getProvider();
}
class AccessibilityNodeProviderCompatJellyBean$1{
   @Source(SUSI_NO_CATEGORY)  android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class AccessibilityRecordCompat{
    void setSource(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class AccessibilityRecordCompat$AccessibilityRecordJellyBeanImpl{
    void setSource(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class AccessibilityRecordCompat$AccessibilityRecordStubImpl{
    void setSource(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class AccessibilityRecordCompatJellyBean{
    void setSource(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}

package com.android.org.bouncycastle.asn1;

class ASN1EncodableVector{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Encodable get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ASN1Exception{
   @Source(SUSI_NO_CATEGORY)  java.lang.Throwable getCause();
}
class ASN1InputStream{
   @Source(SUSI_NO_CATEGORY)  int getLimit();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive buildObject(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1EncodableVector buildEncodableVector();
}
class ASN1Null{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Null getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
}
class ASN1Object{
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive toASN1Object();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class ASN1ObjectIdentifier{
   @Source(SUSI_NO_CATEGORY)  boolean on(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier arg0);
}
class ASN1OctetString{
   @Source(SUSI_NO_CATEGORY)  byte[] getOctets();
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive toDERObject();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1OctetString getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1TaggedObject arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive toDLObject();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getOctetStream();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1OctetStringParser parser();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1OctetString getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class ASN1OutputStream{
    void writeLength(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void writeTag(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void writeEncoded(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1);
    void writeEncoded(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) byte[] arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1OutputStream getDLSubStream();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1OutputStream getDERSubStream();
}
class ASN1OutputStream$ImplicitOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ASN1ParsingException{
   @Source(SUSI_NO_CATEGORY)  java.lang.Throwable getCause();
}
class ASN1Primitive{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive toASN1Primitive();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive toDERObject();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive toDLObject();
}
class ASN1Sequence{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Encodable getObjectAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Sequence getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1TaggedObject arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive toDERObject();
   @Source(SUSI_NO_CATEGORY)  java.util.Enumeration getObjects();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Encodable[] toArray();
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Sequence getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive toDLObject();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1SequenceParser parser();
}
class ASN1Sequence$1{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject();
}
class ASN1Set{
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Encodable[] toArray();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Set getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1TaggedObject arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1SetParser parser();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive toDLObject();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Set getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Enumeration getObjects();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive toDERObject();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Encodable getObjectAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ASN1Set$1{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject();
}
class ASN1StreamParser{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive readTaggedObject(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Encodable readObject();
}
class ASN1TaggedObject{
   @Source(SUSI_NO_CATEGORY)  int getTagNo();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Encodable getObjectParser(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1TaggedObject getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1TaggedObject arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1TaggedObject getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive toDLObject();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive toDERObject();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive getObject();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject();
}
class BERApplicationSpecificParser{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject();
}
class BEROctetString{
   @Source(SUSI_NO_CATEGORY)  java.util.Enumeration getObjects();
   @Source(SUSI_NO_CATEGORY)  byte[] getOctets();
}
class BEROctetStringParser{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getOctetStream();
}
class BERSequenceParser{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject();
}
class BERSetParser{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject();
}
class BERTaggedObjectParser{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Encodable getObjectParser(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject();
   @Source(SUSI_NO_CATEGORY)  int getTagNo();
}
class DERApplicationSpecific{
   @Source(SUSI_NO_CATEGORY)  byte[] getContents();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive getObject();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DERApplicationSpecific getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  int getApplicationTag();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive getObject(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class DERBMPString{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DERBMPString getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DERBMPString getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1TaggedObject arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString();
}
class DERBitString{
   @Source(SUSI_NO_CATEGORY)  byte[] getBytes(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getPadBits(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DERBitString getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1TaggedObject arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DERBitString getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  int getPadBits();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString();
   @Source(SUSI_NO_CATEGORY)  byte[] getBytes();
}
class DERBoolean{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Boolean getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Boolean getInstance(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DERBoolean getInstance(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DERBoolean getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1TaggedObject arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class DEREnumerated{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Enumerated getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DEREnumerated getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1TaggedObject arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getValue();
}
class DERExternal{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getDirectReference();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive getExternalContent();
   @Source(SUSI_NO_CATEGORY)  int getEncoding();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Integer getIndirectReference();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive getDataValueDescriptor();
}
class DERExternalParser{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject();
}
class DERGeneralString{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DERGeneralString getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1TaggedObject arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DERGeneralString getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString();
   @Source(SUSI_NO_CATEGORY)  byte[] getOctets();
}
class DERGeneralizedTime{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1GeneralizedTime getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTimeString();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTime();
   @Source(SUSI_NO_CATEGORY)  java.util.Date getDate();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1GeneralizedTime getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1TaggedObject arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class DERIA5String{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DERIA5String getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getOctets();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DERIA5String getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1TaggedObject arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class DERInteger{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Integer getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Integer getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1TaggedObject arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getPositiveValue();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getValue();
}
class DERNumericString{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DERNumericString getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getOctets();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DERNumericString getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1TaggedObject arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class DERObjectIdentifier{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1TaggedObject arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getId();
   @Source(SUSI_NO_CATEGORY)  byte[] getBody();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class DEROctetStringParser{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getOctetStream();
}
class DEROutputStream{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1OutputStream getDLSubStream();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1OutputStream getDERSubStream();
}
class DERPrintableString{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DERPrintableString getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getOctets();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DERPrintableString getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1TaggedObject arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class DERSequenceParser{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject();
}
class DERSetParser{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject();
}
class DERT61String{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DERT61String getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getOctets();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DERT61String getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1TaggedObject arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class DERUTCTime{
   @Source(SUSI_NO_CATEGORY)  java.util.Date getDate();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1UTCTime getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAdjustedTime();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTime();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1UTCTime getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1TaggedObject arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.Date getAdjustedDate();
}
class DERUTF8String{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DERUTF8String getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DERUTF8String getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1TaggedObject arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class DERUniversalString{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DERUniversalString getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DERUniversalString getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1TaggedObject arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] getOctets();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString();
}
class DERVisibleString{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DERVisibleString getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getOctets();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DERVisibleString getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1TaggedObject arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class DefiniteLengthInputStream{
   @Source(SUSI_NO_CATEGORY)  int getRemaining();
   @Source(SUSI_NO_CATEGORY)  byte[] toByteArray();
}
class LazyEncodedSequence{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Encodable getObjectAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Enumeration getObjects();
}
class LimitedInputStream{
    void setParentEofDetect(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int getRemaining();
}

package com.android.systemui.statusbar.phone;

class NavigationBarView{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void notifyScreenOn(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setDisabledFlags(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setBar(  @Sink(SUSI_NO_CATEGORY) com.android.systemui.statusbar.BaseStatusBar arg0);
    void setNavigationIconHints(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDelegateView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
    void setLowProfile(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setMenuVisibility(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setSlippery(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getHomeButton();
   @Source(SUSI_NO_CATEGORY)  android.view.View getMenuButton();
   @Source(SUSI_NO_CATEGORY)  android.view.View getRecentsButton();
   @Source(SUSI_NO_CATEGORY)  android.view.View getBackButton();
   @Source(SUSI_NO_CATEGORY)  android.view.View getSearchLight();
}
class PanelBar{
    void setPanelHolder(  @Sink(SUSI_NO_CATEGORY) com.android.systemui.statusbar.phone.PanelHolder arg0);
}
class PanelHolder{
    void setSelectedPanel(  @Sink(SUSI_NO_CATEGORY) com.android.systemui.statusbar.phone.PanelView arg0);
   @Source(SUSI_NO_CATEGORY)  int getChildDrawingOrder(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getPanelIndex(  @Sink(SUSI_NO_CATEGORY) com.android.systemui.statusbar.phone.PanelView arg0);
}
class PanelView{
    void setExpandedFraction(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setExpandedHeight(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  float getExpandedFraction();
   @Source(SUSI_NO_CATEGORY)  float getExpandedHeight();
}
class PanelView$FlingTracker{
   @Source(SUSI_NO_CATEGORY)  float getYVelocity();
   @Source(SUSI_NO_CATEGORY)  float getXVelocity();
}
class PhoneStatusBar{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void setLightsOn(  @Sink(SUSI_LOG) boolean arg0);
    void setHardKeyboardStatus(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  android.animation.Animator setVisibilityWhenDone(  @Sink(SUSI_NO_CATEGORY) android.animation.Animator arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void startActivityDismissingKeyguard(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setSystemUiVisibility(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.View getStatusBarView();
   @Source(SUSI_NO_CATEGORY)  com.android.systemui.statusbar.GestureRecorder getGestureRecorder();
   @Source(SUSI_NO_CATEGORY)  com.android.systemui.statusbar.phone.PhoneStatusBarView makeStatusBarView();
   @Source(SUSI_NO_CATEGORY)  int getStatusBarHeight();
   @Source(SUSI_NO_CATEGORY)  int getStatusBarGravity();
   @Source(SUSI_NO_CATEGORY)  android.view.WindowManager$LayoutParams getSearchLayoutParams(  @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup$LayoutParams arg0);
   @Source(SUSI_NO_CATEGORY)  android.animation.Animator startDelay(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.animation.Animator arg1);
   @Source(SUSI_NO_CATEGORY)  android.animation.Animator interpolator(  @Sink(SUSI_NO_CATEGORY) android.animation.TimeInterpolator arg0, @Sink(SUSI_NO_CATEGORY) android.animation.Animator arg1);
}
class PhoneStatusBar$FastColorDrawable{
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setBounds(  @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg0);
    void setColorFilter(  @Sink(SUSI_NO_CATEGORY) android.graphics.ColorFilter arg0);
    void setBounds(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  int getOpacity();
}
class PhoneStatusBarView{
    void startOpeningPanel(  @Sink(SUSI_NO_CATEGORY) com.android.systemui.statusbar.phone.PanelView arg0);
}
class QuickSettings{
    void setImeWindowStatus(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.systemui.statusbar.phone.PhoneStatusBar getService();
}
class QuickSettingsTileView{
    void setContent(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.LayoutInflater arg1);
   @Source(SUSI_NO_CATEGORY)  int getColumnSpan();
}
class SettingsPanelView{
    void setBar(  @Sink(SUSI_NO_CATEGORY) com.android.systemui.statusbar.phone.PanelBar arg0);
}
class Ticker{
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList access$200(  @Sink(SUSI_NO_CATEGORY) com.android.systemui.statusbar.phone.Ticker arg0);
}
class Ticker$Segment{
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getText();
   @Source(SUSI_NO_CATEGORY)  android.text.StaticLayout getLayout(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg0);
}

package org.apache.http.entity;

class AbstractHttpEntity{
    void setContentEncoding(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setContentType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.Header getContentType();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.Header getContentEncoding();
}
class BasicHttpEntity{
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getContent();
   @Source(SUSI_NO_CATEGORY)  long getContentLength();
}
class BufferedHttpEntity{
    void writeTo(  @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getContent();
   @Source(SUSI_NO_CATEGORY)  long getContentLength();
}
class ByteArrayEntity{
   @Source(SUSI_NO_CATEGORY)  long getContentLength();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getContent();
}
class HttpEntityWrapper{
    void writeTo(  @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.Header getContentType();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.Header getContentEncoding();
   @Source(SUSI_NO_CATEGORY)  long getContentLength();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getContent();
}
class InputStreamEntity{
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getContent();
   @Source(SUSI_NO_CATEGORY)  long getContentLength();
}
class StringEntity{
   @Source(SUSI_NO_CATEGORY)  long getContentLength();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getContent();
}

package com.android.internal.telephony.sip;

class SipCallBase{
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getConnections();
}
class SipCommandInterface{
    void setCdmaBroadcastConfig(  @Sink(SUSI_SYSTEM_SETTINGS) int[] arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setSmscAddress(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setBandMode(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setCdmaRoamingPreference(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setNetworkSelectionModeManual(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setupDataCall(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg3, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg4, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg5, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg6, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg7);
    void setGsmBroadcastActivation(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void sendUSSD(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setMute(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void sendTerminalResponse(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setCdmaSubscriptionSource(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void sendEnvelope(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void sendCDMAFeatureCode(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setLocationUpdates(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setCallForward(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg3, @Sink(SUSI_SYSTEM_SETTINGS) int arg4, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg5);
    void setCallWaiting(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void setSuppServiceNotifications(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setPreferredNetworkType(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void sendEnvelopeWithStatus(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setPreferredVoicePrivacy(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setCLIR(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setNetworkSelectionModeAutomatic(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void sendBurstDtmf(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg3);
    void setOnNITZTime(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void setTTYMode(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setGsmBroadcastConfig(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[] arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setRadioPower(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void sendSMS(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void setFacilityLockForApp(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2, @Sink(SUSI_SYSTEM_SETTINGS) int arg3, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg4, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg5);
    void sendDtmf(  @Sink(SUSI_SYSTEM_SETTINGS) char arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setFacilityLock(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2, @Sink(SUSI_SYSTEM_SETTINGS) int arg3, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg4);
    void setPhoneType(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
    void setCdmaBroadcastActivation(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void sendCdmaSms(  @Sink(SUSI_SYSTEM_SETTINGS) byte[] arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
}
class SipConnectionBase{
    void setState(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.Call$State arg0);
   @Source(SUSI_NETWORK_INFORMATION)  long getDurationMillis();
   @Source(SUSI_NETWORK_INFORMATION)  long getConnectTime();
   @Source(SUSI_NETWORK_INFORMATION)  long getHoldDurationMillis();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Connection$DisconnectCause getDisconnectCause();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.UUSInfo getUUSInfo();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getRemainingPostDialString();
   @Source(SUSI_NETWORK_INFORMATION)  long getCreateTime();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Connection$PostDialState getPostDialState();
   @Source(SUSI_NETWORK_INFORMATION)  long getDisconnectTime();
   @Source(SUSI_SYSTEM_SETTINGS)  int getNumberPresentation();
}
class SipPhone{
    void sendBurstDtmf(  @Sink(SUSI_PHONE_CONNECTION) java.lang.String arg0);
    void sendUssdResponse(  @Sink(SUSI_PHONE_CONNECTION) java.lang.String arg0);
    void sendDtmf(  @Sink(SUSI_PHONE_CONNECTION) char arg0);
    void startDtmf(  @Sink(SUSI_PHONE_CONNECTION) char arg0);
    com.android.internal.telephony.Connection dial(  @Sink(SUSI_VOIP) java.lang.String arg0, @Sink(SUSI_VOIP) com.android.internal.telephony.UUSInfo arg1);
    void setOnPostDialCharacter(  @Sink(SUSI_VOIP) android.os.Handler arg0, @Sink(SUSI_VOIP) int arg1, @Sink(SUSI_VOIP) java.lang.Object arg2);
    com.android.internal.telephony.Connection dial(  @Sink(SUSI_VOIP) java.lang.String arg0);
    void notifyDataConnection(  @Sink(SUSI_PHONE_STATE) java.lang.String arg0, @Sink(SUSI_PHONE_STATE) java.lang.String arg1);
    void setRadioPower(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void setCallWaiting(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setLine1Number(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void setNetworkSelectionModeAutomatic(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void saveClirSetting(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
    void setOutgoingCallerIdDisplay(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setEchoSuppressionEnabled(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void setSmscAddress(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setCellBroadcastSmsConfig(  @Sink(SUSI_SYSTEM_SETTINGS) int[] arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setVoiceMailNumber(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void setDataRoamingEnabled(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void setCallForwardingOption(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2, @Sink(SUSI_SYSTEM_SETTINGS) int arg3, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg4);
    void setMute(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void setCdmaSubscription(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getVoiceMailNumber();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getVoiceMailAlphaTag();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getPhoneName();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getSubscriberId();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getLine1AlphaTag();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getMeid();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getLine1Number();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getDeviceSvn();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getImei();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getSipUri();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getEsn();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getIccSerialNumber();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getDeviceId();
   @Source(SUSI_LOCATION_INFORMATION)  android.telephony.CellLocation getCellLocation();
    void getPreferredNetworkType(  @Sink(SUSI_LOCATION_INFORMATION) android.os.Message arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getIccRecordsLoaded();
   @Source(SUSI_SYSTEM_SETTINGS)  java.util.List getAllCellInfo();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.Call getBackgroundCall();
   @Source(SUSI_SYSTEM_SETTINGS)  java.util.List getPendingMmiCodes();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.Phone$DataActivityState getDataActivityState();
   @Source(SUSI_SYSTEM_SETTINGS)  android.telephony.ServiceState getServiceState();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.IccFileHandler getIccFileHandler();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getMute();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getMessageWaitingIndicator();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo();
   @Source(SUSI_SYSTEM_SETTINGS)  android.net.LinkProperties getLinkProperties(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getDataRoamingEnabled();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getCallForwardingIndicator();
   @Source(SUSI_SYSTEM_SETTINGS)  int getPhoneType();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.IccCard getIccCard();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState();
   @Source(SUSI_SYSTEM_SETTINGS)  android.telephony.SignalStrength getSignalStrength();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager();
    void getSmscAddress(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.Call getForegroundCall();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.Call getRingingCall();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.PhoneConstants$State getState();
   @Source(SUSI_SYSTEM_SETTINGS)  java.util.List getCurrentDataConnectionList();
}
class SipPhone$SipCall{
    void setMute(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  java.util.List getConnections();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.Connection dial(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.Phone getPhone();
}
class SipPhone$SipConnection{
    void setMute(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getAddress();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getCnapName();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getMute();
   @Source(SUSI_SYSTEM_SETTINGS)  int getNumberPresentation();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.Phone getPhone();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.Call getCall();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.Call$State getState();
   @Source(SUSI_SYSTEM_SETTINGS)  android.net.rtp.AudioGroup getAudioGroup();
}
class SipPhoneBase{
    void setOnPostDialCharacter(  @Sink(SUSI_VOIP) android.os.Handler arg0, @Sink(SUSI_VOIP) int arg1, @Sink(SUSI_VOIP) java.lang.Object arg2);
    com.android.internal.telephony.Connection dial(  @Sink(SUSI_VOIP) java.lang.String arg0, @Sink(SUSI_VOIP) com.android.internal.telephony.UUSInfo arg1);
    void notifyDisconnect(  @Sink(SUSI_PHONE_STATE) com.android.internal.telephony.Connection arg0);
    void notifyDataConnection(  @Sink(SUSI_PHONE_STATE) java.lang.String arg0, @Sink(SUSI_PHONE_STATE) java.lang.String arg1);
    void notifyNewRingingConnection(  @Sink(SUSI_PHONE_STATE) com.android.internal.telephony.Connection arg0);
    void sendUssdResponse(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
    void setSmscAddress(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void restoreSavedNetworkSelection(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void setCallForwardingOption(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2, @Sink(SUSI_SYSTEM_SETTINGS) int arg3, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg4);
    void setCallWaiting(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setCellBroadcastSmsConfig(  @Sink(SUSI_SYSTEM_SETTINGS) int[] arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setNetworkSelectionModeAutomatic(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void setVoiceMailNumber(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void notifySuppServiceFailed(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.Phone$SuppService arg0);
    void setDataRoamingEnabled(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void setBandMode(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setRadioPower(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void setLine1Number(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void setCdmaSubscription(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void notifyServiceStateChanged(  @Sink(SUSI_SYSTEM_SETTINGS) android.telephony.ServiceState arg0);
    void setOutgoingCallerIdDisplay(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getIccSerialNumber();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getEsn();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getVoiceMailAlphaTag();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getDeviceId();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getSubscriberId();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getDeviceSvn();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getVoiceMailNumber();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getLine1AlphaTag();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getLine1Number();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getMeid();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getImei();
   @Source(SUSI_LOCATION_INFORMATION)  android.telephony.CellLocation getCellLocation();
    void getPreferredNetworkType(  @Sink(SUSI_LOCATION_INFORMATION) android.os.Message arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getCallForwardingIndicator();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.IccFileHandler getIccFileHandler();
   @Source(SUSI_SYSTEM_SETTINGS)  android.telephony.SignalStrength getSignalStrength();
   @Source(SUSI_SYSTEM_SETTINGS)  android.net.LinkProperties getLinkProperties(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  android.telephony.ServiceState getServiceState();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.IccCard getIccCard();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState();
   @Source(SUSI_SYSTEM_SETTINGS)  java.util.List getCurrentDataConnectionList();
   @Source(SUSI_SYSTEM_SETTINGS)  java.util.List getPendingMmiCodes();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getIccRecordsLoaded();
   @Source(SUSI_SYSTEM_SETTINGS)  int getPhoneType();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.Phone$DataActivityState getDataActivityState();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getDataRoamingEnabled();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.PhoneConstants$State getState();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo();
   @Source(SUSI_SYSTEM_SETTINGS)  java.util.List getAllCellInfo();
    void getSmscAddress(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getMessageWaitingIndicator();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager();
}

package com.android.internal.app;

class ActionBarImpl{
    void setCustomView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) android.app.ActionBar$LayoutParams arg1);
    void setIcon(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
    void setBackgroundDrawable(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
    void setDisplayOptions(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setDefaultDisplayHomeAsUpEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setTitle(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSelectedNavigationItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDisplayUseLogoEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setNavigationMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDisplayShowTitleEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setSplitBackgroundDrawable(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
    void setStackedBackgroundDrawable(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
    void setLogo(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setHomeButtonEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setDisplayShowCustomEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setLogo(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
    void setDisplayShowHomeEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setDisplayOptions(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setCustomView(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSubtitle(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDisplayHomeAsUpEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setCustomView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
    void setIcon(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.Context getThemedContext();
   @Source(SUSI_NO_CATEGORY)  android.app.ActionBar$Tab getSelectedTab();
   @Source(SUSI_NO_CATEGORY)  int getNavigationItemCount();
   @Source(SUSI_NO_CATEGORY)  int getNavigationMode();
   @Source(SUSI_NO_CATEGORY)  android.app.ActionBar$Tab getTabAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getTabCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getSubtitle();
   @Source(SUSI_NO_CATEGORY)  int getSelectedNavigationIndex();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTitle();
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  android.view.View getCustomView();
   @Source(SUSI_NO_CATEGORY)  int getDisplayOptions();
}
class ActionBarImpl$ActionModeImpl{
    void setTitleOptionalHint(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setCustomView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
    void setTitle(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSubtitle(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTitle();
   @Source(SUSI_NO_CATEGORY)  android.view.MenuInflater getMenuInflater();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getSubtitle();
   @Source(SUSI_NO_CATEGORY)  android.view.View getCustomView();
   @Source(SUSI_NO_CATEGORY)  android.view.Menu getMenu();
}
class ActionBarImpl$TabImpl{
   @Source(SUSI_NO_CATEGORY)  android.app.ActionBar$Tab setText(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.ActionBar$Tab setIcon(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.ActionBar$Tab setContentDescription(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.ActionBar$Tab setCustomView(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getText();
   @Source(SUSI_NO_CATEGORY)  android.view.View getCustomView();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getContentDescription();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getTag();
   @Source(SUSI_NO_CATEGORY)  int getPosition();
   @Source(SUSI_NO_CATEGORY)  android.app.ActionBar$TabListener getCallback();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getIcon();
}
class AlertController{
   @Source(SUSI_NO_CATEGORY)  int getIconAttributeResId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.widget.ListView getListView();
   @Source(SUSI_NO_CATEGORY)  android.widget.Button getButton(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class AlertController$AlertParams$1{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
}
class HeavyWeightSwitcherActivity{
    void setIconAndText(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
    void setText(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1);
    void setDrawable(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg1);
}
class IBatteryStats$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IBatteryStats$Stub$Proxy{
    void noteFullWifiLockAcquired(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setBatteryState(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
    void noteWifiScanStopped(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void noteWifiMulticastEnabled(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void noteStopSensor(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void notePhoneDataConnectionState(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void noteStartGps(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void noteScreenBrightness(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void noteStartSensor(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void noteStopWakelock(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void noteStopWakelockFromSource(  @Sink(SUSI_NO_CATEGORY) android.os.WorkSource arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void noteWifiScanStarted(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void noteUserActivity(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void noteNetworkInterfaceType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void noteStartWakelock(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void noteStopGps(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void noteStartWakelockFromSource(  @Sink(SUSI_NO_CATEGORY) android.os.WorkSource arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void notePhoneState(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void noteWifiMulticastDisabled(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void noteFullWifiLockReleased(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getAwakeTimePlugged();
   @Source(SUSI_NO_CATEGORY)  long getAwakeTimeBattery();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NO_CATEGORY)  byte[] getStatistics();
}
class IMediaContainerService$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IMediaContainerService$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  java.lang.String copyResourceToContainer(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) boolean arg5, @Sink(SUSI_NO_CATEGORY) boolean arg6);
    void clearDirectory(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  long calculateDirectorySize(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  long calculateInstalledSize(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  boolean checkInternalFreeStorage(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NETWORK_INFORMATION)  android.content.res.ObbInfo getObbInfo(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.pm.PackageInfoLite getMinimalPackageInfo(  java.lang.String arg0, int arg1, long arg2);
   @Source(SUSI_NETWORK_INFORMATION)  long[] getFileSystemStats(  java.lang.String arg0);
}
class IUsageStats$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IUsageStats$Stub$Proxy{
    void noteLaunchTime(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NO_CATEGORY)  com.android.internal.os.PkgUsageStats getPkgUsageStats(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.internal.os.PkgUsageStats[] getAllPkgUsageStats();
}
class LocalePicker$1{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
}
class LocalePicker$LocaleInfo{
   @Source(SUSI_NO_CATEGORY)  java.util.Locale getLocale();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLabel();
}
class ResolverActivity{
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable loadIconForResolveInfo(  @Sink(SUSI_NO_CATEGORY) android.content.pm.ResolveInfo arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getIcon(  @Sink(SUSI_NO_CATEGORY) android.content.res.Resources arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class ResolverActivity$ResolveListAdapter{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getCount();
}

package android.view.animation;

class AccelerateDecelerateInterpolator{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class AccelerateInterpolator{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Animation{
    void setInterpolator(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getZAdjustment();
   @Source(SUSI_NO_CATEGORY)  int getRepeatCount();
   @Source(SUSI_NO_CATEGORY)  long getStartOffset();
   @Source(SUSI_NO_CATEGORY)  boolean getTransformation(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) android.view.animation.Transformation arg1, @Sink(SUSI_NO_CATEGORY) float arg2);
    void getInvalidateRegion(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.graphics.RectF arg4, @Sink(SUSI_NO_CATEGORY) android.view.animation.Transformation arg5);
   @Source(SUSI_NO_CATEGORY)  float resolveSize(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  long getStartTime();
   @Source(SUSI_NO_CATEGORY)  int getBackgroundColor();
   @Source(SUSI_NO_CATEGORY)  boolean getDetachWallpaper();
   @Source(SUSI_NO_CATEGORY)  android.view.animation.Animation clone();
   @Source(SUSI_NO_CATEGORY)  android.view.animation.Interpolator getInterpolator();
   @Source(SUSI_NO_CATEGORY)  long getDuration();
   @Source(SUSI_NO_CATEGORY)  int getRepeatMode();
   @Source(SUSI_NO_CATEGORY)  boolean getTransformation(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) android.view.animation.Transformation arg1);
   @Source(SUSI_NO_CATEGORY)  float getScaleFactor();
   @Source(SUSI_NO_CATEGORY)  boolean getFillAfter();
   @Source(SUSI_NO_CATEGORY)  boolean getFillBefore();
   @Source(SUSI_NO_CATEGORY)  long computeDurationHint();
}
class AnimationSet{
    void setFillAfter(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setDuration(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setStartOffset(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setRepeatMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setStartTime(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setFillBefore(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  long getDuration();
   @Source(SUSI_NO_CATEGORY)  java.util.List getAnimations();
   @Source(SUSI_NO_CATEGORY)  long getStartTime();
}
class AnimationUtils{
   @Source(SUSI_NO_CATEGORY)  android.view.animation.LayoutAnimationController loadLayoutAnimation(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.animation.Animation loadAnimation(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.animation.Interpolator loadInterpolator(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class AnticipateInterpolator{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class AnticipateOvershootInterpolator{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class BounceInterpolator{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class CycleInterpolator{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class DecelerateInterpolator{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class GridLayoutAnimationController{
   @Source(SUSI_NO_CATEGORY)  float getRowDelay();
   @Source(SUSI_NO_CATEGORY)  int getDirection();
   @Source(SUSI_NO_CATEGORY)  long getDelayForView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  int getDirectionPriority();
   @Source(SUSI_NO_CATEGORY)  float getColumnDelay();
}
class LayoutAnimationController{
    void setAnimation(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setInterpolator(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getTransformedIndex(  @Sink(SUSI_NO_CATEGORY) android.view.animation.LayoutAnimationController$AnimationParameters arg0);
   @Source(SUSI_NO_CATEGORY)  int getOrder();
   @Source(SUSI_NO_CATEGORY)  float getDelay();
   @Source(SUSI_NO_CATEGORY)  android.view.animation.Animation getAnimationForView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  long getDelayForView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.animation.Interpolator getInterpolator();
   @Source(SUSI_NO_CATEGORY)  android.view.animation.Animation getAnimation();
}
class LinearInterpolator{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class OvershootInterpolator{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Transformation{
    void set(  @Sink(SUSI_NO_CATEGORY) android.view.animation.Transformation arg0);
   @Source(SUSI_NO_CATEGORY)  int getTransformationType();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Matrix getMatrix();
   @Source(SUSI_NO_CATEGORY)  float getAlpha();
}

package com.android.common.contacts;

class BaseEmailAddressAdapter$DirectoryPartitionFilter{
   @Source(SUSI_CONTACT_INFORMATION)  int getLimit();
}

package junit.textui;

class ResultPrinter{
    void printFooter(  @Sink(SUSI_NO_CATEGORY) junit.framework.TestResult arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.PrintStream getWriter();
}

package com.android.commands.am;

class Am$InstrumentationWatcher{
    void instrumentationStatus(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
    void instrumentationFinished(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
}
class Am$IntentReceiver{
    void performReceive(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4, @Sink(SUSI_NO_CATEGORY) boolean arg5, @Sink(SUSI_NO_CATEGORY) int arg6);
}
class Am$MyActivityController{
   @Source(SUSI_NO_CATEGORY)  int appNotResponding(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  boolean activityResuming(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  boolean appCrashed(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) long arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5);
   @Source(SUSI_NO_CATEGORY)  boolean activityStarting(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int appEarlyNotResponding(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
}

package com.android.email.activity.setup;

class AccountCheckSettingsFragment$ErrorDialog{
   @Source(SUSI_EMAIL)  com.android.email.activity.setup.AccountCheckSettingsFragment$ErrorDialog newInstance(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) com.android.email.activity.setup.AccountCheckSettingsFragment arg1, @Sink(SUSI_EMAIL) com.android.emailcommon.mail.MessagingException arg2);
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog onCreateDialog(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
}
class AccountCheckSettingsFragment$SecurityRequiredDialog{
   @Source(SUSI_EMAIL)  com.android.email.activity.setup.AccountCheckSettingsFragment$SecurityRequiredDialog newInstance(  @Sink(SUSI_EMAIL) com.android.email.activity.setup.AccountCheckSettingsFragment arg0, @Sink(SUSI_EMAIL) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog onCreateDialog(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
}
class AccountSecurity{
   @Source(SUSI_EMAIL)  android.content.Intent actionDevicePasswordExpirationIntent(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) boolean arg2);
   @Source(SUSI_EMAIL)  android.content.Intent actionUpdateSecurityIntent(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) boolean arg2);
}
class AccountSecurity$PasswordExpirationDialog{
   @Source(SUSI_EMAIL)  com.android.email.activity.setup.AccountSecurity$PasswordExpirationDialog newInstance(  @Sink(SUSI_EMAIL) java.lang.String arg0, @Sink(SUSI_EMAIL) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog onCreateDialog(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
}
class AccountSecurity$SecurityNeededDialog{
   @Source(SUSI_EMAIL)  com.android.email.activity.setup.AccountSecurity$SecurityNeededDialog newInstance(  @Sink(SUSI_EMAIL) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog onCreateDialog(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
}
class AccountServerBaseFragment{
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle getSettingsModeArgs();
}
class AccountSettings{
    void onEditQuickResponses(  @Sink(SUSI_EMAIL) com.android.emailcommon.provider.Account arg0);
   @Source(SUSI_EMAIL)  android.content.Intent createAccountSettingsIntent(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) java.lang.String arg2);
   @Source(SUSI_EMAIL)  android.content.Intent onBuildStartFragmentIntent(  @Sink(SUSI_EMAIL) java.lang.String arg0, @Sink(SUSI_EMAIL) android.os.Bundle arg1, @Sink(SUSI_EMAIL) int arg2, @Sink(SUSI_EMAIL) int arg3);
}
class AccountSettings$AccountServerSettingsFragmentCallback{
    void onProceedNext(  @Sink(SUSI_EMAIL) int arg0, @Sink(SUSI_EMAIL) com.android.email.activity.setup.AccountServerBaseFragment arg1);
}
class AccountSettings$LoginWarningDialog{
   @Source(SUSI_EMAIL)  com.android.email.activity.setup.AccountSettings$LoginWarningDialog newInstance(  @Sink(SUSI_EMAIL) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog onCreateDialog(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
}
class AccountSettings$UnsavedChangesDialogFragment{
   @Source(SUSI_EMAIL)  com.android.email.activity.setup.AccountSettings$UnsavedChangesDialogFragment newInstanceForHeader(  @Sink(SUSI_EMAIL) int arg0);
}
class AccountSettingsEditQuickResponsesFragment$ArrayAdapterWithButtons{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
}
class AccountSettingsFragment{
   @Source(SUSI_EMAIL)  android.os.Bundle buildArguments(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTitleFromArgs(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
}
class AccountSettingsFragment$DeleteAccountFragment{
   @Source(SUSI_EMAIL)  com.android.email.activity.setup.AccountSettingsFragment$DeleteAccountFragment newInstance(  @Sink(SUSI_EMAIL) com.android.emailcommon.provider.Account arg0, @Sink(SUSI_EMAIL) android.app.Fragment arg1);
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog onCreateDialog(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
}
class AccountSettingsFragment$LoadAccountTask{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] doInBackground(  @Sink(SUSI_NO_CATEGORY) java.lang.Long[] arg0);
}
class AccountSettingsUtils{
    void commitSettings(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) com.android.emailcommon.provider.Account arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.ContentValues getAccountContentValues(  @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.provider.Account arg0);
}
class AccountSetupActivity{
    void onSaveInstanceState(  @Sink(SUSI_EMAIL) android.os.Bundle arg0);
    void onCreate(  @Sink(SUSI_EMAIL) android.os.Bundle arg0);
}
class AccountSetupBasics$NoteDialogFragment{
   @Source(SUSI_EMAIL)  com.android.email.activity.setup.AccountSetupBasics$NoteDialogFragment newInstance(  @Sink(SUSI_EMAIL) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog onCreateDialog(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
}
class AccountSetupExchangeFragment{
   @Source(SUSI_EMAIL)  boolean setHostAuthFromAutodiscover(  @Sink(SUSI_EMAIL) com.android.emailcommon.provider.HostAuth arg0);
}
class DebugFragment{
    void onCheckedChanged(  @Sink(SUSI_EMAIL) android.widget.CompoundButton arg0, @Sink(SUSI_EMAIL) boolean arg1);
}
class DuplicateAccountDialogFragment{
   @Source(SUSI_EMAIL)  com.android.email.activity.setup.DuplicateAccountDialogFragment newInstance(  @Sink(SUSI_EMAIL) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog onCreateDialog(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
}
class EditQuickResponseDialog{
   @Source(SUSI_EMAIL)  com.android.email.activity.setup.EditQuickResponseDialog newInstance(  @Sink(SUSI_EMAIL) com.android.emailcommon.provider.QuickResponse arg0, @Sink(SUSI_EMAIL) long arg1);
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog onCreateDialog(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
}
class MailboxSettings{
    void start(  @Sink(SUSI_EMAIL) android.app.Activity arg0, @Sink(SUSI_EMAIL) long arg1);
    void setupLookbackPreferenceOptions(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) android.preference.ListPreference arg1, @Sink(SUSI_EMAIL) com.android.emailcommon.provider.Account arg2);
}
class SetupData{
   @Source(SUSI_CONTACT_INFORMATION)  android.accounts.AccountAuthenticatorResponse getAccountAuthenticatorResponse();
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.provider.Account getAccount();
   @Source(SUSI_NO_CATEGORY)  com.android.email.activity.setup.SetupData getInstance();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPassword();
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.provider.Policy getPolicy();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUsername();
   @Source(SUSI_NO_CATEGORY)  int getFlowMode();
}

package com.android.mms.layout;

class HVGALayoutParameters{
   @Source(SUSI_NO_CATEGORY)  int getTextHeight();
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  int getImageHeight();
}
class LayoutManager{
   @Source(SUSI_NO_CATEGORY)  com.android.mms.layout.LayoutParameters getLayoutParameters();
   @Source(SUSI_NO_CATEGORY)  com.android.mms.layout.LayoutManager getInstance();
}

package android.app.admin;

class DeviceAdminInfo{
    void dump(  @Sink(SUSI_NO_CATEGORY) android.util.Printer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getUsedPolicies();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTagForPolicy(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getComponent();
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ActivityInfo getActivityInfo();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getReceiverName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPackageName();
}
class DeviceAdminReceiver{
   @Source(SUSI_NO_CATEGORY)  android.app.admin.DevicePolicyManager getManager(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getWho(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class DevicePolicyManager{
    void setMaximumTimeToLock(  @Sink(SUSI_LOG) android.content.ComponentName arg0, @Sink(SUSI_LOG) long arg1);
    void setKeyguardDisabledFeatures(  @Sink(SUSI_LOG) android.content.ComponentName arg0, @Sink(SUSI_LOG) int arg1);
    void setPasswordQuality(  @Sink(SUSI_LOG) android.content.ComponentName arg0, @Sink(SUSI_LOG) int arg1);
    void setCameraDisabled(  @Sink(SUSI_LOG) android.content.ComponentName arg0, @Sink(SUSI_LOG) boolean arg1);
    void setPasswordMinimumSymbols(  @Sink(SUSI_LOG) android.content.ComponentName arg0, @Sink(SUSI_LOG) int arg1);
    void setActivePasswordState(  @Sink(SUSI_LOG) int arg0, @Sink(SUSI_LOG) int arg1, @Sink(SUSI_LOG) int arg2, @Sink(SUSI_LOG) int arg3, @Sink(SUSI_LOG) int arg4, @Sink(SUSI_LOG) int arg5, @Sink(SUSI_LOG) int arg6, @Sink(SUSI_LOG) int arg7, @Sink(SUSI_LOG) int arg8);
    int setStorageEncryption(  @Sink(SUSI_LOG) android.content.ComponentName arg0, @Sink(SUSI_LOG) boolean arg1);
    void setPasswordMinimumNonLetter(  @Sink(SUSI_LOG) android.content.ComponentName arg0, @Sink(SUSI_LOG) int arg1);
    void setPasswordMinimumLetters(  @Sink(SUSI_LOG) android.content.ComponentName arg0, @Sink(SUSI_LOG) int arg1);
    void setMaximumFailedPasswordsForWipe(  @Sink(SUSI_LOG) android.content.ComponentName arg0, @Sink(SUSI_LOG) int arg1);
    void setPasswordMinimumLength(  @Sink(SUSI_LOG) android.content.ComponentName arg0, @Sink(SUSI_LOG) int arg1);
    void setPasswordExpirationTimeout(  @Sink(SUSI_LOG) android.content.ComponentName arg0, @Sink(SUSI_LOG) long arg1);
    void setPasswordHistoryLength(  @Sink(SUSI_LOG) android.content.ComponentName arg0, @Sink(SUSI_LOG) int arg1);
    void setPasswordMinimumLowerCase(  @Sink(SUSI_LOG) android.content.ComponentName arg0, @Sink(SUSI_LOG) int arg1);
    void setPasswordMinimumNumeric(  @Sink(SUSI_LOG) android.content.ComponentName arg0, @Sink(SUSI_LOG) int arg1);
    void setActiveAdmin(  @Sink(SUSI_LOG) android.content.ComponentName arg0, @Sink(SUSI_LOG) boolean arg1);
    void setPasswordMinimumUpperCase(  @Sink(SUSI_LOG) android.content.ComponentName arg0, @Sink(SUSI_LOG) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getPasswordMinimumSymbols(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  int getPasswordMinimumLength(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName setGlobalProxy(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) java.net.Proxy arg1, @Sink(SUSI_NO_CATEGORY) java.util.List arg2);
   @Source(SUSI_NO_CATEGORY)  long getMaximumTimeToLock(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  int getPasswordMinimumNonLetter(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getGlobalProxyAdmin();
   @Source(SUSI_NO_CATEGORY)  long getPasswordExpiration(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  int getPasswordMaximumLength(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getPasswordMinimumSymbols(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  long getMaximumTimeToLock(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getPasswordMinimumNumeric(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getStorageEncryption(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  int getPasswordMinimumLetters(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getStorageEncryptionStatus(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getKeyguardDisabledFeatures(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  int getPasswordMinimumLowerCase(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.admin.DeviceAdminInfo getAdminInfo(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  int getCurrentFailedPasswordAttempts();
    void getRemoveWarning(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) android.os.RemoteCallback arg1);
   @Source(SUSI_NO_CATEGORY)  long getPasswordExpirationTimeout(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  int getPasswordMinimumNonLetter(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.List getActiveAdmins();
   @Source(SUSI_NO_CATEGORY)  int getPasswordHistoryLength(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getStorageEncryptionStatus();
   @Source(SUSI_NO_CATEGORY)  int getPasswordMinimumLowerCase(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getMaximumFailedPasswordsForWipe(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getCameraDisabled(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  int getPasswordMinimumUpperCase(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean isAdminActive(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  int getPasswordMinimumUpperCase(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  int getPasswordHistoryLength(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  int getPasswordQuality(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getCameraDisabled(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getPasswordQuality(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getPasswordMinimumLetters(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  int getPasswordMinimumNumeric(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getPasswordMinimumLength(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getMaximumFailedPasswordsForWipe(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getKeyguardDisabledFeatures(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class IDevicePolicyManager$Stub{
   @Source(SUSI_SYSTEM_SETTINGS)  boolean onTransact(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Parcel arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Parcel arg2, @Sink(SUSI_SYSTEM_SETTINGS) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IDevicePolicyManager$Stub$Proxy{
   @Source(SUSI_SYSTEM_SETTINGS)  android.content.ComponentName setGlobalProxy(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2, @Sink(SUSI_SYSTEM_SETTINGS) int arg3);
    void setPasswordMinimumSymbols(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void setPasswordMinimumLowerCase(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void reportFailedPasswordAttempt(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
    void setMaximumTimeToLock(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) long arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void setPasswordHistoryLength(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
   @Source(SUSI_SYSTEM_SETTINGS)  int setStorageEncryption(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void setPasswordMinimumNonLetter(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void setPasswordQuality(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void setCameraDisabled(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void setActiveAdmin(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void setKeyguardDisabledFeatures(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void reportSuccessfulPasswordAttempt(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
    void setPasswordMinimumUpperCase(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void setActivePasswordState(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2, @Sink(SUSI_SYSTEM_SETTINGS) int arg3, @Sink(SUSI_SYSTEM_SETTINGS) int arg4, @Sink(SUSI_SYSTEM_SETTINGS) int arg5, @Sink(SUSI_SYSTEM_SETTINGS) int arg6, @Sink(SUSI_SYSTEM_SETTINGS) int arg7, @Sink(SUSI_SYSTEM_SETTINGS) int arg8);
    void setPasswordMinimumLetters(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean hasGrantedPolicy(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void wipeData(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
    void setMaximumFailedPasswordsForWipe(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean resetPassword(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void setPasswordMinimumLength(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean packageHasActiveAdmins(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
    void setPasswordExpirationTimeout(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) long arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void setPasswordMinimumNumeric(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2);
    void removeActiveAdmin(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getPasswordHistoryLength(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getPasswordMinimumLetters(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getMaximumFailedPasswordsForWipe(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getPasswordMinimumNumeric(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NO_CATEGORY)  java.util.List getActiveAdmins(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getGlobalProxyAdmin(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getStorageEncryption(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean isAdminActive(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  long getPasswordExpiration(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getPasswordMinimumLength(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  long getMaximumTimeToLock(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getPasswordMinimumUpperCase(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getPasswordMinimumLowerCase(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getKeyguardDisabledFeatures(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getPasswordMinimumSymbols(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void getRemoveWarning(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) android.os.RemoteCallback arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getPasswordQuality(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getPasswordMinimumNonLetter(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getStorageEncryptionStatus(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getPasswordExpirationTimeout(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getCurrentFailedPasswordAttempts(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean isActivePasswordSufficient(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getCameraDisabled(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}

package java.lang.ref;

class FinalizerReference{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get();
}
class Reference{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get();
}

package com.android.org.bouncycastle.util.encoders;

class Base64{
   @Source(SUSI_NO_CATEGORY)  byte[] encode(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] decode(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] decode(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
}
class Hex{
   @Source(SUSI_NO_CATEGORY)  byte[] decode(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] encode(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  byte[] decode(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
}

package org.apache.harmony.security.asn1;

class ASN1Any{
    void setEncodingContent(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerOutputStream arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.asn1.ASN1Any getInstance();
   @Source(SUSI_NO_CATEGORY)  int getEncodedLength(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerOutputStream arg0);
}
class ASN1BitString{
    void setEncodingContent(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerOutputStream arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.asn1.ASN1BitString getInstance();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class ASN1BitString$ASN1NamedBitList{
    void setEncodingContent(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerOutputStream arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class ASN1Boolean{
    void setEncodingContent(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerOutputStream arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.asn1.ASN1Boolean getInstance();
}
class ASN1Choice{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object decode(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class ASN1Enumerated{
    void setEncodingContent(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerOutputStream arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.asn1.ASN1Enumerated getInstance();
}
class ASN1Explicit{
    void setEncodingContent(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerOutputStream arg0);
}
class ASN1GeneralizedTime{
    void setEncodingContent(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerOutputStream arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.asn1.ASN1GeneralizedTime getInstance();
}
class ASN1Implicit{
    void setEncodingContent(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerOutputStream arg0);
}
class ASN1Integer{
    void setEncodingContent(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerOutputStream arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.asn1.ASN1Integer getInstance();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class ASN1OctetString{
    void setEncodingContent(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerOutputStream arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.asn1.ASN1OctetString getInstance();
}
class ASN1Oid{
    void setEncodingContent(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerOutputStream arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.asn1.ASN1Oid getInstanceForString();
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.asn1.ASN1Oid getInstance();
}
class ASN1Oid$1{
    void setEncodingContent(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerOutputStream arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class ASN1Sequence{
    void setEncodingContent(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerOutputStream arg0);
}
class ASN1SequenceOf{
    void setEncodingContent(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerOutputStream arg0);
}
class ASN1Set{
    void setEncodingContent(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerOutputStream arg0);
}
class ASN1SetOf{
    void setEncodingContent(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerOutputStream arg0);
}
class ASN1StringType{
    void setEncodingContent(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerOutputStream arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class ASN1StringType$7{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class ASN1Time{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
}
class ASN1Type{
   @Source(SUSI_NO_CATEGORY)  int getEncodedLength(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerOutputStream arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] encode(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getDecodedObject(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerInputStream arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object decode(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object decode(  @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object decode(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
}
class ASN1TypeCollection{
    void getValues(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object[] arg1);
}
class ASN1UTCTime{
    void setEncodingContent(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.security.asn1.BerOutputStream arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.asn1.ASN1UTCTime getInstance();
}
class ASN1ValueCollection{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getValues(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class BerInputStream{
   @Source(SUSI_NO_CATEGORY)  byte[] getBuffer();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  int getLength(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  int getOffset();
   @Source(SUSI_NO_CATEGORY)  int getEndOffset();
   @Source(SUSI_NO_CATEGORY)  int getTagOffset();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  int getLength();
}
class BitString{
    void setBit(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}

package com.android.ex.variablespeed;

class EngineParameters{
   @Source(SUSI_NO_CATEGORY)  int getDecodeBufferMaxSize();
   @Source(SUSI_NO_CATEGORY)  int getDecodeBufferInitialSize();
   @Source(SUSI_NO_CATEGORY)  float getWindowDuration();
   @Source(SUSI_NO_CATEGORY)  int getAudioStreamType();
   @Source(SUSI_NO_CATEGORY)  int getMaxPlayBufferCount();
   @Source(SUSI_NO_CATEGORY)  int getTargetFrames();
   @Source(SUSI_NO_CATEGORY)  int getStartPositionMillis();
   @Source(SUSI_NO_CATEGORY)  float getInitialRate();
   @Source(SUSI_NO_CATEGORY)  float getWindowOverlapDuration();
}
class MediaPlayerDataSource{
    void setAsSourceFor(  @Sink(SUSI_NO_CATEGORY) android.media.MediaPlayer arg0);
}
class SingleThreadedMediaPlayerProxy{
    void setAudioStreamType(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setVariableSpeed(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  int getDuration();
   @Source(SUSI_NO_CATEGORY)  int getCurrentPosition();
}
class VariableSpeed{
   @Source(SUSI_NO_CATEGORY)  int getCurrentPosition();
   @Source(SUSI_NO_CATEGORY)  int getDuration();
}

package com.android.contacts.calllog;

class CallDetailHistoryAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  int getViewTypeCount();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Object getItem(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_CONTACT_INFORMATION)  int getCount();
   @Source(SUSI_CONTACT_INFORMATION)  long getItemId(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getItemViewType(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class CallLogAdapter{
    void bindGroupView(  @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg0, @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg1, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3, @Sink(SUSI_CONTACT_INFORMATION) boolean arg4);
    void bindStandAloneView(  @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg0, @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg1, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg2);
    void injectContactInfoForTest(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.calllog.ContactInfo arg2);
    void bindChildView(  @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg0, @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg1, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg2);
}
class CallLogFragment{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.calllog.CallLogAdapter getAdapter();
}
class CallLogListItemHelper{
    void setPhoneCallDetails(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.calllog.CallLogListItemViews arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.PhoneCallDetails arg1, @Sink(SUSI_CONTACT_INFORMATION) boolean arg2);
}
class CallLogListItemViews{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.calllog.CallLogListItemViews createForTest(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
}
class CallTypeHelper{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getCallTypeText(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Integer getHighlightedColor(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class CallTypeIconsView{
   @Source(SUSI_CONTACT_INFORMATION)  int getCount();
   @Source(SUSI_CONTACT_INFORMATION)  int getCallType(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class ClearCallLogDialog{
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Dialog onCreateDialog(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg0);
}
class ContactInfoHelper{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.calllog.ContactInfo lookupNumber(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
}
class DefaultVoicemailNotifier{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.calllog.DefaultVoicemailNotifier getInstance(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
}
class ExtendedCursor{
   @Source(SUSI_CONTACT_INFORMATION)  long getLong(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  float getFloat(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getString(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getCount();
   @Source(SUSI_CONTACT_INFORMATION)  short getShort(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  double getDouble(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getInt(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String[] getColumnNames();
}
class IntentProvider{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.calllog.IntentProvider getCallDetailIntentProvider(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.calllog.CallLogAdapter arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) long arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.calllog.IntentProvider getPlayVoicemailIntentProvider(  @Sink(SUSI_CONTACT_INFORMATION) long arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.calllog.IntentProvider getReturnCallIntentProvider(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
}
class IntentProvider$1{
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent getIntent(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
}
class IntentProvider$2{
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent getIntent(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
}
class IntentProvider$3{
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent getIntent(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
}
class PhoneNumberHelper{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getDisplayNumber(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.CharSequence arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.CharSequence arg1);
}

package com.google.android.apps.lightcycle.panorama;

class Button{
    void setPosition(  @Sink(SUSI_NO_CATEGORY) android.graphics.PointF arg0);
}
class DeviceManager{
   @Source(SUSI_NO_CATEGORY)  float getCameraFieldOfViewDegrees(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  float getOpenGlMinFieldOfViewDegrees();
   @Source(SUSI_NO_CATEGORY)  float getOpenGlDefaultFieldOfViewDegrees();
   @Source(SUSI_NO_CATEGORY)  float getOpenGlMaxFieldOfViewDegrees();
}
class IncrementalAligner{
    void addImage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) float[] arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class LightCycleNative{
    void setProgressCallback(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) com.google.android.apps.lightcycle.panorama.LightCycleView$ProgressCallback arg1);
}
class LightCycleNative$NativeUpdatePhotoRenderingCallback{
    void updateTransforms(  @Sink(SUSI_NO_CATEGORY) float[] arg0);
}
class LightCycleRenderer{
   @Source(SUSI_NO_CATEGORY)  com.google.android.apps.lightcycle.panorama.RenderedGui getRenderedGui();
   @Source(SUSI_NO_CATEGORY)  com.google.android.apps.lightcycle.panorama.Pano2dPreviewOverlay getPanoPreview2d();
}
class LightCycleView{
    void requestPhoto(  @Sink(SUSI_NO_CATEGORY) float[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setFrameDimensions(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setLocationProviderEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setLiveImageDisplay(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  com.google.android.apps.lightcycle.camera.CameraPreview getCameraPreview();
   @Source(SUSI_NO_CATEGORY)  int getTotalPhotos();
   @Source(SUSI_NO_CATEGORY)  android.hardware.Camera$PreviewCallback getPreviewCallback();
}
class MessageDisplay{
   @Source(SUSI_NO_CATEGORY)  com.google.android.apps.lightcycle.opengl.Sprite access$200(  @Sink(SUSI_NO_CATEGORY) com.google.android.apps.lightcycle.panorama.MessageDisplay arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) float arg3);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap access$100(  @Sink(SUSI_NO_CATEGORY) com.google.android.apps.lightcycle.panorama.MessageDisplay arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.graphics.Typeface arg3, @Sink(SUSI_NO_CATEGORY) float[] arg4);
}
class MessageSender{
    void notifyAll(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
}
class Pano2dPreviewOverlay{
    void setTextureId(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class PanoramaFrameOverlay{
    void setTextureId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getDrawOutlineOnly();
   @Source(SUSI_NO_CATEGORY)  int getTextureId();
}
class PhotoCollection{
   @Source(SUSI_NO_CATEGORY)  float[] getCameraToWorld(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getNumFrames();
}
class RenderedGui{
    void setDoneButtonVisible(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setUndoButtonVisible(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class StitchingService{
   @Source(SUSI_NO_CATEGORY)  android.content.ContentValues createImageContentValues(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.Uri access$700(  com.google.android.apps.lightcycle.panorama.StitchingService arg0, java.lang.String arg1, android.net.Uri arg2);
}
class StitchingServiceManager{
   @Source(SUSI_NETWORK_INFORMATION)  com.google.android.apps.lightcycle.panorama.StitchingServiceManager$StitchSession popNextSession();
   @Source(SUSI_NETWORK_INFORMATION)  com.google.android.apps.lightcycle.panorama.StitchingServiceManager getStitchingServiceManager(  android.content.Context arg0);
}
class VideoFrameProcessor{
   @Source(SUSI_NO_CATEGORY)  float[] getRotationEstimate();
}

package android.service.textservice;

class SpellCheckerService$InternalISpellCheckerSession{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getLocale();
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Bundle getBundle();
}
class SpellCheckerService$Session{
   @Source(SUSI_NETWORK_INFORMATION)  android.view.textservice.SuggestionsInfo[] onGetSuggestionsMultiple(  android.view.textservice.TextInfo[] arg0, int arg1, boolean arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getLocale();
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Bundle getBundle();
}
class SpellCheckerService$SpellCheckerServiceBinder{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.textservice.ISpellCheckerSession getISpellCheckerSession(  java.lang.String arg0, com.android.internal.textservice.ISpellCheckerSessionListener arg1, android.os.Bundle arg2);
}

package com.android.common.content;

class ProjectionMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object put(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
}

package com.android.providers.downloads;

class DownloadDrmHelper{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getOriginalMimeType(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
}
class DownloadHandler{
    void setCurrentSpeed(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  long getCurrentSpeed(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.providers.downloads.DownloadHandler getInstance();
}
class DownloadInfo{
    void notifyPauseDueToSize(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getAllDownloadsUri();
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getMyDownloadsUri();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getHeaders();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLogMessageForNetworkError(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class DownloadInfo$Reader{
   @Source(SUSI_FILE_INFORMATION)  com.android.providers.downloads.DownloadInfo newDownloadInfo(  android.content.Context arg0, com.android.providers.downloads.SystemFacade arg1);
}
class DownloadProvider{
    android.net.Uri insert(  @Sink(SUSI_LOG) android.net.Uri arg0, @Sink(SUSI_LOG) android.content.ContentValues arg1);
    int update(  @Sink(SUSI_LOG) android.net.Uri arg0, @Sink(SUSI_LOG) android.content.ContentValues arg1, @Sink(SUSI_LOG) java.lang.String arg2, @Sink(SUSI_LOG) java.lang.String[] arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor query(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4);
}
class DownloadProvider$SqlSelection{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSelection();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getParameters();
}
class DownloadReceiver{
    void onReceive(  @Sink(SUSI_LOG) android.content.Context arg0, @Sink(SUSI_LOG) android.content.Intent arg1);
}
class DownloadService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
}
class DrmConvertSession{
   @Source(SUSI_NO_CATEGORY)  byte[] convert(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class Helpers{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFullPath(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.io.File arg3);
}
class OpenHelper{
   @Source(SUSI_NO_CATEGORY)  android.content.Intent buildViewIntent(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
}
class RealSystemFacade{
    void sendBroadcast(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Long getMaxBytesOverMobile();
   @Source(SUSI_NO_CATEGORY)  java.lang.Long getRecommendedMaxBytesOverMobile();
   @Source(SUSI_NO_CATEGORY)  android.net.NetworkInfo getActiveNetworkInfo(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class StorageManager{
   @Source(SUSI_NO_CATEGORY)  com.android.providers.downloads.StorageManager getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.File getDownloadDataDirectory();
}

package com.android.browser.provider;

class BrowserProvider{
   @Source(SUSI_BROWSER_INFORMATION)  int update(  @Sink(SUSI_BROWSER_INFORMATION) android.net.Uri arg0, @Sink(SUSI_BROWSER_INFORMATION) android.content.ContentValues arg1, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg2, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String[] arg3);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getType(  @Sink(SUSI_BROWSER_INFORMATION) android.net.Uri arg0);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getClientId(  @Sink(SUSI_BROWSER_INFORMATION) android.content.ContentResolver arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.database.Cursor query(  @Sink(SUSI_BROWSER_INFORMATION) android.net.Uri arg0, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String[] arg1, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg2, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String[] arg3, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg4);
}
class BrowserProvider$MySuggestionCursor{
   @Source(SUSI_BROWSER_INFORMATION)  float getFloat(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getCount();
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String[] getColumnNames();
   @Source(SUSI_BROWSER_INFORMATION)  short getShort(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getInt(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  long getLong(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  double getDouble(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getString(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
}
class BrowserProvider2{
   @Source(SUSI_BROWSER_INFORMATION)  int updateInTransaction(  @Sink(SUSI_BROWSER_INFORMATION) android.net.Uri arg0, @Sink(SUSI_BROWSER_INFORMATION) android.content.ContentValues arg1, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg2, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String[] arg3, @Sink(SUSI_BROWSER_INFORMATION) boolean arg4);
   @Source(SUSI_BROWSER_INFORMATION)  int updateBookmarksInTransaction(  @Sink(SUSI_BROWSER_INFORMATION) android.content.ContentValues arg0, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg1, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String[] arg2, @Sink(SUSI_BROWSER_INFORMATION) boolean arg3);
   @Source(SUSI_BROWSER_INFORMATION)  android.content.ContentValues extractImageValues(  @Sink(SUSI_BROWSER_INFORMATION) android.content.ContentValues arg0, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg1);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getType(  @Sink(SUSI_BROWSER_INFORMATION) android.net.Uri arg0);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.Object[] getSelectionWithAccounts(  @Sink(SUSI_BROWSER_INFORMATION) android.net.Uri arg0, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg1, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String[] arg2);
   @Source(SUSI_BROWSER_INFORMATION)  android.database.Cursor query(  @Sink(SUSI_BROWSER_INFORMATION) android.net.Uri arg0, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String[] arg1, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg2, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String[] arg3, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg4);
   @Source(SUSI_BROWSER_INFORMATION)  android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getUrlCount(  @Sink(SUSI_BROWSER_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg1, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg2);
}
class BrowserProvider2$DatabaseHelper{
    void onUpgrade(  @Sink(SUSI_BROWSER_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_BROWSER_INFORMATION) int arg1, @Sink(SUSI_BROWSER_INFORMATION) int arg2);
    void onCreate(  @Sink(SUSI_BROWSER_INFORMATION) android.database.sqlite.SQLiteDatabase arg0);
}
class BrowserProvider2$SuggestionsCursor{
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String[] getColumnNames();
   @Source(SUSI_BROWSER_INFORMATION)  float getFloat(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getCount();
   @Source(SUSI_BROWSER_INFORMATION)  double getDouble(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getString(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  short getShort(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  long getLong(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getInt(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
}
class SQLiteContentProvider{
   @Source(SUSI_BROWSER_INFORMATION)  int update(  @Sink(SUSI_BROWSER_INFORMATION) android.net.Uri arg0, @Sink(SUSI_BROWSER_INFORMATION) android.content.ContentValues arg1, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg2, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String[] arg3);
   @Source(SUSI_BROWSER_INFORMATION)  int bulkInsert(  @Sink(SUSI_BROWSER_INFORMATION) android.net.Uri arg0, @Sink(SUSI_BROWSER_INFORMATION) android.content.ContentValues[] arg1);
   @Source(SUSI_BROWSER_INFORMATION)  android.net.Uri insert(  @Sink(SUSI_BROWSER_INFORMATION) android.net.Uri arg0, @Sink(SUSI_BROWSER_INFORMATION) android.content.ContentValues arg1);
}
class SnapshotProvider{
   @Source(SUSI_BROWSER_INFORMATION)  android.net.Uri insert(  @Sink(SUSI_BROWSER_INFORMATION) android.net.Uri arg0, @Sink(SUSI_BROWSER_INFORMATION) android.content.ContentValues arg1);
   @Source(SUSI_BROWSER_INFORMATION)  android.database.Cursor query(  @Sink(SUSI_BROWSER_INFORMATION) android.net.Uri arg0, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String[] arg1, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg2, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String[] arg3, @Sink(SUSI_BROWSER_INFORMATION) java.lang.String arg4);
   @Source(SUSI_BROWSER_INFORMATION)  android.database.sqlite.SQLiteDatabase getWritableDatabase();
   @Source(SUSI_BROWSER_INFORMATION)  java.io.File getOldDatabasePath(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String getType(  @Sink(SUSI_BROWSER_INFORMATION) android.net.Uri arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.database.sqlite.SQLiteDatabase getReadableDatabase();
}

package com.google.android.mms;

class ContentType{
   @Source(SUSI_SMS_MMS)  java.util.ArrayList getImageTypes();
   @Source(SUSI_SMS_MMS)  java.util.ArrayList getAudioTypes();
   @Source(SUSI_SMS_MMS)  java.util.ArrayList getSupportedTypes();
   @Source(SUSI_SMS_MMS)  java.util.ArrayList getVideoTypes();
}

package com.android.deskclock.timer;

class CountingTimerView{
    void setTextColor(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setTime(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTimeString();
}
class CountingTimerView$SignedTime{
    void updateWidth(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class CountingTimerView$UnsignedTime{
   @Source(SUSI_NO_CATEGORY)  float calcTotalWidth(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  float getWidth();
   @Source(SUSI_NO_CATEGORY)  float getLabelWidth();
}
class TimerFragment{
    void onSaveInstanceState(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
    void setLabel(  @Sink(SUSI_NO_CATEGORY) com.android.deskclock.timer.TimerObj arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.View onCreateView(  @Sink(SUSI_NO_CATEGORY) android.view.LayoutInflater arg0, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.deskclock.timer.TimerFragment$TimersListAdapter createAdapter(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.content.SharedPreferences arg1);
}
class TimerFragment$TimersListAdapter{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class TimerListItem{
    void setCircleBlink(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setTime(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setTextBlink(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class TimerObj{
   @Source(SUSI_NO_CATEGORY)  long getTimesupTime();
}
class TimerReceiver{
    void onReceive(  @Sink(SUSI_LOG) android.content.Context arg0, @Sink(SUSI_LOG) android.content.Intent arg1);
    void showExpiredAlarmNotification(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) com.android.deskclock.timer.TimerObj arg1);
}
class TimerView{
    void setTime(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
}

package android.accessibilityservice;

class AccessibilityService{
    boolean performGlobalAction(  @Sink(SUSI_LOG) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName startService(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
    void setWallpaper(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0);
   @Source(SUSI_NO_CATEGORY)  boolean bindService(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.content.ServiceConnection arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NETWORK_INFORMATION)  android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow();
   @Source(SUSI_NO_CATEGORY)  android.accessibilityservice.AccessibilityServiceInfo getServiceInfo();
}
class AccessibilityServiceInfo{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getDescription();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getSettingsActivityName();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getCanRetrieveWindowContent();
   @Source(SUSI_NETWORK_INFORMATION)  android.content.pm.ResolveInfo getResolveInfo();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getId();
}
class IAccessibilityServiceClient$Stub{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IAccessibilityServiceClient$Stub$Proxy{
    void onGesture(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setConnection(  @Sink(SUSI_NO_CATEGORY) android.accessibilityservice.IAccessibilityServiceConnection arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class IAccessibilityServiceConnection$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IAccessibilityServiceConnection$Stub$Proxy{
    void setServiceInfo(  @Sink(SUSI_NO_CATEGORY) android.accessibilityservice.AccessibilityServiceInfo arg0);
   @Source(SUSI_NO_CATEGORY)  boolean performAccessibilityAction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) android.view.accessibility.IAccessibilityInteractionConnectionCallback arg5, @Sink(SUSI_NO_CATEGORY) long arg6);
   @Source(SUSI_NO_CATEGORY)  float findAccessibilityNodeInfosByText(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.view.accessibility.IAccessibilityInteractionConnectionCallback arg4, @Sink(SUSI_NO_CATEGORY) long arg5);
   @Source(SUSI_NO_CATEGORY)  boolean performGlobalAction(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NETWORK_INFORMATION)  float focusSearch(  int arg0, long arg1, int arg2, int arg3, android.view.accessibility.IAccessibilityInteractionConnectionCallback arg4, long arg5);
   @Source(SUSI_NETWORK_INFORMATION)  android.accessibilityservice.AccessibilityServiceInfo getServiceInfo();
   @Source(SUSI_NETWORK_INFORMATION)  float findFocus(  int arg0, long arg1, int arg2, int arg3, android.view.accessibility.IAccessibilityInteractionConnectionCallback arg4, long arg5);
   @Source(SUSI_NO_CATEGORY)  float findAccessibilityNodeInfoByAccessibilityId(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.view.accessibility.IAccessibilityInteractionConnectionCallback arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) long arg5);
   @Source(SUSI_NO_CATEGORY)  float findAccessibilityNodeInfoByViewId(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.view.accessibility.IAccessibilityInteractionConnectionCallback arg4, @Sink(SUSI_NO_CATEGORY) long arg5);
}
class UiTestAutomationBridge{
   @Source(SUSI_NO_CATEGORY)  boolean performAccessibilityActionInActiveWindow(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
   @Source(SUSI_NO_CATEGORY)  boolean performAccessibilityAction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.view.accessibility.AccessibilityEvent getLastAccessibilityEvent();
   @Source(SUSI_NETWORK_INFORMATION)  android.view.accessibility.AccessibilityNodeInfo getRootAccessibilityNodeInfoInActiveWindow();
}

package com.android.systemui.statusbar;

class AnimatedImageView{
    void setImageResource(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setImageDrawable(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
}
class BaseStatusBar{
   @Source(SUSI_NO_CATEGORY)  boolean inflateViews(  @Sink(SUSI_NO_CATEGORY) com.android.systemui.statusbar.NotificationData$Entry arg0, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.systemui.statusbar.BaseStatusBar$H createHandler();
   @Source(SUSI_NO_CATEGORY)  android.view.View updateNotificationVetoButton(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) com.android.internal.statusbar.StatusBarNotification arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.View$OnLongClickListener getNotificationLongClicker();
   @Source(SUSI_NO_CATEGORY)  com.android.systemui.statusbar.StatusBarIconView addNotificationViews(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) com.android.internal.statusbar.StatusBarNotification arg1);
}
class CommandQueue{
    void setIcon(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) com.android.internal.statusbar.StatusBarIcon arg1);
    void setNavigationIconHints(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setHardKeyboardStatus(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setSystemUiVisibility(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class CommandQueue$H{
    void handleMessage(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
}
class DelegateViewHelper{
    void setInitialTouchRegion(  @Sink(SUSI_NO_CATEGORY) android.view.View[] arg0);
}
class NotificationData{
   @Source(SUSI_NO_CATEGORY)  boolean setUserLocked(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  boolean setUserExpanded(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.systemui.statusbar.NotificationData$Entry get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class NotificationData$Entry{
   @Source(SUSI_NO_CATEGORY)  boolean setUserExpanded(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getLargeView();
}
class StatusBarIconView{
   @Source(SUSI_NO_CATEGORY)  boolean set(  @Sink(SUSI_NO_CATEGORY) com.android.internal.statusbar.StatusBarIcon arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getIcon(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) com.android.internal.statusbar.StatusBarIcon arg1);
}

package com.android.contacts.datepicker;

class DatePicker{
    void setEnabled(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getDayOfMonth();
   @Source(SUSI_CONTACT_INFORMATION)  int getMonth();
   @Source(SUSI_CONTACT_INFORMATION)  int getYear();
}
class DatePicker$SavedState{
    void writeToParcel(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Parcel arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
   @Source(SUSI_CONTACT_INFORMATION)  int getMonth();
   @Source(SUSI_CONTACT_INFORMATION)  int getYear();
   @Source(SUSI_CONTACT_INFORMATION)  int getDay();
}

package com.android.gallery3d.filtershow.provider;

class SharedImageProvider{
   @Source(SUSI_IMAGE)  java.lang.String getType(  android.net.Uri arg0);
   @Source(SUSI_IMAGE)  java.lang.String[] getStreamTypes(  android.net.Uri arg0, java.lang.String arg1);
}

package com.android.exchange.adapter;

class AbstractSyncAdapter{
    void setPimSyncOptions(  @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.Double arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) com.android.exchange.adapter.Serializer arg2);
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.lang.String getSyncKey();
   @Source(SUSI_NO_CATEGORY)  android.content.ContentProviderResult[] safeExecute(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.ArrayList arg1);
}
class AccountSyncAdapter{
    void sendSyncOptions(  @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.Double arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) com.android.exchange.adapter.Serializer arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  boolean sendLocalChanges(  @Sink(SUSI_NO_CATEGORY) com.android.exchange.adapter.Serializer arg0);
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.lang.String getSyncKey();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCollectionName();
}
class AttachmentLoader{
    void readChunked(  @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg0, @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class CalendarSyncAdapter{
    void sendSyncOptions(  @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.Double arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) com.android.exchange.adapter.Serializer arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) boolean arg2);
    boolean sendLocalChanges(  @Sink(SUSI_LOG) com.android.exchange.adapter.Serializer arg0);
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.lang.String getSyncKey();
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String getCollectionName();
}
class CalendarSyncAdapter$CalendarOperations{
    void updatedAttendee(  @Sink(SUSI_NO_CATEGORY) android.content.ContentValues arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
}
class CalendarSyncAdapter$EasCalendarSyncParser{
    void setTimeRelatedValues(  @Sink(SUSI_NO_CATEGORY) android.content.ContentValues arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void addEvent(  @Sink(SUSI_NO_CATEGORY) com.android.exchange.adapter.CalendarSyncAdapter$CalendarOperations arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
}
class ContactsSyncAdapter{
    void sendSyncOptions(  @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.Double arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) com.android.exchange.adapter.Serializer arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  boolean sendLocalChanges(  @Sink(SUSI_NO_CATEGORY) com.android.exchange.adapter.Serializer arg0);
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.lang.String getSyncKey();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getCollectionName();
}
class ContactsSyncAdapter$ContactOperations{
    void newContact(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.exchange.adapter.ContactsSyncAdapter$RowBuilder createBuilder(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Entity arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) int arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg3);
}
class EmailSyncAdapter{
    void sendSyncOptions(  @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.Double arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) com.android.exchange.adapter.Serializer arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  boolean sendLocalChanges(  @Sink(SUSI_NO_CATEGORY) com.android.exchange.adapter.Serializer arg0);
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.lang.String getSyncKey();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCollectionName();
}
class EmailSyncAdapter$EasEmailSyncParser{
    void addData(  @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.provider.EmailContent$Message arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMimeTypeFromFileName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class GalParser{
   @Source(SUSI_NO_CATEGORY)  com.android.exchange.provider.GalResult getGalResult();
}
class ItemOperationsParser{
   @Source(SUSI_NO_CATEGORY)  int getStatusCode();
}
class MoveItemsParser{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNewServerId();
   @Source(SUSI_NO_CATEGORY)  int getStatusCode();
}
class Parser{
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInput();
   @Source(SUSI_NO_CATEGORY)  int getValueInt();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue();
   @Source(SUSI_NO_CATEGORY)  byte[] getValueBytes();
}
class PingParser{
   @Source(SUSI_SYNCHRONIZATION_DATA)  int getSyncStatus();
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.util.ArrayList getSyncList();
}
class ProvisionParser{
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.lang.String getSecuritySyncKey();
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.provider.Policy getPolicy();
   @Source(SUSI_NO_CATEGORY)  boolean getRemoteWipe();
}
class Search{
   @Source(SUSI_NO_CATEGORY)  int searchMessages(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.service.SearchParams arg2, @Sink(SUSI_NO_CATEGORY) long arg3);
}
class Search$SearchParser{
   @Source(SUSI_NO_CATEGORY)  int getTotalResults();
}
class Serializer{
    com.android.exchange.adapter.Serializer text(  @Sink(SUSI_LOG) java.lang.String arg0);
    com.android.exchange.adapter.Serializer data(  @Sink(SUSI_LOG) int arg0, @Sink(SUSI_LOG) java.lang.String arg1);
    void writeLiteralString(  @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.exchange.adapter.Serializer opaque(  @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.exchange.adapter.Serializer opaqueWithoutData(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.exchange.adapter.Serializer tag(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] toByteArray();
}

package com.google.android.apps.lightcycle.shaders;

class GroundPlaneShader{
    void setColor(  @Sink(SUSI_NO_CATEGORY) float[] arg0);
}
class ScaledTransparencyShader{
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class TargetShader{
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setContrastFactor(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class TransparencyShader{
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) float arg0);
}

package com.coremedia.iso.boxes.fragment;

class MovieFragmentBox{
   @Source(SUSI_NO_CATEGORY)  long getOffset();
}
class TrackExtendsBox{
   @Source(SUSI_NO_CATEGORY)  long getDefaultSampleDuration();
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.fragment.SampleFlags getDefaultSampleFlags();
   @Source(SUSI_NO_CATEGORY)  long getDefaultSampleSize();
   @Source(SUSI_NO_CATEGORY)  long getContentSize();
   @Source(SUSI_NO_CATEGORY)  long getTrackId();
}
class TrackFragmentBox{
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.fragment.TrackFragmentHeaderBox getTrackFragmentHeaderBox();
}
class TrackFragmentHeaderBox{
   @Source(SUSI_NO_CATEGORY)  long getTrackId();
   @Source(SUSI_NO_CATEGORY)  long getSampleDescriptionIndex();
   @Source(SUSI_NO_CATEGORY)  long getDefaultSampleSize();
   @Source(SUSI_NO_CATEGORY)  long getBaseDataOffset();
   @Source(SUSI_NO_CATEGORY)  long getContentSize();
   @Source(SUSI_NO_CATEGORY)  long getDefaultSampleDuration();
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.fragment.SampleFlags getDefaultSampleFlags();
}
class TrackRunBox{
   @Source(SUSI_NO_CATEGORY)  java.util.List getEntries();
   @Source(SUSI_NO_CATEGORY)  int getDataOffset();
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.fragment.SampleFlags getFirstSampleFlags();
   @Source(SUSI_NO_CATEGORY)  long getContentSize();
}
class TrackRunBox$Entry{
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.fragment.SampleFlags getSampleFlags();
   @Source(SUSI_NO_CATEGORY)  int getSampleCompositionTimeOffset();
   @Source(SUSI_NO_CATEGORY)  long getSampleDuration();
   @Source(SUSI_NO_CATEGORY)  long getSampleSize();
}

package gov.nist.javax.sip;

class DialogFilter{
    void processResponse(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPResponse arg0, @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.stack.MessageChannel arg1);
    void processResponse(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPResponse arg0, @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.stack.MessageChannel arg1, @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.stack.SIPDialog arg2);
    void processRequest(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPRequest arg0, @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.stack.MessageChannel arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProcessingInfo();
}
class DialogTimeoutEvent{
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.DialogTimeoutEvent$Reason getReason();
   @Source(SUSI_NO_CATEGORY)  javax.sip.Dialog getDialog();
}
class ListeningPointImpl{
    void setSentBy(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void sendHeartbeat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTransport();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSentBy();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.SipProviderImpl getProvider();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.Via getViaHeader();
   @Source(SUSI_NO_CATEGORY)  int getPort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getIPAddress();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getKey();
}
class NistSipMessageFactoryImpl{
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.ServerRequestInterface newSIPServerRequest(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPRequest arg0, @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.stack.MessageChannel arg1);
}
class ResponseEventExt{
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.ClientTransactionExt getOriginalTransaction();
}
class SipProviderImpl{
    void setListeningPoint(  @Sink(SUSI_NO_CATEGORY) javax.sip.ListeningPoint arg0);
    void sendRequest(  @Sink(SUSI_NO_CATEGORY) javax.sip.message.Request arg0);
    void sendResponse(  @Sink(SUSI_NO_CATEGORY) javax.sip.message.Response arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.Dialog getNewDialog(  @Sink(SUSI_NO_CATEGORY) javax.sip.Transaction arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.ServerTransaction getNewServerTransaction(  @Sink(SUSI_NO_CATEGORY) javax.sip.message.Request arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.ListeningPoint getListeningPoint(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.SipListener getSipListener();
   @Source(SUSI_NO_CATEGORY)  javax.sip.ListeningPoint getListeningPoint();
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.CallIdHeader getNewCallId();
   @Source(SUSI_NO_CATEGORY)  javax.sip.ClientTransaction getNewClientTransaction(  @Sink(SUSI_NO_CATEGORY) javax.sip.message.Request arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.ListeningPoint[] getListeningPoints();
   @Source(SUSI_NO_CATEGORY)  javax.sip.SipStack getSipStack();
}
class SipStackImpl{
   @Source(SUSI_NO_CATEGORY)  javax.sip.ListeningPoint createListeningPoint(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String[] getEnabledProtocols();
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String[] getEnabledCipherSuites();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getIPAddress();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.clientauthutils.AuthenticationHelper getAuthenticationHelper(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.clientauthutils.AccountManager arg0, @Sink(SUSI_NO_CATEGORY) javax.sip.header.HeaderFactory arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator getSipProviders();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.LogRecordFactory getLogRecordFactory();
   @Source(SUSI_NO_CATEGORY)  javax.sip.SipProvider createSipProvider(  @Sink(SUSI_NO_CATEGORY) javax.sip.ListeningPoint arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.EventScanner getEventScanner();
   @Source(SUSI_NO_CATEGORY)  javax.sip.SipListener getSipListener();
   @Source(SUSI_NO_CATEGORY)  javax.sip.ListeningPoint createListeningPoint(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator getListeningPoints();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getStackName();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.clientauthutils.AuthenticationHelper getSecureAuthenticationHelper(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.clientauthutils.SecureAccountManager arg0, @Sink(SUSI_NO_CATEGORY) javax.sip.header.HeaderFactory arg1);
}
class Utils{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getQuotedString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.Utils getInstance();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSignature();
}

package org.apache.james.mime4j.field.datetime;

class DateTime{
   @Source(SUSI_NO_CATEGORY)  java.util.Date getDate();
}

package org.apache.http.impl.client;

class AbstractAuthenticationHandler{
   @Source(SUSI_NO_CATEGORY)  java.util.Map parseChallenges(  @Sink(SUSI_NO_CATEGORY) org.apache.http.Header[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getAuthPreferences();
}
class AbstractHttpClient{
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.ConnectionReuseStrategy getConnectionReuseStrategy();
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.conn.ClientConnectionManager getConnectionManager();
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.conn.ConnectionKeepAliveStrategy getConnectionKeepAliveStrategy();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.client.RedirectHandler getRedirectHandler();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.auth.AuthSchemeRegistry getAuthSchemes();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpResponseInterceptor getResponseInterceptor(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.client.UserTokenHandler getUserTokenHandler();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.protocol.BasicHttpProcessor getHttpProcessor();
   @Source(SUSI_NO_CATEGORY)  int getResponseInterceptorCount();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.client.AuthenticationHandler getProxyAuthenticationHandler();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.client.CookieStore getCookieStore();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.client.HttpRequestRetryHandler getHttpRequestRetryHandler();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.client.RequestDirector createClientRequestDirector(  @Sink(SUSI_NO_CATEGORY) org.apache.http.protocol.HttpRequestExecutor arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.conn.ClientConnectionManager arg1, @Sink(SUSI_NO_CATEGORY) org.apache.http.ConnectionReuseStrategy arg2, @Sink(SUSI_NO_CATEGORY) org.apache.http.conn.ConnectionKeepAliveStrategy arg3, @Sink(SUSI_NO_CATEGORY) org.apache.http.conn.routing.HttpRoutePlanner arg4, @Sink(SUSI_NO_CATEGORY) org.apache.http.protocol.HttpProcessor arg5, @Sink(SUSI_NO_CATEGORY) org.apache.http.client.HttpRequestRetryHandler arg6, @Sink(SUSI_NO_CATEGORY) org.apache.http.client.RedirectHandler arg7, @Sink(SUSI_NO_CATEGORY) org.apache.http.client.AuthenticationHandler arg8, @Sink(SUSI_NO_CATEGORY) org.apache.http.client.AuthenticationHandler arg9, @Sink(SUSI_NO_CATEGORY) org.apache.http.client.UserTokenHandler arg10, @Sink(SUSI_NO_CATEGORY) org.apache.http.params.HttpParams arg11);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpRequestInterceptor getRequestInterceptor(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.params.HttpParams getParams();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.cookie.CookieSpecRegistry getCookieSpecs();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.protocol.HttpRequestExecutor getRequestExecutor();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.client.AuthenticationHandler getTargetAuthenticationHandler();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpResponse execute(  @Sink(SUSI_NO_CATEGORY) org.apache.http.HttpHost arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.HttpRequest arg1, @Sink(SUSI_NO_CATEGORY) org.apache.http.protocol.HttpContext arg2);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.client.CredentialsProvider getCredentialsProvider();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.conn.routing.HttpRoutePlanner getRoutePlanner();
   @Source(SUSI_NO_CATEGORY)  int getRequestInterceptorCount();
}
class BasicCookieStore{
   @Source(SUSI_NO_CATEGORY)  java.util.List getCookies();
}
class BasicCredentialsProvider{
    void setCredentials(  @Sink(SUSI_NO_CATEGORY) org.apache.http.auth.AuthScope arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.auth.Credentials arg1);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.auth.Credentials getCredentials(  @Sink(SUSI_NO_CATEGORY) org.apache.http.auth.AuthScope arg0);
}
class ClientParamsStack{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.params.HttpParams setParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.params.HttpParams getClientParams();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.params.HttpParams getRequestParams();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.params.HttpParams getApplicationParams();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.params.HttpParams getOverrideParams();
}
class DefaultConnectionKeepAliveStrategy{
   @Source(SUSI_NO_CATEGORY)  long getKeepAliveDuration(  @Sink(SUSI_NO_CATEGORY) org.apache.http.HttpResponse arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.protocol.HttpContext arg1);
}
class DefaultHttpRequestRetryHandler{
   @Source(SUSI_NO_CATEGORY)  int getRetryCount();
}
class DefaultProxyAuthenticationHandler{
   @Source(SUSI_NO_CATEGORY)  java.util.Map getChallenges(  @Sink(SUSI_NO_CATEGORY) org.apache.http.HttpResponse arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.protocol.HttpContext arg1);
}
class DefaultRedirectHandler{
   @Source(SUSI_FILE_INFORMATION)  java.net.URI getLocationURI(  org.apache.http.HttpResponse arg0, org.apache.http.protocol.HttpContext arg1);
}
class DefaultRequestDirector{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.impl.client.RoutedRequest handleResponse(  @Sink(SUSI_NO_CATEGORY) org.apache.http.impl.client.RoutedRequest arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.HttpResponse arg1, @Sink(SUSI_NO_CATEGORY) org.apache.http.protocol.HttpContext arg2);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpResponse execute(  @Sink(SUSI_NO_CATEGORY) org.apache.http.HttpHost arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.HttpRequest arg1, @Sink(SUSI_NO_CATEGORY) org.apache.http.protocol.HttpContext arg2);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.conn.routing.HttpRoute determineRoute(  @Sink(SUSI_NO_CATEGORY) org.apache.http.HttpHost arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.HttpRequest arg1, @Sink(SUSI_NO_CATEGORY) org.apache.http.protocol.HttpContext arg2);
}
class DefaultTargetAuthenticationHandler{
   @Source(SUSI_NO_CATEGORY)  java.util.Map getChallenges(  @Sink(SUSI_NO_CATEGORY) org.apache.http.HttpResponse arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.protocol.HttpContext arg1);
}
class DefaultUserTokenHandler{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getUserToken(  @Sink(SUSI_NO_CATEGORY) org.apache.http.protocol.HttpContext arg0);
}
class EntityEnclosingRequestWrapper{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpEntity getEntity();
}
class RequestWrapper{
   @Source(SUSI_FILE_INFORMATION)  java.net.URI getURI();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMethod();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.RequestLine getRequestLine();
   @Source(SUSI_NO_CATEGORY)  int getExecCount();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpRequest getOriginal();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.ProtocolVersion getProtocolVersion();
}
class RoutedRequest{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.impl.client.RequestWrapper getRequest();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.conn.routing.HttpRoute getRoute();
}
class TunnelRefusedException{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpResponse getResponse();
}

package com.android.exchange.utility;

class CalendarUtilities{
    com.android.emailcommon.provider.EmailContent$Message createMessageForEntity(  @Sink(SUSI_LOG) android.content.Context arg0, @Sink(SUSI_LOG) android.content.Entity arg1, @Sink(SUSI_LOG) int arg2, @Sink(SUSI_LOG) java.lang.String arg3, @Sink(SUSI_LOG) com.android.emailcommon.provider.Account arg4, @Sink(SUSI_LOG) java.lang.String arg5);
   @Source(SUSI_NO_CATEGORY)  long createCalendar(  @Sink(SUSI_NO_CATEGORY) com.android.exchange.EasSyncService arg0, @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.provider.Account arg1, @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.provider.Mailbox arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String timeZoneToTziString(  @Sink(SUSI_NO_CATEGORY) java.util.TimeZone arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.TimeZone tziStringToTimeZone(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_CALENDAR_INFORMATION)  com.android.exchange.utility.CalendarUtilities$TimeZoneDate getTimeZoneDateFromSystemTime(  @Sink(SUSI_CALENDAR_INFORMATION) byte[] arg0, @Sink(SUSI_CALENDAR_INFORMATION) int arg1);
   @Source(SUSI_CALENDAR_INFORMATION)  com.android.emailcommon.provider.EmailContent$Message createMessageForEventId(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) long arg1, @Sink(SUSI_CALENDAR_INFORMATION) int arg2, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg3, @Sink(SUSI_CALENDAR_INFORMATION) com.android.emailcommon.provider.Account arg4);
   @Source(SUSI_CALENDAR_INFORMATION)  int getTrueTransitionHour(  @Sink(SUSI_CALENDAR_INFORMATION) java.util.GregorianCalendar arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String getString(  @Sink(SUSI_CALENDAR_INFORMATION) byte[] arg0, @Sink(SUSI_CALENDAR_INFORMATION) int arg1, @Sink(SUSI_CALENDAR_INFORMATION) int arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  com.android.emailcommon.provider.EmailContent$Message createMessageForEntity(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.content.Entity arg1, @Sink(SUSI_CALENDAR_INFORMATION) int arg2, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg3, @Sink(SUSI_CALENDAR_INFORMATION) com.android.emailcommon.provider.Account arg4);
   @Source(SUSI_CALENDAR_INFORMATION)  int getWord(  @Sink(SUSI_CALENDAR_INFORMATION) byte[] arg0, @Sink(SUSI_CALENDAR_INFORMATION) int arg1);
   @Source(SUSI_CALENDAR_INFORMATION)  long getUtcAllDayCalendarTime(  @Sink(SUSI_CALENDAR_INFORMATION) long arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.util.TimeZone arg1);
   @Source(SUSI_CALENDAR_INFORMATION)  int getTrueTransitionMinute(  @Sink(SUSI_CALENDAR_INFORMATION) java.util.GregorianCalendar arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  long getLocalAllDayCalendarTime(  @Sink(SUSI_CALENDAR_INFORMATION) long arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.util.TimeZone arg1);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String getUidFromGlobalObjId(  @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  boolean getDSTCalendars(  @Sink(SUSI_CALENDAR_INFORMATION) java.util.TimeZone arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.util.GregorianCalendar[] arg1, @Sink(SUSI_CALENDAR_INFORMATION) java.util.GregorianCalendar[] arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  com.android.emailcommon.provider.EmailContent$Message createMessageForEventId(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) long arg1, @Sink(SUSI_CALENDAR_INFORMATION) int arg2, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg3, @Sink(SUSI_CALENDAR_INFORMATION) com.android.emailcommon.provider.Account arg4, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg5);
   @Source(SUSI_CALENDAR_INFORMATION)  int getLong(  @Sink(SUSI_CALENDAR_INFORMATION) byte[] arg0, @Sink(SUSI_CALENDAR_INFORMATION) int arg1);
   @Source(SUSI_CALENDAR_INFORMATION)  long getMillisAtTimeZoneDateTransition(  @Sink(SUSI_CALENDAR_INFORMATION) java.util.TimeZone arg0, @Sink(SUSI_CALENDAR_INFORMATION) com.android.exchange.utility.CalendarUtilities$TimeZoneDate arg1);
}
class SimpleIcsWriter{
    void writeLine(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void writeTag(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] getBytes();
}

package com.android.server.display;

class DisplayAdapter{
    void dumpLocked(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0);
   @Source(SUSI_SYNCHRONIZATION_DATA)  com.android.server.display.DisplayManagerService$SyncRoot getSyncRoot();
   @Source(SUSI_NO_CATEGORY)  android.os.Handler getHandler();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
}
class DisplayDevice{
    void dumpLocked(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder getDisplayTokenLocked();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNameLocked();
   @Source(SUSI_NO_CATEGORY)  com.android.server.display.DisplayAdapter getAdapterLocked();
}
class DisplayDeviceInfo{
    void setAssumedDensityForExternalDisplay(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class DisplayManagerService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void setDisplayHasContent(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void setDisplayInfoOverrideFromWindowManager(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.DisplayInfo arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.view.DisplayInfo getDisplayInfo(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int[] getDisplayIds();
   @Source(SUSI_NETWORK_INFORMATION)  android.hardware.display.WifiDisplayStatus getWifiDisplayStatus();
}
class DisplayManagerService$CallbackRecord{
    void notifyDisplayEventAsync(  @Sink(SUSI_SYNCHRONIZATION_DATA) int arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) int arg1);
}
class HeadlessDisplayAdapter$HeadlessDisplayDevice{
   @Source(SUSI_NO_CATEGORY)  com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked();
}
class LocalDisplayAdapter$LocalDisplayDevice{
    void dumpLocked(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked();
}
class LogicalDisplay{
    void setDisplayInfoOverrideFromWindowManagerLocked(  @Sink(SUSI_NO_CATEGORY) android.view.DisplayInfo arg0);
    void dumpLocked(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.DisplayInfo getDisplayInfoLocked();
   @Source(SUSI_NO_CATEGORY)  int getDisplayIdLocked();
   @Source(SUSI_NO_CATEGORY)  com.android.server.display.DisplayDevice getPrimaryDisplayDeviceLocked();
}
class OverlayDisplayAdapter{
    void dumpLocked(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0);
}
class OverlayDisplayAdapter$OverlayDisplayDevice{
   @Source(SUSI_NO_CATEGORY)  com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked();
}
class OverlayDisplayAdapter$OverlayDisplayHandle{
    void dumpLocked(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0);
}
class OverlayDisplayWindow{
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0);
}
class PersistentDataStore{
   @Source(SUSI_NO_CATEGORY)  android.hardware.display.WifiDisplay[] getRememberedWifiDisplays();
   @Source(SUSI_NO_CATEGORY)  android.hardware.display.WifiDisplay getRememberedWifiDisplay(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class WifiDisplayAdapter{
    void dumpLocked(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0);
   @Source(SUSI_NO_CATEGORY)  android.hardware.display.WifiDisplayStatus getWifiDisplayStatusLocked();
}
class WifiDisplayAdapter$WifiDisplayDevice{
   @Source(SUSI_NO_CATEGORY)  com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked();
}
class WifiDisplayController{
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0);
   @Source(SUSI_NO_CATEGORY)  android.hardware.display.WifiDisplay access$2200(  @Sink(SUSI_NO_CATEGORY) android.net.wifi.p2p.WifiP2pDevice arg0);
}

package android.text.method;

class AllCapsTransformationMethod{
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTransformation(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1);
}
class ArrowKeyMovementMethod{
   @Source(SUSI_NO_CATEGORY)  android.text.method.MovementMethod getInstance();
}
class BaseMovementMethod{
   @Source(SUSI_NO_CATEGORY)  int getMovementMetaState(  @Sink(SUSI_NO_CATEGORY) android.text.Spannable arg0, @Sink(SUSI_NO_CATEGORY) android.view.KeyEvent arg1);
}
class CharacterPickerDialog$OptionsAdapter{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class DateKeyListener{
   @Source(SUSI_NO_CATEGORY)  char[] getAcceptedChars();
   @Source(SUSI_NO_CATEGORY)  android.text.method.DateKeyListener getInstance();
   @Source(SUSI_NO_CATEGORY)  int getInputType();
}
class DateTimeKeyListener{
   @Source(SUSI_NO_CATEGORY)  char[] getAcceptedChars();
   @Source(SUSI_NO_CATEGORY)  android.text.method.DateTimeKeyListener getInstance();
   @Source(SUSI_NO_CATEGORY)  int getInputType();
}
class DialerKeyListener{
   @Source(SUSI_NO_CATEGORY)  char[] getAcceptedChars();
   @Source(SUSI_NO_CATEGORY)  android.text.method.DialerKeyListener getInstance();
   @Source(SUSI_NO_CATEGORY)  int getInputType();
}
class DigitsKeyListener{
   @Source(SUSI_NO_CATEGORY)  int getInputType();
   @Source(SUSI_NO_CATEGORY)  char[] getAcceptedChars();
   @Source(SUSI_NO_CATEGORY)  android.text.method.DigitsKeyListener getInstance();
   @Source(SUSI_NO_CATEGORY)  android.text.method.DigitsKeyListener getInstance(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  android.text.method.DigitsKeyListener getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class HideReturnsTransformationMethod{
   @Source(SUSI_NO_CATEGORY)  char[] getOriginal();
   @Source(SUSI_NO_CATEGORY)  android.text.method.HideReturnsTransformationMethod getInstance();
   @Source(SUSI_NO_CATEGORY)  char[] getReplacement();
}
class LinkMovementMethod{
   @Source(SUSI_NO_CATEGORY)  android.text.method.MovementMethod getInstance();
}
class MetaKeyKeyListener{
   @Source(SUSI_NO_CATEGORY)  int getMetaState(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  int getMetaState(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class MultiTapKeyListener{
   @Source(SUSI_NO_CATEGORY)  int getInputType();
   @Source(SUSI_NO_CATEGORY)  android.text.method.MultiTapKeyListener getInstance(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) android.text.method.TextKeyListener$Capitalize arg1);
}
class PasswordTransformationMethod{
   @Source(SUSI_NO_CATEGORY)  android.text.method.PasswordTransformationMethod getInstance();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTransformation(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1);
}
class QwertyKeyListener{
   @Source(SUSI_NO_CATEGORY)  android.text.method.QwertyKeyListener getInstance(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) android.text.method.TextKeyListener$Capitalize arg1);
   @Source(SUSI_NO_CATEGORY)  android.text.method.QwertyKeyListener getInstanceForFullKeyboard();
   @Source(SUSI_NO_CATEGORY)  int getInputType();
}
class ReplacementTransformationMethod{
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTransformation(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1);
}
class ReplacementTransformationMethod$SpannedReplacementCharSequence{
   @Source(SUSI_NO_CATEGORY)  int getSpanEnd(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] getSpans(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Class arg2);
   @Source(SUSI_NO_CATEGORY)  int getSpanStart(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  int getSpanFlags(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class ScrollingMovementMethod{
   @Source(SUSI_NO_CATEGORY)  android.text.method.MovementMethod getInstance();
}
class SingleLineTransformationMethod{
   @Source(SUSI_NO_CATEGORY)  android.text.method.SingleLineTransformationMethod getInstance();
   @Source(SUSI_NO_CATEGORY)  char[] getReplacement();
   @Source(SUSI_NO_CATEGORY)  char[] getOriginal();
}
class TextKeyListener{
   @Source(SUSI_NO_CATEGORY)  android.text.method.TextKeyListener getInstance(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) android.text.method.TextKeyListener$Capitalize arg1);
   @Source(SUSI_NO_CATEGORY)  android.text.method.TextKeyListener getInstance();
   @Source(SUSI_NO_CATEGORY)  int getPrefs(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  int getInputType();
}
class TextKeyListener$NullKeyListener{
   @Source(SUSI_NO_CATEGORY)  android.text.method.TextKeyListener$NullKeyListener getInstance();
   @Source(SUSI_NO_CATEGORY)  int getInputType();
}
class TimeKeyListener{
   @Source(SUSI_NO_CATEGORY)  char[] getAcceptedChars();
   @Source(SUSI_NO_CATEGORY)  int getInputType();
   @Source(SUSI_NO_CATEGORY)  android.text.method.TimeKeyListener getInstance();
}
class Touch{
   @Source(SUSI_NO_CATEGORY)  int getInitialScrollY(  @Sink(SUSI_NO_CATEGORY) android.widget.TextView arg0, @Sink(SUSI_NO_CATEGORY) android.text.Spannable arg1);
   @Source(SUSI_NO_CATEGORY)  int getInitialScrollX(  @Sink(SUSI_NO_CATEGORY) android.widget.TextView arg0, @Sink(SUSI_NO_CATEGORY) android.text.Spannable arg1);
}
class WordIterator{
   @Source(SUSI_NO_CATEGORY)  int getEnd(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getBeginning(  @Sink(SUSI_NO_CATEGORY) int arg0);
}

package com.android.inputmethod.latin.suggestions;

class MoreSuggestions$Divider{
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getIcon(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.internal.KeyboardIconsSet arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class MoreSuggestions$MoreSuggestionsParam{
   @Source(SUSI_NO_CATEGORY)  int getNumColumnInRow(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getColumnNumber(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getX(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getY(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getWidth(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class MoreSuggestionsView{
    void setKeyPreviewPopupEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void updateKeyboardGeometry(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setKeyboard(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.Keyboard arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.KeyboardActionListener getKeyboardActionListener();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.KeyDetector getKeyDetector();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.PointerTracker$TimerProxy getTimerProxy();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.PointerTracker$DrawingProxy getDrawingProxy();
}
class MoreSuggestionsView$2{
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.KeyDetector getKeyDetector();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.PointerTracker$DrawingProxy getDrawingProxy();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.PointerTracker$TimerProxy getTimerProxy();
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.keyboard.KeyboardActionListener getKeyboardActionListener();
}
class SuggestionStripView{
   @Source(SUSI_NO_CATEGORY)  int setMoreSuggestionsHeight(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.latin.SuggestedWords getSuggestions();
}
class SuggestionStripView$SuggestionStripViewParams{
   @Source(SUSI_NO_CATEGORY)  int setMoreSuggestionsHeight(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getMaxMoreSuggestionsRow();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getAddToDictionaryWord();
}

package com.android.server.connectivity;

class Tethering{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void interfaceAdded(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void interfaceStatusChanged(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  int setUsbTethering(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getTetherableUsbRegexs();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getTetherableWifiRegexs();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getTetheredIfaces();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getTetherableIfaces();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getErroredIfaces();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getTetheredIfacePairs();
   @Source(SUSI_NETWORK_INFORMATION)  int[] getUpstreamIfaceTypes();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String[] getTetherableBluetoothRegexs();
   @Source(SUSI_NO_CATEGORY)  int getLastTetherError(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class Tethering$TetherInterfaceSM{
    void setLastErrorAndTransitionToInitialState(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getLastError();
}
class Tethering$TetherInterfaceSM$InitialState{
    boolean processMessage(  @Sink(SUSI_LOG) android.os.Message arg0);
}
class Tethering$TetherInterfaceSM$StartingState{
    boolean processMessage(  @Sink(SUSI_LOG) android.os.Message arg0);
}
class Tethering$TetherInterfaceSM$TetheredState{
    boolean processMessage(  @Sink(SUSI_LOG) android.os.Message arg0);
}
class Tethering$TetherInterfaceSM$UnavailableState{
   @Source(SUSI_NO_CATEGORY)  boolean processMessage(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
}
class Tethering$TetherMasterSM$ErrorState{
    void notify(  @Sink(SUSI_PHONE_CONNECTION) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean processMessage(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
}
class Tethering$TetherMasterSM$InitialState{
    boolean turnOnUpstreamMobileConnection(  @Sink(SUSI_PHONE_CONNECTION) int arg0);
}
class Tethering$TetherMasterSM$TetherMasterUtilState{
    void notifyTetheredOfNewUpstreamIface(  @Sink(SUSI_PHONE_CONNECTION) java.lang.String arg0);
    boolean turnOnUpstreamMobileConnection(  @Sink(SUSI_PHONE_CONNECTION) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean processMessage(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
}
class Tethering$TetherMasterSM$TetherModeAliveState{
    boolean turnOnUpstreamMobileConnection(  @Sink(SUSI_PHONE_CONNECTION) int arg0);
    boolean processMessage(  @Sink(SUSI_LOG) android.os.Message arg0);
}
class Vpn{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.net.VpnConfig getLegacyVpnConfig();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getTcpBufferSizesPropName();
   @Source(SUSI_NO_CATEGORY)  android.os.ParcelFileDescriptor establish(  @Sink(SUSI_NO_CATEGORY) com.android.internal.net.VpnConfig arg0);
}

package com.android.internal.widget.multiwaveview;

class Ease$Cubic$1{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Cubic$2{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Cubic$3{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Linear$1{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Quad$1{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Quad$2{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Quad$3{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Quart$1{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Quart$2{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Quart$3{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Quint$1{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Quint$2{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Quint$3{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Sine$1{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Sine$2{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Sine$3{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class GlowPadView{
    void setVibrateEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setEnableTarget(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  int getTargetDescriptionsResourceId();
   @Source(SUSI_NO_CATEGORY)  int getSuggestedMinimumHeight();
   @Source(SUSI_NO_CATEGORY)  int getScaledSuggestedMinimumWidth();
   @Source(SUSI_NO_CATEGORY)  int getTargetPosition(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getTargetResourceId();
   @Source(SUSI_NO_CATEGORY)  int getDirectionDescriptionsResourceId();
   @Source(SUSI_NO_CATEGORY)  int getSuggestedMinimumWidth();
   @Source(SUSI_NO_CATEGORY)  int getScaledSuggestedMinimumHeight();
}
class MultiWaveView{
    void setVibrateEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setEnableTarget(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  int getTargetPosition(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getSuggestedMinimumHeight();
   @Source(SUSI_NO_CATEGORY)  int getDirectionDescriptionsResourceId();
   @Source(SUSI_NO_CATEGORY)  int getTargetResourceId();
   @Source(SUSI_NO_CATEGORY)  int getTargetDescriptionsResourceId();
   @Source(SUSI_NO_CATEGORY)  int getSuggestedMinimumWidth();
}
class PointCloud{
   @Source(SUSI_NO_CATEGORY)  float getScale();
   @Source(SUSI_NO_CATEGORY)  int getAlphaForPoint(  @Sink(SUSI_NO_CATEGORY) com.android.internal.widget.multiwaveview.PointCloud$Point arg0);
}
class PointCloud$GlowManager{
   @Source(SUSI_NO_CATEGORY)  float getRadius();
   @Source(SUSI_NO_CATEGORY)  float getAlpha();
   @Source(SUSI_NO_CATEGORY)  float getY();
   @Source(SUSI_NO_CATEGORY)  float getX();
}
class PointCloud$WaveManager{
   @Source(SUSI_NO_CATEGORY)  float getRadius();
   @Source(SUSI_NO_CATEGORY)  float getAlpha();
}
class TargetDrawable{
    void setDrawable(  @Sink(SUSI_NO_CATEGORY) android.content.res.Resources arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setState(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  int getResourceId();
   @Source(SUSI_NO_CATEGORY)  float getAlpha();
   @Source(SUSI_NO_CATEGORY)  float getPositionY();
   @Source(SUSI_NO_CATEGORY)  float getPositionX();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  float getScaleY();
   @Source(SUSI_NO_CATEGORY)  float getScaleX();
   @Source(SUSI_NO_CATEGORY)  float getY();
   @Source(SUSI_NO_CATEGORY)  float getX();
}
class TargetDrawable$DrawableWithAlpha{
    void setColorFilter(  @Sink(SUSI_NO_CATEGORY) android.graphics.ColorFilter arg0);
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getAlpha();
   @Source(SUSI_NO_CATEGORY)  int getOpacity();
}

package com.google.android.gms.common.internal;

class GmsClient{
   @Source(SUSI_NO_CATEGORY)  android.os.IInterface getService();
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList access$100(  @Sink(SUSI_NO_CATEGORY) com.google.android.gms.common.internal.GmsClient arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList access$200(  @Sink(SUSI_NO_CATEGORY) com.google.android.gms.common.internal.GmsClient arg0);
}
class IGmsCallbacks$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IGmsCallbacks$Stub$Proxy{
    void onPostInitComplete(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
}
class IGmsServiceBroker$Stub$Proxy{
    void getPanoramaService(  @Sink(SUSI_NO_CATEGORY) com.google.android.gms.common.internal.IGmsCallbacks arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg3);
    void getPlusService(  @Sink(SUSI_NO_CATEGORY) com.google.android.gms.common.internal.IGmsCallbacks arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg6);
}

package java.lang;

class AbstractStringBuilder{
    void setCharAt(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) char arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String substring(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  char[] getValue();
}
class BootClassLoader{
   @Source(SUSI_NETWORK_INFORMATION)  java.net.URL getResource(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Enumeration getResources(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.BootClassLoader getInstance();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Package getPackage(  java.lang.String arg0);
}
class Character{
   @Source(SUSI_NO_CATEGORY)  byte getDirectionality(  @Sink(SUSI_NO_CATEGORY) char arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  byte getDirectionality(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Class{
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Field getDeclaredField(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.annotation.Annotation getAnnotation(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Package getPackage();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Type[] getGenericInterfaces();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Field[] getFields();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSimpleName();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Method[] getMethods();
   @Source(SUSI_NO_CATEGORY)  java.lang.ClassLoader getClassLoaderImpl();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getResourceAsStream(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Field getField(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Class[] getClasses();
   @Source(SUSI_NO_CATEGORY)  java.security.ProtectionDomain getProtectionDomain();
   @Source(SUSI_NO_CATEGORY)  java.lang.ClassLoader getClassLoader();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Constructor[] getConstructors();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Constructor getConstructor(  @Sink(SUSI_NO_CATEGORY) java.lang.Class[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Constructor[] getDeclaredConstructors();
   @Source(SUSI_NO_CATEGORY)  int getModifiers();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Constructor getDeclaredConstructor(  @Sink(SUSI_NO_CATEGORY) java.lang.Class[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Type getGenericSuperclass();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Method[] getDeclaredMethods();
   @Source(SUSI_NO_CATEGORY)  java.lang.annotation.Annotation[] getAnnotations();
   @Source(SUSI_NO_CATEGORY)  java.lang.Class[] getDeclaredClasses();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.TypeVariable[] getTypeParameters();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] getSigners();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] getEnumConstants();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Method getMethod(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Class[] arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Field[] getDeclaredFields();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Method getDeclaredMethod(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Class[] arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCanonicalName();
   @Source(SUSI_NO_CATEGORY)  java.net.URL getResource(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class ClassLoader{
    void setClassAssertionStatus(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setPackageAssertionStatus(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Package definePackage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5, @Sink(SUSI_NO_CATEGORY) java.lang.String arg6, @Sink(SUSI_NO_CATEGORY) java.net.URL arg7);
    void setDefaultAssertionStatus(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Package[] getPackages();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String findLibrary(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.ClassLoader access$000();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Class defineClass(  java.lang.String arg0, byte[] arg1, int arg2, int arg3, java.security.ProtectionDomain arg4);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Enumeration getSystemResources(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.ClassLoader getParent();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Enumeration findResources(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Class defineClass(  java.lang.String arg0, byte[] arg1, int arg2, int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Class loadClass(  java.lang.String arg0, boolean arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Class findLoadedClass(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.net.URL getSystemResource(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.net.URL getResource(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Enumeration getResources(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Package getPackage(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.io.InputStream getResourceAsStream(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.ClassLoader getSystemClassLoader();
   @Source(SUSI_NETWORK_INFORMATION)  java.io.InputStream getSystemResourceAsStream(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Class defineClass(  java.lang.String arg0, java.nio.ByteBuffer arg1, java.security.ProtectionDomain arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.net.URL findResource(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Class loadClass(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Class defineClass(  byte[] arg0, int arg1, int arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Class findClass(  java.lang.String arg0);
}
class ClassNotFoundException{
   @Source(SUSI_NO_CATEGORY)  java.lang.Throwable getException();
   @Source(SUSI_NO_CATEGORY)  java.lang.Throwable getCause();
}
class Daemons$Daemon{
   @Source(SUSI_NO_CATEGORY)  java.lang.StackTraceElement[] getStackTrace();
}
class Enum{
   @Source(SUSI_NO_CATEGORY)  java.lang.Enum[] getSharedConstants(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Class getDeclaringClass();
   @Source(SUSI_NO_CATEGORY)  java.lang.String name();
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
}
class Enum$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object create(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class ExceptionInInitializerError{
   @Source(SUSI_NO_CATEGORY)  java.lang.Throwable getCause();
   @Source(SUSI_NO_CATEGORY)  java.lang.Throwable getException();
}
class Integer{
   @Source(SUSI_NO_CATEGORY)  java.lang.Integer getInteger(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Integer arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Integer getInteger(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Integer getInteger(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class Long{
   @Source(SUSI_NO_CATEGORY)  java.lang.Long getLong(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Long getLong(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Long arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Long getLong(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
}
class Math{
   @Source(SUSI_NO_CATEGORY)  int getExponent(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  int getExponent(  @Sink(SUSI_NO_CATEGORY) double arg0);
}
class Number{
   @Source(SUSI_NO_CATEGORY)  byte byteValue();
   @Source(SUSI_NO_CATEGORY)  short shortValue();
}
class Package{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.annotation.Annotation[] getAnnotations();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getImplementationVersion();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getImplementationVendor();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSpecificationVendor();
   @Source(SUSI_NO_CATEGORY)  java.lang.Package getPackage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.annotation.Annotation getAnnotation(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Package[] getPackages();
   @Source(SUSI_NO_CATEGORY)  java.lang.annotation.Annotation[] getDeclaredAnnotations();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSpecificationVersion();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSpecificationTitle();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getImplementationTitle();
}
class ProcessBuilder{
   @Source(SUSI_NO_CATEGORY)  java.util.List command();
}
class ProcessManager{
    java.lang.Process exec(  @Sink(SUSI_FILE) java.lang.String[] arg0, @Sink(SUSI_FILE) java.lang.String[] arg1, @Sink(SUSI_FILE) java.io.File arg2, @Sink(SUSI_FILE) boolean arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.ProcessManager getInstance();
}
class ProcessManager$ProcessImpl{
    void setExitValue(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInputStream();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getErrorStream();
   @Source(SUSI_NO_CATEGORY)  java.io.OutputStream getOutputStream();
}
class RealToString{
   @Source(SUSI_NO_CATEGORY)  java.lang.RealToString getInstance();
}
class Runtime{
   @Source(SUSI_NO_CATEGORY)  java.io.OutputStream getLocalizedOutputStream(  @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Process exec(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1, @Sink(SUSI_NO_CATEGORY) java.io.File arg2);
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getLocalizedInputStream(  @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Runtime getRuntime();
}
class RuntimePermission{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getActions();
}
class SecurityManager{
    void checkRead(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0);
    void checkWrite(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0);
   @Source(SUSI_FILE_INFORMATION)  java.lang.Object getSecurityContext();
   @Source(SUSI_NO_CATEGORY)  int classLoaderDepth();
   @Source(SUSI_NO_CATEGORY)  java.lang.ThreadGroup getThreadGroup();
   @Source(SUSI_NO_CATEGORY)  java.lang.Class[] getClassContext();
   @Source(SUSI_NO_CATEGORY)  boolean getInCheck();
   @Source(SUSI_NO_CATEGORY)  java.lang.Class currentLoadedClass();
   @Source(SUSI_NO_CATEGORY)  java.lang.ClassLoader currentClassLoader();
}
class StackTraceElement{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFileName();
   @Source(SUSI_NO_CATEGORY)  int getLineNumber();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getClassName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMethodName();
}
class String{
   @Source(SUSI_NO_CATEGORY)  boolean startsWith(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String substring(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] getBytes(  @Sink(SUSI_NO_CATEGORY) java.nio.charset.Charset arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getBytes(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getBytes();
}
class StringBuffer{
    void setLength(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setCharAt(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) char arg1);
}
class StringBuilder{
    void setCharAt(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) char arg1);
    void setLength(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class System{
    void setErr(  @Sink(SUSI_NO_CATEGORY) java.io.PrintStream arg0);
    void setOut(  @Sink(SUSI_NO_CATEGORY) java.io.PrintStream arg0);
    void setIn(  @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String setProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_FILE_INFORMATION)  java.lang.SecurityManager getSecurityManager();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getenv(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.Properties getProperties();
   @Source(SUSI_NO_CATEGORY)  java.util.Map getenv();
}
class System$SystemEnvironment{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Thread{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.StackTraceElement[] getStackTrace();
   @Source(SUSI_NO_CATEGORY)  java.util.Map getAllStackTraces();
   @Source(SUSI_NO_CATEGORY)  int getPriority();
   @Source(SUSI_NO_CATEGORY)  long getId();
   @Source(SUSI_NO_CATEGORY)  java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler();
   @Source(SUSI_NO_CATEGORY)  java.lang.ThreadGroup getThreadGroup();
   @Source(SUSI_NO_CATEGORY)  java.lang.ClassLoader getContextClassLoader();
   @Source(SUSI_NO_CATEGORY)  java.lang.Thread$State getState();
   @Source(SUSI_NO_CATEGORY)  java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler();
}
class ThreadGroup{
    void setMaxPriority(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.ThreadGroup getParent();
   @Source(SUSI_NO_CATEGORY)  int getMaxPriority();
}
class ThreadLocal{
    void set(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get();
}
class ThreadLocal$Values{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getAfterMiss(  @Sink(SUSI_NO_CATEGORY) java.lang.ThreadLocal arg0);
}
class Throwable{
    void setStackTrace(  @Sink(SUSI_NO_CATEGORY) java.lang.StackTraceElement[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Throwable[] getSuppressed();
   @Source(SUSI_NO_CATEGORY)  java.lang.Throwable getCause();
   @Source(SUSI_NO_CATEGORY)  java.lang.StackTraceElement[] getStackTrace();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLocalizedMessage();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
}
class UnsafeByteSequence{
   @Source(SUSI_NO_CATEGORY)  byte[] toByteArray();
}
class VMClassLoader{
   @Source(SUSI_NETWORK_INFORMATION)  java.net.URL getResource(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getResources(  java.lang.String arg0);
}

package com.android.calendar.event;

class AttendeesView{
    void setEnabled(  @Sink(SUSI_CALENDAR_INFORMATION) boolean arg0);
    void onClick(  @Sink(SUSI_CALENDAR_INFORMATION) android.view.View arg0);
}
class EditEventFragment{
   @Source(SUSI_CALENDAR_INFORMATION)  android.view.View onCreateView(  @Sink(SUSI_CALENDAR_INFORMATION) android.view.LayoutInflater arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.view.ViewGroup arg1, @Sink(SUSI_CALENDAR_INFORMATION) android.os.Bundle arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  long getSupportedEventTypes();
}
class EditEventHelper{
   @Source(SUSI_CALENDAR_INFORMATION)  boolean saveRemindersWithBackRef(  @Sink(SUSI_CALENDAR_INFORMATION) java.util.ArrayList arg0, @Sink(SUSI_CALENDAR_INFORMATION) int arg1, @Sink(SUSI_CALENDAR_INFORMATION) java.util.ArrayList arg2, @Sink(SUSI_CALENDAR_INFORMATION) java.util.ArrayList arg3, @Sink(SUSI_CALENDAR_INFORMATION) boolean arg4);
   @Source(SUSI_CALENDAR_INFORMATION)  boolean saveReminders(  @Sink(SUSI_CALENDAR_INFORMATION) java.util.ArrayList arg0, @Sink(SUSI_CALENDAR_INFORMATION) long arg1, @Sink(SUSI_CALENDAR_INFORMATION) java.util.ArrayList arg2, @Sink(SUSI_CALENDAR_INFORMATION) java.util.ArrayList arg3, @Sink(SUSI_CALENDAR_INFORMATION) boolean arg4);
   @Source(SUSI_CALENDAR_INFORMATION)  boolean saveEvent(  @Sink(SUSI_CALENDAR_INFORMATION) com.android.calendar.CalendarEventModel arg0, @Sink(SUSI_CALENDAR_INFORMATION) com.android.calendar.CalendarEventModel arg1, @Sink(SUSI_CALENDAR_INFORMATION) int arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  long constructDefaultStartTime(  @Sink(SUSI_CALENDAR_INFORMATION) long arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  android.content.ContentValues getContentValuesFromModel(  @Sink(SUSI_CALENDAR_INFORMATION) com.android.calendar.CalendarEventModel arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  java.util.LinkedHashSet getAddressesFromList(  @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg0, @Sink(SUSI_CALENDAR_INFORMATION) com.android.common.Rfc822Validator arg1);
}
class EditEventView$TitleAdapter{
   @Source(SUSI_CALENDAR_INFORMATION)  int getCount();
}

package com.android.inputmethod.accessibility;

class AccessibilityEntityProvider{
   @Source(SUSI_NO_CATEGORY)  boolean performAction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
   @Source(SUSI_NO_CATEGORY)  android.view.accessibility.AccessibilityEvent createAccessibilityEvent(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.Key arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class AccessibilityUtils{
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.accessibility.AccessibilityUtils getInstance();
}
class AccessibleKeyboardViewProxy{
    void setKeyboard(  @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.Keyboard arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy getInstance();
   @Source(SUSI_NO_CATEGORY)  android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
}
class KeyCodeDescriptionMapper{
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.accessibility.KeyCodeDescriptionMapper getInstance();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDescriptionForKey(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.Keyboard arg1, @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.keyboard.Key arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
}

package org.apache.harmony.xml;

class ExpatAttributes{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getType(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getIndex(  java.lang.String arg0, java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getIndex(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getValue(  java.lang.String arg0, java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getQName(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getType(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getURI(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getValue(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getValue(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getType(  java.lang.String arg0, java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getLocalName(  int arg0);
}
class ExpatParser{
    void startElement(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
    void startNamespace(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void startDtd(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
}
class ExpatParser$ClonedAttributes{
   @Source(SUSI_NETWORK_INFORMATION)  int getPointer();
   @Source(SUSI_NETWORK_INFORMATION)  int getLength();
   @Source(SUSI_NETWORK_INFORMATION)  int getParserPointer();
}
class ExpatParser$CurrentAttributes{
   @Source(SUSI_NETWORK_INFORMATION)  int getPointer();
   @Source(SUSI_NETWORK_INFORMATION)  int getLength();
   @Source(SUSI_NETWORK_INFORMATION)  int getParserPointer();
}
class ExpatParser$EntityParser{
    void startElement(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
}
class ExpatParser$ExpatLocator{
   @Source(SUSI_NETWORK_INFORMATION)  int getColumnNumber();
   @Source(SUSI_NETWORK_INFORMATION)  int getLineNumber();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPublicId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSystemId();
}
class ExpatReader{
    void setProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NETWORK_INFORMATION)  org.xml.sax.DTDHandler getDTDHandler();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object getProperty(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  org.xml.sax.EntityResolver getEntityResolver();
   @Source(SUSI_NETWORK_INFORMATION)  org.xml.sax.ext.LexicalHandler getLexicalHandler();
   @Source(SUSI_NETWORK_INFORMATION)  org.xml.sax.ContentHandler getContentHandler();
   @Source(SUSI_NETWORK_INFORMATION)  org.xml.sax.ErrorHandler getErrorHandler();
}

package com.android.internal.statusbar;

class IStatusBar$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IStatusBar$Stub$Proxy{
    void setImeWindowStatus(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void removeNotification(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
    void addNotification(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) com.android.internal.statusbar.StatusBarNotification arg1);
    void updateNotification(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) com.android.internal.statusbar.StatusBarNotification arg1);
    void removeIcon(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setHardKeyboardStatus(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void disable(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSystemUiVisibility(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setIcon(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) com.android.internal.statusbar.StatusBarIcon arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IStatusBarService$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IStatusBarService$Stub$Proxy{
    void setCurrentUser(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void onNotificationError(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5);
    void onNotificationClear(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void onNotificationClick(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setHardKeyboardEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void registerStatusBar(  @Sink(SUSI_NO_CATEGORY) com.android.internal.statusbar.IStatusBar arg0, @Sink(SUSI_NO_CATEGORY) com.android.internal.statusbar.StatusBarIconList arg1, @Sink(SUSI_NO_CATEGORY) java.util.List arg2, @Sink(SUSI_NO_CATEGORY) java.util.List arg3, @Sink(SUSI_NO_CATEGORY) int[] arg4, @Sink(SUSI_NO_CATEGORY) java.util.List arg5);
    void setIcon(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4);
    void setIconVisibility(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setImeWindowStatus(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setSystemUiVisibility(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void removeIcon(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void disable(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class StatusBarIconList{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setIcon(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) com.android.internal.statusbar.StatusBarIcon arg1);
   @Source(SUSI_NO_CATEGORY)  int getViewIndex(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSlot(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getSlotIndex(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.internal.statusbar.StatusBarIcon getIcon(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class StatusBarNotification{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getUserId();
}

package org.apache.http.params;

class AbstractHttpParams{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.params.HttpParams setDoubleParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) double arg1);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.params.HttpParams setIntParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.params.HttpParams setBooleanParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.params.HttpParams setLongParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  long getLongParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  int getIntParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  double getDoubleParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) double arg1);
   @Source(SUSI_NO_CATEGORY)  boolean getBooleanParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class BasicHttpParams{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.params.HttpParams setParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void setParameters(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}

package org.apache.james.mime4j.field.datetime.parser;

class DateTimeParser$Date{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getYear();
   @Source(SUSI_NO_CATEGORY)  int getDay();
   @Source(SUSI_NO_CATEGORY)  int getMonth();
}
class DateTimeParser$Time{
   @Source(SUSI_NO_CATEGORY)  int getHour();
   @Source(SUSI_NO_CATEGORY)  int getZone();
   @Source(SUSI_NO_CATEGORY)  int getMinute();
   @Source(SUSI_NO_CATEGORY)  int getSecond();
}
class DateTimeParserTokenManager{
   @Source(SUSI_NO_CATEGORY)  org.apache.james.mime4j.field.datetime.parser.Token getNextToken();
   @Source(SUSI_NO_CATEGORY)  org.apache.james.mime4j.field.datetime.parser.Token jjFillToken();
}
class ParseException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
}
class SimpleCharStream{
   @Source(SUSI_NO_CATEGORY)  int getEndColumn();
   @Source(SUSI_NO_CATEGORY)  int getBeginLine();
   @Source(SUSI_NO_CATEGORY)  int getBeginColumn();
   @Source(SUSI_NO_CATEGORY)  int getEndLine();
}
class TokenMgrError{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
}

package android.media.videoeditor;

class AudioTrack{
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.WaveformData getWaveformData();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getId();
   @Source(SUSI_NO_CATEGORY)  long getBoundaryBeginTime();
   @Source(SUSI_NO_CATEGORY)  int getAudioChannels();
   @Source(SUSI_NO_CATEGORY)  int getVolume();
   @Source(SUSI_NO_CATEGORY)  long getStartTime();
   @Source(SUSI_NO_CATEGORY)  long getTimelineDuration();
   @Source(SUSI_NO_CATEGORY)  int getDuckingThreshhold();
   @Source(SUSI_NO_CATEGORY)  int getDuckedTrackVolume();
   @Source(SUSI_NO_CATEGORY)  int getAudioType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAudioWaveformFilename();
   @Source(SUSI_NO_CATEGORY)  int getAudioSamplingFrequency();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFilename();
   @Source(SUSI_NO_CATEGORY)  long getDuration();
   @Source(SUSI_NO_CATEGORY)  long getBoundaryEndTime();
   @Source(SUSI_NO_CATEGORY)  int getAudioBitrate();
}
class Effect{
   @Source(SUSI_NO_CATEGORY)  long getDuration();
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.MediaItem getMediaItem();
   @Source(SUSI_NO_CATEGORY)  long getStartTime();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getId();
}
class EffectColor{
   @Source(SUSI_NO_CATEGORY)  int getType();
   @Source(SUSI_NO_CATEGORY)  int getColor();
}
class EffectKenBurns{
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getEndRect();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getStartRect();
}
class MediaArtistNativeHelper{
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.MediaArtistNativeHelper$EffectSettings getOverlaySettings(  @Sink(SUSI_NO_CATEGORY) android.media.videoeditor.OverlayFrame arg0);
   @Source(SUSI_NO_CATEGORY)  int getAspectRatio(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean getGeneratePreview();
   @Source(SUSI_NO_CATEGORY)  int getMediaItemRenderingMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getMediaItemFileType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.MediaArtistNativeHelper$EffectSettings getEffectSettings(  @Sink(SUSI_NO_CATEGORY) android.media.videoeditor.EffectColor arg0);
   @Source(SUSI_NO_CATEGORY)  int getSlideSettingsDirection(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getVideoCodecType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getAudioflag();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProjectAudioTrackPCMFilePath();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getPixels(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) long arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
   @Source(SUSI_NO_CATEGORY)  int getFrameRate(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getVideoTransitionBehaviour(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getAudioCodecType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getFileType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProjectPath();
}
class MediaArtistNativeHelper$Version{
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.MediaArtistNativeHelper$Version getVersion();
}
class MediaImageItem{
    void setGeneratedImageClip(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getGeneratedImageClip();
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.MediaArtistNativeHelper$ClipSettings getImageClipProperties();
   @Source(SUSI_NO_CATEGORY)  int getFileType();
   @Source(SUSI_NO_CATEGORY)  int getScaledHeight();
   @Source(SUSI_NO_CATEGORY)  int getScaledWidth();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getThumbnail(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
   @Source(SUSI_NO_CATEGORY)  int getGeneratedClipHeight();
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  long getTimelineDuration();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDecodedImageFileName();
   @Source(SUSI_NO_CATEGORY)  int getGeneratedClipWidth();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getScaledImageFileName();
    void getThumbnailList(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) long arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int[] arg5, @Sink(SUSI_NO_CATEGORY) android.media.videoeditor.MediaItem$GetThumbnailListCallback arg6);
   @Source(SUSI_NO_CATEGORY)  long getDuration();
   @Source(SUSI_NO_CATEGORY)  int getAspectRatio();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
}
class MediaItem{
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.Overlay getOverlay(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.Effect getEffect(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.Transition getEndTransition();
   @Source(SUSI_NO_CATEGORY)  int getRenderingMode();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap[] getThumbnailList(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) long arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
   @Source(SUSI_NO_CATEGORY)  java.util.List getAllOverlays();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFilename();
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.MediaArtistNativeHelper getNativeContext();
   @Source(SUSI_NO_CATEGORY)  boolean getRegenerateClip();
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.Transition getBeginTransition();
   @Source(SUSI_NO_CATEGORY)  java.util.List getAllEffects();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getGeneratedImageClip();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getId();
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.MediaArtistNativeHelper$ClipSettings getClipSettings();
}
class MediaProperties{
   @Source(SUSI_NO_CATEGORY)  int[] getSupportedAudioCodecs();
   @Source(SUSI_NO_CATEGORY)  int getSupportedAudioTrackCount();
   @Source(SUSI_NO_CATEGORY)  int[] getSupportedVideoBitrates();
   @Source(SUSI_NO_CATEGORY)  int[] getSupportedVideoFileFormat();
   @Source(SUSI_NO_CATEGORY)  int getSupportedMaxVolume();
   @Source(SUSI_NO_CATEGORY)  int[] getSupportedVideoCodecs();
   @Source(SUSI_NO_CATEGORY)  android.util.Pair[] getSupportedResolutions(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int[] getAllSupportedAspectRatios();
}
class MediaVideoItem{
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.MediaArtistNativeHelper$ClipSettings getVideoClipProperties();
   @Source(SUSI_NO_CATEGORY)  int getAudioBitrate();
   @Source(SUSI_NO_CATEGORY)  int getFps();
   @Source(SUSI_NO_CATEGORY)  int getVideoType();
   @Source(SUSI_NO_CATEGORY)  int getVolume();
   @Source(SUSI_NO_CATEGORY)  long getBoundaryBeginTime();
   @Source(SUSI_NO_CATEGORY)  int getAudioType();
   @Source(SUSI_NO_CATEGORY)  int getVideoBitrate();
   @Source(SUSI_NO_CATEGORY)  int getAspectRatio();
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.WaveformData getWaveformData();
   @Source(SUSI_NO_CATEGORY)  int getAudioSamplingFrequency();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getThumbnail(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
   @Source(SUSI_NO_CATEGORY)  int getVideoLevel();
   @Source(SUSI_NO_CATEGORY)  int getFileType();
   @Source(SUSI_NO_CATEGORY)  int getVideoProfile();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAudioWaveformFilename();
   @Source(SUSI_NO_CATEGORY)  int getAudioChannels();
   @Source(SUSI_NO_CATEGORY)  long getDuration();
   @Source(SUSI_NO_CATEGORY)  long getTimelineDuration();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  long getBoundaryEndTime();
}
class Overlay{
    void setUserAttribute(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  long getDuration();
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.MediaItem getMediaItem();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getId();
   @Source(SUSI_NO_CATEGORY)  long getStartTime();
   @Source(SUSI_NO_CATEGORY)  java.util.Map getUserAttributes();
}
class OverlayFrame{
    void generateOverlayWithRenderingMode(  @Sink(SUSI_FILE) android.media.videoeditor.MediaItem arg0, @Sink(SUSI_FILE) android.media.videoeditor.OverlayFrame arg1, @Sink(SUSI_FILE) int arg2, @Sink(SUSI_FILE) int arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getBitmapImageFileName();
   @Source(SUSI_NO_CATEGORY)  int getResizedRGBSizeHeight();
   @Source(SUSI_NO_CATEGORY)  int getResizedRGBSizeWidth();
   @Source(SUSI_NO_CATEGORY)  int getOverlayFrameWidth();
   @Source(SUSI_NO_CATEGORY)  int getOverlayFrameHeight();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFilename();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getBitmap();
}
class Transition{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getId();
   @Source(SUSI_NO_CATEGORY)  java.util.List isEffectandOverlayOverlapping(  @Sink(SUSI_NO_CATEGORY) android.media.videoeditor.MediaItem arg0, @Sink(SUSI_NO_CATEGORY) android.media.videoeditor.MediaArtistNativeHelper$ClipSettings arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  long getDuration();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFilename();
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.MediaArtistNativeHelper$TransitionSettings getTransitionSettings();
   @Source(SUSI_NO_CATEGORY)  long getMaximumDuration();
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.MediaItem getBeforeMediaItem();
   @Source(SUSI_NO_CATEGORY)  int getBehavior();
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.MediaItem getAfterMediaItem();
}
class TransitionAlpha{
   @Source(SUSI_NO_CATEGORY)  int getRGBFileHeight();
   @Source(SUSI_NO_CATEGORY)  int getRGBFileWidth();
   @Source(SUSI_NO_CATEGORY)  int getBlendingPercent();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPNGMaskFilename();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMaskFilename();
}
class TransitionSliding{
   @Source(SUSI_NO_CATEGORY)  int getDirection();
}
class VideoEditorImpl{
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.MediaItem getMediaItem(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPath();
   @Source(SUSI_NO_CATEGORY)  int getAspectRatio();
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.AudioTrack getAudioTrack(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getAllMediaItems();
   @Source(SUSI_NO_CATEGORY)  java.util.List getAllAudioTracks();
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.Transition getTransition(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getAllTransitions();
   @Source(SUSI_NO_CATEGORY)  long getDuration();
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.MediaArtistNativeHelper getNativeContext();
}
class VideoEditorProfile{
   @Source(SUSI_NO_CATEGORY)  int getExportProfile(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getExportLevel(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.media.videoeditor.VideoEditorProfile get();
}
class WaveformData{
   @Source(SUSI_NO_CATEGORY)  int getFramesCount();
   @Source(SUSI_NO_CATEGORY)  short[] getFrameGains();
   @Source(SUSI_NO_CATEGORY)  int getFrameDuration();
}

package com.android.email.mail.store;

class ExchangeStore{
   @Source(SUSI_NO_CATEGORY)  java.lang.Class getSettingActivityClass();
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.service.IEmailService getService();
}
class ImapConnection{
   @Source(SUSI_EMAIL)  java.lang.String sendComplexCommand(  @Sink(SUSI_EMAIL) java.util.List arg0, @Sink(SUSI_EMAIL) boolean arg1);
   @Source(SUSI_EMAIL)  java.lang.String sendCommand(  @Sink(SUSI_EMAIL) java.lang.String arg0, @Sink(SUSI_EMAIL) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.List getCommandResponses();
   @Source(SUSI_NO_CATEGORY)  java.util.List executeSimpleCommand(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class ImapFolder{
    void fetchInternal(  @Sink(SUSI_EMAIL) com.android.emailcommon.mail.Message[] arg0, @Sink(SUSI_EMAIL) com.android.emailcommon.mail.FetchProfile arg1, @Sink(SUSI_EMAIL) com.android.emailcommon.mail.Folder$MessageRetrievalListener arg2);
    void copyMessages(  @Sink(SUSI_EMAIL) com.android.emailcommon.mail.Message[] arg0, @Sink(SUSI_EMAIL) com.android.emailcommon.mail.Folder arg1, @Sink(SUSI_EMAIL) com.android.emailcommon.mail.Folder$MessageUpdateCallbacks arg2);
    void save(  @Sink(SUSI_EMAIL) android.content.Context arg0);
    void setFlags(  @Sink(SUSI_EMAIL) com.android.emailcommon.mail.Message[] arg0, @Sink(SUSI_EMAIL) com.android.emailcommon.mail.Flag[] arg1, @Sink(SUSI_EMAIL) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  int getUnreadMessageCount();
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.mail.Message[] getMessagesInternal(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0, @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.mail.Folder$MessageRetrievalListener arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getSearchUids(  @Sink(SUSI_NO_CATEGORY) java.util.List arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.mail.Message getMessage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getMessageCount();
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.mail.Flag[] getPermanentFlags();
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.mail.Message[] getMessages(  @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.service.SearchParams arg0, @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.mail.Folder$MessageRetrievalListener arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.mail.Message[] getMessages(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.mail.Folder$MessageRetrievalListener arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.mail.Folder$OpenMode getMode();
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.mail.Message[] getMessages(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0, @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.mail.Folder$MessageRetrievalListener arg1);
}
class ImapStore{
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Collection getConnectionPoolForTest();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.email.mail.store.ImapConnection getConnection();
   @Source(SUSI_NO_CATEGORY)  com.android.email.mail.Transport cloneTransport();
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.mail.Folder getFolder(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getImapId(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
}
class ImapStore$ImapException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlertText();
}
class ImapStore$ImapMessage{
    void setFlagInternal(  @Sink(SUSI_EMAIL) com.android.emailcommon.mail.Flag arg0, @Sink(SUSI_EMAIL) boolean arg1);
    void setSize(  @Sink(SUSI_EMAIL) int arg0);
    void setFlag(  @Sink(SUSI_EMAIL) com.android.emailcommon.mail.Flag arg0, @Sink(SUSI_EMAIL) boolean arg1);
}
class Pop3Store{
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.mail.Folder getFolder(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class Pop3Store$Pop3Folder{
    void setFlags(  @Sink(SUSI_EMAIL) com.android.emailcommon.mail.Message[] arg0, @Sink(SUSI_EMAIL) com.android.emailcommon.mail.Flag[] arg1, @Sink(SUSI_EMAIL) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  int getUnreadMessageCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.mail.Folder$OpenMode getMode();
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.mail.Message[] getMessages(  @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.service.SearchParams arg0, @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.mail.Folder$MessageRetrievalListener arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.mail.Message[] getMessages(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.mail.Folder$MessageRetrievalListener arg2);
   @Source(SUSI_NO_CATEGORY)  int getMessageCount();
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.mail.Flag[] getPermanentFlags();
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.mail.Message getMessage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class Pop3Store$Pop3Message{
    void setSize(  @Sink(SUSI_EMAIL) int arg0);
    void setFlag(  @Sink(SUSI_EMAIL) com.android.emailcommon.mail.Flag arg0, @Sink(SUSI_EMAIL) boolean arg1);
}
class ServiceStore{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Bundle checkSettings();
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Bundle autoDiscover(  android.content.Context arg0, java.lang.String arg1, java.lang.String arg2);
}

package android.net.http;

class AndroidHttpClient{
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.entity.AbstractHttpEntity getCompressedEntity(  byte[] arg0, android.content.ContentResolver arg1);
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.conn.ClientConnectionManager getConnectionManager();
   @Source(SUSI_NETWORK_INFORMATION)  long getMinGzipSize(  android.content.ContentResolver arg0);
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.params.HttpParams getParams();
}
class AndroidHttpClient$2{
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.protocol.BasicHttpProcessor createHttpProcessor();
}
class AndroidHttpClient$LoggingConfiguration{
    void access$600(  @Sink(SUSI_NETWORK) android.net.http.AndroidHttpClient$LoggingConfiguration arg0, @Sink(SUSI_NETWORK) java.lang.String arg1);
}
class AndroidHttpClientConnection{
    void setSocketTimeout(  @Sink(SUSI_NETWORK) int arg0);
    void sendRequestHeader(  @Sink(SUSI_NETWORK) org.apache.http.HttpRequest arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.net.InetAddress getLocalAddress();
   @Source(SUSI_NETWORK_INFORMATION)  int getRemotePort();
   @Source(SUSI_NETWORK_INFORMATION)  java.net.InetAddress getRemoteAddress();
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.HttpConnectionMetrics getMetrics();
   @Source(SUSI_NETWORK_INFORMATION)  int getSocketTimeout();
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.HttpEntity receiveResponseEntity(  android.net.http.Headers arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getLocalPort();
}
class CertificateChainValidator{
   @Source(SUSI_NETWORK_INFORMATION)  android.net.http.CertificateChainValidator getInstance();
   @Source(SUSI_NO_CATEGORY)  android.net.http.SslError doHandshakeAndValidateServerCertificates(  @Sink(SUSI_NO_CATEGORY) android.net.http.HttpsConnection arg0, @Sink(SUSI_NO_CATEGORY) javax.net.ssl.SSLSocket arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
}
class Connection{
   @Source(SUSI_NETWORK_INFORMATION)  android.net.http.SslCertificate getCertificate();
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getBuf();
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.protocol.HttpContext getHttpContext();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.http.Connection getConnection(  android.content.Context arg0, org.apache.http.HttpHost arg1, org.apache.http.HttpHost arg2, android.net.http.RequestFeeder arg3);
   @Source(SUSI_NETWORK_INFORMATION)  boolean getCanPersist();
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.HttpHost getHost();
}
class ErrorStrings{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getString(  int arg0, android.content.Context arg1);
}
class Headers{
    void setCacheControl(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void setEtag(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void setContentType(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void setLastModified(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void setAcceptRanges(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void setContentEncoding(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void setProxyAuthenticate(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void setContentDisposition(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void setLocation(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void setExpires(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void setWwwAuthenticate(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void setXPermittedCrossDomainPolicies(  @Sink(SUSI_NETWORK) java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getConnectionType();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getContentDisposition();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getCacheControl();
   @Source(SUSI_NETWORK_INFORMATION)  long getTransferEncoding();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEtag();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPragma();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAcceptRanges();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getContentEncoding();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getXPermittedCrossDomainPolicies();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.ArrayList getSetCookie();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getLastModified();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getLocation();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getProxyAuthenticate();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getRefresh();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getContentType();
   @Source(SUSI_NETWORK_INFORMATION)  long getContentLength();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getExpires();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getWwwAuthenticate();
}
class HttpConnection{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getScheme();
}
class HttpsConnection{
    android.net.http.AndroidHttpClientConnection openConnection(  @Sink(SUSI_NETWORK) android.net.http.Request arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getScheme();
}
class HttpsConnection$1{
   @Source(SUSI_NETWORK_INFORMATION)  java.security.cert.X509Certificate[] getAcceptedIssuers();
}
class IdleCache{
   @Source(SUSI_NETWORK_INFORMATION)  android.net.http.Connection getConnection(  org.apache.http.HttpHost arg0);
}
class Request{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getHostPort();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.http.EventHandler getEventHandler();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getUri();
}
class RequestHandle{
    void setupBasicAuthResponse(  @Sink(SUSI_NETWORK) boolean arg0, @Sink(SUSI_NETWORK) java.lang.String arg1, @Sink(SUSI_NETWORK) java.lang.String arg2);
    boolean setupRedirect(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) int arg1, @Sink(SUSI_NETWORK) java.util.Map arg2);
    void setupDigestAuthResponse(  @Sink(SUSI_NETWORK) boolean arg0, @Sink(SUSI_NETWORK) java.lang.String arg1, @Sink(SUSI_NETWORK) java.lang.String arg2, @Sink(SUSI_NETWORK) java.lang.String arg3, @Sink(SUSI_NETWORK) java.lang.String arg4, @Sink(SUSI_NETWORK) java.lang.String arg5, @Sink(SUSI_NETWORK) java.lang.String arg6, @Sink(SUSI_NETWORK) java.lang.String arg7);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getMethod();
   @Source(SUSI_NETWORK_INFORMATION)  int getRedirectCount();
}
class RequestQueue{
    void queueRequest(  @Sink(SUSI_NETWORK) android.net.http.Request arg0, @Sink(SUSI_NETWORK) boolean arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.http.Request getRequest();
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.HttpHost getProxyHost();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.http.Request getRequest(  org.apache.http.HttpHost arg0);
}
class RequestQueue$ActivePool{
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.HttpHost getProxyHost();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.http.Connection getConnection(  android.content.Context arg0, org.apache.http.HttpHost arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.http.ConnectionThread getThread(  org.apache.http.HttpHost arg0);
}
class RequestQueue$SyncFeeder{
   @Source(SUSI_NETWORK_INFORMATION)  android.net.http.Request getRequest();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.http.Request getRequest(  org.apache.http.HttpHost arg0);
}
class SslCertificate{
    android.os.Bundle saveState(  @Sink(SUSI_NETWORK) android.net.http.SslCertificate arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Date getValidNotBeforeDate();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getValidNotAfter();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Date getValidNotAfterDate();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.http.SslCertificate$DName getIssuedBy();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getValidNotBefore();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.http.SslCertificate$DName getIssuedTo();
}
class SslCertificate$DName{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getDName();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getUName();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getCName();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getOName();
}
class SslError{
   @Source(SUSI_NETWORK_INFORMATION)  int getPrimaryError();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getUrl();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.http.SslCertificate getCertificate();
}

package android.filterfw.geometry;

class Quad{
   @Source(SUSI_NO_CATEGORY)  float getBoundingHeight();
   @Source(SUSI_NO_CATEGORY)  float getBoundingWidth();
}
class Rectangle{
   @Source(SUSI_NO_CATEGORY)  float getWidth();
   @Source(SUSI_NO_CATEGORY)  float getHeight();
}

package javax.xml.parsers;

class DocumentBuilder{
   @Source(SUSI_NO_CATEGORY)  javax.xml.validation.Schema getSchema();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.Document parse(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.Document parse(  @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg0);
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.Document parse(  @Sink(SUSI_NO_CATEGORY) java.io.File arg0);
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.Document parse(  @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class DocumentBuilderFactory{
    void setSchema(  @Sink(SUSI_NO_CATEGORY) javax.xml.validation.Schema arg0);
    void setXIncludeAware(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  javax.xml.validation.Schema getSchema();
}
class FactoryConfigurationError{
   @Source(SUSI_NO_CATEGORY)  java.lang.Exception getException();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
}

package android.test.mock;

class MockContentResolver{
    void setMasterSyncAutomatically(  @Sink(SUSI_SYNCHRONIZATION_DATA) boolean arg0);
    void addProvider(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.content.ContentProvider arg1);
   @Source(SUSI_SYNCHRONIZATION_DATA)  boolean getSyncAutomatically(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1);
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.content.SyncStatusInfo getSyncStatus(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1);
   @Source(SUSI_SYNCHRONIZATION_DATA)  int getIsSyncable(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1);
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.util.List getPeriodicSyncs(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1);
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.content.SyncInfo getCurrentSync();
   @Source(SUSI_NO_CATEGORY)  android.content.IContentProvider acquireExistingProvider(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}

package com.android.contacts.group;

class GroupBrowseListAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getSelectedGroup();
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_CONTACT_INFORMATION)  long getItemId(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.group.GroupListItem getItem(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getCount();
   @Source(SUSI_CONTACT_INFORMATION)  int getSelectedGroupPosition();
}
class GroupBrowseListAdapter$GroupListItemViewCache{
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getUri();
}
class GroupBrowseListFragment{
    void setAddAccountsVisibility(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.database.Cursor access$302(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.group.GroupBrowseListFragment arg0, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg1);
}
class GroupDetailDisplayUtils{
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getNewGroupSourceView(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
}
class GroupDetailFragment{
    void setQuickContact(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
   @Source(SUSI_CONTACT_INFORMATION)  long getGroupId();
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getGroupUri();
}
class GroupDetailFragment$1{
   @Source(SUSI_CONTACT_INFORMATION)  int getApproximateTileWidth();
}
class GroupEditorFragment{
    void loadMemberToAddToGroup(  @Sink(SUSI_CONTACT_INFORMATION) long arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
}
class GroupEditorFragment$CancelEditDialogFragment{
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Dialog onCreateDialog(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg0);
}
class GroupEditorFragment$Member{
    void writeToParcel(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Parcel arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getDisplayName();
   @Source(SUSI_CONTACT_INFORMATION)  long getContactId();
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getLookupUri();
   @Source(SUSI_CONTACT_INFORMATION)  long getRawContactId();
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getPhotoUri();
}
class GroupEditorFragment$MemberListAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.group.GroupEditorFragment$Member getItem(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getCount();
   @Source(SUSI_CONTACT_INFORMATION)  long getItemId(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class GroupListItem{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getAccountName();
   @Source(SUSI_CONTACT_INFORMATION)  long getGroupId();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getTitle();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getAccountType();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getDataSet();
   @Source(SUSI_CONTACT_INFORMATION)  int getMemberCount();
}
class SuggestedMemberListAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_CONTACT_INFORMATION)  android.widget.Filter getFilter();
}
class SuggestedMemberListAdapter$SuggestedMember{
   @Source(SUSI_CONTACT_INFORMATION)  byte[] getPhotoByteArray();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getExtraInfo();
   @Source(SUSI_CONTACT_INFORMATION)  long getContactId();
   @Source(SUSI_CONTACT_INFORMATION)  long getRawContactId();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getDisplayName();
}

package com.android.contacts.activities;

class ActionBarAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  int getCurrentTab();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getQueryString();
}
class ActionBarAdapter$CustomArrayAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getDropDownView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
}
class ConfirmAddDetailActivity{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.util.DialogManager getDialogManager();
}
class ConfirmAddDetailActivity$QueryHandler{
    void onQueryComplete(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.Object arg1, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg2);
}
class ContactEditorAccountsChangedActivity{
    void onActivityResult(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) android.content.Intent arg2);
}
class ContactEditorActivity{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.util.DialogManager getDialogManager();
}
class ContactEditorActivity$2{
    void onEditOtherContactRequested(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0, @Sink(SUSI_CONTACT_INFORMATION) java.util.ArrayList arg1);
    void onCustomEditContactActivityRequested(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.account.AccountWithDataSet arg0, @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg1, @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg2, @Sink(SUSI_CONTACT_INFORMATION) boolean arg3);
    void onCustomCreateContactActivityRequested(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.account.AccountWithDataSet arg0, @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg1);
}
class ContactSelectionActivity{
    void startActivityAndForwardResult(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Intent arg0);
}
class DialtactsActivity{
    void startSearch(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) boolean arg1, @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg2, @Sink(SUSI_CONTACT_INFORMATION) boolean arg3);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent getCallSettingsIntent();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getCallOrigin();
}
class DialtactsActivity$PageChangeListener{
   @Source(SUSI_CONTACT_INFORMATION)  int getCurrentPosition();
}
class DialtactsActivity$ViewPagerAdapter{
    void setPrimaryItem(  @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.Object arg2);
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Fragment getItem(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getCount();
}
class GroupEditorActivity{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.util.DialogManager getDialogManager();
}
class NonPhoneActivity$NonPhoneDialogFragment{
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Dialog onCreateDialog(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg0);
}
class PeopleActivity{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.util.DialogManager getDialogManager();
}
class PeopleActivity$ContactDetailFragmentListener{
    void onItemClicked(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Intent arg0);
    void onCreateRawContactRequested(  @Sink(SUSI_CONTACT_INFORMATION) java.util.ArrayList arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.account.AccountWithDataSet arg1);
}
class PeopleActivity$TabPagerAdapter{
    void setPrimaryItem(  @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.Object arg2);
   @Source(SUSI_CONTACT_INFORMATION)  int getItemPosition(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.Object arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getCount();
}
class PhotoSelectionActivity{
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent buildIntent(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg1, @Sink(SUSI_CONTACT_INFORMATION) android.graphics.Bitmap arg2, @Sink(SUSI_CONTACT_INFORMATION) byte[] arg3, @Sink(SUSI_CONTACT_INFORMATION) android.graphics.Rect arg4, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDeltaList arg5, @Sink(SUSI_CONTACT_INFORMATION) boolean arg6, @Sink(SUSI_CONTACT_INFORMATION) boolean arg7, @Sink(SUSI_CONTACT_INFORMATION) boolean arg8);
}
class PhotoSelectionActivity$PhotoHandler{
    void startPhotoActivity(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Intent arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2);
   @Source(SUSI_CONTACT_INFORMATION)  long getWritableEntityId();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener getListener();
}
class PhotoSelectionActivity$PhotoHandler$PhotoListener{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getCurrentPhotoFile();
}
class ShowOrCreateActivity{
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Dialog onCreateDialog(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}

package android.support.v4.app;

class NotificationCompat$Builder{
   @Source(SUSI_NO_CATEGORY)  android.support.v4.app.NotificationCompat$Builder setOngoing(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.support.v4.app.NotificationCompat$Builder setAutoCancel(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.support.v4.app.NotificationCompat$Builder setOnlyAlertOnce(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.Notification getNotification();
}
class NotificationCompat$Style{
   @Source(SUSI_NO_CATEGORY)  android.app.Notification build();
}
class TaskStackBuilder{
   @Source(SUSI_NO_CATEGORY)  android.app.PendingIntent getPendingIntent(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
   @Source(SUSI_NO_CATEGORY)  android.app.PendingIntent getPendingIntent(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class TaskStackBuilder$TaskStackBuilderImplBase{
   @Source(SUSI_NO_CATEGORY)  android.app.PendingIntent getPendingIntent(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent[] arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg4);
}
class TaskStackBuilder$TaskStackBuilderImplHoneycomb{
   @Source(SUSI_NO_CATEGORY)  android.app.PendingIntent getPendingIntent(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent[] arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg4);
}
class TaskStackBuilderHoneycomb{
   @Source(SUSI_NO_CATEGORY)  android.app.PendingIntent getActivitiesPendingIntent(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent[] arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
}

package com.android.internal.telephony.cdma.sms;

class BearerData{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getLanguage();
}

package com.android.gallery3d.filtershow.filters;

class ColorSpaceMatrix{
    void setHue(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_IMAGE)  float[] getMatrix();
}
class ImageFilter{
   @Source(SUSI_IMAGE)  int getMaxParameter();
   @Source(SUSI_IMAGE)  int getParameter();
   @Source(SUSI_IMAGE)  java.lang.String getName();
   @Source(SUSI_IMAGE)  com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset();
   @Source(SUSI_IMAGE)  byte getFilterType();
   @Source(SUSI_IMAGE)  int getMinParameter();
   @Source(SUSI_IMAGE)  int getPreviewParameter();
   @Source(SUSI_IMAGE)  int getDefaultParameter();
}
class ImageFilterCurves{
    void setSpline(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.filtershow.ui.Spline arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_IMAGE)  com.android.gallery3d.filtershow.ui.Spline getSpline(  int arg0);
}
class ImageFilterGeometry{
   @Source(SUSI_IMAGE)  android.graphics.Bitmap apply(  android.graphics.Bitmap arg0, float arg1, boolean arg2);
}
class ImageFilterRS{
    void setRenderScriptContext(  @Sink(SUSI_NO_CATEGORY) android.app.Activity arg0);
   @Source(SUSI_IMAGE)  android.renderscript.RenderScript getRenderScriptContext();
   @Source(SUSI_IMAGE)  android.graphics.Bitmap apply(  android.graphics.Bitmap arg0, float arg1, boolean arg2);
}
class ImageFilterTinyPlanet{
   @Source(SUSI_IMAGE)  float getAngle();
   @Source(SUSI_IMAGE)  android.graphics.Bitmap apply(  android.graphics.Bitmap arg0, float arg1, boolean arg2);
}
class ScriptC_convolve3x3{
    void bind_gPixels(  @Sink(SUSI_NO_CATEGORY) android.renderscript.Allocation arg0);
}

package org.apache.harmony.luni.internal.util;

class TimezoneGetter{
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.luni.internal.util.TimezoneGetter getInstance();
}

package com.android.email.mail.transport;

class CountingOutputStream{
   @Source(SUSI_NO_CATEGORY)  long getCount();
}
class DiscourseLogger{
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getLines();
}
class EOLConvertingOutputStream{
    void write(  @Sink(SUSI_EMAIL) int arg0);
}
class MailTransport{
    void writeLine(  @Sink(SUSI_EMAIL) java.lang.String arg0, @Sink(SUSI_EMAIL) java.lang.String arg1);
    void setSoTimeout(  @Sink(SUSI_EMAIL) int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getHost();
   @Source(SUSI_NO_CATEGORY)  int getPort();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInputStream();
   @Source(SUSI_NO_CATEGORY)  java.io.OutputStream getOutputStream();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getLocalAddress();
}

package com.android.gallery3d.picasasource;

class BasePicasaAlbum{
   @Source(SUSI_IMAGE)  android.database.Cursor internalQuery(  int arg0, int arg1);
   @Source(SUSI_IMAGE)  java.util.ArrayList getMediaItem(  int arg0, int arg1);
   @Source(SUSI_IMAGE)  long reload();
}
class FaceImage{
   @Source(SUSI_IMAGE)  java.lang.String getMimeType();
   @Source(SUSI_IMAGE)  int getHeight();
   @Source(SUSI_IMAGE)  int getWidth();
}
class PicasaAlbum{
   @Source(SUSI_IMAGE)  android.database.Cursor internalQuery(  int arg0, int arg1);
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaItem getCoverMediaItem();
   @Source(SUSI_IMAGE)  java.lang.String getName();
   @Source(SUSI_IMAGE)  long getCacheSize();
   @Source(SUSI_IMAGE)  int getSupportedOperations();
   @Source(SUSI_IMAGE)  com.google.android.picasasync.PhotoEntry getPhotoEntry(  com.android.gallery3d.picasasource.PicasaSource arg0, long arg1);
   @Source(SUSI_IMAGE)  int getCacheStatus();
   @Source(SUSI_IMAGE)  int getMediaItemCount();
   @Source(SUSI_IMAGE)  int getCacheFlag();
}
class PicasaAlbum$CoverItem{
   @Source(SUSI_IMAGE)  int getWidth();
   @Source(SUSI_IMAGE)  int getHeight();
   @Source(SUSI_IMAGE)  java.lang.String getMimeType();
}
class PicasaAlbumSet{
   @Source(SUSI_IMAGE)  long getTotalUsedCacheSize(  android.content.Context arg0);
   @Source(SUSI_IMAGE)  java.lang.String getName();
   @Source(SUSI_IMAGE)  long getTotalTargetCacheSize(  com.android.gallery3d.picasasource.PicasaSource arg0);
   @Source(SUSI_IMAGE)  int getSubMediaSetCount();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaSet getSubMediaSet(  int arg0);
}
class PicasaAlbumSet$PicasaSyncTaskFuture{
   @Source(SUSI_SYNCHRONIZATION_DATA)  int getSyncResult();
   @Source(SUSI_IMAGE)  java.lang.Integer get();
}
class PicasaImage{
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.Face[] getFaces();
   @Source(SUSI_IMAGE)  java.lang.String getMimeType();
   @Source(SUSI_IMAGE)  android.net.Uri getPlayUri();
   @Source(SUSI_IMAGE)  android.net.Uri getContentUri();
   @Source(SUSI_IMAGE)  java.lang.String getName();
   @Source(SUSI_IMAGE)  int getWidth();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaDetails getDetails();
   @Source(SUSI_IMAGE)  long getDateInMs();
   @Source(SUSI_IMAGE)  com.google.android.picasasync.PhotoEntry getPhotoEntry();
   @Source(SUSI_IMAGE)  int getSupportedOperations();
   @Source(SUSI_IMAGE)  long getAlbumId();
   @Source(SUSI_IMAGE)  long getSize();
   @Source(SUSI_IMAGE)  java.lang.String[] getTags();
   @Source(SUSI_IMAGE)  int getMediaType();
   @Source(SUSI_IMAGE)  int getFullImageRotation();
   @Source(SUSI_IMAGE)  int getHeight();
}
class PicasaPostAlbum{
   @Source(SUSI_IMAGE)  int getMediaItemCount();
   @Source(SUSI_IMAGE)  int getSupportedOperations();
   @Source(SUSI_IMAGE)  java.lang.String getName();
   @Source(SUSI_IMAGE)  android.database.Cursor internalQuery(  int arg0, int arg1);
}
class PicasaPostAlbum$PostSyncFuture{
   @Source(SUSI_IMAGE)  java.lang.Integer get();
}
class PicasaSource{
   @Source(SUSI_IMAGE)  com.google.android.picasastore.PicasaStoreFacade getPicasaStoreFacade();
   @Source(SUSI_IMAGE)  com.android.gallery3d.app.GalleryApp getApplication();
   @Source(SUSI_IMAGE)  long getDateTaken(  com.android.gallery3d.data.MediaObject arg0);
   @Source(SUSI_IMAGE)  long getTotalTargetCacheSize();
   @Source(SUSI_IMAGE)  com.google.android.picasasync.PicasaFacade getPicasaFacade();
   @Source(SUSI_IMAGE)  java.lang.String getContentType(  com.android.gallery3d.data.MediaObject arg0);
   @Source(SUSI_IMAGE)  double getLatitude(  com.android.gallery3d.data.MediaObject arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.common.BlobCache getFaceCache(  android.content.Context arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.Path getDefaultSetOf(  com.android.gallery3d.data.Path arg0);
   @Source(SUSI_IMAGE)  long getTotalUsedCacheSize();
   @Source(SUSI_IMAGE)  android.database.Cursor query(  android.net.Uri arg0, java.lang.String[] arg1, java.lang.String arg2, java.lang.String[] arg3, java.lang.String arg4);
   @Source(SUSI_IMAGE)  java.lang.String getImageTitle(  com.android.gallery3d.data.MediaObject arg0);
   @Source(SUSI_IMAGE)  long getPicasaId(  com.android.gallery3d.data.MediaObject arg0);
   @Source(SUSI_IMAGE)  android.app.Dialog getVersionCheckDialog(  android.app.Activity arg0);
   @Source(SUSI_IMAGE)  android.content.ContentResolver getContentResolver();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaItem getFaceItem(  android.content.Context arg0, com.android.gallery3d.data.MediaItem arg1, int arg2);
   @Source(SUSI_IMAGE)  java.lang.String getUserAccount(  android.content.Context arg0, com.android.gallery3d.data.MediaObject arg1);
   @Source(SUSI_IMAGE)  android.app.Dialog getVersionCheckDialog(  android.app.Activity arg0, int arg1);
   @Source(SUSI_IMAGE)  android.content.ContentProviderClient getContentProvider();
   @Source(SUSI_IMAGE)  double getLongitude(  com.android.gallery3d.data.MediaObject arg0);
   @Source(SUSI_IMAGE)  android.content.ContentProviderClient getStoreProvider();
}

package com.android.providers.contacts.aggregation.util;

class CommonNicknameCache{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String[] getCommonNicknameClusters(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
}
class ContactMatcher{
    void updateScoreWithNicknameMatch(  @Sink(SUSI_CONTACT_INFORMATION) long arg0);
    void updateScoreWithPhoneNumberMatch(  @Sink(SUSI_CONTACT_INFORMATION) long arg0);
    void updateScoreWithEmailMatch(  @Sink(SUSI_CONTACT_INFORMATION) long arg0);
    void matchName(  @Sink(SUSI_CONTACT_INFORMATION) long arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4, @Sink(SUSI_CONTACT_INFORMATION) int arg5);
}
class ContactMatcher$MatchScore{
   @Source(SUSI_CONTACT_INFORMATION)  int getScore();
   @Source(SUSI_CONTACT_INFORMATION)  long getContactId();
}
class NameDistance{
   @Source(SUSI_CONTACT_INFORMATION)  float getDistance(  @Sink(SUSI_CONTACT_INFORMATION) byte[] arg0, @Sink(SUSI_CONTACT_INFORMATION) byte[] arg1);
}

package com.android.providers.contacts.util;

class Clock{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.providers.contacts.util.Clock getInstance();
}
class DbQueryUtils{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getEqualityClause(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getInequalityClause(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getEqualityClause(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1);
}
class MemoryUtils{
   @Source(SUSI_CONTACT_INFORMATION)  long getTotalMemorySize();
}

package org.apache.http.impl.entity;

class EntityDeserializer{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.entity.BasicHttpEntity doDeserialize(  @Sink(SUSI_NO_CATEGORY) org.apache.http.io.SessionInputBuffer arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.HttpMessage arg1);
}

package android.util;

class AtomicFile{
   @Source(SUSI_NO_CATEGORY)  java.io.File getBaseFile();
   @Source(SUSI_NO_CATEGORY)  byte[] readFully();
}
class Base64$Decoder{
   @Source(SUSI_NO_CATEGORY)  boolean process(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
}
class Base64$Encoder{
   @Source(SUSI_NO_CATEGORY)  boolean process(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
}
class DisplayMetrics{
    void setTo(  @Sink(SUSI_NO_CATEGORY) android.util.DisplayMetrics arg0);
}
class EventLog{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTagName(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class EventLog$Event{
   @Source(SUSI_NO_CATEGORY)  int getProcessId();
   @Source(SUSI_NO_CATEGORY)  int getTag();
   @Source(SUSI_NO_CATEGORY)  long getTimeNanos();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getData();
   @Source(SUSI_NO_CATEGORY)  int getThreadId();
}
class FloatProperty{
    void set(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void set(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Float arg1);
}
class IntProperty{
    void set(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Integer arg1);
    void set(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
}
class LocalLog{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
}
class Log{
    int v(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1);
    int w(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1);
    int e(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1);
    int d(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1);
    int i(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1);
    int wtf(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) java.lang.Throwable arg2);
    int println(  @Sink(SUSI_LOG) int arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) java.lang.String arg2);
    int i(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) java.lang.Throwable arg2);
    int w(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) java.lang.Throwable arg2);
    int v(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) java.lang.Throwable arg2);
    int d(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) java.lang.Throwable arg2);
    int e(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) java.lang.Throwable arg2);
    int w(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.Throwable arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getStackTraceString(  @Sink(SUSI_NO_CATEGORY) java.lang.Throwable arg0);
}
class LogPrinter{
    void println(  @Sink(SUSI_LOG) java.lang.String arg0);
}
class LongSparseArray{
    void append(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void setValueAt(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
}
class LruCache{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class NtpTrustedTime{
   @Source(SUSI_NO_CATEGORY)  long getCachedNtpTime();
   @Source(SUSI_NO_CATEGORY)  android.util.NtpTrustedTime getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  long getCachedNtpTimeReference();
   @Source(SUSI_NO_CATEGORY)  long getCacheCertainty();
   @Source(SUSI_NO_CATEGORY)  long getCacheAge();
}
class Patterns{
   @Source(SUSI_NO_CATEGORY)  java.lang.String concatGroups(  @Sink(SUSI_NO_CATEGORY) java.util.regex.Matcher arg0);
}
class PrefixPrinter{
    void println(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class PrintWriterPrinter{
    void println(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class Property{
    void set(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.Class getType();
}
class ReflectiveProperty{
    void set(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Singleton{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get();
}
class Slog{
    int v(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) java.lang.Throwable arg2);
    int i(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) java.lang.Throwable arg2);
    int d(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) java.lang.Throwable arg2);
    int e(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) java.lang.Throwable arg2);
    int w(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) java.lang.Throwable arg2);
    int println(  @Sink(SUSI_LOG) int arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) java.lang.String arg2);
    int w(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.Throwable arg1);
    int i(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1);
    int v(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1);
    int w(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1);
    int e(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1);
    int d(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1);
}
class SparseArray<E> {
    void append(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void setValueAt(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class SparseBooleanArray{
    void append(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class SparseIntArray{
    void append(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int get(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class SparseLongArray{
    void append(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  long get(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long get(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
}
class TimeUtils{
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getTimeZonesWithUniqueOffsets(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getTimeZones(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.TimeZone getTimeZone(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTimeZoneDatabaseVersion();
}
class TypedValue{
   @Source(SUSI_NO_CATEGORY)  float complexToDimensionNoisy(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.util.DisplayMetrics arg1);
    void setTo(  @Sink(SUSI_NO_CATEGORY) android.util.TypedValue arg0);
   @Source(SUSI_NO_CATEGORY)  float getFloat();
   @Source(SUSI_NO_CATEGORY)  float getDimension(  @Sink(SUSI_NO_CATEGORY) android.util.DisplayMetrics arg0);
   @Source(SUSI_NO_CATEGORY)  float getFraction(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
}
class XmlPullAttributes{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAttributeValue(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getAttributeFloatValue(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getIdAttribute();
   @Source(SUSI_NO_CATEGORY)  int getAttributeCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getClassAttribute();
   @Source(SUSI_NO_CATEGORY)  float getAttributeFloatValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) float arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAttributeValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPositionDescription();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAttributeName(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getStyleAttribute();
   @Source(SUSI_NO_CATEGORY)  int getAttributeNameResource(  @Sink(SUSI_NO_CATEGORY) int arg0);
}

package com.android.internal.logging;

class AndroidHandler{
    void publish(  @Sink(SUSI_LOG) java.util.logging.LogRecord arg0);
    void publish(  @Sink(SUSI_LOG) java.util.logging.Logger arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) java.util.logging.Level arg2, @Sink(SUSI_LOG) java.lang.String arg3);
   @Source(SUSI_NO_CATEGORY)  int getAndroidLevel(  @Sink(SUSI_NO_CATEGORY) java.util.logging.Level arg0);
}
class AndroidHandler$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.String format(  @Sink(SUSI_NO_CATEGORY) java.util.logging.LogRecord arg0);
}

package com.android.deskclock.widget.multiwaveview;

class Ease$Cubic$1{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Cubic$2{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Cubic$3{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Linear$1{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Quad$1{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Quad$2{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Quad$3{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Quart$1{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Quart$2{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Quart$3{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Quint$1{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Quint$2{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Quint$3{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Sine$1{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Sine$2{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Ease$Sine$3{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class GlowPadView{
    void setVibrateEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setEnableTarget(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  int getTargetResourceId();
   @Source(SUSI_NO_CATEGORY)  int getSuggestedMinimumWidth();
   @Source(SUSI_NO_CATEGORY)  int getTargetDescriptionsResourceId();
   @Source(SUSI_NO_CATEGORY)  int getDirectionDescriptionsResourceId();
   @Source(SUSI_NO_CATEGORY)  int getTargetPosition(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getSuggestedMinimumHeight();
}
class PointCloud{
   @Source(SUSI_NO_CATEGORY)  int getAlphaForPoint(  @Sink(SUSI_NO_CATEGORY) com.android.deskclock.widget.multiwaveview.PointCloud$Point arg0);
   @Source(SUSI_NO_CATEGORY)  float getScale();
}
class PointCloud$GlowManager{
   @Source(SUSI_NO_CATEGORY)  float getY();
   @Source(SUSI_NO_CATEGORY)  float getX();
   @Source(SUSI_NO_CATEGORY)  float getRadius();
   @Source(SUSI_NO_CATEGORY)  float getAlpha();
}
class PointCloud$WaveManager{
   @Source(SUSI_NO_CATEGORY)  float getRadius();
   @Source(SUSI_NO_CATEGORY)  float getAlpha();
}
class TargetDrawable{
    void setDrawable(  @Sink(SUSI_NO_CATEGORY) android.content.res.Resources arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setState(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  float getX();
   @Source(SUSI_NO_CATEGORY)  float getY();
   @Source(SUSI_NO_CATEGORY)  float getScaleY();
   @Source(SUSI_NO_CATEGORY)  float getScaleX();
   @Source(SUSI_NO_CATEGORY)  float getAlpha();
   @Source(SUSI_NO_CATEGORY)  int getResourceId();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  float getPositionX();
   @Source(SUSI_NO_CATEGORY)  float getPositionY();
}
class TargetDrawable$DrawableWithAlpha{
    void setColorFilter(  @Sink(SUSI_NO_CATEGORY) android.graphics.ColorFilter arg0);
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getAlpha();
   @Source(SUSI_NO_CATEGORY)  int getOpacity();
}

package com.android.server.dreams;

class DreamController{
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0);
    void startDream(  @Sink(SUSI_NO_CATEGORY) android.os.Binder arg0, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
}
class DreamManagerService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void setDreamComponents(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName[] arg0);
    void testDream(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.ComponentName[] getDreamComponents();
   @Source(SUSI_NETWORK_INFORMATION)  android.content.ComponentName getDefaultDreamComponent();
}

package com.android.systemui.recent;

class RecentTasksLoader{
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getLoadedTasks();
   @Source(SUSI_NO_CATEGORY)  com.android.systemui.recent.TaskDescription createTaskDescription(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg3, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg4);
   @Source(SUSI_NO_CATEGORY)  com.android.systemui.recent.TaskDescription getFirstTask();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getDefaultIcon();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getDefaultThumbnail();
   @Source(SUSI_NO_CATEGORY)  com.android.systemui.recent.RecentTasksLoader getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.systemui.recent.TaskDescription loadFirstTask();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getFullResDefaultActivityIcon();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getFullResIcon(  @Sink(SUSI_NO_CATEGORY) android.content.res.Resources arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class RecentsHorizontalScrollView{
    void setLayoutTransition(  @Sink(SUSI_NO_CATEGORY) android.animation.LayoutTransition arg0);
    void setMinSwipeAlpha(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  int getHorizontalFadingEdgeLength();
   @Source(SUSI_NO_CATEGORY)  android.view.View getChildContentView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  int getVerticalFadingEdgeLength();
   @Source(SUSI_NO_CATEGORY)  android.view.View getChildAtPosition(  @Sink(SUSI_NO_CATEGORY) android.view.MotionEvent arg0);
}
class RecentsPanelView{
    void setMinSwipeAlpha(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class RecentsPanelView$TaskDescriptionAdapter{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getCount();
}
class RecentsScrollViewPerformanceHelper{
   @Source(SUSI_NO_CATEGORY)  int getVerticalFadingEdgeLengthCallback();
   @Source(SUSI_NO_CATEGORY)  int getHorizontalFadingEdgeLengthCallback();
}
class RecentsVerticalScrollView{
    void setLayoutTransition(  @Sink(SUSI_NO_CATEGORY) android.animation.LayoutTransition arg0);
    void setMinSwipeAlpha(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getChildContentView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getChildAtPosition(  @Sink(SUSI_NO_CATEGORY) android.view.MotionEvent arg0);
   @Source(SUSI_NO_CATEGORY)  int getHorizontalFadingEdgeLength();
   @Source(SUSI_NO_CATEGORY)  int getVerticalFadingEdgeLength();
}
class TaskDescription{
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getIcon();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getLabel();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getThumbnail();
}

package com.android.wallpaper.grass;

class GrassRS{
    void setOffset(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
}
class ScriptC_grass{
    void bind_Blades(  @Sink(SUSI_NO_CATEGORY) com.android.wallpaper.grass.ScriptField_Blade arg0);
    void bind_Verticies(  @Sink(SUSI_NO_CATEGORY) com.android.wallpaper.grass.ScriptField_Vertex arg0);
}
class ScriptField_Blade{
    void set(  @Sink(SUSI_NO_CATEGORY) com.android.wallpaper.grass.ScriptField_Blade$Item arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Element createElement(  @Sink(SUSI_NO_CATEGORY) android.renderscript.RenderScript arg0);
}
class ScriptField_Vertex{
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Element createElement(  @Sink(SUSI_NO_CATEGORY) android.renderscript.RenderScript arg0);
}

package android.service.wallpaper;

class IWallpaperConnection$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IWallpaperConnection$Stub$Proxy{
    void engineShown(  @Sink(SUSI_NO_CATEGORY) android.service.wallpaper.IWallpaperEngine arg0);
    void attachEngine(  @Sink(SUSI_NO_CATEGORY) android.service.wallpaper.IWallpaperEngine arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.ParcelFileDescriptor setWallpaper(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class IWallpaperEngine$Stub{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IWallpaperEngine$Stub$Proxy{
    void setDesiredSize(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setVisibility(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void dispatchWallpaperCommand(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg4);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class IWallpaperService$Stub{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IWallpaperService$Stub$Proxy{
    void attach(  @Sink(SUSI_NO_CATEGORY) android.service.wallpaper.IWallpaperConnection arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class WallpaperService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.ArrayList access$300(  android.service.wallpaper.WallpaperService arg0);
}
class WallpaperService$Engine{
    void dump(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) java.io.FileDescriptor arg1, @Sink(SUSI_FILE) java.io.PrintWriter arg2, @Sink(SUSI_FILE) java.lang.String[] arg3);
    void setTouchEventsEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setOffsetNotificationsEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.view.SurfaceHolder getSurfaceHolder();
   @Source(SUSI_NETWORK_INFORMATION)  int getDesiredMinimumHeight();
   @Source(SUSI_NO_CATEGORY)  int getDesiredMinimumWidth();
}
class WallpaperService$Engine$2{
    void setFixedSize(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class WallpaperService$IWallpaperEngineWrapper{
    void dispatchWallpaperCommand(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg4);
    void setDesiredSize(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setVisibility(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}

package android.view.accessibility;

class AccessibilityEvent{
    void setSealed(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.accessibility.AccessibilityRecord getRecord(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getRecordCount();
   @Source(SUSI_NO_CATEGORY)  long getEventTime();
   @Source(SUSI_NO_CATEGORY)  int getMovementGranularity();
   @Source(SUSI_NO_CATEGORY)  int getEventType();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getPackageName();
   @Source(SUSI_NO_CATEGORY)  int getAction();
}
class AccessibilityInteractionClient{
   @Source(SUSI_NO_CATEGORY)  boolean performAccessibilityAction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg4);
    void addConnection(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.accessibilityservice.IAccessibilityServiceConnection arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.accessibility.AccessibilityInteractionClient getInstanceForThread(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  android.accessibilityservice.IAccessibilityServiceConnection getConnection(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.accessibility.AccessibilityInteractionClient getInstance();
   @Source(SUSI_NO_CATEGORY)  java.util.List findAccessibilityNodeInfosByText(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
   @Source(SUSI_NO_CATEGORY)  android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class AccessibilityManager{
    void sendAccessibilityEvent(  @Sink(SUSI_LOG) android.view.accessibility.AccessibilityEvent arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getEnabledAccessibilityServiceList(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.accessibility.AccessibilityManager getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getInstalledAccessibilityServiceList();
   @Source(SUSI_NO_CATEGORY)  java.util.List getAccessibilityServiceList();
   @Source(SUSI_NO_CATEGORY)  android.view.accessibility.IAccessibilityManagerClient getClient();
}
class AccessibilityNodeInfo{
    void setClickable(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setLabeledBy(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
    void setPassword(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setLabelFor(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
    void addChild(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setLabeledBy(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setSource(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean performAction(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setCheckable(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setVisibleToUser(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  boolean performAction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void setFocusable(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setBoundsInParent(  @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg0);
    void setLabelFor(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setScrollable(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setParent(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
    void setFocused(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setBoundsInScreen(  @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg0);
    void setSource(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
    void setEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setChecked(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setParent(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setAccessibilityFocused(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setLongClickable(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setSelected(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int getActions();
   @Source(SUSI_NO_CATEGORY)  long getParentNodeId();
   @Source(SUSI_NO_CATEGORY)  int getWindowId();
   @Source(SUSI_NO_CATEGORY)  long getSourceNodeId();
   @Source(SUSI_NO_CATEGORY)  int getVirtualDescendantId(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.accessibility.AccessibilityNodeInfo getChild(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getText();
   @Source(SUSI_NO_CATEGORY)  int getAccessibilityViewId(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  int getMovementGranularities();
   @Source(SUSI_NO_CATEGORY)  android.view.accessibility.AccessibilityNodeInfo getParent();
   @Source(SUSI_NO_CATEGORY)  int getChildCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getPackageName();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getClassName();
   @Source(SUSI_NO_CATEGORY)  android.view.accessibility.AccessibilityNodeInfo getLabeledBy();
   @Source(SUSI_NO_CATEGORY)  android.view.accessibility.AccessibilityNodeInfo getLabelFor();
   @Source(SUSI_NO_CATEGORY)  android.util.SparseLongArray getChildNodeIds();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getContentDescription();
}
class AccessibilityNodeInfoCache{
    void add(  @Sink(SUSI_NO_CATEGORY) android.view.accessibility.AccessibilityNodeInfo arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.accessibility.AccessibilityNodeInfo get(  @Sink(SUSI_NO_CATEGORY) long arg0);
}
class AccessibilityNodeProvider{
   @Source(SUSI_NO_CATEGORY)  java.util.List findAccessibilityNodeInfosByText(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class AccessibilityRecord{
    void setSource(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setPassword(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setChecked(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setFullScreen(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setSource(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
    void setScrollable(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getClassName();
   @Source(SUSI_NO_CATEGORY)  java.util.List getText();
   @Source(SUSI_NO_CATEGORY)  int getRemovedCount();
   @Source(SUSI_NO_CATEGORY)  int getCurrentItemIndex();
   @Source(SUSI_NO_CATEGORY)  int getAddedCount();
   @Source(SUSI_NO_CATEGORY)  android.os.Parcelable getParcelableData();
   @Source(SUSI_NO_CATEGORY)  int getMaxScrollX();
   @Source(SUSI_NO_CATEGORY)  int getMaxScrollY();
   @Source(SUSI_NO_CATEGORY)  int getWindowId();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getBeforeText();
   @Source(SUSI_NO_CATEGORY)  int getItemCount();
   @Source(SUSI_NO_CATEGORY)  int getToIndex();
   @Source(SUSI_NO_CATEGORY)  long getSourceNodeId();
   @Source(SUSI_NO_CATEGORY)  int getFromIndex();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getContentDescription();
   @Source(SUSI_NO_CATEGORY)  int getScrollY();
   @Source(SUSI_NO_CATEGORY)  int getScrollX();
   @Source(SUSI_NO_CATEGORY)  android.view.accessibility.AccessibilityNodeInfo getSource();
}
class IAccessibilityInteractionConnection$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IAccessibilityInteractionConnection$Stub$Proxy{
    void focusSearch(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.view.accessibility.IAccessibilityInteractionConnectionCallback arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) long arg6);
    void performAccessibilityAction(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.view.accessibility.IAccessibilityInteractionConnectionCallback arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) int arg6, @Sink(SUSI_NO_CATEGORY) long arg7);
    void findAccessibilityNodeInfoByAccessibilityId(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.view.accessibility.IAccessibilityInteractionConnectionCallback arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) long arg5);
    void findAccessibilityNodeInfoByViewId(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.view.accessibility.IAccessibilityInteractionConnectionCallback arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) long arg6);
    void findAccessibilityNodeInfosByText(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.view.accessibility.IAccessibilityInteractionConnectionCallback arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) long arg6);
    void findFocus(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.view.accessibility.IAccessibilityInteractionConnectionCallback arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) long arg6);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IAccessibilityInteractionConnectionCallback$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IAccessibilityInteractionConnectionCallback$Stub$Proxy{
    void setFindAccessibilityNodeInfoResult(  @Sink(SUSI_NO_CATEGORY) android.view.accessibility.AccessibilityNodeInfo arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setFindAccessibilityNodeInfosResult(  @Sink(SUSI_NO_CATEGORY) java.util.List arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setPerformAccessibilityActionResult(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IAccessibilityManager$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IAccessibilityManager$Stub$Proxy{
    void removeAccessibilityInteractionConnection(  @Sink(SUSI_NO_CATEGORY) android.view.IWindow arg0);
   @Source(SUSI_NO_CATEGORY)  boolean sendAccessibilityEvent(  @Sink(SUSI_NO_CATEGORY) android.view.accessibility.AccessibilityEvent arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void unregisterUiTestAutomationService(  @Sink(SUSI_NO_CATEGORY) android.accessibilityservice.IAccessibilityServiceClient arg0);
   @Source(SUSI_NO_CATEGORY)  int addClient(  @Sink(SUSI_NO_CATEGORY) android.view.accessibility.IAccessibilityManagerClient arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void registerUiTestAutomationService(  @Sink(SUSI_NO_CATEGORY) android.accessibilityservice.IAccessibilityServiceClient arg0, @Sink(SUSI_NO_CATEGORY) android.accessibilityservice.AccessibilityServiceInfo arg1);
   @Source(SUSI_NO_CATEGORY)  int addAccessibilityInteractionConnection(  @Sink(SUSI_NO_CATEGORY) android.view.IWindow arg0, @Sink(SUSI_NO_CATEGORY) android.view.accessibility.IAccessibilityInteractionConnection arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void interrupt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getEnabledAccessibilityServiceList(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NO_CATEGORY)  java.util.List getInstalledAccessibilityServiceList(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class IAccessibilityManagerClient$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IAccessibilityManagerClient$Stub$Proxy{
    void setState(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}

package com.google.android.apps.lightcycle.math;

class Matrix3x3d{
    void set(  @Sink(SUSI_NO_CATEGORY) double arg0, @Sink(SUSI_NO_CATEGORY) double arg1, @Sink(SUSI_NO_CATEGORY) double arg2, @Sink(SUSI_NO_CATEGORY) double arg3, @Sink(SUSI_NO_CATEGORY) double arg4, @Sink(SUSI_NO_CATEGORY) double arg5, @Sink(SUSI_NO_CATEGORY) double arg6, @Sink(SUSI_NO_CATEGORY) double arg7, @Sink(SUSI_NO_CATEGORY) double arg8);
    void setSameDiagonal(  @Sink(SUSI_NO_CATEGORY) double arg0);
    void setColumn(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) com.google.android.apps.lightcycle.math.Vector3d arg1);
    void set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) double arg2);
    void set(  @Sink(SUSI_NO_CATEGORY) com.google.android.apps.lightcycle.math.Matrix3x3d arg0);
   @Source(SUSI_NO_CATEGORY)  double get(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class Quaternion{
    void set(  @Sink(SUSI_NO_CATEGORY) com.google.android.apps.lightcycle.math.Quaternion arg0);
}
class Vector3d{
    void set(  @Sink(SUSI_NO_CATEGORY) com.google.android.apps.lightcycle.math.Vector3d arg0);
}

package com.google.android.apps.lightcycle.opengl;

class DeviceOrientedSprite{
    void setPositions(  @Sink(SUSI_NO_CATEGORY) android.graphics.PointF arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.PointF arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setPositionsCentered(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.graphics.PointF getPosition();
}
class DeviceOrientedSprite$1{
   @Source(SUSI_NO_CATEGORY)  android.graphics.PointF getPosition(  @Sink(SUSI_NO_CATEGORY) com.google.android.apps.lightcycle.sensor.DeviceOrientationDetector$DeviceOrientation arg0);
}
class DrawableGL{
   @Source(SUSI_NO_CATEGORY)  com.google.android.apps.lightcycle.opengl.Shader getShader();
}
class GLTexture{
   @Source(SUSI_NO_CATEGORY)  int getIndex();
}
class Shader{
    void setTransform(  @Sink(SUSI_NO_CATEGORY) float[] arg0);
    void setVertices(  @Sink(SUSI_NO_CATEGORY) java.nio.FloatBuffer arg0);
    void setTexCoords(  @Sink(SUSI_NO_CATEGORY) java.nio.FloatBuffer arg0);
   @Source(SUSI_NO_CATEGORY)  int getUniform(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getAttribute(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class SingleColorShader{
    void setColor(  @Sink(SUSI_NO_CATEGORY) float[] arg0);
}
class Sphere{
   @Source(SUSI_NO_CATEGORY)  int getTextureId();
}
class Sprite{
    void setTexture(  @Sink(SUSI_NO_CATEGORY) com.google.android.apps.lightcycle.opengl.GLTexture arg0);
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
}

package android.nfc.tech;

class BasicTagTechnology{
   @Source(SUSI_NFC)  android.nfc.Tag getTag();
   @Source(SUSI_NFC)  int getMaxTransceiveLengthInternal();
   @Source(SUSI_NFC)  byte[] transceive(  @Sink(SUSI_NFC) byte[] arg0, @Sink(SUSI_NFC) boolean arg1);
}
class IsoDep{
    void setTimeout(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  int getMaxTransceiveLength();
   @Source(SUSI_NFC)  byte[] transceive(  @Sink(SUSI_NFC) byte[] arg0, @Sink(SUSI_NFC) boolean arg1);
   @Source(SUSI_NFC)  byte[] getHistoricalBytes();
   @Source(SUSI_NFC)  android.nfc.Tag getTag();
   @Source(SUSI_NFC)  byte[] getHiLayerResponse();
   @Source(SUSI_NFC)  byte[] transceive(  @Sink(SUSI_NFC) byte[] arg0);
   @Source(SUSI_NFC)  int getTimeout();
   @Source(SUSI_NFC)  android.nfc.tech.IsoDep get(  @Sink(SUSI_NFC) android.nfc.Tag arg0);
}
class MifareClassic{
    void decrement(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) int arg1);
    void setTimeout(  @Sink(SUSI_NFC) int arg0);
    void increment(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) int arg1);
   @Source(SUSI_NFC)  byte[] transceive(  @Sink(SUSI_NFC) byte[] arg0);
   @Source(SUSI_NFC)  android.nfc.tech.MifareClassic get(  @Sink(SUSI_NFC) android.nfc.Tag arg0);
   @Source(SUSI_NFC)  int getSize();
   @Source(SUSI_NFC)  int getBlockCountInSector(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  int getBlockCount();
   @Source(SUSI_NFC)  int getMaxTransceiveLength();
   @Source(SUSI_NFC)  byte[] readBlock(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  int getTimeout();
   @Source(SUSI_NFC)  byte[] transceive(  @Sink(SUSI_NFC) byte[] arg0, @Sink(SUSI_NFC) boolean arg1);
   @Source(SUSI_NFC)  android.nfc.Tag getTag();
   @Source(SUSI_NFC)  int getType();
   @Source(SUSI_NFC)  int getSectorCount();
}
class MifareUltralight{
    void setTimeout(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  byte[] transceive(  @Sink(SUSI_NFC) byte[] arg0, @Sink(SUSI_NFC) boolean arg1);
   @Source(SUSI_NFC)  android.nfc.tech.MifareUltralight get(  @Sink(SUSI_NFC) android.nfc.Tag arg0);
   @Source(SUSI_NFC)  android.nfc.Tag getTag();
   @Source(SUSI_NFC)  byte[] transceive(  @Sink(SUSI_NFC) byte[] arg0);
   @Source(SUSI_NFC)  int getType();
   @Source(SUSI_NFC)  int getTimeout();
   @Source(SUSI_NFC)  byte[] readPages(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  int getMaxTransceiveLength();
}
class Ndef{
   @Source(SUSI_NFC)  byte[] transceive(  @Sink(SUSI_NFC) byte[] arg0, @Sink(SUSI_NFC) boolean arg1);
   @Source(SUSI_NFC)  android.nfc.NdefMessage getCachedNdefMessage();
   @Source(SUSI_NFC)  android.nfc.Tag getTag();
   @Source(SUSI_NFC)  android.nfc.tech.Ndef get(  @Sink(SUSI_NFC) android.nfc.Tag arg0);
   @Source(SUSI_NFC)  java.lang.String getType();
   @Source(SUSI_NFC)  android.nfc.NdefMessage getNdefMessage();
   @Source(SUSI_NFC)  int getMaxSize();
}
class NdefFormatable{
   @Source(SUSI_NFC)  byte[] transceive(  @Sink(SUSI_NFC) byte[] arg0, @Sink(SUSI_NFC) boolean arg1);
   @Source(SUSI_NFC)  android.nfc.tech.NdefFormatable get(  @Sink(SUSI_NFC) android.nfc.Tag arg0);
   @Source(SUSI_NFC)  android.nfc.Tag getTag();
}
class NfcA{
    void setTimeout(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  byte[] transceive(  @Sink(SUSI_NFC) byte[] arg0);
   @Source(SUSI_NFC)  int getTimeout();
   @Source(SUSI_NFC)  int getMaxTransceiveLength();
   @Source(SUSI_NFC)  android.nfc.Tag getTag();
   @Source(SUSI_NFC)  short getSak();
   @Source(SUSI_NFC)  byte[] getAtqa();
   @Source(SUSI_NFC)  android.nfc.tech.NfcA get(  @Sink(SUSI_NFC) android.nfc.Tag arg0);
}
class NfcB{
   @Source(SUSI_NFC)  byte[] transceive(  @Sink(SUSI_NFC) byte[] arg0, @Sink(SUSI_NFC) boolean arg1);
   @Source(SUSI_NFC)  byte[] getProtocolInfo();
   @Source(SUSI_NFC)  byte[] transceive(  @Sink(SUSI_NFC) byte[] arg0);
   @Source(SUSI_NFC)  int getMaxTransceiveLength();
   @Source(SUSI_NFC)  android.nfc.Tag getTag();
   @Source(SUSI_NFC)  android.nfc.tech.NfcB get(  @Sink(SUSI_NFC) android.nfc.Tag arg0);
   @Source(SUSI_NFC)  byte[] getApplicationData();
}
class NfcBarcode{
   @Source(SUSI_NFC)  android.nfc.Tag getTag();
   @Source(SUSI_NFC)  byte[] getBarcode();
   @Source(SUSI_NFC)  int getType();
   @Source(SUSI_NFC)  android.nfc.tech.NfcBarcode get(  @Sink(SUSI_NFC) android.nfc.Tag arg0);
}
class NfcF{
    void setTimeout(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  byte[] transceive(  @Sink(SUSI_NFC) byte[] arg0, @Sink(SUSI_NFC) boolean arg1);
   @Source(SUSI_NFC)  byte[] transceive(  @Sink(SUSI_NFC) byte[] arg0);
   @Source(SUSI_NFC)  int getTimeout();
   @Source(SUSI_NFC)  int getMaxTransceiveLength();
   @Source(SUSI_NFC)  android.nfc.Tag getTag();
   @Source(SUSI_NFC)  byte[] getSystemCode();
   @Source(SUSI_NFC)  android.nfc.tech.NfcF get(  @Sink(SUSI_NFC) android.nfc.Tag arg0);
   @Source(SUSI_NFC)  byte[] getManufacturer();
}
class NfcV{
   @Source(SUSI_NFC)  byte[] transceive(  @Sink(SUSI_NFC) byte[] arg0, @Sink(SUSI_NFC) boolean arg1);
   @Source(SUSI_NFC)  byte getDsfId();
   @Source(SUSI_NFC)  byte getResponseFlags();
   @Source(SUSI_NFC)  byte[] transceive(  @Sink(SUSI_NFC) byte[] arg0);
   @Source(SUSI_NFC)  int getMaxTransceiveLength();
   @Source(SUSI_NFC)  android.nfc.Tag getTag();
   @Source(SUSI_NFC)  android.nfc.tech.NfcV get(  @Sink(SUSI_NFC) android.nfc.Tag arg0);
}

package com.android.internal.net;

class LegacyVpnInfo{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class VpnConfig{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getIntentForConfirmation();
   @Source(SUSI_NO_CATEGORY)  android.app.PendingIntent getIntentForStatusPanel(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) com.android.internal.net.VpnConfig arg1);
}
class VpnProfile{
   @Source(SUSI_NO_CATEGORY)  byte[] encode();
}

package libcore.io;

class BlockGuardOs{
    java.io.FileDescriptor open(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) int arg1, @Sink(SUSI_FILE) int arg2);
    int sendto(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.nio.ByteBuffer arg1, @Sink(SUSI_FILE) int arg2, @Sink(SUSI_FILE) java.net.InetAddress arg3, @Sink(SUSI_FILE) int arg4);
    int writev(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.lang.Object[] arg1, @Sink(SUSI_FILE) int[] arg2, @Sink(SUSI_FILE) int[] arg3);
    int write(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.nio.ByteBuffer arg1);
    int write(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) byte[] arg1, @Sink(SUSI_FILE) int arg2, @Sink(SUSI_FILE) int arg3);
    int sendto(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) byte[] arg1, @Sink(SUSI_FILE) int arg2, @Sink(SUSI_FILE) int arg3, @Sink(SUSI_FILE) int arg4, @Sink(SUSI_FILE) java.net.InetAddress arg5, @Sink(SUSI_FILE) int arg6);
}
class DropBox{
   @Source(SUSI_NO_CATEGORY)  libcore.io.DropBox$Reporter getReporter();
}
class DropBox$DefaultReporter{
    void addData(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void addText(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class ErrnoException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
}
class EventLogger{
   @Source(SUSI_NO_CATEGORY)  libcore.io.EventLogger$Reporter getReporter();
}
class ForwardingOs{
    int writev(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.lang.Object[] arg1, @Sink(SUSI_FILE) int[] arg2, @Sink(SUSI_FILE) int[] arg3);
    void setsockoptByte(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) int arg1, @Sink(SUSI_FILE) int arg2, @Sink(SUSI_FILE) int arg3);
    void setsockoptInt(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) int arg1, @Sink(SUSI_FILE) int arg2, @Sink(SUSI_FILE) int arg3);
    int write(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.nio.ByteBuffer arg1);
    void setsockoptTimeval(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) int arg1, @Sink(SUSI_FILE) int arg2, @Sink(SUSI_FILE) libcore.io.StructTimeval arg3);
    java.io.FileDescriptor open(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) int arg1, @Sink(SUSI_FILE) int arg2);
    void setsockoptGroupReq(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) int arg1, @Sink(SUSI_FILE) int arg2, @Sink(SUSI_FILE) libcore.io.StructGroupReq arg3);
    long sendfile(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.FileDescriptor arg1, @Sink(SUSI_FILE) libcore.util.MutableLong arg2, @Sink(SUSI_FILE) long arg3);
    void setsockoptIfreq(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) int arg1, @Sink(SUSI_FILE) int arg2, @Sink(SUSI_FILE) java.lang.String arg3);
    void bind(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.net.InetAddress arg1, @Sink(SUSI_FILE) int arg2);
    void setsockoptIpMreqn(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) int arg1, @Sink(SUSI_FILE) int arg2, @Sink(SUSI_FILE) int arg3);
    int write(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) byte[] arg1, @Sink(SUSI_FILE) int arg2, @Sink(SUSI_FILE) int arg3);
    int sendto(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.nio.ByteBuffer arg1, @Sink(SUSI_FILE) int arg2, @Sink(SUSI_FILE) java.net.InetAddress arg3, @Sink(SUSI_FILE) int arg4);
    void setsockoptLinger(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) int arg1, @Sink(SUSI_FILE) int arg2, @Sink(SUSI_FILE) libcore.io.StructLinger arg3);
    int sendto(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) byte[] arg1, @Sink(SUSI_FILE) int arg2, @Sink(SUSI_FILE) int arg3, @Sink(SUSI_FILE) int arg4, @Sink(SUSI_FILE) java.net.InetAddress arg5, @Sink(SUSI_FILE) int arg6);
    void seteuid(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setuid(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setgid(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setegid(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int geteuid();
   @Source(SUSI_NO_CATEGORY)  int getegid();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress[] getaddrinfo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) libcore.io.StructAddrinfo arg1);
   @Source(SUSI_NO_CATEGORY)  libcore.io.StructTimeval getsockoptTimeval(  @Sink(SUSI_NO_CATEGORY) java.io.FileDescriptor arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  libcore.io.StructPasswd getpwnam(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getenv(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  libcore.io.StructPasswd getpwuid(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getnameinfo(  @Sink(SUSI_NO_CATEGORY) java.net.InetAddress arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getpid();
   @Source(SUSI_NO_CATEGORY)  int getuid();
   @Source(SUSI_NO_CATEGORY)  int getgid();
   @Source(SUSI_NO_CATEGORY)  libcore.io.StructLinger getsockoptLinger(  @Sink(SUSI_NO_CATEGORY) java.io.FileDescriptor arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getsockoptInt(  @Sink(SUSI_NO_CATEGORY) java.io.FileDescriptor arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getppid();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress ioctlInetAddress(  @Sink(SUSI_NO_CATEGORY) java.io.FileDescriptor arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getsockoptInAddr(  @Sink(SUSI_NO_CATEGORY) java.io.FileDescriptor arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.net.SocketAddress getsockname(  @Sink(SUSI_NO_CATEGORY) java.io.FileDescriptor arg0);
   @Source(SUSI_NO_CATEGORY)  int getsockoptByte(  @Sink(SUSI_NO_CATEGORY) java.io.FileDescriptor arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class GaiException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
}
class IoBridge{
    void setSocketOption(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) int arg1, @Sink(SUSI_FILE) java.lang.Object arg2);
    int sendto(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.nio.ByteBuffer arg1, @Sink(SUSI_FILE) int arg2, @Sink(SUSI_FILE) java.net.InetAddress arg3, @Sink(SUSI_FILE) int arg4);
    int sendto(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) byte[] arg1, @Sink(SUSI_FILE) int arg2, @Sink(SUSI_FILE) int arg3, @Sink(SUSI_FILE) int arg4, @Sink(SUSI_FILE) java.net.InetAddress arg5, @Sink(SUSI_FILE) int arg6);
    void write(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) byte[] arg1, @Sink(SUSI_FILE) int arg2, @Sink(SUSI_FILE) int arg3);
    void bind(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.net.InetAddress arg1, @Sink(SUSI_FILE) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getSocketLocalPort(  @Sink(SUSI_NO_CATEGORY) java.io.FileDescriptor arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getSocketOption(  @Sink(SUSI_NO_CATEGORY) java.io.FileDescriptor arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getSocketLocalAddress(  @Sink(SUSI_NO_CATEGORY) java.io.FileDescriptor arg0);
}
class IoUtils{
    void setBlocking(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) boolean arg1);
}
class Posix{
    int sendto(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) byte[] arg1, @Sink(SUSI_FILE) int arg2, @Sink(SUSI_FILE) int arg3, @Sink(SUSI_FILE) int arg4, @Sink(SUSI_FILE) java.net.InetAddress arg5, @Sink(SUSI_FILE) int arg6);
    int sendto(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.nio.ByteBuffer arg1, @Sink(SUSI_FILE) int arg2, @Sink(SUSI_FILE) java.net.InetAddress arg3, @Sink(SUSI_FILE) int arg4);
    int write(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.nio.ByteBuffer arg1);
    int write(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) byte[] arg1, @Sink(SUSI_FILE) int arg2, @Sink(SUSI_FILE) int arg3);
}
class Streams{
   @Source(SUSI_NO_CATEGORY)  java.lang.String readFully(  @Sink(SUSI_NO_CATEGORY) java.io.Reader arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] readFullyNoClose(  @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg0);
   @Source(SUSI_NO_CATEGORY)  int copy(  @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg0, @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg1);
}

package libcore.icu;

class CollationElementIteratorICU{
    void setText(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setOffset(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  libcore.icu.CollationElementIteratorICU getInstance(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getOffset();
   @Source(SUSI_NO_CATEGORY)  int getMaxExpansion(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class CollationKeyICU{
   @Source(SUSI_NO_CATEGORY)  byte[] toByteArray();
}
class ICU{
   @Source(SUSI_NO_CATEGORY)  java.util.Locale[] getAvailableBreakIteratorLocales();
   @Source(SUSI_NO_CATEGORY)  java.util.Locale[] getAvailableDateFormatSymbolsLocales();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getISOLanguages();
   @Source(SUSI_NO_CATEGORY)  java.util.Locale[] getAvailableLocales();
   @Source(SUSI_NO_CATEGORY)  java.util.Locale[] getAvailableDateFormatLocales();
   @Source(SUSI_NO_CATEGORY)  java.util.Locale[] getAvailableNumberFormatLocales();
   @Source(SUSI_NO_CATEGORY)  java.util.Locale[] getAvailableCalendarLocales();
   @Source(SUSI_NO_CATEGORY)  java.util.Locale[] getAvailableCollatorLocales();
   @Source(SUSI_NO_CATEGORY)  java.util.Locale[] getAvailableDecimalFormatSymbolsLocales();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getISOCountries();
}
class LocaleData{
   @Source(SUSI_NO_CATEGORY)  libcore.icu.LocaleData get(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDateFormat(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTimeFormat(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class NativeBreakIterator{
    void setText(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  libcore.icu.NativeBreakIterator getCharacterInstance(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  libcore.icu.NativeBreakIterator getLineInstance(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  libcore.icu.NativeBreakIterator getWordInstance(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  libcore.icu.NativeBreakIterator getSentenceInstance(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  java.text.CharacterIterator getText();
}
class NativeConverter{
    void setCallbackEncode(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) java.nio.charset.CharsetEncoder arg1);
    void setCallbackDecode(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) java.nio.charset.CharsetDecoder arg1);
}
class NativeDecimalFormat{
    void setGroupingUsed(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setMaximumIntegerDigits(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setParseIntegerOnly(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setCurrency(  @Sink(SUSI_NO_CATEGORY) java.util.Currency arg0);
    void setNegativePrefix(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setRoundingMode(  @Sink(SUSI_NO_CATEGORY) java.math.RoundingMode arg0, @Sink(SUSI_NO_CATEGORY) double arg1);
    void setGroupingSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDecimalFormatSymbols(  @Sink(SUSI_NO_CATEGORY) libcore.icu.LocaleData arg0);
    void setDecimalFormatSymbols(  @Sink(SUSI_NO_CATEGORY) java.text.DecimalFormatSymbols arg0);
    void setMinimumIntegerDigits(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDecimalSeparatorAlwaysShown(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setMultiplier(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setMaximumFractionDigits(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setNegativeSuffix(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setMinimumFractionDigits(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setPositivePrefix(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setPositiveSuffix(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getMinimumIntegerDigits();
   @Source(SUSI_NO_CATEGORY)  int getGroupingSize();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPositiveSuffix();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNegativePrefix();
   @Source(SUSI_NO_CATEGORY)  int getMaximumIntegerDigits();
   @Source(SUSI_NO_CATEGORY)  int getMultiplier();
   @Source(SUSI_NO_CATEGORY)  int getMaximumFractionDigits();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNegativeSuffix();
   @Source(SUSI_NO_CATEGORY)  int getMinimumFractionDigits();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPositivePrefix();
}
class RuleBasedCollatorICU{
    void setAttribute(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setDecomposition(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setStrength(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  libcore.icu.CollationElementIteratorICU getCollationElementIterator(  @Sink(SUSI_NO_CATEGORY) java.text.CharacterIterator arg0);
   @Source(SUSI_NO_CATEGORY)  int getDecomposition();
   @Source(SUSI_NO_CATEGORY)  int getStrength();
   @Source(SUSI_NO_CATEGORY)  int getAttribute(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  libcore.icu.CollationElementIteratorICU getCollationElementIterator(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRules();
   @Source(SUSI_NO_CATEGORY)  java.text.CollationKey getCollationKey(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class TimeZones{
   @Source(SUSI_NO_CATEGORY)  java.lang.String[][] getZoneStrings(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayName(  @Sink(SUSI_NO_CATEGORY) java.lang.String[][] arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
}
class TimeZones$ZoneStringsCache{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object create(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}

package com.android.gallery3d.filtershow.cache;

class DirectPresetCache{
   @Source(SUSI_IMAGE)  android.graphics.Bitmap get(  com.android.gallery3d.filtershow.presets.ImagePreset arg0);
}
class ImageLoader{
   @Source(SUSI_IMAGE)  android.net.Uri getUri();
   @Source(SUSI_IMAGE)  android.graphics.Bitmap getOriginalBitmapLarge();
   @Source(SUSI_IMAGE)  android.graphics.Bitmap getImageForPreset(  com.android.gallery3d.filtershow.imageshow.ImageShow arg0, com.android.gallery3d.filtershow.presets.ImagePreset arg1, boolean arg2);
   @Source(SUSI_IMAGE)  android.graphics.Rect getOriginalBounds();
   @Source(SUSI_IMAGE)  com.adobe.xmp.XMPMeta getXmpObject();
   @Source(SUSI_IMAGE)  android.graphics.Bitmap rotateToPortrait(  android.graphics.Bitmap arg0, int arg1);
   @Source(SUSI_IMAGE)  android.graphics.Bitmap getScaleOneImageForPreset(  com.android.gallery3d.filtershow.imageshow.ImageShow arg0, com.android.gallery3d.filtershow.presets.ImagePreset arg1, android.graphics.Rect arg2, boolean arg3);
   @Source(SUSI_IMAGE)  int getOrientation(  android.content.Context arg0, android.net.Uri arg1);
   @Source(SUSI_IMAGE)  com.android.gallery3d.filtershow.FilterShowActivity getActivity();
   @Source(SUSI_IMAGE)  int getOrientationFromPath(  java.lang.String arg0);
   @Source(SUSI_IMAGE)  int getZoomOrientation();
}
class ZoomCache{
   @Source(SUSI_IMAGE)  android.graphics.Bitmap getImage(  com.android.gallery3d.filtershow.presets.ImagePreset arg0, android.graphics.Rect arg1);
}

package com.android.email.mail.store.imap;

class ImapList{
   @Source(SUSI_EMAIL)  boolean is(  @Sink(SUSI_EMAIL) int arg0, @Sink(SUSI_EMAIL) java.lang.String arg1, @Sink(SUSI_EMAIL) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.email.mail.store.imap.ImapString getKeyedStringOrEmpty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.email.mail.store.imap.ImapString getStringOrEmpty(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.email.mail.store.imap.ImapString getKeyedStringOrEmpty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.email.mail.store.imap.ImapElement getElementOrNone(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.email.mail.store.imap.ImapList getKeyedListOrEmpty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.email.mail.store.imap.ImapList getListOrEmpty(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.email.mail.store.imap.ImapElement getKeyedElementOrNull(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.email.mail.store.imap.ImapList getKeyedListOrEmpty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class ImapMemoryLiteral{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getAsStream();
}
class ImapResponse{
   @Source(SUSI_NO_CATEGORY)  com.android.email.mail.store.imap.ImapString getAlertTextOrEmpty();
   @Source(SUSI_NO_CATEGORY)  com.android.email.mail.store.imap.ImapString getStatusResponseTextOrEmpty();
   @Source(SUSI_NO_CATEGORY)  com.android.email.mail.store.imap.ImapString getResponseCodeOrEmpty();
}
class ImapResponseParser{
   @Source(SUSI_NO_CATEGORY)  java.lang.String readUntilEol();
}
class ImapSimpleString{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getAsStream();
}
class ImapString{
   @Source(SUSI_NO_CATEGORY)  int getNumberOrZero();
   @Source(SUSI_NO_CATEGORY)  java.util.Date getDateOrNull();
   @Source(SUSI_NO_CATEGORY)  byte[] access$000();
}
class ImapString$1{
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getAsStream();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString();
}
class ImapTempFileLiteral{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getAsStream();
}
class ImapUtility{
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getImapSequenceValues(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getImapRangeValues(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}

package com.android.gallery3d.filtershow;

class FilterShowActivity{
    void onActivityResult(  @Sink(SUSI_LOG) int arg0, @Sink(SUSI_LOG) int arg1, @Sink(SUSI_LOG) android.content.Intent arg2);
   @Source(SUSI_IMAGE)  float getPixelsFromDip(  float arg0);
}
class FilterShowActivity$LoadBitmapTask{
   @Source(SUSI_IMAGE)  java.lang.Boolean doInBackground(  android.net.Uri[] arg0);
}
class HistoryAdapter{
   @Source(SUSI_IMAGE)  com.android.gallery3d.filtershow.presets.ImagePreset getLast();
   @Source(SUSI_IMAGE)  android.view.View getView(  int arg0, android.view.View arg1, android.view.ViewGroup arg2);
}
class ImageStateAdapter{
   @Source(SUSI_IMAGE)  android.view.View getView(  int arg0, android.view.View arg1, android.view.ViewGroup arg2);
}
class PanelController{
    void setUtilityPanel(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.View arg2, @Sink(SUSI_NO_CATEGORY) android.view.View arg3, @Sink(SUSI_NO_CATEGORY) android.view.View arg4);
   @Source(SUSI_NO_CATEGORY)  com.android.gallery3d.filtershow.filters.ImageFilter setImagePreset(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.filtershow.filters.ImageFilter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void addView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
    void setCurrentPanel(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
    void addComponent(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1);
    void addPanel(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_IMAGE)  com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset();
}
class PanelController$Panel{
   @Source(SUSI_IMAGE)  int getPosition();
}
class PanelController$UtilityPanel{
    void setAspectButton(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.filtershow.ui.FramedTextButton arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}

package com.android.contacts.socialwidget;

class SocialWidgetSettings{
    void setContactUri(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg2);
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getContactUri(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.socialwidget.SocialWidgetSettings getInstance();
}

package org.apache.harmony.xnet.provider.jsse;

class AbstractSessionContext{
    void setSessionTimeout(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] toBytes(  @Sink(SUSI_NO_CATEGORY) javax.net.ssl.SSLSession arg0);
   @Source(SUSI_NO_CATEGORY)  int getSessionCacheSize();
   @Source(SUSI_NO_CATEGORY)  java.util.Enumeration getIds();
   @Source(SUSI_NO_CATEGORY)  javax.net.ssl.SSLSession getSession(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  int getSessionTimeout();
}
class AlertException{
   @Source(SUSI_NO_CATEGORY)  javax.net.ssl.SSLException getReason();
   @Source(SUSI_NO_CATEGORY)  byte getDescriptionCode();
}
class AlertProtocol{
    void alert(  @Sink(SUSI_NO_CATEGORY) byte arg0, @Sink(SUSI_NO_CATEGORY) byte arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlertDescription();
   @Source(SUSI_NO_CATEGORY)  byte getDescriptionCode();
   @Source(SUSI_NO_CATEGORY)  byte[] wrap();
}
class CertificateMessage{
    void send(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream arg0);
   @Source(SUSI_NO_CATEGORY)  int getType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAuthType();
}
class CertificateRequest{
    void send(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream arg0);
   @Source(SUSI_NO_CATEGORY)  int getType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getTypesAsString();
}
class CertificateVerify{
    void send(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream arg0);
   @Source(SUSI_NO_CATEGORY)  int getType();
}
class CipherSuite{
   @Source(SUSI_NO_CATEGORY)  int getBlockSize();
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.xnet.provider.jsse.CipherSuite getByName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.xnet.provider.jsse.CipherSuite[] getSupported();
   @Source(SUSI_NO_CATEGORY)  byte[] toBytes();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAuthType(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getSupportedCipherSuiteNames();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getClientKeyType(  @Sink(SUSI_NO_CATEGORY) byte arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHmacName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHashName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getBulkEncryptionAlgorithm();
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.xnet.provider.jsse.CipherSuite getByCode(  @Sink(SUSI_NO_CATEGORY) byte arg0, @Sink(SUSI_NO_CATEGORY) byte arg1, @Sink(SUSI_NO_CATEGORY) byte arg2);
   @Source(SUSI_NO_CATEGORY)  int getMACLength();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getServerKeyType();
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.xnet.provider.jsse.CipherSuite getByCode(  @Sink(SUSI_NO_CATEGORY) byte arg0, @Sink(SUSI_NO_CATEGORY) byte arg1);
}
class ClientHello{
    void send(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream arg0);
   @Source(SUSI_NO_CATEGORY)  int getType();
   @Source(SUSI_NO_CATEGORY)  byte[] getRandom();
}
class ClientKeyExchange{
    void send(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream arg0);
   @Source(SUSI_NO_CATEGORY)  int getType();
}
class ClientSessionContext{
    void setSessionTimeout(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  javax.net.ssl.SSLSession getSession(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  javax.net.ssl.SSLSession getSession(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class ConnectionState{
   @Source(SUSI_NO_CATEGORY)  int getPaddingSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getFragmentSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] encrypt(  @Sink(SUSI_NO_CATEGORY) byte arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1);
   @Source(SUSI_NO_CATEGORY)  int getMinFragmentSize();
   @Source(SUSI_NO_CATEGORY)  int getContentSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] decrypt(  @Sink(SUSI_NO_CATEGORY) byte arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1);
}
class ConnectionStateSSLv3{
   @Source(SUSI_NO_CATEGORY)  byte[] decrypt(  @Sink(SUSI_NO_CATEGORY) byte arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  byte[] encrypt(  @Sink(SUSI_NO_CATEGORY) byte arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
}
class ConnectionStateTLS{
   @Source(SUSI_NO_CATEGORY)  byte[] decrypt(  @Sink(SUSI_NO_CATEGORY) byte arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  byte[] encrypt(  @Sink(SUSI_NO_CATEGORY) byte arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
}
class DHParameters{
   @Source(SUSI_NO_CATEGORY)  byte[] getPrime();
}
class DefaultSSLContextImpl{
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.KeyManager[] getKeyManagers();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.TrustManager[] getTrustManagers();
}
class DigitalSignature{
    void update(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] sign();
}
class FileClientSessionCache{
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache usingDirectory(  @Sink(SUSI_NO_CATEGORY) java.io.File arg0);
}
class FileClientSessionCache$Impl{
    void putSessionData(  @Sink(SUSI_NO_CATEGORY) javax.net.ssl.SSLSession arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] getSessionData(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class Finished{
    void send(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream arg0);
   @Source(SUSI_NO_CATEGORY)  int getType();
   @Source(SUSI_NO_CATEGORY)  byte[] getData();
}
class HandshakeIODataStream{
   @Source(SUSI_NO_CATEGORY)  byte[] getMessages();
   @Source(SUSI_NO_CATEGORY)  byte[] getDigestSHA();
   @Source(SUSI_NO_CATEGORY)  byte[] getDigestMD5();
   @Source(SUSI_NO_CATEGORY)  byte[] getDigestSHAwithoutLast();
   @Source(SUSI_NO_CATEGORY)  byte[] getData(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] read(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getDigestMD5withoutLast();
}
class HandshakeProtocol{
    void send(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.xnet.provider.jsse.Message arg0);
   @Source(SUSI_NO_CATEGORY)  javax.net.ssl.SSLEngineResult$HandshakeStatus getStatus();
   @Source(SUSI_NO_CATEGORY)  java.lang.Runnable getTask();
   @Source(SUSI_NO_CATEGORY)  byte[] wrap();
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.xnet.provider.jsse.SSLSessionImpl getSession();
}
class Logger{
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.xnet.provider.jsse.Logger$Stream getStream(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class Logger$Stream{
    void println(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class NativeCrypto{
    void setEnabledProtocols(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1);
    void setEnabledCipherSuites(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getDefaultProtocols();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getSupportedProtocols();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getDefaultCipherSuites();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getSupportedCipherSuites();
}
class OpenSSLDSAParams{
   @Source(SUSI_NETWORK_INFORMATION)  java.math.BigInteger getX();
   @Source(SUSI_NETWORK_INFORMATION)  java.math.BigInteger getY();
   @Source(SUSI_NETWORK_INFORMATION)  java.math.BigInteger getP();
   @Source(SUSI_NETWORK_INFORMATION)  java.math.BigInteger getQ();
   @Source(SUSI_NETWORK_INFORMATION)  java.math.BigInteger getG();
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.harmony.xnet.provider.jsse.OpenSSLKey getOpenSSLKey();
}
class OpenSSLDSAPrivateKey{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAlgorithm();
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.harmony.xnet.provider.jsse.OpenSSLKey getInstance(  java.security.interfaces.DSAPrivateKey arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getFormat();
   @Source(SUSI_NETWORK_INFORMATION)  int getPkeyContext();
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.harmony.xnet.provider.jsse.OpenSSLKey getOpenSSLKey();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPkeyAlias();
   @Source(SUSI_NETWORK_INFORMATION)  java.security.interfaces.DSAParams getParams();
   @Source(SUSI_NETWORK_INFORMATION)  java.math.BigInteger getX();
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getEncoded();
}
class OpenSSLEngine{
   @Source(SUSI_NETWORK_INFORMATION)  java.security.PrivateKey getPrivateKeyById(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.harmony.xnet.provider.jsse.OpenSSLEngine getInstance(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getEngineContext();
}
class OpenSSLKey{
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.harmony.xnet.provider.jsse.OpenSSLEngine getEngine();
   @Source(SUSI_NETWORK_INFORMATION)  int getPkeyContext();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAlias();
}
class OpenSSLRSAPrivateCrtKey{
   @Source(SUSI_NETWORK_INFORMATION)  java.math.BigInteger getPrimeP();
   @Source(SUSI_NETWORK_INFORMATION)  java.math.BigInteger getPrimeQ();
   @Source(SUSI_NETWORK_INFORMATION)  java.math.BigInteger getPublicExponent();
   @Source(SUSI_NETWORK_INFORMATION)  java.math.BigInteger getPrimeExponentQ();
   @Source(SUSI_NETWORK_INFORMATION)  java.math.BigInteger getPrimeExponentP();
   @Source(SUSI_NETWORK_INFORMATION)  java.math.BigInteger getCrtCoefficient();
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.harmony.xnet.provider.jsse.OpenSSLKey getInstance(  java.security.interfaces.RSAPrivateCrtKey arg0);
}
class OpenSSLRSAPrivateKey{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAlgorithm();
   @Source(SUSI_NETWORK_INFORMATION)  java.math.BigInteger getModulus();
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.harmony.xnet.provider.jsse.OpenSSLKey getOpenSSLKey();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getFormat();
   @Source(SUSI_NETWORK_INFORMATION)  java.math.BigInteger getPrivateExponent();
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getEncoded();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPkeyAlias();
   @Source(SUSI_NETWORK_INFORMATION)  int getPkeyContext();
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey getInstance(  org.apache.harmony.xnet.provider.jsse.OpenSSLKey arg0);
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.harmony.xnet.provider.jsse.OpenSSLKey getInstance(  java.security.interfaces.RSAPrivateKey arg0);
}
class OpenSSLServerSocketFactoryImpl{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getDefaultCipherSuites();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getSupportedCipherSuites();
}
class OpenSSLServerSocketImpl{
    void setWantClientAuth(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setUseClientMode(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setNeedClientAuth(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setEnabledCipherSuites(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
    void setEnabledProtocols(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
    void setEnableSessionCreation(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  boolean getWantClientAuth();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getSupportedCipherSuites();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getEnableSessionCreation();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getNeedClientAuth();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getSupportedProtocols();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getUseClientMode();
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String[] getEnabledProtocols();
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String[] getEnabledCipherSuites();
}
class OpenSSLSessionImpl{
    void putValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLSessionContext getSessionContext();
   @Source(SUSI_NETWORK_INFORMATION)  java.security.cert.Certificate[] getPeerCertificates();
   @Source(SUSI_NETWORK_INFORMATION)  int getPacketBufferSize();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object getValue(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getProtocol();
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getId();
   @Source(SUSI_NETWORK_INFORMATION)  int getPeerPort();
   @Source(SUSI_NETWORK_INFORMATION)  long getCreationTime();
   @Source(SUSI_NETWORK_INFORMATION)  javax.security.cert.X509Certificate[] getPeerCertificateChain();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPeerHost();
   @Source(SUSI_NETWORK_INFORMATION)  java.security.Principal getPeerPrincipal();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getCipherSuite();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getValueNames();
   @Source(SUSI_NETWORK_INFORMATION)  java.security.cert.Certificate[] getLocalCertificates();
   @Source(SUSI_NETWORK_INFORMATION)  java.security.Principal getLocalPrincipal();
   @Source(SUSI_NETWORK_INFORMATION)  int getApplicationBufferSize();
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getEncoded();
   @Source(SUSI_NETWORK_INFORMATION)  long getLastAccessedTime();
}
class OpenSSLSocketFactoryImpl{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getDefaultCipherSuites();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getSupportedCipherSuites();
}
class OpenSSLSocketImpl{
    void setWantClientAuth(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void sendUrgentData(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setEnabledCipherSuites(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
    void setNeedClientAuth(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setEnabledProtocols(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
    void setEnableSessionCreation(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setOOBInline(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setUseClientMode(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPeerHostName();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getWantClientAuth();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLSession getSession();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getSupportedProtocols();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getUseClientMode();
   @Source(SUSI_NETWORK_INFORMATION)  int getSoWriteTimeout();
   @Source(SUSI_NETWORK_INFORMATION)  java.io.FileDescriptor getFileDescriptor$();
   @Source(SUSI_NETWORK_INFORMATION)  java.io.OutputStream getOutputStream();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getNeedClientAuth();
   @Source(SUSI_NETWORK_INFORMATION)  int getPeerPort();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getEnableSessionCreation();
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getNpnSelectedProtocol();
   @Source(SUSI_NETWORK_INFORMATION)  java.io.InputStream getInputStream();
   @Source(SUSI_NETWORK_INFORMATION)  int getSoTimeout();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getSupportedCipherSuites();
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String[] getEnabledCipherSuites();
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String[] getEnabledProtocols();
}
class OpenSSLSocketImpl$SSLOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class OpenSSLSocketImplWrapper{
    void setTrafficClass(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSoLinger(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setSoTimeout(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setTcpNoDelay(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setSendBufferSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setReuseAddress(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setReceiveBufferSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setKeepAlive(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.net.InetAddress getInetAddress();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getReuseAddress();
   @Source(SUSI_NETWORK_INFORMATION)  int getReceiveBufferSize();
   @Source(SUSI_NETWORK_INFORMATION)  int getSoLinger();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getOOBInline();
   @Source(SUSI_NETWORK_INFORMATION)  int getSendBufferSize();
   @Source(SUSI_NETWORK_INFORMATION)  int getTrafficClass();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getTcpNoDelay();
   @Source(SUSI_NETWORK_INFORMATION)  int getPort();
   @Source(SUSI_NETWORK_INFORMATION)  java.net.SocketAddress getRemoteSocketAddress();
   @Source(SUSI_NETWORK_INFORMATION)  int getSoTimeout();
   @Source(SUSI_NETWORK_INFORMATION)  java.net.InetAddress getLocalAddress();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getKeepAlive();
   @Source(SUSI_NETWORK_INFORMATION)  int getLocalPort();
   @Source(SUSI_NETWORK_INFORMATION)  java.net.SocketAddress getLocalSocketAddress();
}
class PinFailureLogger{
    void log(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) java.util.List arg3);
}
class PinListEntry{
   @Source(SUSI_NO_CATEGORY)  boolean getEnforcing();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCommonName();
}
class ProtocolVersion{
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.xnet.provider.jsse.ProtocolVersion getByVersion(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.xnet.provider.jsse.ProtocolVersion getByName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.xnet.provider.jsse.ProtocolVersion getLatestVersion(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
}
class SSLEngineDataStream{
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getData(  int arg0);
}
class SSLEngineImpl{
    void setUseClientMode(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setEnableSessionCreation(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setEnabledCipherSuites(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
    void setEnabledProtocols(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
   @Source(SUSI_NO_CATEGORY)  javax.net.ssl.SSLEngineResult wrap(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg3);
    void setWantClientAuth(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setNeedClientAuth(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getNeedClientAuth();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getUseClientMode();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getSupportedProtocols();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getWantClientAuth();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getSupportedCipherSuites();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getEnableSessionCreation();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLSession getSession();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Runnable getDelegatedTask();
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String[] getEnabledProtocols();
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String[] getEnabledCipherSuites();
}
class SSLInputStream{
   @Source(SUSI_NETWORK_INFORMATION)  long readUint64();
   @Source(SUSI_NETWORK_INFORMATION)  long readUint32();
   @Source(SUSI_NETWORK_INFORMATION)  byte[] read(  int arg0);
}
class SSLParametersImpl{
   @Source(SUSI_NETWORK_INFORMATION)  boolean getWantClientAuth();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.X509KeyManager getKeyManager();
   @Source(SUSI_NETWORK_INFORMATION)  java.security.SecureRandom getSecureRandom();
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.harmony.xnet.provider.jsse.SSLParametersImpl getDefault();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getNeedClientAuth();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getUseClientMode();
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.harmony.xnet.provider.jsse.ServerSessionContext getServerSessionContext();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.X509TrustManager getDefaultTrustManager();
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.harmony.xnet.provider.jsse.ClientSessionContext getClientSessionContext();
   @Source(SUSI_NETWORK_INFORMATION)  java.security.SecureRandom getSecureRandomMember();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.X509TrustManager getTrustManager();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getEnableSessionCreation();
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String[] getEnabledCipherSuites();
   @Source(SUSI_SYSTEM_SETTINGS)  org.apache.harmony.xnet.provider.jsse.CipherSuite[] getEnabledCipherSuitesMember();
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String[] getEnabledProtocols();
}
class SSLRecordProtocol{
    void alert(  @Sink(SUSI_NO_CATEGORY) byte arg0, @Sink(SUSI_NO_CATEGORY) byte arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] wrap(  @Sink(SUSI_NO_CATEGORY) byte arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.harmony.xnet.provider.jsse.SSLSessionImpl getSession();
   @Source(SUSI_NETWORK_INFORMATION)  int getMinRecordSize();
   @Source(SUSI_NETWORK_INFORMATION)  byte[] wrap(  byte arg0, org.apache.harmony.xnet.provider.jsse.DataStream arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getRecordSize(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getDataSize(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getChangeCipherSpecMesage(  org.apache.harmony.xnet.provider.jsse.SSLSessionImpl arg0);
}
class SSLServerSocketFactoryImpl{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getSupportedCipherSuites();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getDefaultCipherSuites();
}
class SSLServerSocketImpl{
    void setUseClientMode(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setNeedClientAuth(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setWantClientAuth(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setEnabledCipherSuites(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
    void setEnabledProtocols(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
    void setEnableSessionCreation(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  boolean getUseClientMode();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getEnableSessionCreation();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getWantClientAuth();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getSupportedProtocols();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getNeedClientAuth();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getSupportedCipherSuites();
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String[] getEnabledProtocols();
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String[] getEnabledCipherSuites();
}
class SSLSessionImpl{
    void putValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.security.cert.Certificate[] getLocalCertificates();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getProtocol();
   @Source(SUSI_NETWORK_INFORMATION)  long getLastAccessedTime();
   @Source(SUSI_NETWORK_INFORMATION)  int getPeerPort();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLSessionContext getSessionContext();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getValueNames();
   @Source(SUSI_NETWORK_INFORMATION)  javax.security.cert.X509Certificate[] getPeerCertificateChain();
   @Source(SUSI_NETWORK_INFORMATION)  long getCreationTime();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object getValue(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.security.Principal getLocalPrincipal();
   @Source(SUSI_NETWORK_INFORMATION)  int getPacketBufferSize();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getCipherSuite();
   @Source(SUSI_NETWORK_INFORMATION)  java.security.cert.Certificate[] getPeerCertificates();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPeerHost();
   @Source(SUSI_NETWORK_INFORMATION)  java.security.Principal getPeerPrincipal();
   @Source(SUSI_NETWORK_INFORMATION)  int getApplicationBufferSize();
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getId();
}
class SSLSocketFactoryImpl{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getSupportedCipherSuites();
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String[] getDefaultCipherSuites();
}
class SSLSocketImpl{
    void setOOBInline(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void writeAppData(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setNeedClientAuth(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setEnabledProtocols(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
    void sendUrgentData(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setEnabledCipherSuites(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
    void setWantClientAuth(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setEnableSessionCreation(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setUseClientMode(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.io.OutputStream getOutputStream();
   @Source(SUSI_NETWORK_INFORMATION)  int getWrappedPort();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getNeedClientAuth();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getSupportedCipherSuites();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getEnableSessionCreation();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getWantClientAuth();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getWrappedHostName();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getUseClientMode();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPeerHostName();
   @Source(SUSI_NETWORK_INFORMATION)  java.io.InputStream getInputStream();
   @Source(SUSI_NETWORK_INFORMATION)  int getPeerPort();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getSupportedProtocols();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLSession getSession();
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String[] getEnabledCipherSuites();
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String[] getEnabledProtocols();
}
class SSLSocketInputStream{
   @Source(SUSI_NETWORK_INFORMATION)  byte[] access$300(  org.apache.harmony.xnet.provider.jsse.SSLSocketInputStream arg0);
}
class SSLSocketOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class SSLSocketWrapper{
    void setTcpNoDelay(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setReuseAddress(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setSendBufferSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setKeepAlive(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setTrafficClass(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setReceiveBufferSize(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSoTimeout(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSoLinger(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.net.SocketAddress getLocalSocketAddress();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getOOBInline();
   @Source(SUSI_NETWORK_INFORMATION)  int getSendBufferSize();
   @Source(SUSI_NETWORK_INFORMATION)  java.io.FileDescriptor getFileDescriptor$();
   @Source(SUSI_NETWORK_INFORMATION)  int getLocalPort();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getTcpNoDelay();
   @Source(SUSI_NETWORK_INFORMATION)  int getTrafficClass();
   @Source(SUSI_NETWORK_INFORMATION)  java.net.InetAddress getInetAddress();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getKeepAlive();
   @Source(SUSI_NETWORK_INFORMATION)  java.net.InetAddress getLocalAddress();
   @Source(SUSI_NETWORK_INFORMATION)  int getSoLinger();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getReuseAddress();
   @Source(SUSI_NETWORK_INFORMATION)  java.net.SocketAddress getRemoteSocketAddress();
   @Source(SUSI_NETWORK_INFORMATION)  int getSoTimeout();
   @Source(SUSI_NETWORK_INFORMATION)  int getReceiveBufferSize();
   @Source(SUSI_NETWORK_INFORMATION)  int getPort();
}
class ServerHello{
    void send(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream arg0);
   @Source(SUSI_NO_CATEGORY)  int getType();
   @Source(SUSI_NO_CATEGORY)  byte[] getRandom();
}
class ServerHelloDone{
    void send(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream arg0);
   @Source(SUSI_NO_CATEGORY)  int getType();
}
class ServerKeyExchange{
    void send(  @Sink(SUSI_NO_CATEGORY) org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream arg0);
   @Source(SUSI_NO_CATEGORY)  int getType();
   @Source(SUSI_NO_CATEGORY)  java.security.interfaces.RSAPublicKey getRSAPublicKey();
}
class ServerSessionContext{
    void setSessionTimeout(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  javax.net.ssl.SSLSession getSession(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
}
class TrustManagerImpl{
   @Source(SUSI_NO_CATEGORY)  java.security.cert.X509Certificate[] getAcceptedIssuers();
}
class TrustedCertificateIndex{
    void index(  @Sink(SUSI_NO_CATEGORY) java.security.cert.TrustAnchor arg0);
}
class TrustedCertificateStore{
    void installCertificate(  @Sink(SUSI_NO_CATEGORY) java.security.cert.X509Certificate arg0);
   @Source(SUSI_NO_CATEGORY)  java.security.cert.Certificate getCertificate(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.security.cert.Certificate getCertificate(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Date getCreationDate(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getCertificateChain(  @Sink(SUSI_NO_CATEGORY) java.security.cert.X509Certificate arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCertificateAlias(  @Sink(SUSI_NO_CATEGORY) java.security.cert.Certificate arg0);
}

package com.android.browser.widget;

class BookmarkThumbnailWidgetProvider{
    void onReceive(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1);
    void onUpdate(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.appwidget.AppWidgetManager arg1, @Sink(SUSI_NO_CATEGORY) int[] arg2);
   @Source(SUSI_BROWSER_INFORMATION)  android.content.ComponentName getComponentName(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0);
}
class BookmarkThumbnailWidgetService{
    void setupWidgetState(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
    void changeFolder(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1);
   @Source(SUSI_BROWSER_INFORMATION)  android.content.SharedPreferences getWidgetState(  @Sink(SUSI_BROWSER_INFORMATION) android.content.Context arg0, @Sink(SUSI_BROWSER_INFORMATION) int arg1);
}
class BookmarkThumbnailWidgetService$BookmarkFactory{
   @Source(SUSI_BROWSER_INFORMATION)  int getViewTypeCount();
   @Source(SUSI_BROWSER_INFORMATION)  android.widget.RemoteViews getViewAt(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  int getCount();
   @Source(SUSI_BROWSER_INFORMATION)  long getItemId(  @Sink(SUSI_BROWSER_INFORMATION) int arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.widget.RemoteViews getLoadingView();
}
class BookmarkThumbnailWidgetService$StateFilter{
   @Source(SUSI_NO_CATEGORY)  boolean accept(  @Sink(SUSI_NO_CATEGORY) java.io.File arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class BookmarkWidgetProxy{
    void onReceive(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1);
}

package com.googlecode.mp4parser.authoring.builder;

class DefaultMp4Builder{
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.IsoFile build(  @Sink(SUSI_NO_CATEGORY) com.googlecode.mp4parser.authoring.Movie arg0);
   @Source(SUSI_NO_CATEGORY)  int[] getChunkSizes(  @Sink(SUSI_NO_CATEGORY) com.googlecode.mp4parser.authoring.Track arg0, @Sink(SUSI_NO_CATEGORY) com.googlecode.mp4parser.authoring.Movie arg1);
   @Source(SUSI_NO_CATEGORY)  long getDuration(  @Sink(SUSI_NO_CATEGORY) com.googlecode.mp4parser.authoring.Track arg0);
   @Source(SUSI_NO_CATEGORY)  long getTimescale(  @Sink(SUSI_NO_CATEGORY) com.googlecode.mp4parser.authoring.Movie arg0);
}
class DefaultMp4Builder$InterleaveChunkMdat{
   @Source(SUSI_NO_CATEGORY)  long getDataOffset();
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.ContainerBox getParent();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType();
   @Source(SUSI_NO_CATEGORY)  long getSize();
}
class TwoSecondIntersectionFinder{
   @Source(SUSI_NO_CATEGORY)  long getDuration(  @Sink(SUSI_NO_CATEGORY) com.googlecode.mp4parser.authoring.Track arg0);
}

package com.android.bluetooth.btservice;

class AdapterProperties{
    void sendConnectionStateChange(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) int arg1, @Sink(SUSI_BLUETOOTH) int arg2, @Sink(SUSI_BLUETOOTH) int arg3);
    boolean setDiscoverableTimeout(  @Sink(SUSI_BLUETOOTH) int arg0);
    boolean setName(  @Sink(SUSI_BLUETOOTH) java.lang.String arg0);
    boolean setUuids(  @Sink(SUSI_BLUETOOTH) android.os.ParcelUuid[] arg0);
    boolean setScanMode(  @Sink(SUSI_BLUETOOTH) int arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getConnectionState();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getName();
   @Source(SUSI_BLUETOOTH_INFORMATION)  byte[] getAddress();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getBluetoothClass();
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.bluetooth.BluetoothDevice[] getBondedDevices();
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.ParcelUuid[] getUuids();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getScanMode();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getDiscoverableTimeout();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getState();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getProfileConnectionState(  int arg0);
}
class AdapterService{
    boolean setScanMode(  @Sink(SUSI_BLUETOOTH) int arg0, @Sink(SUSI_BLUETOOTH) int arg1);
    boolean setDiscoverableTimeout(  @Sink(SUSI_BLUETOOTH) int arg0);
    boolean setPasskey(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) boolean arg1, @Sink(SUSI_BLUETOOTH) int arg2, @Sink(SUSI_BLUETOOTH) byte[] arg3);
    void onProfileConnectionStateChanged(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) int arg1, @Sink(SUSI_BLUETOOTH) int arg2, @Sink(SUSI_BLUETOOTH) int arg3);
    boolean setRemoteAlias(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) java.lang.String arg1);
    boolean setPin(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) boolean arg1, @Sink(SUSI_BLUETOOTH) int arg2, @Sink(SUSI_BLUETOOTH) byte[] arg3);
    void setProfileAutoConnectionPriority(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) int arg1);
    boolean setName(  @Sink(SUSI_BLUETOOTH) java.lang.String arg0);
    boolean setPairingConfirmation(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) boolean arg1);
    boolean enable(  @Sink(SUSI_BLUETOOTH) boolean arg0);
    void sendConnectionStateChange(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) int arg1, @Sink(SUSI_BLUETOOTH) int arg2, @Sink(SUSI_BLUETOOTH) int arg3);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getName();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getBondState(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getAdapterConnectionState();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getRemoteName(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getProfileConnectionState(  int arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getState();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getDiscoverableTimeout();
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.ParcelFileDescriptor createSocketChannel(  int arg0, java.lang.String arg1, android.os.ParcelUuid arg2, int arg3, int arg4);
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.ParcelUuid[] getUuids();
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.ParcelUuid[] getRemoteUuids(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getScanMode();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getRemoteAlias(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getRemoteClass(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  com.android.bluetooth.btservice.AdapterService getAdapterService();
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.bluetooth.BluetoothDevice[] getBondedDevices();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getAddress();
}
class AdapterService$AdapterServiceBinder{
    boolean setPin(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) boolean arg1, @Sink(SUSI_BLUETOOTH) int arg2, @Sink(SUSI_BLUETOOTH) byte[] arg3);
    boolean setScanMode(  @Sink(SUSI_BLUETOOTH) int arg0, @Sink(SUSI_BLUETOOTH) int arg1);
    boolean setRemoteAlias(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) java.lang.String arg1);
    boolean setName(  @Sink(SUSI_BLUETOOTH) java.lang.String arg0);
    void sendConnectionStateChange(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) int arg1, @Sink(SUSI_BLUETOOTH) int arg2, @Sink(SUSI_BLUETOOTH) int arg3);
    boolean setPairingConfirmation(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) boolean arg1);
    boolean setPasskey(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) boolean arg1, @Sink(SUSI_BLUETOOTH) int arg2, @Sink(SUSI_BLUETOOTH) byte[] arg3);
    boolean setDiscoverableTimeout(  @Sink(SUSI_BLUETOOTH) int arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.ParcelUuid[] getUuids();
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.ParcelUuid[] getRemoteUuids(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getState();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getAddress();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getRemoteName(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getScanMode();
   @Source(SUSI_BLUETOOTH_INFORMATION)  com.android.bluetooth.btservice.AdapterService getService();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getName();
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.ParcelFileDescriptor createSocketChannel(  int arg0, java.lang.String arg1, android.os.ParcelUuid arg2, int arg3, int arg4);
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getDiscoverableTimeout();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getAdapterConnectionState();
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.bluetooth.BluetoothDevice[] getBondedDevices();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getRemoteAlias(  android.bluetooth.BluetoothDevice arg0);
}
class AdapterState$OffState{
    boolean processMessage(  @Sink(SUSI_BLUETOOTH) android.os.Message arg0);
}
class AdapterState$OnState{
    boolean processMessage(  @Sink(SUSI_BLUETOOTH) android.os.Message arg0);
}
class AdapterState$PendingCommandState{
    boolean processMessage(  @Sink(SUSI_BLUETOOTH) android.os.Message arg0);
}
class BondStateMachine$StableState{
    boolean processMessage(  @Sink(SUSI_BLUETOOTH) android.os.Message arg0);
}
class Config{
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.Class[] getSupportedProfiles();
}
class ProfileService{
    void notifyProfileServiceStateChanged(  @Sink(SUSI_BLUETOOTH) int arg0);
    void notifyProfileConnectionStateChanged(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) int arg1, @Sink(SUSI_BLUETOOTH) int arg2, @Sink(SUSI_BLUETOOTH) int arg3);
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.IBinder onBind(  android.content.Intent arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.bluetooth.BluetoothDevice getDevice(  byte[] arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getName();
}
class RemoteDevices{
    void pinRequestCallback(  @Sink(SUSI_BLUETOOTH) byte[] arg0, @Sink(SUSI_BLUETOOTH) byte[] arg1, @Sink(SUSI_BLUETOOTH) int arg2);
    void devicePropertyChangedCallback(  @Sink(SUSI_BLUETOOTH) byte[] arg0, @Sink(SUSI_BLUETOOTH) int[] arg1, @Sink(SUSI_BLUETOOTH) byte[][] arg2);
    void deviceFoundCallback(  @Sink(SUSI_BLUETOOTH) byte[] arg0);
    com.android.bluetooth.btservice.RemoteDevices$DeviceProperties addDeviceProperties(  @Sink(SUSI_BLUETOOTH) byte[] arg0);
    void aclStateChangeCallback(  @Sink(SUSI_BLUETOOTH) int arg0, @Sink(SUSI_BLUETOOTH) byte[] arg1, @Sink(SUSI_BLUETOOTH) int arg2);
    void sspRequestCallback(  @Sink(SUSI_BLUETOOTH) byte[] arg0, @Sink(SUSI_BLUETOOTH) byte[] arg1, @Sink(SUSI_BLUETOOTH) int arg2, @Sink(SUSI_BLUETOOTH) int arg3, @Sink(SUSI_BLUETOOTH) int arg4);
   @Source(SUSI_BLUETOOTH_INFORMATION)  com.android.bluetooth.btservice.RemoteDevices$DeviceProperties getDeviceProperties(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.bluetooth.BluetoothDevice getDevice(  byte[] arg0);
}
class RemoteDevices$DeviceProperties{
    void setAlias(  @Sink(SUSI_BLUETOOTH) java.lang.String arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  byte[] getAddress();
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.ParcelUuid[] getUuids();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getAlias();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getDeviceType();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getName();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getBondState();
   @Source(SUSI_BLUETOOTH_INFORMATION)  short getRssi();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getBluetoothClass();
}

package java.nio;

class BaseByteBuffer{
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer putChar(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) char arg1);
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer putChar(  @Sink(SUSI_NO_CATEGORY) char arg0);
   @Source(SUSI_NO_CATEGORY)  char getChar();
   @Source(SUSI_NO_CATEGORY)  char getChar(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Buffer{
   @Source(SUSI_NO_CATEGORY)  java.nio.Buffer mark();
   @Source(SUSI_NO_CATEGORY)  java.nio.Buffer flip();
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  java.nio.Buffer rewind();
   @Source(SUSI_NO_CATEGORY)  java.nio.Buffer reset();
}
class ByteBuffer{
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer put(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer get(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteOrder order();
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer get(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object array();
}
class CharArrayBuffer{
   @Source(SUSI_NO_CATEGORY)  java.nio.CharBuffer get(  @Sink(SUSI_NO_CATEGORY) char[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  char get();
   @Source(SUSI_NO_CATEGORY)  char get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class CharBuffer{
   @Source(SUSI_NO_CATEGORY)  java.nio.CharBuffer put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.CharBuffer put(  @Sink(SUSI_NO_CATEGORY) char[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.nio.CharBuffer put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.nio.CharBuffer get(  @Sink(SUSI_NO_CATEGORY) char[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.CharBuffer get(  @Sink(SUSI_NO_CATEGORY) char[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object array();
}
class CharSequenceAdapter{
   @Source(SUSI_NO_CATEGORY)  java.nio.CharBuffer get(  @Sink(SUSI_NO_CATEGORY) char[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  char get();
   @Source(SUSI_NO_CATEGORY)  char get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class CharToByteBufferAdapter{
   @Source(SUSI_NO_CATEGORY)  java.nio.CharBuffer put(  @Sink(SUSI_NO_CATEGORY) char arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.CharBuffer put(  @Sink(SUSI_NO_CATEGORY) char[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.nio.CharBuffer put(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) char arg1);
   @Source(SUSI_NO_CATEGORY)  char get(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  char get();
   @Source(SUSI_NO_CATEGORY)  java.nio.CharBuffer get(  @Sink(SUSI_NO_CATEGORY) char[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class DatagramChannelImpl{
    int send(  @Sink(SUSI_FILE) java.nio.ByteBuffer arg0, @Sink(SUSI_FILE) java.net.SocketAddress arg1);
   @Source(SUSI_NO_CATEGORY)  long read(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  long write(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int write(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.FileDescriptor getFD();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getLocalAddress();
}
class DatagramChannelImpl$DatagramSocketAdapter{
    void send(  @Sink(SUSI_NO_CATEGORY) java.net.DatagramPacket arg0);
    void bind(  @Sink(SUSI_NO_CATEGORY) java.net.SocketAddress arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.channels.DatagramChannel getChannel();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getLocalAddress();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getInetAddress();
   @Source(SUSI_NO_CATEGORY)  int getPort();
}
class DirectByteBuffer{
   @Source(SUSI_NO_CATEGORY)  long getLong();
   @Source(SUSI_NO_CATEGORY)  byte[] protectedArray();
   @Source(SUSI_NO_CATEGORY)  float getFloat();
   @Source(SUSI_NO_CATEGORY)  char getChar();
   @Source(SUSI_NO_CATEGORY)  byte get(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getLong(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  double getDouble();
   @Source(SUSI_NO_CATEGORY)  byte get();
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  double getDouble(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  short getShort(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  char getChar(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer get(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getInt();
   @Source(SUSI_NO_CATEGORY)  short getShort();
   @Source(SUSI_NO_CATEGORY)  float getFloat(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class DoubleArrayBuffer{
   @Source(SUSI_NO_CATEGORY)  java.nio.DoubleBuffer get(  @Sink(SUSI_NO_CATEGORY) double[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  double get();
   @Source(SUSI_NO_CATEGORY)  double get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class DoubleBuffer{
   @Source(SUSI_NO_CATEGORY)  java.nio.DoubleBuffer put(  @Sink(SUSI_NO_CATEGORY) double[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object array();
   @Source(SUSI_NO_CATEGORY)  java.nio.DoubleBuffer get(  @Sink(SUSI_NO_CATEGORY) double[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.nio.DoubleBuffer get(  @Sink(SUSI_NO_CATEGORY) double[] arg0);
}
class DoubleToByteBufferAdapter{
   @Source(SUSI_NO_CATEGORY)  java.nio.DoubleBuffer put(  @Sink(SUSI_NO_CATEGORY) double[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.nio.DoubleBuffer put(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) double arg1);
   @Source(SUSI_NO_CATEGORY)  java.nio.DoubleBuffer put(  @Sink(SUSI_NO_CATEGORY) double arg0);
   @Source(SUSI_NO_CATEGORY)  double get(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.DoubleBuffer get(  @Sink(SUSI_NO_CATEGORY) double[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  double get();
}
class FileChannelImpl{
   @Source(SUSI_NO_CATEGORY)  int write(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0);
   @Source(SUSI_NO_CATEGORY)  int write(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  long transferTo(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) java.nio.channels.WritableByteChannel arg2);
   @Source(SUSI_NO_CATEGORY)  java.io.FileDescriptor getFD();
}
class FloatArrayBuffer{
   @Source(SUSI_NO_CATEGORY)  java.nio.FloatBuffer get(  @Sink(SUSI_NO_CATEGORY) float[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  float get();
   @Source(SUSI_NO_CATEGORY)  float get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class FloatBuffer{
   @Source(SUSI_NO_CATEGORY)  java.nio.FloatBuffer put(  @Sink(SUSI_NO_CATEGORY) float[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.nio.FloatBuffer get(  @Sink(SUSI_NO_CATEGORY) float[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.nio.FloatBuffer get(  @Sink(SUSI_NO_CATEGORY) float[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object array();
}
class FloatToByteBufferAdapter{
   @Source(SUSI_NO_CATEGORY)  java.nio.FloatBuffer put(  @Sink(SUSI_NO_CATEGORY) float[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.nio.FloatBuffer put(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_NO_CATEGORY)  java.nio.FloatBuffer put(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.FloatBuffer get(  @Sink(SUSI_NO_CATEGORY) float[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  float get();
   @Source(SUSI_NO_CATEGORY)  float get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class HeapByteBuffer{
   @Source(SUSI_NO_CATEGORY)  long getLong(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  double getDouble();
   @Source(SUSI_NO_CATEGORY)  double getDouble(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  short getShort();
   @Source(SUSI_NO_CATEGORY)  byte get(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  byte get();
   @Source(SUSI_NO_CATEGORY)  char getChar();
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getFloat();
   @Source(SUSI_NO_CATEGORY)  short getShort(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer get(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getInt();
   @Source(SUSI_NO_CATEGORY)  float getFloat(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  char getChar(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getLong();
}
class IntArrayBuffer{
   @Source(SUSI_NO_CATEGORY)  java.nio.IntBuffer get(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int get();
   @Source(SUSI_NO_CATEGORY)  int get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class IntBuffer{
   @Source(SUSI_NO_CATEGORY)  java.nio.IntBuffer put(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object array();
   @Source(SUSI_NO_CATEGORY)  java.nio.IntBuffer get(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.IntBuffer get(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class IntToByteBufferAdapter{
   @Source(SUSI_NO_CATEGORY)  java.nio.IntBuffer put(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.IntBuffer put(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.nio.IntBuffer put(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int get();
   @Source(SUSI_NO_CATEGORY)  java.nio.IntBuffer get(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class IoVec{
    int doTransfer(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0);
}
class LongArrayBuffer{
   @Source(SUSI_NO_CATEGORY)  long get();
   @Source(SUSI_NO_CATEGORY)  long get(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.LongBuffer get(  @Sink(SUSI_NO_CATEGORY) long[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class LongBuffer{
   @Source(SUSI_NO_CATEGORY)  java.nio.LongBuffer put(  @Sink(SUSI_NO_CATEGORY) long[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.nio.LongBuffer get(  @Sink(SUSI_NO_CATEGORY) long[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object array();
   @Source(SUSI_NO_CATEGORY)  java.nio.LongBuffer get(  @Sink(SUSI_NO_CATEGORY) long[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class LongToByteBufferAdapter{
   @Source(SUSI_NO_CATEGORY)  java.nio.LongBuffer put(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.LongBuffer put(  @Sink(SUSI_NO_CATEGORY) long[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.nio.LongBuffer put(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  java.nio.LongBuffer get(  @Sink(SUSI_NO_CATEGORY) long[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  long get();
   @Source(SUSI_NO_CATEGORY)  long get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class MappedByteBuffer{
   @Source(SUSI_NO_CATEGORY)  java.nio.MappedByteBuffer load();
   @Source(SUSI_NO_CATEGORY)  java.nio.MappedByteBuffer force();
}
class MappedByteBufferAdapter{
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer putInt(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer putDouble(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) double arg1);
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer putChar(  @Sink(SUSI_NO_CATEGORY) char arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer put(  @Sink(SUSI_NO_CATEGORY) byte arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer putShort(  @Sink(SUSI_NO_CATEGORY) short arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer putLong(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer put(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) byte arg1);
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer putChar(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) char arg1);
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer putFloat(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer putFloat(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer putShort(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) short arg1);
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer put(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer putInt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer putLong(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer putDouble(  @Sink(SUSI_NO_CATEGORY) double arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] protectedArray();
   @Source(SUSI_NO_CATEGORY)  short getShort(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  double getDouble();
   @Source(SUSI_NO_CATEGORY)  float getFloat();
   @Source(SUSI_NO_CATEGORY)  byte get(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  byte get();
   @Source(SUSI_NO_CATEGORY)  int getInt();
   @Source(SUSI_NO_CATEGORY)  char getChar();
   @Source(SUSI_NO_CATEGORY)  short getShort();
   @Source(SUSI_NO_CATEGORY)  long getLong(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer get(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  char getChar(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getLong();
   @Source(SUSI_NO_CATEGORY)  float getFloat(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  double getDouble(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class MemoryBlock{
   @Source(SUSI_NO_CATEGORY)  byte[] array();
   @Source(SUSI_NO_CATEGORY)  long getSize();
}
class MemoryBlock$NonMovableHeapBlock{
   @Source(SUSI_NO_CATEGORY)  byte[] array();
}
class NioUtils{
   @Source(SUSI_NO_CATEGORY)  int getDirectBufferAddress(  @Sink(SUSI_NO_CATEGORY) java.nio.Buffer arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.FileDescriptor getFD(  @Sink(SUSI_NO_CATEGORY) java.nio.channels.FileChannel arg0);
}
class PipeImpl$PipeSinkChannel{
   @Source(SUSI_NO_CATEGORY)  int write(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.FileDescriptor getFD();
   @Source(SUSI_NO_CATEGORY)  long write(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer[] arg0);
   @Source(SUSI_NO_CATEGORY)  long write(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class PipeImpl$PipeSourceChannel{
   @Source(SUSI_NO_CATEGORY)  java.io.FileDescriptor getFD();
}
class ReadOnlyDirectByteBuffer{
   @Source(SUSI_NO_CATEGORY)  byte[] protectedArray();
}
class ReadOnlyHeapByteBuffer{
   @Source(SUSI_NO_CATEGORY)  byte[] protectedArray();
}
class ReadWriteHeapByteBuffer{
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer putFloat(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer putFloat(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer putDouble(  @Sink(SUSI_NO_CATEGORY) double arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.ByteBuffer putDouble(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) double arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] protectedArray();
}
class ServerSocketChannelImpl{
   @Source(SUSI_NO_CATEGORY)  java.io.FileDescriptor getFD();
}
class ServerSocketChannelImpl$ServerSocketAdapter{
    void bind(  @Sink(SUSI_NO_CATEGORY) java.net.SocketAddress arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void bind(  @Sink(SUSI_NO_CATEGORY) java.net.SocketAddress arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.channels.ServerSocketChannel getChannel();
}
class ShortArrayBuffer{
   @Source(SUSI_NO_CATEGORY)  short get();
   @Source(SUSI_NO_CATEGORY)  short get(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.ShortBuffer get(  @Sink(SUSI_NO_CATEGORY) short[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class ShortBuffer{
   @Source(SUSI_NO_CATEGORY)  java.nio.ShortBuffer put(  @Sink(SUSI_NO_CATEGORY) short[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.nio.ShortBuffer get(  @Sink(SUSI_NO_CATEGORY) short[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.nio.ShortBuffer get(  @Sink(SUSI_NO_CATEGORY) short[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object array();
}
class ShortToByteBufferAdapter{
   @Source(SUSI_NO_CATEGORY)  java.nio.ShortBuffer put(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) short arg1);
   @Source(SUSI_NO_CATEGORY)  java.nio.ShortBuffer put(  @Sink(SUSI_NO_CATEGORY) short[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.nio.ShortBuffer put(  @Sink(SUSI_NO_CATEGORY) short arg0);
   @Source(SUSI_NO_CATEGORY)  short get();
   @Source(SUSI_NO_CATEGORY)  java.nio.ShortBuffer get(  @Sink(SUSI_NO_CATEGORY) short[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  short get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class SocketChannelImpl{
   @Source(SUSI_NO_CATEGORY)  long read(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  long write(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int write(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.FileDescriptor getFD();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getLocalAddress();
}
class SocketChannelImpl$SocketAdapter{
    void bind(  @Sink(SUSI_NO_CATEGORY) java.net.SocketAddress arg0);
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getLocalAddress();
   @Source(SUSI_NO_CATEGORY)  java.nio.channels.SocketChannel getChannel();
   @Source(SUSI_NO_CATEGORY)  java.io.OutputStream getOutputStream();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getInputStream();
   @Source(SUSI_NO_CATEGORY)  java.io.FileDescriptor getFileDescriptor$();
}
class SocketChannelImpl$SocketChannelOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}

package com.android.gallery3d.provider;

class GalleryProvider{
   @Source(SUSI_IMAGE)  android.database.Cursor query(  android.net.Uri arg0, java.lang.String[] arg1, java.lang.String arg2, java.lang.String[] arg3, java.lang.String arg4);
   @Source(SUSI_IMAGE)  java.lang.String getAuthority(  android.content.Context arg0);
   @Source(SUSI_IMAGE)  java.lang.String getType(  android.net.Uri arg0);
   @Source(SUSI_IMAGE)  android.net.Uri getUriFor(  android.content.Context arg0, com.android.gallery3d.data.Path arg1);
}

package com.google.android.gsf;

class Gservices{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getString(  android.content.ContentResolver arg0, java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getString(  android.content.ContentResolver arg0, java.lang.String arg1, java.lang.String arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Map getStringsByPrefix(  android.content.ContentResolver arg0, java.lang.String[] arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object getVersionToken(  android.content.ContentResolver arg0);
}

package com.android.server.wm;

class AppWindowToken{
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class BlackFrame{
    void setMatrix(  @Sink(SUSI_NO_CATEGORY) android.graphics.Matrix arg0);
}
class BlackFrame$BlackSurface{
    void setMatrix(  @Sink(SUSI_NO_CATEGORY) android.graphics.Matrix arg0);
}
class DimAnimator{
    void printTo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg1);
}
class DimAnimator$Parameters{
    void printTo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg1);
}
class DimSurface{
    void printTo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg1);
}
class DisplayContent{
    void dump(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.DisplayInfo getDisplayInfo();
   @Source(SUSI_NO_CATEGORY)  android.view.Display getDisplay();
   @Source(SUSI_NO_CATEGORY)  int getDisplayId();
   @Source(SUSI_NO_CATEGORY)  com.android.server.wm.WindowList getWindowList();
}
class DragState{
    void sendDragStartedIfNeededLw(  @Sink(SUSI_NO_CATEGORY) com.android.server.wm.WindowState arg0);
   @Source(SUSI_NO_CATEGORY)  int getDragLayerLw();
}
class InputMonitor{
    void setUpdateInputWindowsNeededLw();
    void updateInputWindowsLw(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  long notifyANR(  @Sink(SUSI_NO_CATEGORY) com.android.server.input.InputApplicationHandle arg0, @Sink(SUSI_NO_CATEGORY) com.android.server.input.InputWindowHandle arg1);
    void notifyLidSwitchChanged(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setFocusedAppLw(  @Sink(SUSI_NO_CATEGORY) com.android.server.wm.AppWindowToken arg0);
   @Source(SUSI_NO_CATEGORY)  int getPointerLayer();
}
class ScreenRotationAnimation{
   @Source(SUSI_NO_CATEGORY)  boolean dismiss(  @Sink(SUSI_NO_CATEGORY) android.view.SurfaceSession arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
   @Source(SUSI_NO_CATEGORY)  boolean setRotationInTransaction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.SurfaceSession arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) float arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
    void printTo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.animation.Transformation getEnterTransformation();
}
class Session{
    void setInsets(  @Sink(SUSI_NO_CATEGORY) android.view.IWindow arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg2, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg3, @Sink(SUSI_NO_CATEGORY) android.graphics.Region arg4);
    void setTransparentRegion(  @Sink(SUSI_NO_CATEGORY) android.view.IWindow arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Region arg1);
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle sendWallpaperCommand(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg5, @Sink(SUSI_NO_CATEGORY) boolean arg6);
    void setWallpaperPosition(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) float arg3, @Sink(SUSI_NO_CATEGORY) float arg4);
    void setUniverseTransform(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) float arg3, @Sink(SUSI_NO_CATEGORY) float arg4, @Sink(SUSI_NO_CATEGORY) float arg5, @Sink(SUSI_NO_CATEGORY) float arg6, @Sink(SUSI_NO_CATEGORY) float arg7);
}
class StrictModeFlash{
    void setVisibility(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class ViewServer{
   @Source(SUSI_NO_CATEGORY)  boolean access$000(  @Sink(SUSI_NO_CATEGORY) java.net.Socket arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class WindowAnimator{
    void setPendingLayoutChanges(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setAppLayoutChanges(  @Sink(SUSI_NO_CATEGORY) com.android.server.wm.AppWindowAnimator arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void dumpLocked(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void setScreenRotationAnimationLocked(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) com.android.server.wm.ScreenRotationAnimation arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.server.wm.ScreenRotationAnimation getScreenRotationAnimationLocked(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class WindowManagerService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_SYSTEM_SETTINGS)  android.content.res.Configuration updateOrientationFromAppTokens(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.res.Configuration arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.IBinder arg1);
    void setNewConfiguration(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.res.Configuration arg0);
    void dumpAnimatorLocked(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  boolean dumpWindows(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4);
    void setWindowWallpaperPositionLocked(  @Sink(SUSI_NO_CATEGORY) com.android.server.wm.WindowState arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) float arg3, @Sink(SUSI_NO_CATEGORY) float arg4);
    void addWindowToken(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void updateRotation(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void startAppFreezingScreenLocked(  @Sink(SUSI_NO_CATEGORY) com.android.server.wm.AppWindowToken arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void updateWallpaperOffsetLocked(  @Sink(SUSI_NO_CATEGORY) com.android.server.wm.WindowState arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setTransparentRegionHint(  @Sink(SUSI_NO_CATEGORY) com.android.server.wm.WindowStateAnimator arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Region arg1);
   @Source(SUSI_NO_CATEGORY)  boolean setTokenVisibilityLocked(  @Sink(SUSI_NO_CATEGORY) com.android.server.wm.AppWindowToken arg0, @Sink(SUSI_NO_CATEGORY) android.view.WindowManager$LayoutParams arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4);
   @Source(SUSI_NO_CATEGORY)  boolean updateRotationUncheckedLocked(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void dumpWindowsLocked(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) java.util.ArrayList arg2);
    void dumpWindowsNoHeaderLocked(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) java.util.ArrayList arg2);
    void updateStatusBarVisibilityLocked(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void startFreezingScreen(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void dumpTokensLocked(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setTransparentRegionWindow(  @Sink(SUSI_NO_CATEGORY) com.android.server.wm.Session arg0, @Sink(SUSI_NO_CATEGORY) android.view.IWindow arg1, @Sink(SUSI_NO_CATEGORY) android.graphics.Region arg2);
    void addDisplayContentChangeListener(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.IDisplayContentChangeListener arg1);
    void setAnimationScales(  @Sink(SUSI_NO_CATEGORY) float[] arg0);
    void setStrictModeVisualIndicatorPreference(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void dumpPolicyLocked(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void setForcedDisplayDensity(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setFocusedApp(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void createDisplayContentLocked(  @Sink(SUSI_NO_CATEGORY) android.view.Display arg0);
    void updateRotationUnchecked(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setAppStartingWindow(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.content.res.CompatibilityInfo arg3, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) int arg6, @Sink(SUSI_NO_CATEGORY) int arg7, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg8, @Sink(SUSI_NO_CATEGORY) boolean arg9);
    void setInputFilter(  @Sink(SUSI_NO_CATEGORY) android.view.IInputFilter arg0);
    void addAppToken(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.view.IApplicationToken arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) boolean arg5, @Sink(SUSI_NO_CATEGORY) boolean arg6);
   @Source(SUSI_NO_CATEGORY)  boolean viewServerWindowCommand(  @Sink(SUSI_NO_CATEGORY) java.net.Socket arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void saveANRStateLocked(  @Sink(SUSI_NO_CATEGORY) com.android.server.wm.AppWindowToken arg0, @Sink(SUSI_NO_CATEGORY) com.android.server.wm.WindowState arg1);
   @Source(SUSI_NO_CATEGORY)  boolean updateOrientationFromAppTokensLocked(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int addWindow(  @Sink(SUSI_NO_CATEGORY) com.android.server.wm.Session arg0, @Sink(SUSI_NO_CATEGORY) android.view.IWindow arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.view.WindowManager$LayoutParams arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg6, @Sink(SUSI_NO_CATEGORY) android.view.InputChannel arg7);
    void dumpSessionsLocked(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setForcedDisplaySize(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setUniverseTransformLocked(  @Sink(SUSI_NO_CATEGORY) com.android.server.wm.WindowState arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) float arg3, @Sink(SUSI_NO_CATEGORY) float arg4, @Sink(SUSI_NO_CATEGORY) float arg5, @Sink(SUSI_NO_CATEGORY) float arg6, @Sink(SUSI_NO_CATEGORY) float arg7);
    void setAnimDimParams(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) com.android.server.wm.DimAnimator$Parameters arg1);
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle sendWindowWallpaperCommandLocked(  @Sink(SUSI_NO_CATEGORY) com.android.server.wm.WindowState arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg5, @Sink(SUSI_NO_CATEGORY) boolean arg6);
    void setAnimationScale(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.wm.DisplayContent getDisplayContentLocked(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.wm.DisplayContent getDefaultDisplayContentLocked();
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder getFocusedWindowToken();
   @Source(SUSI_NETWORK_INFORMATION)  float getWindowCompatibilityScale(  android.os.IBinder arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.res.Configuration computeNewConfigurationLocked();
   @Source(SUSI_NETWORK_INFORMATION)  android.view.DisplayInfo getDefaultDisplayInfoLocked();
   @Source(SUSI_NETWORK_INFORMATION)  android.graphics.Bitmap screenshotApplications(  android.os.IBinder arg0, int arg1, int arg2, int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.wm.WindowList getDefaultWindowListLocked();
   @Source(SUSI_NETWORK_INFORMATION)  int getAppOrientation(  android.view.IApplicationToken arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getPendingAppTransition();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.wm.MagnificationSpec getDisplayMagnificationSpecLocked(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.view.WindowInfo getWindowInfo(  android.os.IBinder arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getPreferredOptionsPanelGravity();
   @Source(SUSI_NETWORK_INFORMATION)  int getLidState();
   @Source(SUSI_NETWORK_INFORMATION)  float[] getAnimationScales();
   @Source(SUSI_NETWORK_INFORMATION)  int getRotation();
    void getVisibleWindowsForDisplay(  int arg0, java.util.List arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getPropertyInt(  java.lang.String[] arg0, int arg1, int arg2, int arg3, android.util.DisplayMetrics arg4);
   @Source(SUSI_NETWORK_INFORMATION)  int getOrientationFromAppTokensLocked();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.wm.WindowList getWindowListLocked(  android.view.Display arg0);
   @Source(SUSI_NETWORK_INFORMATION)  float getAnimationScale(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.wm.InputMonitor getInputMonitor();
   @Source(SUSI_NETWORK_INFORMATION)  int getOrientationFromWindowsLocked();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.wm.WindowList getTokenWindowsOnDisplay(  com.android.server.wm.WindowToken arg0, com.android.server.wm.DisplayContent arg1);
}
class WindowManagerService$4{
   @Source(SUSI_NETWORK_INFORMATION)  float getInterpolation(  float arg0);
}
class WindowState{
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  android.graphics.RectF getShownFrameLw();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getGivenContentInsetsLw();
   @Source(SUSI_NO_CATEGORY)  com.android.server.wm.WindowList getWindowList();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getContentFrameLw();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getGivenVisibleInsetsLw();
   @Source(SUSI_NO_CATEGORY)  android.view.IApplicationToken getAppToken();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getVisibleFrameLw();
   @Source(SUSI_NO_CATEGORY)  int getDisplayId();
   @Source(SUSI_NO_CATEGORY)  long getInputDispatchingTimeoutNanos();
   @Source(SUSI_NO_CATEGORY)  int getSurfaceLayer();
   @Source(SUSI_NO_CATEGORY)  android.view.WindowManager$LayoutParams getAttrs();
   @Source(SUSI_NO_CATEGORY)  com.android.server.wm.MagnificationSpec getWindowMagnificationSpecLocked();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getFrameLw();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getDisplayFrameLw();
   @Source(SUSI_NO_CATEGORY)  int getSystemUiVisibility();
}
class WindowStateAnimator{
    void setWallpaperOffset(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void setTransparentRegionHint(  @Sink(SUSI_NO_CATEGORY) android.graphics.Region arg0);
    void setSurfaceBoundariesLocked(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class WindowStateAnimator$SurfaceTrace{
    void setPosition(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setSize(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setWindowCrop(  @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg0);
}

package libcore.util;

class BasicLruCache{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class ZoneInfo{
   @Source(SUSI_NO_CATEGORY)  int getOffset(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
   @Source(SUSI_NO_CATEGORY)  int getOffset(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  int getDSTSavings();
   @Source(SUSI_NO_CATEGORY)  int getRawOffset();
}
class ZoneInfoDB{
   @Source(SUSI_NO_CATEGORY)  java.util.TimeZone getSystemDefault();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getAvailableIDs(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getAvailableIDs();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getVersion();
}

package com.android.contacts.model;

class AccountTypeManager{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.AccountTypeManager createAccountTypeManager(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.AccountTypeManager getInstance(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind getKindOrFallback(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.account.AccountType getAccountType(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.account.AccountType getAccountTypeForAccount(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.account.AccountWithDataSet arg0);
}
class AccountTypeManagerImpl{
    void processBroadcastIntent(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Intent arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind getKindOrFallback(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2);
   @Source(SUSI_CONTACT_INFORMATION)  java.util.List getAccounts(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.util.List getGroupWritableAccounts();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.account.AccountType getAccountType(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.account.AccountTypeWithDataSet arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.util.List getAccountTypes(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.util.Map getUsableInvitableAccountTypes();
}
class AccountTypeManagerImpl$InvitableAccountTypeCache{
   @Source(SUSI_CONTACT_INFORMATION)  java.util.Map getCachedValue();
}
class Contact{
   @Source(SUSI_CONTACT_INFORMATION)  java.util.ArrayList getContentValues();
   @Source(SUSI_CONTACT_INFORMATION)  com.google.common.collect.ImmutableList getStreamItems();
   @Source(SUSI_CONTACT_INFORMATION)  int getDirectoryExportSupport();
   @Source(SUSI_CONTACT_INFORMATION)  int getDisplayNameSource();
   @Source(SUSI_CONTACT_INFORMATION)  long getFirstWritableRawContactId(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getDirectoryAccountName();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Exception getException();
   @Source(SUSI_CONTACT_INFORMATION)  com.google.common.collect.ImmutableList getInvitableAccountTypes();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getLookupKey();
   @Source(SUSI_CONTACT_INFORMATION)  boolean getStarred();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getDirectoryType();
   @Source(SUSI_CONTACT_INFORMATION)  com.google.common.collect.ImmutableList getRawContacts();
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getLookupUri();
   @Source(SUSI_CONTACT_INFORMATION)  byte[] getPhotoBinaryData();
   @Source(SUSI_CONTACT_INFORMATION)  long getPhotoId();
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getRequestedUri();
   @Source(SUSI_CONTACT_INFORMATION)  long getNameRawContactId();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getPhotoUri();
   @Source(SUSI_CONTACT_INFORMATION)  long getDirectoryId();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getDirectoryAccountType();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getAltDisplayName();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getPhoneticName();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getDirectoryDisplayName();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getCustomRingtone();
   @Source(SUSI_CONTACT_INFORMATION)  com.google.common.collect.ImmutableList getGroupMetaData();
   @Source(SUSI_CONTACT_INFORMATION)  long getId();
   @Source(SUSI_CONTACT_INFORMATION)  com.google.common.collect.ImmutableMap getStatuses();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getDisplayName();
}
class ContactLoader{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.Contact loadInBackground();
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getLookupUri();
}
class RawContact{
    void setAccount(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.account.AccountWithDataSet arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.account.AccountType getAccountType();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.List getDataItems();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.RawContact$NamedDataItem addNamedDataItemValues(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg1);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.ContentValues getValues();
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Context getContext();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getAccountTypeString();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.AccountTypeManager getAccountTypeManager();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getDataSet();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Long getId();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getAccountName();
}
class RawContactDelta{
    void writeToParcel(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Parcel arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.account.AccountType getRawContactAccountType(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getAccountName();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Long getRawContactId();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.RawContactDelta$ValuesDelta getSuperPrimaryEntry(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) boolean arg1);
   @Source(SUSI_CONTACT_INFORMATION)  java.util.ArrayList getContentValues();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.account.AccountType getAccountType(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.AccountTypeManager arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getDataSet();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.RawContactDelta$ValuesDelta getValues();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getAccountType();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.RawContactDelta$ValuesDelta getEntry(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.Long arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getEntryCount(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.util.ArrayList getMimeEntries(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getMimeEntriesCount(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) boolean arg1);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.RawContactDelta$ValuesDelta getPrimaryEntry(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
}
class RawContactDelta$ValuesDelta{
    void setSuperPrimary(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
    void copyStringFrom(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta$ValuesDelta arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
    void setPhoneticMiddleName(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
    void setPhoneticGivenName(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
    void putNull(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
    void setPhoneticFamilyName(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
    void setGroupRowId(  @Sink(SUSI_CONTACT_INFORMATION) long arg0);
    void writeToParcel(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Parcel arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
    void put(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) byte[] arg1);
    void setDisplayName(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
    void put(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1);
    void put(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
    void setPhoto(  @Sink(SUSI_CONTACT_INFORMATION) byte[] arg0);
    void put(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getPhoneticGivenName();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getPhoneticMiddleName();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getAsString(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getMimetype();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getPhoneNumber();
   @Source(SUSI_CONTACT_INFORMATION)  int getPhoneType();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Long getAsLong(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getEmailLabel();
   @Source(SUSI_CONTACT_INFORMATION)  byte[] getAsByteArray(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Long getGroupRowId();
   @Source(SUSI_CONTACT_INFORMATION)  byte[] getPhoto();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getPhoneticFamilyName();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Long getId();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getPhoneLabel();
   @Source(SUSI_CONTACT_INFORMATION)  android.content.ContentValues getCompleteValues();
   @Source(SUSI_CONTACT_INFORMATION)  android.content.ContentValues getAfter();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Integer getAsInteger(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.Integer arg1);
   @Source(SUSI_CONTACT_INFORMATION)  int getEmailType();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getPhoneNormalizedNumber();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Integer getAsInteger(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getEmailData();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getDisplayName();
}
class RawContactDeltaList{
    void writeToParcel(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Parcel arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.RawContactDeltaList fromQuery(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentResolver arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.RawContactDelta getByRawContactId(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.Long arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Long getRawContactId(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.RawContactDeltaList fromIterator(  @Sink(SUSI_CONTACT_INFORMATION) java.util.Iterator arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.util.ArrayList buildDiff();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.RawContactDelta getFirstWritableRawContact(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
}
class RawContactModifier{
    void migrateStructuredName(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta arg1, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta arg2, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.dataitem.DataKind arg3);
    void migrateGenericWithTypeColumn(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta arg1, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.dataitem.DataKind arg2);
    void parseExtras(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.account.AccountType arg1, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta arg2, @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg3);
    void migrateEvent(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta arg1, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.dataitem.DataKind arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.Integer arg3);
    void migratePostal(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta arg1, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.dataitem.DataKind arg2);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.RawContactDelta$ValuesDelta insertChild(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.dataitem.DataKind arg1, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.account.AccountType$EditType arg2);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.RawContactDelta$ValuesDelta parseExtras(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.dataitem.DataKind arg1, @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg5);
   @Source(SUSI_CONTACT_INFORMATION)  java.util.ArrayList getValidTypes(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.dataitem.DataKind arg1, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.account.AccountType$EditType arg2);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.account.AccountType$EditType getType(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.dataitem.DataKind arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
   @Source(SUSI_CONTACT_INFORMATION)  java.util.ArrayList getValidTypes(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.dataitem.DataKind arg1);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.account.AccountType$EditType getBestValidType(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.dataitem.DataKind arg1, @Sink(SUSI_CONTACT_INFORMATION) boolean arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.account.AccountType$EditType getCurrentType(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta$ValuesDelta arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.dataitem.DataKind arg1);
}

package org.apache.james.mime4j.field.address;

class AddressList{
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.james.mime4j.field.address.Address get(  int arg0);
}
class Builder{
   @Source(SUSI_NO_CATEGORY)  org.apache.james.mime4j.field.address.Builder getInstance();
}
class DomainList{
   @Source(SUSI_NO_CATEGORY)  java.lang.String get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Mailbox{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAddressString();
   @Source(SUSI_NO_CATEGORY)  org.apache.james.mime4j.field.address.DomainList getRoute();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLocalPart();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAddressString(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDomain();
}
class MailboxList{
   @Source(SUSI_NO_CATEGORY)  org.apache.james.mime4j.field.address.Mailbox get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class NamedMailbox{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAddressString(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}

package com.android.calendar.extensions;

class AllInOneMenuExtensions{
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.Integer getExtensionMenuResource(  @Sink(SUSI_CALENDAR_INFORMATION) android.view.Menu arg0);
}

package com.android.ex.chips;

class BaseRecipientAdapter{
   @Source(SUSI_NO_CATEGORY)  int getViewTypeCount();
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor access$200(  @Sink(SUSI_NO_CATEGORY) com.android.ex.chips.BaseRecipientAdapter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.Long arg3);
   @Source(SUSI_NO_CATEGORY)  int getPhotoId();
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getItemViewType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getDefaultPhotoResource();
   @Source(SUSI_NO_CATEGORY)  int getQueryType();
   @Source(SUSI_NO_CATEGORY)  android.widget.Filter getFilter();
   @Source(SUSI_NO_CATEGORY)  java.util.List access$900(  @Sink(SUSI_NO_CATEGORY) com.android.ex.chips.BaseRecipientAdapter arg0);
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  int getDisplayNameId();
   @Source(SUSI_NO_CATEGORY)  int getItemLayout();
   @Source(SUSI_NO_CATEGORY)  java.util.List access$400(  @Sink(SUSI_NO_CATEGORY) com.android.ex.chips.BaseRecipientAdapter arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) java.util.LinkedHashMap arg2, @Sink(SUSI_NO_CATEGORY) java.util.List arg3, @Sink(SUSI_NO_CATEGORY) java.util.Set arg4);
   @Source(SUSI_NO_CATEGORY)  java.util.List access$600(  @Sink(SUSI_NO_CATEGORY) com.android.ex.chips.BaseRecipientAdapter arg0, @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getDestinationTypeId();
   @Source(SUSI_NO_CATEGORY)  int getDestinationId();
   @Source(SUSI_NO_CATEGORY)  java.util.List access$902(  @Sink(SUSI_NO_CATEGORY) com.android.ex.chips.BaseRecipientAdapter arg0, @Sink(SUSI_NO_CATEGORY) java.util.List arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
}
class BaseRecipientAdapter$DirectoryFilter{
   @Source(SUSI_NO_CATEGORY)  int getLimit();
}
class Queries$Query{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getContentUri();
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getContentFilterUri();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getProjection();
}
class RecipientAlternatesAdapter{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.HashMap getMatchingRecipients(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.util.ArrayList arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.HashMap getMatchingRecipients(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.util.ArrayList arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.ex.chips.RecipientEntry getRecipientEntry(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class RecipientChip{
   @Source(SUSI_NO_CATEGORY)  com.android.ex.chips.RecipientEntry getEntry();
   @Source(SUSI_NO_CATEGORY)  long getContactId();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getOriginalText();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getValue();
   @Source(SUSI_NO_CATEGORY)  long getDataId();
}
class RecipientEditTextView{
   @Source(SUSI_NO_CATEGORY)  boolean onTouchEvent(  @Sink(SUSI_NO_CATEGORY) android.view.MotionEvent arg0);
   @Source(SUSI_NO_CATEGORY)  android.text.style.ImageSpan getMoreChip();
   @Source(SUSI_NO_CATEGORY)  com.android.ex.chips.RecipientEntry access$2300(  @Sink(SUSI_NO_CATEGORY) com.android.ex.chips.RecipientEditTextView arg0, @Sink(SUSI_NO_CATEGORY) com.android.ex.chips.RecipientEntry arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.ex.chips.RecipientChip getLastChip();
   @Source(SUSI_NO_CATEGORY)  int getViewWidth();
   @Source(SUSI_NO_CATEGORY)  com.android.ex.chips.RecipientChip[] getSortedRecipients();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getChipBackground(  @Sink(SUSI_NO_CATEGORY) com.android.ex.chips.RecipientEntry arg0);
   @Source(SUSI_NO_CATEGORY)  android.text.Spannable getSpannable();
}
class RecipientEntry{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getPhotoThumbnailUri();
   @Source(SUSI_NO_CATEGORY)  byte[] getPhotoBytes();
   @Source(SUSI_NO_CATEGORY)  int getEntryType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayName();
   @Source(SUSI_NO_CATEGORY)  int getDestinationType();
   @Source(SUSI_NO_CATEGORY)  long getContactId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDestination();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDestinationLabel();
   @Source(SUSI_NO_CATEGORY)  long getDataId();
}
class SingleRecipientArrayAdapter{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
}

package com.coremedia.iso;

class AbstractBoxParser{
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.Box parseBox(  @Sink(SUSI_NO_CATEGORY) java.nio.channels.ReadableByteChannel arg0, @Sink(SUSI_NO_CATEGORY) com.coremedia.iso.boxes.ContainerBox arg1);
}
class IsoFile{
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.MovieBox getMovieBox();
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.IsoFile getIsoFile();
   @Source(SUSI_NO_CATEGORY)  long getSize();
}
class IsoTypeReader{
   @Source(SUSI_NO_CATEGORY)  java.lang.String readString(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0);
}
class IsoTypeWriter{
    void writeUtf8String(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void writeIso639(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void writeUInt32BE(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
    void writeUInt24(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void writeUInt16(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void writeUInt64(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
    void writeUInt32(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
    void writeUInt16BE(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class PropertyBoxParserImpl$FourCcToBox{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getClazzName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getParam();
}

package dalvik.system.profiler;

class BinaryHprof$Tag{
   @Source(SUSI_NO_CATEGORY)  dalvik.system.profiler.BinaryHprof$Tag get(  @Sink(SUSI_NO_CATEGORY) byte arg0);
}
class HprofData{
    void addStackTrace(  @Sink(SUSI_NO_CATEGORY) dalvik.system.profiler.HprofData$StackTrace arg0, @Sink(SUSI_NO_CATEGORY) int[] arg1);
   @Source(SUSI_NO_CATEGORY)  long getStartMillis();
   @Source(SUSI_NO_CATEGORY)  int getDepth();
   @Source(SUSI_NO_CATEGORY)  int getFlags();
   @Source(SUSI_NO_CATEGORY)  java.util.List getThreadHistory();
   @Source(SUSI_NO_CATEGORY)  java.util.Set getSamples();
}
class HprofData$StackTrace{
   @Source(SUSI_NO_CATEGORY)  int getThreadId();
   @Source(SUSI_NO_CATEGORY)  java.lang.StackTraceElement[] getStackFrames();
}
class PortableThreadSampler{
   @Source(SUSI_NO_CATEGORY)  java.lang.StackTraceElement[] getStackTrace(  @Sink(SUSI_NO_CATEGORY) java.lang.Thread arg0);
}
class SamplingProfiler{
   @Source(SUSI_NO_CATEGORY)  dalvik.system.profiler.HprofData getHprofData();
}

package org.ccil.cowan.tagsoup;

class AttributesImpl{
    void setQName(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setLocalName(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setURI(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setValue(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setAttribute(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5);
    void setType(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_FILE_INFORMATION)  java.lang.String getURI(  int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getIndex(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLocalName(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getQName(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getIndex(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getLength();
}
class Element{
    void setAttribute(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
}
class ElementType{
    void setAttribute(  @Sink(SUSI_NO_CATEGORY) org.ccil.cowan.tagsoup.AttributesImpl arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
    void setAttribute(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
}
class HTMLScanner{
    void scan(  @Sink(SUSI_NO_CATEGORY) java.io.Reader arg0, @Sink(SUSI_NO_CATEGORY) org.ccil.cowan.tagsoup.ScanHandler arg1);
   @Source(SUSI_NO_CATEGORY)  int getColumnNumber();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSystemId();
   @Source(SUSI_NO_CATEGORY)  int getLineNumber();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPublicId();
}
class PYXWriter{
    void pitarget(  @Sink(SUSI_NO_CATEGORY) char[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void endElement(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void gi(  @Sink(SUSI_NO_CATEGORY) char[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void pi(  @Sink(SUSI_NO_CATEGORY) char[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void aname(  @Sink(SUSI_NO_CATEGORY) char[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void processingInstruction(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void startElement(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) org.xml.sax.Attributes arg3);
    void etag(  @Sink(SUSI_NO_CATEGORY) char[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void aval(  @Sink(SUSI_NO_CATEGORY) char[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getEntity();
}
class Parser{
    void setFeature(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  org.xml.sax.ErrorHandler getErrorHandler();
   @Source(SUSI_NO_CATEGORY)  org.xml.sax.EntityResolver getEntityResolver();
   @Source(SUSI_NO_CATEGORY)  org.xml.sax.ContentHandler getContentHandler();
   @Source(SUSI_NO_CATEGORY)  org.xml.sax.DTDHandler getDTDHandler();
   @Source(SUSI_NO_CATEGORY)  int getEntity();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class Schema{
    void elementType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void entity(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_FILE_INFORMATION)  java.lang.String getURI();
   @Source(SUSI_NO_CATEGORY)  int getEntity(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPrefix();
   @Source(SUSI_NO_CATEGORY)  org.ccil.cowan.tagsoup.ElementType getElementType(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  org.ccil.cowan.tagsoup.ElementType rootElementType();
}

package android.telephony.cdma;

class CdmaCellLocation{
   @Source(SUSI_LOCATION_INFORMATION)  int getNetworkId();
   @Source(SUSI_LOCATION_INFORMATION)  int getSystemId();
   @Source(SUSI_LOCATION_INFORMATION)  int getBaseStationId();
   @Source(SUSI_LOCATION_INFORMATION)  int getBaseStationLongitude();
   @Source(SUSI_LOCATION_INFORMATION)  int getBaseStationLatitude();
}
class CdmaSmsCbProgramData{
   @Source(SUSI_NETWORK_INFORMATION)  int getOperation();
   @Source(SUSI_NETWORK_INFORMATION)  int getLanguage();
   @Source(SUSI_NETWORK_INFORMATION)  int getMaxMessages();
   @Source(SUSI_NETWORK_INFORMATION)  int getAlertOption();
   @Source(SUSI_NETWORK_INFORMATION)  int getCategory();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getCategoryName();
}
class CdmaSmsCbProgramResults{
   @Source(SUSI_NETWORK_INFORMATION)  int getCategoryResult();
   @Source(SUSI_NETWORK_INFORMATION)  int getCategory();
   @Source(SUSI_NETWORK_INFORMATION)  int getLanguage();
}

package com.android.server.pm;

class GrantedPermissions{
    void setFlags(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Installer{
   @Source(SUSI_NO_CATEGORY)  int getSizeInfo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) android.content.pm.PackageStats arg5);
}
class PackageManagerService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void readPermission(  @Sink(SUSI_NO_CATEGORY) org.xmlpull.v1.XmlPullParser arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void sendPackageBroadcast(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) android.content.IIntentReceiver arg4, @Sink(SUSI_NO_CATEGORY) int[] arg5);
    void reportSettingsProblem(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setComponentEnabledSetting(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void grantPermission(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ProviderInfo resolveContentProvider(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int installExistingPackage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void addPreferredActivity(  @Sink(SUSI_NO_CATEGORY) android.content.IntentFilter arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName[] arg2, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ResolveInfo resolveService(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void extendVerificationTimeout(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
    void setInstallerPackageName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setPermissionEnforced(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setPackageStoppedState(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  boolean setInstallLocation(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean performDexOpt(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setApplicationEnabledSetting(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void movePackage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.content.pm.IPackageMoveObserver arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  boolean addPermissionLocked(  @Sink(SUSI_NO_CATEGORY) android.content.pm.PermissionInfo arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getAllPermissionGroups(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.pm.ParceledListSlice getInstalledApplications(  int arg0, java.lang.String arg1, int arg2);
   @Source(SUSI_NETWORK_INFORMATION)  int getUidForSharedUser(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List queryIntentActivities(  android.content.Intent arg0, java.lang.String arg1, int arg2, int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getPersistentApplications(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity();
   @Source(SUSI_NETWORK_INFORMATION)  android.content.pm.ProviderInfo getProviderInfo(  android.content.ComponentName arg0, int arg1, int arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.io.File access$2200(  com.android.server.pm.PackageManagerService arg0, java.io.File arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getApplicationEnabledSetting(  java.lang.String arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getPackageUid(  java.lang.String arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAsecPackageName(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getPreferredActivities(  java.util.List arg0, java.util.List arg1, java.lang.String arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getPreferredPackages(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getInstallLocation();
   @Source(SUSI_NETWORK_INFORMATION)  android.content.pm.PermissionGroupInfo getPermissionGroupInfo(  java.lang.String arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getPackagesForUid(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List queryIntentActivityOptions(  android.content.ComponentName arg0, android.content.Intent[] arg1, java.lang.String[] arg2, android.content.Intent arg3, java.lang.String arg4, int arg5, int arg6);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getTempContainerId();
   @Source(SUSI_NETWORK_INFORMATION)  java.io.File getDataPathForUser(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List queryIntentServices(  android.content.Intent arg0, java.lang.String arg1, int arg2, int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getApkName(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.pm.ActivityInfo getReceiverInfo(  android.content.ComponentName arg0, int arg1, int arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getSystemSharedLibraryNames();
   @Source(SUSI_NETWORK_INFORMATION)  int getComponentEnabledSetting(  android.content.ComponentName arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.pm.PackageManagerService$InstallArgs access$2300(  com.android.server.pm.PackageManagerService arg0, com.android.server.pm.PackageManagerService$InstallParams arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNameForUid(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.pm.ServiceInfo getServiceInfo(  android.content.ComponentName arg0, int arg1, int arg2);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.pm.ActivityInfo getActivityInfo(  android.content.ComponentName arg0, int arg1, int arg2);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.pm.ParceledListSlice getInstalledPackages(  int arg0, java.lang.String arg1, int arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List queryIntentReceivers(  android.content.Intent arg0, java.lang.String arg1, int arg2, int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.pm.PermissionInfo getPermissionInfo(  java.lang.String arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.pm.PackageInfo getPackageInfo(  java.lang.String arg0, int arg1, int arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInstallerPackageName(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int[] getPackageGids(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.pm.ApplicationInfo getApplicationInfo(  java.lang.String arg0, int arg1, int arg2);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.pm.PackageManagerService$InstallArgs access$3000(  com.android.server.pm.PackageManagerService arg0, android.net.Uri arg1, int arg2, java.lang.String arg3, java.lang.String arg4);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.pm.FeatureInfo[] getSystemAvailableFeatures();
   @Source(SUSI_NETWORK_INFORMATION)  android.content.pm.InstrumentationInfo getInstrumentationInfo(  android.content.ComponentName arg0, int arg1);
}
class PackageManagerService$ActivityIntentResolver{
    void addActivity(  @Sink(SUSI_NO_CATEGORY) android.content.pm.PackageParser$Activity arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void dumpFilter(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.content.IntentFilter arg2);
    void dumpFilter(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.content.pm.PackageParser$ActivityIntentInfo arg2);
}
class PackageManagerService$AppDirObserver{
    void onEvent(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class PackageManagerService$AsecInstallArgs{
   @Source(SUSI_NO_CATEGORY)  boolean matchContainer(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getResourcePath();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPackageName();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNativeLibraryPath();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getCodePath();
}
class PackageManagerService$DumpState{
    void setDump(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setOptionEnabled(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.pm.SharedUserSetting getSharedUser();
}
class PackageManagerService$FileInstallArgs{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNativeLibraryPath();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getCodePath();
   @Source(SUSI_NETWORK_INFORMATION)  boolean doRename(  int arg0, java.lang.String arg1, java.lang.String arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getResourcePath();
}
class PackageManagerService$HandlerParams{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.UserHandle getUser();
}
class PackageManagerService$InstallArgs{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.UserHandle getUser();
}
class PackageManagerService$InstallParams{
   @Source(SUSI_NETWORK_INFORMATION)  android.content.pm.ManifestDigest getManifestDigest();
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getPackageUri();
}
class PackageManagerService$PackageRemovedInfo{
    void sendBroadcast(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
}
class PackageManagerService$ServiceIntentResolver{
    void dumpFilter(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.content.IntentFilter arg2);
    void dumpFilter(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.content.pm.PackageParser$ServiceIntentInfo arg2);
    void addService(  @Sink(SUSI_NO_CATEGORY) android.content.pm.PackageParser$Service arg0);
}
class PackageSettingBase{
    void setEnabledComponentsCopy(  @Sink(SUSI_NO_CATEGORY) java.util.HashSet arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setDisabledComponentsCopy(  @Sink(SUSI_NO_CATEGORY) java.util.HashSet arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void copyFrom(  @Sink(SUSI_NO_CATEGORY) com.android.server.pm.PackageSettingBase arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInstallerPackageName();
   @Source(SUSI_NO_CATEGORY)  int getInstallStatus();
   @Source(SUSI_NO_CATEGORY)  int getCurrentEnabledStateLPr(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.HashSet getDisabledComponents(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.HashSet getEnabledComponents(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getEnabled(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class PackageVerificationState{
    void addSufficientVerifier(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.server.pm.PackageManagerService$InstallArgs getInstallArgs();
}
class PreferredIntentResolver{
    void dumpFilter(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) com.android.server.pm.PreferredActivity arg2);
    void dumpFilter(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.content.IntentFilter arg2);
}
class Settings{
    com.android.server.pm.PackageSetting enableSystemPackageLPw(  @Sink(SUSI_LOG) java.lang.String arg0);
    boolean disableSystemPackageLPw(  @Sink(SUSI_LOG) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.server.pm.SharedUserSetting addSharedUserLPw(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.server.pm.PackageSetting addPackageLPw(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.io.File arg2, @Sink(SUSI_NO_CATEGORY) java.io.File arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) int arg6, @Sink(SUSI_NO_CATEGORY) int arg7);
   @Source(SUSI_NO_CATEGORY)  boolean setPackageStoppedStateLPw(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
   @Source(SUSI_NO_CATEGORY)  com.android.server.pm.PreferredIntentResolver editPreferredActivitiesLPw(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setInstallerPackageName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void createNewUserLILPw(  @Sink(SUSI_NO_CATEGORY) com.android.server.pm.Installer arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.io.File arg2);
    void setInstallStatus(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  int getComponentEnabledSettingLPr(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.ComponentName arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  int getApplicationEnabledSettingLPr(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.server.pm.SharedUserSetting getSharedUserLPw(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getListOfIncompleteInstallPackagesLPr();
   @Source(SUSI_NO_CATEGORY)  android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentityLPw();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getUserIdLPr(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInstallerPackageNameLPr(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.server.pm.PackageSetting getDisabledSystemPkgLPr(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.server.pm.PackageSetting getPackageLPw(  @Sink(SUSI_NO_CATEGORY) android.content.pm.PackageParser$Package arg0, @Sink(SUSI_NO_CATEGORY) com.android.server.pm.PackageSetting arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) com.android.server.pm.SharedUserSetting arg3, @Sink(SUSI_NO_CATEGORY) java.io.File arg4, @Sink(SUSI_NO_CATEGORY) java.io.File arg5, @Sink(SUSI_NO_CATEGORY) java.lang.String arg6, @Sink(SUSI_NO_CATEGORY) int arg7, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg8, @Sink(SUSI_NO_CATEGORY) boolean arg9);
}
class UserManagerService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.UserInfo createUser(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setUserIcon(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg1);
    void userForeground(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void finishRemoveUser(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setUserName(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void makeInitialized(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean removeUser(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.pm.UserInfo getUserInfo(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.graphics.Bitmap getUserIcon(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int[] getUserIdsLPr();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.server.pm.UserManagerService getInstance();
   @Source(SUSI_NETWORK_INFORMATION)  int getUserSerialNumber(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int[] getUserIds();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getUsers(  boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getUserHandle(  int arg0);
}

package com.android.phone.sip;

class SipEditor$PreferenceKey{
    void setValue(  @Sink(SUSI_LOG) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getValue();
}
class SipProfileDb{
    void saveProfile(  @Sink(SUSI_VOIP) android.net.sip.SipProfile arg0);
   @Source(SUSI_NO_CATEGORY)  int getProfilesCount();
   @Source(SUSI_NO_CATEGORY)  java.util.List retrieveSipProfileList();
}
class SipSharedPreferences{
    void setPrimaryAccount(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setReceivingCallsEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setSipCallOption(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setProfilesCount(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPrimaryAccount();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSipCallOption();
   @Source(SUSI_NO_CATEGORY)  int getProfilesCount();
}

package com.android.calendar.selectcalendars;

class SelectCalendarsSimpleAdapter{
    void setVisible(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0, @Sink(SUSI_CALENDAR_INFORMATION) int arg1);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.Object getItem(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  long getItemId(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  android.view.View getView(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.view.View arg1, @Sink(SUSI_CALENDAR_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  int getVisible(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getCount();
   @Source(SUSI_CALENDAR_INFORMATION)  android.graphics.drawable.Drawable getBackground(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0, @Sink(SUSI_CALENDAR_INFORMATION) boolean arg1);
}
class SelectCalendarsSimpleAdapter$TabletCalendarItemBackgrounds{
   @Source(SUSI_CALENDAR_INFORMATION)  int[] getBackgrounds();
}
class SelectCalendarsSyncAdapter{
    void onItemClick(  @Sink(SUSI_CALENDAR_INFORMATION) android.widget.AdapterView arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.view.View arg1, @Sink(SUSI_CALENDAR_INFORMATION) int arg2, @Sink(SUSI_CALENDAR_INFORMATION) long arg3);
   @Source(SUSI_CALENDAR_INFORMATION)  android.view.View getView(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.view.View arg1, @Sink(SUSI_CALENDAR_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  long getItemId(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.Object getItem(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  java.util.HashMap getChanges();
   @Source(SUSI_CALENDAR_INFORMATION)  int getCount();
}
class SelectSyncedCalendarsMultiAccountAdapter{
    void bindChildView(  @Sink(SUSI_CALENDAR_INFORMATION) android.view.View arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg1, @Sink(SUSI_CALENDAR_INFORMATION) android.database.Cursor arg2, @Sink(SUSI_CALENDAR_INFORMATION) boolean arg3);
    void onClick(  @Sink(SUSI_CALENDAR_INFORMATION) android.view.View arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  android.view.View newGroupView(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.database.Cursor arg1, @Sink(SUSI_CALENDAR_INFORMATION) boolean arg2, @Sink(SUSI_CALENDAR_INFORMATION) android.view.ViewGroup arg3);
   @Source(SUSI_CALENDAR_INFORMATION)  android.database.Cursor getChildrenCursor(  @Sink(SUSI_CALENDAR_INFORMATION) android.database.Cursor arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  android.view.View newChildView(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.database.Cursor arg1, @Sink(SUSI_CALENDAR_INFORMATION) boolean arg2, @Sink(SUSI_CALENDAR_INFORMATION) android.view.ViewGroup arg3);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.CharSequence getLabelForType(  @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg0);
}
class SelectSyncedCalendarsMultiAccountAdapter$AsyncCalendarsUpdater{
    void onQueryComplete(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.Object arg1, @Sink(SUSI_CALENDAR_INFORMATION) android.database.Cursor arg2);
}
class SelectVisibleCalendarsFragment{
    void toggleVisibility(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  long getSupportedEventTypes();
   @Source(SUSI_CALENDAR_INFORMATION)  android.database.Cursor access$102(  @Sink(SUSI_CALENDAR_INFORMATION) com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.database.Cursor arg1);
}

package com.android.gallery3d.filtershow.ui;

class FramedTextButton{
    void setTextFrom(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ImageButtonTitle{
   @Source(SUSI_IMAGE)  java.lang.String getText();
}
class ImageCurves{
    void setChannel(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Spline{
   @Source(SUSI_IMAGE)  float[] getAppliedCurve();
   @Source(SUSI_IMAGE)  com.android.gallery3d.filtershow.ui.ControlPoint getPoint(  int arg0);
   @Source(SUSI_IMAGE)  int getNbPoints();
}

package android.text.util;

class Rfc822Token{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getComment();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAddress();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
}

package com.android.internal.telephony.ims;

class IsimFileHandler{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEFPath(  int arg0);
}
class IsimUiccRecords{
    void setVoiceMailNumber(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void setVoiceMessageWaiting(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getIsimImpi();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getIsimImpu();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getIsimDomain();
   @Source(SUSI_NETWORK_INFORMATION)  int getDisplayRule(  java.lang.String arg0);
}
class IsimUiccRecords$EfIsimDomainLoaded{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEfName();
}
class IsimUiccRecords$EfIsimImpiLoaded{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEfName();
}
class IsimUiccRecords$EfIsimImpuLoaded{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEfName();
}

package com.android.contacts;

class CallDetailActivity$1UpdateContactDetailsTask{
    void onPostExecute(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.PhoneCallDetails[] arg0);
}
class CallDetailActivity$1UpdateContactDetailsTask$2{
   @Source(SUSI_CONTACT_INFORMATION)  int getMaximumScrollableHeaderOffset();
}
class ContactPhotoManager{
   @Source(SUSI_CONTACT_INFORMATION)  int getDefaultAvatarResId(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0, @Sink(SUSI_CONTACT_INFORMATION) boolean arg1);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.ContactPhotoManager getInstance(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getDefaultAvatarResId(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) boolean arg2);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.ContactPhotoManager createContactPhotoManager(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
}
class ContactPhotoManagerImpl{
    void cacheBitmap(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0, @Sink(SUSI_CONTACT_INFORMATION) android.graphics.Bitmap arg1, @Sink(SUSI_CONTACT_INFORMATION) byte[] arg2);
}
class ContactPhotoManagerImpl$Request{
   @Source(SUSI_CONTACT_INFORMATION)  long getId();
   @Source(SUSI_CONTACT_INFORMATION)  int getRequestedExtent();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Object getKey();
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getUri();
}
class ContactPresenceIconUtil{
   @Source(SUSI_CONTACT_INFORMATION)  android.graphics.drawable.Drawable getPresenceIcon(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
}
class ContactSaveService{
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent createSaveContactIntent(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDeltaList arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3, @Sink(SUSI_CONTACT_INFORMATION) boolean arg4, @Sink(SUSI_CONTACT_INFORMATION) java.lang.Class arg5, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg6, @Sink(SUSI_CONTACT_INFORMATION) long arg7, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg8);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent createGroupDeletionIntent(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent createNewRawContactIntent(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) java.util.ArrayList arg1, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.account.AccountWithDataSet arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.Class arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent createJoinContactsIntent(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1, @Sink(SUSI_CONTACT_INFORMATION) long arg2, @Sink(SUSI_CONTACT_INFORMATION) boolean arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.Class arg4, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg5);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent createNewGroupIntent(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.account.AccountWithDataSet arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) long[] arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.Class arg4, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg5);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent createGroupUpdateIntent(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) long[] arg3, @Sink(SUSI_CONTACT_INFORMATION) long[] arg4, @Sink(SUSI_CONTACT_INFORMATION) java.lang.Class arg5, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg6);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent createSetSuperPrimaryIntent(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent createSetRingtone(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent createClearPrimaryIntent(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1);
    void onHandleIntent(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Intent arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent createSaveContactIntent(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDeltaList arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3, @Sink(SUSI_CONTACT_INFORMATION) boolean arg4, @Sink(SUSI_CONTACT_INFORMATION) java.lang.Class arg5, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg6, @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg7);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Object getSystemService(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
}
class ContactStatusUtil{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getStatusString(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
}
class ContactsActivity{
   @Source(SUSI_CONTACT_INFORMATION)  android.content.SharedPreferences getSharedPreferences(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.ContentResolver getContentResolver();
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Object getSystemService(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Fragment getFragment(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class ContactsApplication{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Object getSystemService(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.ContentResolver getContentResolver();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.test.InjectedServices getInjectedServices();
   @Source(SUSI_CONTACT_INFORMATION)  android.content.SharedPreferences getSharedPreferences(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
}
class ContactsUtils{
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent getInvitableIntent(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.account.AccountType arg0, @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg1);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent getCallIntent(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getCallUri(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent getCallIntent(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getCurrentCountryIso(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent getCallIntent(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent getVoicemailIntent();
   @Source(SUSI_CONTACT_INFORMATION)  android.graphics.Rect getTargetRectFromView(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent getCallIntent(  @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
   @Source(SUSI_CONTACT_INFORMATION)  int getThumbnailSize(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
}
class GroupMetaData{
   @Source(SUSI_CONTACT_INFORMATION)  long getGroupId();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getTitle();
}
class NfcHandler{
   @Source(SUSI_CONTACT_INFORMATION)  android.nfc.NdefMessage createNdefMessage(  @Sink(SUSI_CONTACT_INFORMATION) android.nfc.NfcEvent arg0);
}
class PhoneCallDetailsHelper{
    void setCallDetailsHeader(  @Sink(SUSI_CONTACT_INFORMATION) android.widget.TextView arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.PhoneCallDetails arg1);
    void setPhoneCallDetails(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.PhoneCallDetailsViews arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.PhoneCallDetails arg1, @Sink(SUSI_CONTACT_INFORMATION) boolean arg2);
    void setCurrentTimeForTest(  @Sink(SUSI_CONTACT_INFORMATION) long arg0);
}
class SpecialCharSequenceMgr{
   @Source(SUSI_CONTACT_INFORMATION)  boolean handleAdnEntry(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) android.widget.EditText arg2);
}
class SpecialCharSequenceMgr$SimContactQueryCookie{
   @Source(SUSI_CONTACT_INFORMATION)  android.widget.EditText getTextField();
}
class TypePrecedence{
   @Source(SUSI_CONTACT_INFORMATION)  int getTypePrecedence(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
}

package org.apache.http.impl.conn;

class AbstractClientConnAdapter{
    void setIdleDuration(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) java.util.concurrent.TimeUnit arg1);
    void setSocketTimeout(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.conn.OperatedClientConnection getWrappedConnection();
   @Source(SUSI_NO_CATEGORY)  int getLocalPort();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpConnectionMetrics getMetrics();
   @Source(SUSI_NO_CATEGORY)  int getSocketTimeout();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.conn.ClientConnectionManager getManager();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getLocalAddress();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getRemoteAddress();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpResponse receiveResponseHeader();
   @Source(SUSI_NO_CATEGORY)  int getRemotePort();
   @Source(SUSI_NO_CATEGORY)  javax.net.ssl.SSLSession getSSLSession();
}
class AbstractPoolEntry{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getState();
}
class AbstractPooledConnAdapter{
    void setState(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getState();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.conn.routing.HttpRoute getRoute();
}
class DefaultClientConnection{
    void update(  @Sink(SUSI_NO_CATEGORY) java.net.Socket arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.HttpHost arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) org.apache.http.params.HttpParams arg3);
    void openCompleted(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.params.HttpParams arg1);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpHost getTargetHost();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.io.SessionInputBuffer createSessionInputBuffer(  @Sink(SUSI_NO_CATEGORY) java.net.Socket arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) org.apache.http.params.HttpParams arg2);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.io.SessionOutputBuffer createSessionOutputBuffer(  @Sink(SUSI_NO_CATEGORY) java.net.Socket arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) org.apache.http.params.HttpParams arg2);
   @Source(SUSI_NO_CATEGORY)  java.net.Socket getSocket();
}
class LoggingSessionInputBuffer{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.io.HttpTransportMetrics getMetrics();
}
class LoggingSessionOutputBuffer{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
    void writeLine(  @Sink(SUSI_NO_CATEGORY) org.apache.http.util.CharArrayBuffer arg0);
    void writeLine(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.io.HttpTransportMetrics getMetrics();
}
class ProxySelectorRoutePlanner{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getHost(  java.net.InetSocketAddress arg0);
   @Source(SUSI_NO_CATEGORY)  java.net.ProxySelector getProxySelector();
}
class SingleClientConnManager{
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.conn.ManagedClientConnection getConnection(  org.apache.http.conn.routing.HttpRoute arg0, java.lang.Object arg1);
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.conn.ClientConnectionOperator createConnectionOperator(  org.apache.http.conn.scheme.SchemeRegistry arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry();
}

package com.google.android.gles_jni;

class EGLContextImpl{
   @Source(SUSI_NO_CATEGORY)  javax.microedition.khronos.opengles.GL getGL();
}

package gov.nist.javax.sip.parser;

class Lexer{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHeaderName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHeaderValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class Parser{
   @Source(SUSI_NO_CATEGORY)  java.lang.String sipVersion();
   @Source(SUSI_NO_CATEGORY)  java.lang.String method();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.parser.Lexer getLexer();
}
class ParserFactory{
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.parser.HeaderParser createParser(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class Pipeline$Buffer{
   @Source(SUSI_NO_CATEGORY)  int getNextByte();
}
class StringMsgParser{
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.SIPHeader parseSIPHeader(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}

package com.android.deskclock.widget.swipeablelistview;

class LogTag{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLogTag();
}
class SwipeableListView{
   @Source(SUSI_NO_CATEGORY)  android.view.View getChildAtPosition(  @Sink(SUSI_NO_CATEGORY) android.view.MotionEvent arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getChildContentView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
}

package junit.framework;

class ComparisonFailure{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getActual();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getExpected();
}
class TestCase{
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  junit.framework.TestResult run();
   @Source(SUSI_NO_CATEGORY)  junit.framework.TestResult createResult();
}
class TestSuite{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Constructor getTestConstructor(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0);
}

package com.android.htmlviewer;

class HTMLViewerActivity{
    void onCreate(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
}

package com.android.server.location;

class ComprehensiveCountryDetector{
   @Source(SUSI_LOCATION_INFORMATION)  android.location.Country getNetworkBasedCountry();
   @Source(SUSI_LOCATION_INFORMATION)  android.location.Country getSimBasedCountry();
   @Source(SUSI_LOCATION_INFORMATION)  android.location.Country getLocaleCountry();
   @Source(SUSI_LOCATION_INFORMATION)  android.location.Country getLastKnownLocationBasedCountry();
}
class GeocoderProxy{
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getFromLocationName(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0, @Sink(SUSI_LOCATION_INFORMATION) double arg1, @Sink(SUSI_LOCATION_INFORMATION) double arg2, @Sink(SUSI_LOCATION_INFORMATION) double arg3, @Sink(SUSI_LOCATION_INFORMATION) double arg4, @Sink(SUSI_LOCATION_INFORMATION) int arg5, @Sink(SUSI_LOCATION_INFORMATION) android.location.GeocoderParams arg6, @Sink(SUSI_LOCATION_INFORMATION) java.util.List arg7);
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getFromLocation(  @Sink(SUSI_LOCATION_INFORMATION) double arg0, @Sink(SUSI_LOCATION_INFORMATION) double arg1, @Sink(SUSI_LOCATION_INFORMATION) int arg2, @Sink(SUSI_LOCATION_INFORMATION) android.location.GeocoderParams arg3, @Sink(SUSI_LOCATION_INFORMATION) java.util.List arg4);
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getConnectedPackageName();
}
class GeofenceManager{
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0);
}
class GeofenceState{
   @Source(SUSI_LOCATION_INFORMATION)  double getDistanceToBoundary();
}
class GpsLocationProvider{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void updateNetworkState(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.net.NetworkInfo arg1);
    void setRequest(  @Sink(SUSI_NO_CATEGORY) com.android.internal.location.ProviderRequest arg0, @Sink(SUSI_NO_CATEGORY) android.os.WorkSource arg1);
   @Source(SUSI_LOCATION_INFORMATION)  android.location.INetInitiatedListener getNetInitiatedListener();
   @Source(SUSI_LOCATION_INFORMATION)  com.android.internal.location.ProviderProperties getProperties();
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getName();
   @Source(SUSI_LOCATION_INFORMATION)  android.location.IGpsStatusProvider getGpsStatusProvider();
   @Source(SUSI_LOCATION_INFORMATION)  long getStatusUpdateTime();
   @Source(SUSI_LOCATION_INFORMATION)  int getStatus(  @Sink(SUSI_LOCATION_INFORMATION) android.os.Bundle arg0);
}
class GpsXtraDownloader{
   @Source(SUSI_LOCATION_INFORMATION)  byte[] downloadXtraData();
   @Source(SUSI_LOCATION_INFORMATION)  byte[] doDownload(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0, @Sink(SUSI_LOCATION_INFORMATION) boolean arg1, @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg2, @Sink(SUSI_LOCATION_INFORMATION) int arg3);
}
class LocationBasedCountryDetector{
   @Source(SUSI_LOCATION_INFORMATION)  android.location.Country detectCountry();
   @Source(SUSI_LOCATION_INFORMATION)  android.location.Location getLastKnownLocation();
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getCountryFromLocation(  @Sink(SUSI_LOCATION_INFORMATION) android.location.Location arg0);
   @Source(SUSI_LOCATION_INFORMATION)  long getQueryLocationTimeout();
   @Source(SUSI_LOCATION_INFORMATION)  java.util.List getEnabledProviders();
}
class LocationFudger{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_LOCATION_INFORMATION)  android.location.Location getOrCreate(  @Sink(SUSI_LOCATION_INFORMATION) android.location.Location arg0);
}
class LocationProviderProxy{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    boolean sendExtraCommand(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) android.os.Bundle arg1);
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getName();
   @Source(SUSI_LOCATION_INFORMATION)  int getStatus(  @Sink(SUSI_LOCATION_INFORMATION) android.os.Bundle arg0);
   @Source(SUSI_LOCATION_INFORMATION)  com.android.internal.location.ProviderProperties getProperties();
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getConnectedPackageName();
   @Source(SUSI_LOCATION_INFORMATION)  long getStatusUpdateTime();
}
class MockProvider{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void setLocation(  @Sink(SUSI_LOG) android.location.Location arg0);
    void setRequest(  @Sink(SUSI_NO_CATEGORY) com.android.internal.location.ProviderRequest arg0, @Sink(SUSI_NO_CATEGORY) android.os.WorkSource arg1);
   @Source(SUSI_NO_CATEGORY)  boolean sendExtraCommand(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void setStatus(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
    void dump(  @Sink(SUSI_NO_CATEGORY) java.io.PrintWriter arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_LOCATION_INFORMATION)  long getStatusUpdateTime();
   @Source(SUSI_LOCATION_INFORMATION)  int getStatus(  @Sink(SUSI_LOCATION_INFORMATION) android.os.Bundle arg0);
   @Source(SUSI_LOCATION_INFORMATION)  com.android.internal.location.ProviderProperties getProperties();
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getName();
}
class PassiveProvider{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NO_CATEGORY)  boolean sendExtraCommand(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void setRequest(  @Sink(SUSI_NO_CATEGORY) com.android.internal.location.ProviderRequest arg0, @Sink(SUSI_NO_CATEGORY) android.os.WorkSource arg1);
   @Source(SUSI_LOCATION_INFORMATION)  long getStatusUpdateTime();
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getName();
   @Source(SUSI_LOCATION_INFORMATION)  com.android.internal.location.ProviderProperties getProperties();
   @Source(SUSI_LOCATION_INFORMATION)  int getStatus(  @Sink(SUSI_LOCATION_INFORMATION) android.os.Bundle arg0);
}

package com.android.gallery3d.filtershow.presets;

class ImagePreset{
    void setGeometry(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.filtershow.imageshow.GeometryMetadata arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.filtershow.cache.ImageLoader getImageLoader();
   @Source(SUSI_IMAGE)  float getScaleFactor();
   @Source(SUSI_IMAGE)  com.android.gallery3d.filtershow.filters.ImageFilter getFilter(  java.lang.String arg0);
}

package com.android.internal.telephony;

class ATResponseParser{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String nextString();
}
class AdnRecord{
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getNumber();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAlphaTag();
   @Source(SUSI_NETWORK_INFORMATION)  byte[] buildAdnString(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getEmails();
}
class AdnRecordCache{
    void handleMessage(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void requestLoadAllAdnLike(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void updateAdnBySearch(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.AdnRecord arg1, @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.AdnRecord arg2, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg3, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg4);
    void updateAdnByIndex(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.AdnRecord arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg3, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg4);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.ArrayList getRecordsIfLoaded(  int arg0);
}
class AdnRecordLoader{
    void handleMessage(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
}
class ApnContext{
    void setDataConnection(  @Sink(SUSI_PHONE_STATE) com.android.internal.telephony.DataConnection arg0);
    void setDataConnectionAc(  @Sink(SUSI_PHONE_STATE) com.android.internal.telephony.DataConnectionAc arg0);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void setDependencyMet(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void setApnSetting(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.ApnSetting arg0);
    void setWaitingApns(  @Sink(SUSI_SYSTEM_SETTINGS) java.util.ArrayList arg0);
    void setEnabled(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void setReason(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
    void setRetryCount(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
    void setState(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.DctConstants$State arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.DataConnectionAc getDataConnectionAc();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getDependencyMet();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.ApnSetting getNextWaitingApn();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.ArrayList getWaitingApns();
   @Source(SUSI_NETWORK_INFORMATION)  int getRetryCount();
   @Source(SUSI_NETWORK_INFORMATION)  int getWaitingApnsPermFailCount();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.DataConnection getDataConnection();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.DctConstants$State getState();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getApnType();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getReason();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.ApnSetting getApnSetting();
}
class ApnSetting{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
}
class BaseCommands{
    void setOnIccRefresh(  @Sink(SUSI_PHONE_STATE) android.os.Handler arg0, @Sink(SUSI_PHONE_STATE) int arg1, @Sink(SUSI_PHONE_STATE) java.lang.Object arg2);
    void setOnIccSmsFull(  @Sink(SUSI_PHONE_STATE) android.os.Handler arg0, @Sink(SUSI_PHONE_STATE) int arg1, @Sink(SUSI_PHONE_STATE) java.lang.Object arg2);
    void setOnCatEvent(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void setOnCatSessionEnd(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void setOnNewGsmBroadcastSms(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void setOnUSSD(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void setOnSmsOnSim(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void setEmergencyCallbackMode(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void setOnRestrictedStateChanged(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void setOnCatCallSetUp(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void setOnSuppServiceNotification(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void setOnNewCdmaSms(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void setOnNewGsmSms(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void setOnCatProactiveCmd(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void setOnCallRing(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void setOnNITZTime(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void setOnUnsolOemHookRaw(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void setOnSignalStrengthUpdate(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void setOnSmsStatus(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
   @Source(SUSI_NETWORK_INFORMATION)  int getLteOnCdmaMode();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.CommandsInterface$RadioState getRadioState();
}
class Call{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Connection getLatestConnection();
   @Source(SUSI_NETWORK_INFORMATION)  long getEarliestConnectTime();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Call$State getState();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Connection getEarliestConnection();
   @Source(SUSI_NETWORK_INFORMATION)  long getEarliestCreateTime();
}
class CallForwardInfo{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
}
class CallManager{
    boolean sendDtmf(  @Sink(SUSI_PHONE_CONNECTION) char arg0);
    boolean sendBurstDtmf(  @Sink(SUSI_PHONE_CONNECTION) java.lang.String arg0, @Sink(SUSI_PHONE_CONNECTION) int arg1, @Sink(SUSI_PHONE_CONNECTION) int arg2, @Sink(SUSI_PHONE_CONNECTION) android.os.Message arg3);
    void setMute(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean sendUssdResponse(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.Phone arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1);
    void setAudioMode();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean canConference(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.Call arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean startDtmf(  @Sink(SUSI_SYSTEM_SETTINGS) char arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.Connection dial(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.Phone arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.UUSInfo arg2);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.Connection dial(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.Phone arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1);
    void setEchoSuppressionEnabled(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getPendingMmiCodes(  com.android.internal.telephony.Phone arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getBgCallConnections();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Call$State getActiveFgCallState();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getBackgroundCalls();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Phone getRingingPhone();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Phone getFgPhone();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Call getFirstActiveBgCall();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.PhoneConstants$State getState();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Phone getBgPhone();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Call getActiveFgCall();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getRingingCalls();
   @Source(SUSI_NETWORK_INFORMATION)  int getServiceState();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getFgCallConnections();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.CallManager getInstance();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Phone getDefaultPhone();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getAllPhones();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Connection getFgCallLatestConnection();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getForegroundCalls();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getMute();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Call getFirstActiveRingingCall();
}
class CallManager$1{
    void handleMessage(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
}
class CallTracker{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String checkForTestEmergencyNumber(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Message obtainNoPollCompleteMessage(  int arg0);
}
class CallerInfo{
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getCallerId(  android.content.Context arg0, java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.CallerInfo getCallerInfo(  android.content.Context arg0, android.net.Uri arg1, android.database.Cursor arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.CallerInfo markAsVoiceMail();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.CallerInfo getCallerInfo(  android.content.Context arg0, java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.CallerInfo markAsEmergency(  android.content.Context arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.CallerInfo getCallerInfo(  android.content.Context arg0, android.net.Uri arg1);
}
class CallerInfoAsyncQuery{
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.CallerInfoAsyncQuery startQuery(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.content.Context arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2, @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener arg3, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg4);
    void addQueryListener(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
}
class CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler{
    void onQueryComplete(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.database.Cursor arg2);
}
class CommandException{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.CommandException$Error getCommandError();
}
class Connection{
   @Source(SUSI_NETWORK_INFORMATION)  int getCnapNamePresentation();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getCnapName();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.Call$State getState();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object getUserData();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getOrigDialString();
}
class CsimFileHandler{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEFPath(  int arg0);
}
class DataCallState{
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.DataCallState$SetupResult setLinkProperties(  @Sink(SUSI_SYSTEM_SETTINGS) android.net.LinkProperties arg0, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
}
class DataConnection{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void setRetryCount(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getWhatToString(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.DataConnection$UpdateLinkPropertyResult access$500(  com.android.internal.telephony.DataConnection arg0, com.android.internal.telephony.DataCallState arg1);
   @Source(SUSI_NETWORK_INFORMATION)  boolean isRetryNeeded();
   @Source(SUSI_NETWORK_INFORMATION)  int getRilRadioTechnology(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  boolean isRetryForever();
   @Source(SUSI_NETWORK_INFORMATION)  int getRetryTimer();
   @Source(SUSI_NETWORK_INFORMATION)  int getDataConnectionId();
   @Source(SUSI_NETWORK_INFORMATION)  int getRetryCount();
}
class DataConnection$CallSetupException{
   @Source(SUSI_NETWORK_INFORMATION)  int getRetryOverride();
}
class DataConnection$DcActivatingState{
   @Source(SUSI_SYSTEM_SETTINGS)  boolean processMessage(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
}
class DataConnection$DcActiveState{
   @Source(SUSI_SYSTEM_SETTINGS)  boolean processMessage(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
}
class DataConnection$DcDefaultState{
   @Source(SUSI_SYSTEM_SETTINGS)  boolean processMessage(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
}
class DataConnection$DcDisconnectingState{
   @Source(SUSI_SYSTEM_SETTINGS)  boolean processMessage(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
}
class DataConnection$DcDisconnectionErrorCreatingConnection{
   @Source(SUSI_SYSTEM_SETTINGS)  boolean processMessage(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
}
class DataConnection$DcInactiveState{
   @Source(SUSI_SYSTEM_SETTINGS)  boolean processMessage(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
}
class DataConnection$FailCause{
   @Source(SUSI_NETWORK_INFORMATION)  int getErrorCode();
}
class DataConnectionAc{
    void addApnContextSync(  @Sink(SUSI_PHONE_CONNECTION) com.android.internal.telephony.ApnContext arg0);
    com.android.internal.telephony.DataConnection$UpdateLinkPropertyResult updateLinkPropertiesDataCallStateSync(  @Sink(SUSI_PHONE_CONNECTION) com.android.internal.telephony.DataCallState arg0);
    void setReconnectIntentSync(  @Sink(SUSI_PHONE_CONNECTION) android.app.PendingIntent arg0);
    void reqSetReconnectIntent(  @Sink(SUSI_PHONE_CONNECTION) android.app.PendingIntent arg0);
    void setLinkPropertiesHttpProxySync(  @Sink(SUSI_PHONE_CONNECTION) android.net.ProxyProperties arg0);
    void removeApnContextSync(  @Sink(SUSI_PHONE_CONNECTION) com.android.internal.telephony.ApnContext arg0);
    void reqAddApnContext(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.ApnContext arg0);
    void reqRemomveApnContext(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.ApnContext arg0);
    void reqUpdateLinkPropertiesDataCallState(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.DataCallState arg0);
    void reqSetLinkPropertiesHttpProxy(  @Sink(SUSI_SYSTEM_SETTINGS) android.net.ProxyProperties arg0);
   @Source(SUSI_SYNCHRONIZATION_DATA)  int getRefCountSync();
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.util.Collection getApnListSync();
   @Source(SUSI_SYNCHRONIZATION_DATA)  com.android.internal.telephony.ApnSetting getApnSettingSync();
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.net.LinkCapabilities getLinkCapabilitiesSync();
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.app.PendingIntent getReconnectIntentSync();
   @Source(SUSI_SYNCHRONIZATION_DATA)  int getCidSync();
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.net.LinkProperties getLinkPropertiesSync();
}
class DataConnectionTracker{
    void notifyDataConnection(  @Sink(SUSI_PHONE_STATE) java.lang.String arg0);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void putRecoveryAction(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean setInternalDataEnabled(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void setDataOnRoamingEnabled(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void notifyOffApnsOfAvailability(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String apnIdToType(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int enableApnType(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getReryConfig(  boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LinkCapabilities getLinkCapabilities(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.DctConstants$Activity getActivity();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.ApnSetting fetchDunApn();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LinkProperties getLinkProperties(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getActiveApnTypes();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getActiveApnString(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int disableApnType(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getRecoveryAction();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getDataOnRoamingEnabled();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getAnyDataEnabled();
}
class DataConnectionTracker$TxRxSum{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
}
class DebugService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
}
class DefaultPhoneNotifier{
    void notifyDataConnectionFailed(  @Sink(SUSI_PHONE_STATE) com.android.internal.telephony.Phone arg0, @Sink(SUSI_PHONE_STATE) java.lang.String arg1, @Sink(SUSI_PHONE_STATE) java.lang.String arg2);
    void notifyServiceState(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.Phone arg0);
    void notifySignalStrength(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.Phone arg0);
    void notifyOtaspChanged(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.Phone arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
    void notifyDataActivity(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.Phone arg0);
    void notifyCallForwardingChanged(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.Phone arg0);
    void notifyPhoneState(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.Phone arg0);
    void notifyMessageWaitingChanged(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.Phone arg0);
    void notifyCellInfo(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.Phone arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.util.List arg1);
}
class DriverCall{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
}
class GsmAlphabet{
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String gsm8BitUnpackedToString(  @Sink(SUSI_SYSTEM_SETTINGS) byte[] arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg3);
   @Source(SUSI_NETWORK_INFORMATION)  byte[] stringToGsm7BitPacked(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  byte[] stringToGsm7BitPackedWithHeader(  java.lang.String arg0, byte[] arg1);
   @Source(SUSI_NETWORK_INFORMATION)  byte[] stringToGsm7BitPackedWithHeader(  java.lang.String arg0, byte[] arg1, int arg2, int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  byte[] stringToGsm8BitPacked(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  byte[] stringToGsm7BitPacked(  java.lang.String arg0, int arg1, boolean arg2, int arg3, int arg4);
   @Source(SUSI_NETWORK_INFORMATION)  byte[] stringToGsm7BitPacked(  java.lang.String arg0, int arg1, int arg2);
   @Source(SUSI_SYSTEM_SETTINGS)  int[] getEnabledLockingShiftTables();
   @Source(SUSI_SYSTEM_SETTINGS)  int[] getEnabledSingleShiftTables();
}
class GsmAlphabet$TextEncodingDetails{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
}
class IIccPhoneBook$Stub{
   @Source(SUSI_CONTACT_INFORMATION)  boolean onTransact(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.os.Parcel arg1, @Sink(SUSI_CONTACT_INFORMATION) android.os.Parcel arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3);
   @Source(SUSI_CONTACT_INFORMATION)  android.os.IBinder asBinder();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.internal.telephony.IIccPhoneBook asInterface(  @Sink(SUSI_CONTACT_INFORMATION) android.os.IBinder arg0);
}
class IIccPhoneBook$Stub$Proxy{
   @Source(SUSI_CONTACT_INFORMATION)  boolean updateAdnRecordsInEfByIndex(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4);
   @Source(SUSI_CONTACT_INFORMATION)  boolean updateAdnRecordsInEfBySearch(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg5);
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_CONTACT_INFORMATION)  int[] getAdnRecordsSize(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.util.List getAdnRecordsInEf(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class IPhoneStateListener$Stub{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IPhoneStateListener asInterface(  android.os.IBinder arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IPhoneStateListener$Stub$Proxy{
    void onDataConnectionStateChanged(  @Sink(SUSI_PHONE_STATE) int arg0, @Sink(SUSI_PHONE_STATE) int arg1);
    void onCallStateChanged(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1);
    void onOtaspChanged(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
    void onDataActivity(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
    void onCellInfoChanged(  @Sink(SUSI_SYSTEM_SETTINGS) java.util.List arg0);
    void onSignalStrengthChanged(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getInterfaceDescriptor();
}
class IPhoneSubInfo$Stub{
   @Source(SUSI_UNIQUE_IDENTIFIER)  com.android.internal.telephony.IPhoneSubInfo asInterface(  android.os.IBinder arg0);
   @Source(SUSI_UNIQUE_IDENTIFIER)  android.os.IBinder asBinder();
}
class IPhoneSubInfo$Stub$Proxy{
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getDeviceId();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getIsimDomain();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getLine1Number();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getIsimImpi();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String[] getIsimImpu();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getCompleteVoiceMailNumber();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getVoiceMailNumber();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getMsisdn();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getIccSerialNumber();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getSubscriberId();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getLine1AlphaTag();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getVoiceMailAlphaTag();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getDeviceSvn();
}
class ISms$Stub{
   @Source(SUSI_SMS_MMS)  boolean onTransact(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) android.os.Parcel arg1, @Sink(SUSI_SMS_MMS) android.os.Parcel arg2, @Sink(SUSI_SMS_MMS) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.ISms asInterface(  android.os.IBinder arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class ISms$Stub$Proxy{
   @Source(SUSI_SMS_MMS)  boolean disableCellBroadcast(  @Sink(SUSI_SMS_MMS) int arg0);
   @Source(SUSI_SMS_MMS)  boolean updateMessageOnIccEf(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) int arg1, @Sink(SUSI_SMS_MMS) byte[] arg2);
   @Source(SUSI_SMS_MMS)  boolean enableCellBroadcast(  @Sink(SUSI_SMS_MMS) int arg0);
    void sendData(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) int arg2, @Sink(SUSI_SMS_MMS) byte[] arg3, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg4, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg5);
   @Source(SUSI_SMS_MMS)  boolean copyMessageToIccEf(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) byte[] arg1, @Sink(SUSI_SMS_MMS) byte[] arg2);
    void setPremiumSmsPermission(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) int arg1);
   @Source(SUSI_SMS_MMS)  boolean disableCellBroadcastRange(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) int arg1);
    void sendMultipartText(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) java.util.List arg2, @Sink(SUSI_SMS_MMS) java.util.List arg3, @Sink(SUSI_SMS_MMS) java.util.List arg4);
   @Source(SUSI_SMS_MMS)  boolean enableCellBroadcastRange(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) int arg1);
    void sendText(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) java.lang.String arg2, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg3, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg4);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getAllMessagesFromIccEf();
   @Source(SUSI_NETWORK_INFORMATION)  int getPremiumSmsPermission(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class ITelephony$Stub{
   @Source(SUSI_SYSTEM_SETTINGS)  boolean onTransact(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Parcel arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Parcel arg2, @Sink(SUSI_SYSTEM_SETTINGS) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.ITelephony asInterface(  android.os.IBinder arg0);
}
class ITelephony$Stub$Proxy{
    void call(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean handlePinMmi(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  int disableApnType(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean setRadio(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean supplyPin(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
    void dial(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean supplyPuk(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  int enableApnType(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NETWORK_INFORMATION)  int getNetworkType();
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Bundle getCellLocation();
   @Source(SUSI_NETWORK_INFORMATION)  int getLteOnCdmaMode();
   @Source(SUSI_NETWORK_INFORMATION)  int getDataState();
   @Source(SUSI_NETWORK_INFORMATION)  int getVoiceMessageCount();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getNeighboringCellInfo();
   @Source(SUSI_NETWORK_INFORMATION)  int getActivePhoneType();
   @Source(SUSI_NETWORK_INFORMATION)  int getCdmaEriIconMode();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getAllCellInfo();
   @Source(SUSI_NETWORK_INFORMATION)  int getDataActivity();
   @Source(SUSI_NETWORK_INFORMATION)  int getCdmaEriIconIndex();
   @Source(SUSI_NETWORK_INFORMATION)  int getCallState();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getCdmaEriText();
}
class ITelephonyRegistry$Stub{
   @Source(SUSI_SYSTEM_SETTINGS)  boolean onTransact(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Parcel arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Parcel arg2, @Sink(SUSI_SYSTEM_SETTINGS) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.ITelephonyRegistry asInterface(  android.os.IBinder arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class ITelephonyRegistry$Stub$Proxy{
    void notifyDataConnection(  @Sink(SUSI_PHONE_STATE) int arg0, @Sink(SUSI_PHONE_STATE) boolean arg1, @Sink(SUSI_PHONE_STATE) java.lang.String arg2, @Sink(SUSI_PHONE_STATE) java.lang.String arg3, @Sink(SUSI_PHONE_STATE) java.lang.String arg4, @Sink(SUSI_PHONE_STATE) android.net.LinkProperties arg5, @Sink(SUSI_PHONE_STATE) android.net.LinkCapabilities arg6, @Sink(SUSI_PHONE_STATE) int arg7, @Sink(SUSI_PHONE_STATE) boolean arg8);
    void notifyDataConnectionFailed(  @Sink(SUSI_PHONE_STATE) java.lang.String arg0, @Sink(SUSI_PHONE_STATE) java.lang.String arg1);
    void notifyServiceState(  @Sink(SUSI_SYSTEM_SETTINGS) android.telephony.ServiceState arg0);
    void notifyCallState(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1);
    void notifyCallForwardingChanged(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void notifyCellInfo(  @Sink(SUSI_SYSTEM_SETTINGS) java.util.List arg0);
    void notifyMessageWaitingChanged(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void listen(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.IPhoneStateListener arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg3);
    void notifySignalStrength(  @Sink(SUSI_SYSTEM_SETTINGS) android.telephony.SignalStrength arg0);
    void notifyDataActivity(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
    void notifyOtaspChanged(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
    void notifyCellLocation(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Bundle arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class IWapPushManager$Stub{
   @Source(SUSI_SYSTEM_SETTINGS)  boolean onTransact(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Parcel arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Parcel arg2, @Sink(SUSI_SYSTEM_SETTINGS) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IWapPushManager asInterface(  android.os.IBinder arg0);
}
class IWapPushManager$Stub$Proxy{
   @Source(SUSI_SYSTEM_SETTINGS)  int processMessage(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.content.Intent arg2);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean addPackage(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg3, @Sink(SUSI_SYSTEM_SETTINGS) int arg4, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg5, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg6);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean deletePackage(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg3);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean updatePackage(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg3, @Sink(SUSI_SYSTEM_SETTINGS) int arg4, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg5, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg6);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class IccCardApplicationStatus{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IccCardStatus$PinState PinStateFromRILInt(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IccCardApplicationStatus$PersoSubState PersoSubstateFromRILInt(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IccCardApplicationStatus$AppState AppStateFromRILInt(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IccCardApplicationStatus$AppType AppTypeFromRILInt(  int arg0);
}
class IccCardProxy{
    void setIccLockEnabled(  @Sink(SUSI_PHONE_STATE) boolean arg0, @Sink(SUSI_PHONE_STATE) java.lang.String arg1, @Sink(SUSI_PHONE_STATE) android.os.Message arg2);
    void setIccFdnEnabled(  @Sink(SUSI_PHONE_STATE) boolean arg0, @Sink(SUSI_PHONE_STATE) java.lang.String arg1, @Sink(SUSI_PHONE_STATE) android.os.Message arg2);
    void setVoiceRadioTech(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getServiceProviderName();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IccRecords getIccRecords();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getIccRecordsLoaded();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IccCardConstants$State getState();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IccFileHandler getIccFileHandler();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getIccFdnEnabled();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getIccLockEnabled();
}
class IccCardStatus{
    void setCardState(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
    void setUniversalPinState(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
}
class IccFileHandler{
    void updateEFLinearFixed(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) byte[] arg2, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg3, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg4);
    void handleMessage(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getCommonIccEFPath(  int arg0);
    void getEFLinearRecordSize(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
}
class IccIoResult{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IccException getException();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
}
class IccPhoneBookInterfaceManager{
   @Source(SUSI_CONTACT_INFORMATION)  boolean updateAdnRecordsInEfBySearch(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg5);
   @Source(SUSI_CONTACT_INFORMATION)  boolean onTransact(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.os.Parcel arg1, @Sink(SUSI_CONTACT_INFORMATION) android.os.Parcel arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3);
   @Source(SUSI_CONTACT_INFORMATION)  boolean updateAdnRecordsInEfByIndex(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4);
   @Source(SUSI_CONTACT_INFORMATION)  java.util.List getAdnRecordsInEf(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class IccPhoneBookInterfaceManagerProxy{
   @Source(SUSI_CONTACT_INFORMATION)  boolean updateAdnRecordsInEfBySearch(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg5);
   @Source(SUSI_CONTACT_INFORMATION)  boolean updateAdnRecordsInEfByIndex(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4);
   @Source(SUSI_NETWORK_INFORMATION)  int[] getAdnRecordsSize(  int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.util.List getAdnRecordsInEf(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class IccProvider{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getType(  android.net.Uri arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.database.Cursor query(  android.net.Uri arg0, java.lang.String[] arg1, java.lang.String arg2, java.lang.String[] arg3, java.lang.String arg4);
}
class IccRecords{
    void setVoiceCallForwardingFlag(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg1);
    void setMsisdnNumber(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getVoiceMailNumber();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getMsisdnNumber();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getServiceProviderName();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.ims.IsimRecords getIsimRecords();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getMsisdnAlphaTag();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getIMSI();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getOperatorNumeric();
   @Source(SUSI_NETWORK_INFORMATION)  int getVoiceMessageCount();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getVoiceMailAlphaTag();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getVoiceMessageWaiting();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getRecordsLoaded();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.AdnRecordCache getAdnCache();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getVoiceCallForwardingFlag();
}
class IccRefreshResponse{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
}
class IccServiceTable{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
}
class IccSmsInterfaceManager{
    void sendText(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) java.lang.String arg2, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg3, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg4);
    void setPremiumSmsPermission(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) int arg1);
    void sendData(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) int arg2, @Sink(SUSI_SMS_MMS) byte[] arg3, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg4, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg5);
    void sendMultipartText(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) java.util.List arg2, @Sink(SUSI_SMS_MMS) java.util.List arg3, @Sink(SUSI_SMS_MMS) java.util.List arg4);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.ArrayList buildValidRawData(  java.util.ArrayList arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getPremiumSmsPermission(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  byte[] makeSmsRecordData(  int arg0, byte[] arg1);
}
class IccSmsInterfaceManagerProxy{
    void setPremiumSmsPermission(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) int arg1);
    void sendText(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) java.lang.String arg2, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg3, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg4);
    void sendMultipartText(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) java.util.List arg2, @Sink(SUSI_SMS_MMS) java.util.List arg3, @Sink(SUSI_SMS_MMS) java.util.List arg4);
   @Source(SUSI_SMS_MMS)  boolean enableCellBroadcast(  @Sink(SUSI_SMS_MMS) int arg0);
   @Source(SUSI_SMS_MMS)  boolean enableCellBroadcastRange(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) int arg1);
    void sendData(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) int arg2, @Sink(SUSI_SMS_MMS) byte[] arg3, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg4, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg5);
   @Source(SUSI_SMS_MMS)  boolean updateMessageOnIccEf(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) int arg1, @Sink(SUSI_SMS_MMS) byte[] arg2);
   @Source(SUSI_NETWORK_INFORMATION)  int getPremiumSmsPermission(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getAllMessagesFromIccEf();
}
class IccUtils{
   @Source(SUSI_NETWORK_INFORMATION)  android.graphics.Bitmap parseToRGB(  byte[] arg0, int arg1, boolean arg2);
   @Source(SUSI_NETWORK_INFORMATION)  byte[] hexStringToBytes(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.graphics.Bitmap parseToBnW(  byte[] arg0, int arg1);
}
class IntRangeManager{
   @Source(SUSI_SYSTEM_SETTINGS)  boolean enableRange(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean disableRange(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2);
   @Source(SUSI_NETWORK_INFORMATION)  boolean isEmpty();
}
class MccTable{
    void setSystemLocale(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.Context arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2);
    void updateMccMncConfiguration(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.Context arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1);
}
class OperatorInfo{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getOperatorNumeric();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.OperatorInfo$State getState();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getOperatorAlphaShort();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getOperatorAlphaLong();
}
class PhoneBase{
    void notifyNewRingingConnectionP(  @Sink(SUSI_PHONE_STATE) com.android.internal.telephony.Connection arg0);
    void notifyDataConnection(  @Sink(SUSI_PHONE_STATE) java.lang.String arg0);
    void notifyDataConnection(  @Sink(SUSI_PHONE_STATE) java.lang.String arg0, @Sink(SUSI_PHONE_STATE) java.lang.String arg1);
    void notifyDataConnection(  @Sink(SUSI_PHONE_STATE) java.lang.String arg0, @Sink(SUSI_PHONE_STATE) java.lang.String arg1, @Sink(SUSI_PHONE_STATE) com.android.internal.telephony.PhoneConstants$DataState arg2);
    void notifyDisconnectP(  @Sink(SUSI_PHONE_STATE) com.android.internal.telephony.Connection arg0);
    void notifyDataConnectionFailed(  @Sink(SUSI_PHONE_STATE) java.lang.String arg0, @Sink(SUSI_PHONE_STATE) java.lang.String arg1);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void notifyServiceStateChangedP(  @Sink(SUSI_SYSTEM_SETTINGS) android.telephony.ServiceState arg0);
    void disableDnsCheck(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void invokeOemRilRequestStrings(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String[] arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setEchoSuppressionEnabled(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  int enableApnType(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
    void setOnEcbModeExitResponse(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void restoreSavedNetworkSelection(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void setTTYMode(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setBandMode(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setVoiceMessageWaiting(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
    void notifyOtaspChanged(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
    void notifyCellInfo(  @Sink(SUSI_SYSTEM_SETTINGS) java.util.List arg0);
    void sendBurstDtmf(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg3);
    void setCdmaRoamingPreference(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setCdmaSubscription(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setSmscAddress(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setSystemProperty(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1);
    void setPreferredNetworkType(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getIccSerialNumber();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getActiveApnHost(  java.lang.String arg0);
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getCdmaPrlVersion();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getCdmaMin();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getCdmaEriText();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getMsisdn();
    void getPreferredNetworkType(  @Sink(SUSI_LOCATION_INFORMATION) android.os.Message arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getUnitTestMode();
   @Source(SUSI_SYSTEM_SETTINGS)  android.content.Context getContext();
   @Source(SUSI_SYSTEM_SETTINGS)  android.telephony.SignalStrength getSignalStrength();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.IccFileHandler getIccFileHandler();
   @Source(SUSI_SYSTEM_SETTINGS)  android.net.LinkCapabilities getLinkCapabilities(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  int getLteOnCdmaMode();
   @Source(SUSI_SYSTEM_SETTINGS)  android.os.Handler getHandler();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.IccCardApplicationStatus$AppType getCurrentUiccAppType();
   @Source(SUSI_SYSTEM_SETTINGS)  int getCdmaEriIconMode();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getMessageWaitingIndicator();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable();
    void getSmscAddress(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String[] getActiveApnTypes();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.IccCard getIccCard();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl();
   @Source(SUSI_SYSTEM_SETTINGS)  int getVoiceMessageCount();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.CallTracker getCallTracker();
   @Source(SUSI_SYSTEM_SETTINGS)  java.util.List getAllCellInfo();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.ServiceStateTracker getServiceStateTracker();
   @Source(SUSI_SYSTEM_SETTINGS)  int getCdmaEriIconIndex();
    void getEnhancedVoicePrivacy(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.ims.IsimRecords getIsimRecords();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean isDataConnectivityPossible();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getIccRecordsLoaded();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getCallForwardingIndicator();
   @Source(SUSI_SYSTEM_SETTINGS)  android.net.LinkProperties getLinkProperties(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
}
class PhoneFactory{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.internal.telephony.Phone getGsmPhone();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.internal.telephony.Phone getCdmaPhone();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.Phone getDefaultPhone();
}
class PhoneProxy{
    void sendBurstDtmf(  @Sink(SUSI_PHONE_CONNECTION) java.lang.String arg0, @Sink(SUSI_PHONE_CONNECTION) int arg1, @Sink(SUSI_PHONE_CONNECTION) int arg2, @Sink(SUSI_PHONE_CONNECTION) android.os.Message arg3);
    void sendUssdResponse(  @Sink(SUSI_PHONE_CONNECTION) java.lang.String arg0);
    void sendDtmf(  @Sink(SUSI_PHONE_CONNECTION) char arg0);
    void setOnEcbModeExitResponse(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void setPreferredNetworkType(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setCellBroadcastSmsConfig(  @Sink(SUSI_SYSTEM_SETTINGS) int[] arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setCallWaiting(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setOutgoingCallerIdDisplay(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setRadioPower(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void setNetworkSelectionModeAutomatic(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void setCdmaRoamingPreference(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setVoiceMessageWaiting(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
    void setLine1Number(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void handleMessage(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void enableEnhancedVoicePrivacy(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setSmscAddress(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setTTYMode(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setOnPostDialCharacter(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.Connection dial(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.UUSInfo arg1);
    void setVoiceMailNumber(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void setCallForwardingOption(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2, @Sink(SUSI_SYSTEM_SETTINGS) int arg3, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg4);
    void setDataRoamingEnabled(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void startDtmf(  @Sink(SUSI_SYSTEM_SETTINGS) char arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.Connection dial(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
    void setCdmaSubscription(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setMute(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void setUnitTestMode(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  int enableApnType(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
    void setEchoSuppressionEnabled(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0);
    void setBandMode(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getMsisdn();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getCdmaMin();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getSubscriberId();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getLine1AlphaTag();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getDeviceSvn();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getLine1Number();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getVoiceMailNumber();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getCdmaEriText();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getDeviceId();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getIccSerialNumber();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getPhoneName();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getMeid();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getActiveApnHost(  java.lang.String arg0);
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getImei();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getVoiceMailAlphaTag();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getCdmaPrlVersion();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getEsn();
    void getPreferredNetworkType(  @Sink(SUSI_LOCATION_INFORMATION) android.os.Message arg0);
   @Source(SUSI_LOCATION_INFORMATION)  android.telephony.CellLocation getCellLocation();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager();
   @Source(SUSI_CONTACT_INFORMATION)  boolean getIccRecordsLoaded();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager();
    void getEnhancedVoicePrivacy(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void getNeighboringCids(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  int getCdmaEriIconMode();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.IccCard getIccCard();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getCallForwardingIndicator();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.ims.IsimRecords getIsimRecords();
   @Source(SUSI_SYSTEM_SETTINGS)  int getLteOnCdmaMode();
    void getCallWaiting(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.Phone$DataActivityState getDataActivityState();
   @Source(SUSI_SYSTEM_SETTINGS)  android.telephony.ServiceState getServiceState();
   @Source(SUSI_SYSTEM_SETTINGS)  java.util.List getPendingMmiCodes();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getMessageWaitingIndicator();
   @Source(SUSI_SYSTEM_SETTINGS)  int getPhoneType();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.Call getBackgroundCall();
   @Source(SUSI_SYSTEM_SETTINGS)  android.net.LinkProperties getLinkProperties(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
    void getCellBroadcastSmsConfig(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.Call getForegroundCall();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl();
    void getSmscAddress(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void getCallForwardingOption(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.Call getRingingCall();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.PhoneConstants$State getState();
   @Source(SUSI_SYSTEM_SETTINGS)  android.net.LinkCapabilities getLinkCapabilities(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.Phone getActivePhone();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState();
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String[] getActiveApnTypes();
    void getAvailableNetworks(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  android.telephony.SignalStrength getSignalStrength();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getDataRoamingEnabled();
   @Source(SUSI_SYSTEM_SETTINGS)  int getVoiceMessageCount();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getUnitTestMode();
    void getDataCallList(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getMute();
   @Source(SUSI_SYSTEM_SETTINGS)  android.content.Context getContext();
    void getOutgoingCallerIdDisplay(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  int getCdmaEriIconIndex();
   @Source(SUSI_SYSTEM_SETTINGS)  java.util.List getAllCellInfo();
}
class PhoneSubInfo{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getMsisdn();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getDeviceSvn();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getDeviceId();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getVoiceMailNumber();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getCompleteVoiceMailNumber();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getLine1AlphaTag();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getIsimImpi();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getSubscriberId();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getVoiceMailAlphaTag();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getIsimDomain();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getLine1Number();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getIccSerialNumber();
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String[] getIsimImpu();
}
class PhoneSubInfoProxy{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getIsimImpi();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getSubscriberId();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getIsimDomain();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getLine1AlphaTag();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getCompleteVoiceMailNumber();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getVoiceMailNumber();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getDeviceSvn();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getLine1Number();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getVoiceMailAlphaTag();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getDeviceId();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getMsisdn();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getIccSerialNumber();
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String[] getIsimImpu();
}
class RIL{
    void hangupWaitingOrBackground(  @Sink(SUSI_PHONE_CONNECTION) android.os.Message arg0);
    void sendBurstDtmf(  @Sink(SUSI_PHONE_CONNECTION) java.lang.String arg0, @Sink(SUSI_PHONE_CONNECTION) int arg1, @Sink(SUSI_PHONE_CONNECTION) int arg2, @Sink(SUSI_PHONE_CONNECTION) android.os.Message arg3);
    void sendDtmf(  @Sink(SUSI_PHONE_CONNECTION) char arg0, @Sink(SUSI_PHONE_CONNECTION) android.os.Message arg1);
    void supplyIccPukForApp(  @Sink(SUSI_PHONE_STATE) java.lang.String arg0, @Sink(SUSI_PHONE_STATE) java.lang.String arg1, @Sink(SUSI_PHONE_STATE) java.lang.String arg2, @Sink(SUSI_PHONE_STATE) android.os.Message arg3);
    void separateConnection(  @Sink(SUSI_PHONE_STATE) int arg0, @Sink(SUSI_PHONE_STATE) android.os.Message arg1);
    void supplyIccPinForApp(  @Sink(SUSI_PHONE_STATE) java.lang.String arg0, @Sink(SUSI_PHONE_STATE) java.lang.String arg1, @Sink(SUSI_PHONE_STATE) android.os.Message arg2);
    void supplyIccPin2ForApp(  @Sink(SUSI_PHONE_STATE) java.lang.String arg0, @Sink(SUSI_PHONE_STATE) java.lang.String arg1, @Sink(SUSI_PHONE_STATE) android.os.Message arg2);
    void supplyIccPuk2ForApp(  @Sink(SUSI_PHONE_STATE) java.lang.String arg0, @Sink(SUSI_PHONE_STATE) java.lang.String arg1, @Sink(SUSI_PHONE_STATE) java.lang.String arg2, @Sink(SUSI_PHONE_STATE) android.os.Message arg3);
    void iccIOForApp(  @Sink(SUSI_PHONE_STATE) int arg0, @Sink(SUSI_PHONE_STATE) int arg1, @Sink(SUSI_PHONE_STATE) java.lang.String arg2, @Sink(SUSI_PHONE_STATE) int arg3, @Sink(SUSI_PHONE_STATE) int arg4, @Sink(SUSI_PHONE_STATE) int arg5, @Sink(SUSI_PHONE_STATE) java.lang.String arg6, @Sink(SUSI_PHONE_STATE) java.lang.String arg7, @Sink(SUSI_PHONE_STATE) java.lang.String arg8, @Sink(SUSI_PHONE_STATE) android.os.Message arg9);
    void hangupConnection(  @Sink(SUSI_PHONE_STATE) int arg0, @Sink(SUSI_PHONE_STATE) android.os.Message arg1);
    void changeIccPin2ForApp(  @Sink(SUSI_PHONE_STATE) java.lang.String arg0, @Sink(SUSI_PHONE_STATE) java.lang.String arg1, @Sink(SUSI_PHONE_STATE) java.lang.String arg2, @Sink(SUSI_PHONE_STATE) android.os.Message arg3);
    void changeIccPinForApp(  @Sink(SUSI_PHONE_STATE) java.lang.String arg0, @Sink(SUSI_PHONE_STATE) java.lang.String arg1, @Sink(SUSI_PHONE_STATE) java.lang.String arg2, @Sink(SUSI_PHONE_STATE) android.os.Message arg3);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void setCdmaBroadcastActivation(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void writeSmsToRuim(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void cancelPendingUssd(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void changeBarringPassword(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg3);
    void handleCallSetupRequestFromSim(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setSmscAddress(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void resetRadio(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void supplyNetworkDepersonalization(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setPreferredNetworkType(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void deactivateDataCall(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void setFacilityLockForApp(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2, @Sink(SUSI_SYSTEM_SETTINGS) int arg3, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg4, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg5);
    void dial(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.UUSInfo arg2, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg3);
    void setLocationUpdates(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void acknowledgeLastIncomingGsmSms(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void setGsmBroadcastActivation(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setCLIR(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void hangupForegroundResumeBackground(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void writeSmsToSim(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg3);
    void explicitCallTransfer(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void setGsmBroadcastConfig(  @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[] arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void queryFacilityLockForApp(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg3, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg4);
    void setPreferredVoicePrivacy(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void rejectCall(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void reportStkServiceIsRunning(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void invokeOemRilRequestStrings(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String[] arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void sendTerminalResponse(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setCdmaSubscriptionSource(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setupDataCall(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg3, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg4, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg5, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg6, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg7);
    void setCallForward(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg3, @Sink(SUSI_SYSTEM_SETTINGS) int arg4, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg5);
    void requestIsimAuthentication(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void sendCDMAFeatureCode(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void startDtmf(  @Sink(SUSI_SYSTEM_SETTINGS) char arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void deleteSmsOnRuim(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void getIMSIForApp(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void acknowledgeIncomingGsmSmsWithPdu(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void setNetworkSelectionModeAutomatic(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void sendEnvelope(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void sendCdmaSms(  @Sink(SUSI_SYSTEM_SETTINGS) byte[] arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void dial(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void sendSMS(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void queryCallWaiting(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void queryCallForwardStatus(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg3);
    void setCallWaiting(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void setMute(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void acknowledgeLastIncomingCdmaSms(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void setCdmaRoamingPreference(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setCdmaBroadcastConfig(  @Sink(SUSI_SYSTEM_SETTINGS) int[] arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void conference(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void acceptCall(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void setNetworkSelectionModeManual(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void stopDtmf(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void exitEmergencyCallbackMode(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void setCurrentPreferredNetworkType();
    void setBandMode(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void sendEnvelopeWithStatus(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void deleteSmsOnSim(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void reportSmsMemoryStatus(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setRadioPower(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setTTYMode(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setFacilityLock(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) boolean arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg2, @Sink(SUSI_SYSTEM_SETTINGS) int arg3, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg4);
    void switchWaitingOrHoldingAndActive(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
    void invokeOemRilRequestRaw(  @Sink(SUSI_SYSTEM_SETTINGS) byte[] arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void sendUSSD(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setSuppServiceNotifications(  @Sink(SUSI_SYSTEM_SETTINGS) boolean arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void setOnNITZTime(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void getSmscAddress(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
}
class RIL$RILSender{
    void handleMessage(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg0);
}
class RILRequest{
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.internal.telephony.RILRequest obtain(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
}
class RestrictedState{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
}
class RetryManager{
   @Source(SUSI_NETWORK_INFORMATION)  int getRetryTimer();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
   @Source(SUSI_NETWORK_INFORMATION)  int getRetryCount();
}
class SMSDispatcher{
    void dispatchPdus(  @Sink(SUSI_SMS_MMS) byte[][] arg0);
    void dispatch(  @Sink(SUSI_SMS_MMS) android.content.Intent arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1);
    void dispatchPortAddressedPdus(  @Sink(SUSI_SMS_MMS) byte[][] arg0, @Sink(SUSI_SMS_MMS) int arg1);
    void setPremiumSmsPermission(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) int arg1);
    void dispatchBroadcastMessage(  @Sink(SUSI_SMS_MMS) android.telephony.SmsCbMessage arg0);
    void handleSendComplete(  @Sink(SUSI_SMS_MMS) android.os.AsyncResult arg0);
   @Source(SUSI_SMS_MMS)  int processMessagePart(  @Sink(SUSI_SMS_MMS) byte[] arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) int arg2, @Sink(SUSI_SMS_MMS) int arg3, @Sink(SUSI_SMS_MMS) int arg4, @Sink(SUSI_SMS_MMS) long arg5, @Sink(SUSI_SMS_MMS) int arg6, @Sink(SUSI_SMS_MMS) boolean arg7);
    void sendMultipartText(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) java.util.ArrayList arg2, @Sink(SUSI_SMS_MMS) java.util.ArrayList arg3, @Sink(SUSI_SMS_MMS) java.util.ArrayList arg4);
    void dispatch(  @Sink(SUSI_SMS_MMS) android.content.Intent arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) android.content.BroadcastReceiver arg2);
    void sendRawPdu(  @Sink(SUSI_SMS_MMS) byte[] arg0, @Sink(SUSI_SMS_MMS) byte[] arg1, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg2, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg3, @Sink(SUSI_SMS_MMS) java.lang.String arg4);
   @Source(SUSI_NETWORK_INFORMATION)  int getPremiumSmsPermission(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getNextConcatenatedRef();
}
class ServiceStateTracker{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NETWORK_INFORMATION)  boolean getDesiredPowerState();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getAllCellInfo();
   @Source(SUSI_NETWORK_INFORMATION)  boolean onSignalStrengthResult(  android.os.AsyncResult arg0, boolean arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.SignalStrength getSignalStrength();
}
class SmsAddress{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAddressString();
}
class SmsHeader{
   @Source(SUSI_SMS_MMS)  byte[] toByteArray(  @Sink(SUSI_SMS_MMS) com.android.internal.telephony.SmsHeader arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
}
class SmsMessageBase{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getDisplayMessageBody();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEmailFrom();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.SmsHeader getUserDataHeader();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEmailBody();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getOriginatingAddress();
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getPdu();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getMessageBody();
   @Source(SUSI_NETWORK_INFORMATION)  long getTimestampMillis();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPseudoSubject();
   @Source(SUSI_NETWORK_INFORMATION)  int getIndexOnIcc();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getDisplayOriginatingAddress();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getServiceCenterAddress();
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getUserData();
   @Source(SUSI_NETWORK_INFORMATION)  int getStatusOnIcc();
}
class SmsMessageBase$SubmitPduBase{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
}
class SmsRawData{
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getBytes();
}
class SmsResponse{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
}
class SmsUsageMonitor{
   @Source(SUSI_SMS_MMS)  boolean check(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) int arg1);
    void setPremiumSmsPermission(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getPremiumSmsPermission(  java.lang.String arg0);
}
class SmsUsageMonitor$ShortCodePatternMatcher{
   @Source(SUSI_NETWORK_INFORMATION)  int getNumberCategory(  java.lang.String arg0);
}
class UUSInfo{
   @Source(SUSI_NETWORK_INFORMATION)  int getDcs();
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getUserData();
   @Source(SUSI_NETWORK_INFORMATION)  int getType();
}
class UiccCard{
    void update(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.Context arg0, @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.CommandsInterface arg1, @Sink(SUSI_SYSTEM_SETTINGS) com.android.internal.telephony.IccCardStatus arg2);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.UiccCardApplication getApplication(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IccCardStatus$CardState getCardState();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IccCardStatus$PinState getUniversalPinState();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.UiccCardApplication getApplicationIndex(  int arg0);
}
class UiccCardApplication{
    void changeIccLockPassword(  @Sink(SUSI_PHONE_STATE) java.lang.String arg0, @Sink(SUSI_PHONE_STATE) java.lang.String arg1, @Sink(SUSI_PHONE_STATE) android.os.Message arg2);
    void setIccFdnEnabled(  @Sink(SUSI_PHONE_STATE) boolean arg0, @Sink(SUSI_PHONE_STATE) java.lang.String arg1, @Sink(SUSI_PHONE_STATE) android.os.Message arg2);
    void changeIccFdnPassword(  @Sink(SUSI_PHONE_STATE) java.lang.String arg0, @Sink(SUSI_PHONE_STATE) java.lang.String arg1, @Sink(SUSI_PHONE_STATE) android.os.Message arg2);
    void setIccLockEnabled(  @Sink(SUSI_PHONE_STATE) boolean arg0, @Sink(SUSI_PHONE_STATE) java.lang.String arg1, @Sink(SUSI_PHONE_STATE) android.os.Message arg2);
    void supplyPuk2(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void supplyPuk(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg1, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg2);
    void supplyNetworkDepersonalization(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void supplyPin2(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void registerForNetworkLocked(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void registerForReady(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
    void supplyPin(  @Sink(SUSI_SYSTEM_SETTINGS) java.lang.String arg0, @Sink(SUSI_SYSTEM_SETTINGS) android.os.Message arg1);
    void registerForLocked(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Handler arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) java.lang.Object arg2);
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getAid();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IccFileHandler getIccFileHandler();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IccCardStatus$PinState getPin1State();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IccRecords getIccRecords();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IccCardApplicationStatus$PersoSubState getPersoSubState();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IccCardApplicationStatus$AppType getType();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IccCardApplicationStatus$AppState getState();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getIccLockEnabled();
   @Source(SUSI_SYSTEM_SETTINGS)  boolean getIccFdnEnabled();
}
class UsimFileHandler{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEFPath(  int arg0);
}
class WapPushOverSms{
   @Source(SUSI_SMS_MMS)  int dispatchWapPdu(  @Sink(SUSI_SMS_MMS) byte[] arg0);
}
class WapPushOverSms$WapPushConnection{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.telephony.IWapPushManager getWapPushManager();
}
class WspTypeDecoder{
   @Source(SUSI_NETWORK_INFORMATION)  long getValue32();
   @Source(SUSI_NETWORK_INFORMATION)  int getDecodedDataLength();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getValueString();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.HashMap getContentParameters();
}

package android.service.dreams;

class IDreamManager$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IDreamManager$Stub$Proxy{
    void setDreamComponents(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName[] arg0);
    void finishSelf(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.content.ComponentName getDefaultDreamComponent();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NETWORK_INFORMATION)  android.content.ComponentName[] getDreamComponents();
}
class IDreamService$Stub{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IDreamService$Stub$Proxy{
    void attach(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}

package com.android.org.bouncycastle.jce.netscape;

class NetscapeCertRequest{
   @Source(SUSI_NO_CATEGORY)  java.security.PublicKey getPublicKey();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getChallenge();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getKeyAlgorithm();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getSigningAlgorithm();
}

package com.android.email.activity;

class AccountSelectorAdapter{
   @Source(SUSI_NO_CATEGORY)  int getItemViewType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getAccountId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayName(  @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  int getViewTypeCount();
   @Source(SUSI_NO_CATEGORY)  long getId(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class AccountSelectorAdapter$AccountsLoader{
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor loadInBackground();
}
class AccountSelectorAdapter$CursorWithExtras{
   @Source(SUSI_EMAIL)  java.lang.String getMailboxDisplayName();
   @Source(SUSI_EMAIL)  int getMailboxMessageCount();
   @Source(SUSI_EMAIL)  int getRecentMailboxCount();
   @Source(SUSI_EMAIL)  long getMailboxId();
   @Source(SUSI_NO_CATEGORY)  long getAccountId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAccountDisplayName();
   @Source(SUSI_NO_CATEGORY)  int getAccountCount();
}
class ActivityHelper{
   @Source(SUSI_EMAIL)  boolean openUrlInMessage(  @Sink(SUSI_EMAIL) android.app.Activity arg0, @Sink(SUSI_EMAIL) java.lang.String arg1, @Sink(SUSI_EMAIL) long arg2);
}
class AttachmentInfoDialog{
   @Source(SUSI_EMAIL)  com.android.email.activity.AttachmentInfoDialog newInstance(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) int arg1);
}
class ContactStatusLoader{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.email.activity.ContactStatusLoader$Result loadInBackground();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.email.activity.ContactStatusLoader$Result getContactInfo(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
}
class DeleteMessageConfirmationDialog{
   @Source(SUSI_EMAIL)  com.android.email.activity.DeleteMessageConfirmationDialog newInstance(  @Sink(SUSI_EMAIL) int arg0, @Sink(SUSI_EMAIL) android.app.Fragment arg1);
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog onCreateDialog(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
}
class EmailActivity{
   @Source(SUSI_EMAIL)  android.content.Intent createSearchIntent(  @Sink(SUSI_EMAIL) android.app.Activity arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) long arg2, @Sink(SUSI_EMAIL) java.lang.String arg3);
   @Source(SUSI_EMAIL)  android.content.Intent createOpenAccountIntent(  @Sink(SUSI_EMAIL) android.app.Activity arg0, @Sink(SUSI_EMAIL) long arg1);
   @Source(SUSI_EMAIL)  android.content.Intent createOpenMailboxIntent(  @Sink(SUSI_EMAIL) android.app.Activity arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) long arg2);
   @Source(SUSI_EMAIL)  android.content.Intent createOpenMessageIntent(  @Sink(SUSI_EMAIL) android.app.Activity arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) long arg2, @Sink(SUSI_EMAIL) long arg3);
}
class EmailActivity$ControllerResult{
    void sendMailCallback(  @Sink(SUSI_EMAIL) com.android.emailcommon.mail.MessagingException arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) long arg2, @Sink(SUSI_EMAIL) int arg3);
}
class InsertQuickResponseDialog{
   @Source(SUSI_EMAIL)  com.android.email.activity.InsertQuickResponseDialog newInstance(  @Sink(SUSI_EMAIL) android.app.Fragment arg0, @Sink(SUSI_EMAIL) com.android.emailcommon.provider.Account arg1);
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog onCreateDialog(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
}
class MailboxFinder{
   @Source(SUSI_NO_CATEGORY)  com.android.email.Controller$Result getControllerResultsForTest();
}
class MailboxFragmentAdapter{
    void bindView(  @Sink(SUSI_EMAIL) android.view.View arg0, @Sink(SUSI_EMAIL) android.content.Context arg1, @Sink(SUSI_EMAIL) android.database.Cursor arg2);
   @Source(SUSI_NO_CATEGORY)  long getId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getAccountId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getAccountId(  @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg0);
   @Source(SUSI_NO_CATEGORY)  int getViewTypeCount();
   @Source(SUSI_NO_CATEGORY)  long getId(  @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg0);
   @Source(SUSI_NO_CATEGORY)  int getItemViewType(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class MailboxFragmentAdapter$CombinedMailboxLoader{
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor loadInBackground();
}
class MailboxFragmentAdapter$MailboxFragmentLoader{
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor loadInBackground();
}
class MailboxListFragment{
   @Source(SUSI_EMAIL)  com.android.email.activity.MailboxListFragment newInstance(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) boolean arg2);
    void onCreate(  @Sink(SUSI_EMAIL) android.os.Bundle arg0);
   @Source(SUSI_EMAIL)  long getInitialCurrentMailboxId();
   @Source(SUSI_EMAIL)  long getSelectedMailboxId();
   @Source(SUSI_NO_CATEGORY)  long getAccountId();
   @Source(SUSI_NO_CATEGORY)  boolean getEnableHighlight();
}
class MailboxListItem{
    void setDropTargetBackground(  @Sink(SUSI_EMAIL) boolean arg0, @Sink(SUSI_EMAIL) long arg1);
    void setBackgroundDrawable(  @Sink(SUSI_EMAIL) android.graphics.drawable.Drawable arg0);
}
class MailboxMoveToAdapter$MailboxMoveToLoader{
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor loadInBackground();
}
class MessageCompose{
   @Source(SUSI_EMAIL)  boolean actionCompose(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) java.lang.String arg1, @Sink(SUSI_EMAIL) long arg2);
    void setFocusShifter(  @Sink(SUSI_EMAIL) int arg0, @Sink(SUSI_EMAIL) int arg1);
    void setMessageContentSelection(  @Sink(SUSI_EMAIL) java.lang.String arg0);
    void setIntent(  @Sink(SUSI_EMAIL) android.content.Intent arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getMessageComposeIntent(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
}
class MessageCompose$ActionSpinnerAdapter{
   @Source(SUSI_NO_CATEGORY)  android.view.View getDropDownView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
}
class MessageFileView{
   @Source(SUSI_NO_CATEGORY)  com.android.email.activity.MessageFileViewFragment getFragment();
}
class MessageList{
   @Source(SUSI_NO_CATEGORY)  long getAccountFromIntent(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent createFroyoIntent(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.provider.Account arg1);
}
class MessageListFragment{
    void setLayout(  @Sink(SUSI_EMAIL) com.android.email.activity.ThreePaneLayout arg0);
   @Source(SUSI_EMAIL)  boolean onItemLongClick(  @Sink(SUSI_EMAIL) android.widget.AdapterView arg0, @Sink(SUSI_EMAIL) android.view.View arg1, @Sink(SUSI_EMAIL) int arg2, @Sink(SUSI_EMAIL) long arg3);
   @Source(SUSI_EMAIL)  com.android.email.activity.MessageListFragment newInstance(  @Sink(SUSI_EMAIL) com.android.email.MessageListContext arg0);
    void onActivityCreated(  @Sink(SUSI_EMAIL) android.os.Bundle arg0);
   @Source(SUSI_EMAIL)  com.android.emailcommon.provider.Mailbox getSearchedMailbox();
   @Source(SUSI_EMAIL)  long getMailboxId();
   @Source(SUSI_EMAIL)  com.android.emailcommon.provider.Mailbox getMailbox();
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.provider.Account getAccount();
   @Source(SUSI_NO_CATEGORY)  long getAccountId();
   @Source(SUSI_NO_CATEGORY)  com.android.email.MessageListContext getListContext();
}
class MessageListFragment$1{
    void setField(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) boolean arg1);
}
class MessageListFragment$2{
    void setField(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) boolean arg1);
}
class MessageListItem{
    void setTimestamp(  @Sink(SUSI_EMAIL) long arg0);
}
class MessageListItemCoordinates{
   @Source(SUSI_EMAIL)  com.android.email.activity.MessageListItemCoordinates forWidth(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) int arg1, @Sink(SUSI_EMAIL) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  int getWidth(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  int getHeight(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  int getMode(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  int getHeight(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class MessageOrderManager{
   @Source(SUSI_NETWORK_INFORMATION)  int getTotalMessageCount();
   @Source(SUSI_NETWORK_INFORMATION)  int getCurrentPosition();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.email.MessageListContext getListContext();
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Handler getHandlerForContentObserver();
   @Source(SUSI_NETWORK_INFORMATION)  android.database.Cursor access$500(  com.android.email.activity.MessageOrderManager arg0);
   @Source(SUSI_NO_CATEGORY)  long getCurrentMessageId();
}
class MessageOrderManager$LoadMessageListTask{
   @Source(SUSI_NETWORK_INFORMATION)  android.database.Cursor doInBackground(  java.lang.Void[] arg0);
}
class MessageViewFragment{
   @Source(SUSI_EMAIL)  com.android.email.activity.MessageViewFragment newInstance(  @Sink(SUSI_EMAIL) long arg0);
    void onMessageShown(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) com.android.emailcommon.provider.Mailbox arg1);
   @Source(SUSI_EMAIL)  com.android.emailcommon.provider.EmailContent$Message openMessageSync(  @Sink(SUSI_EMAIL) android.app.Activity arg0);
   @Source(SUSI_NO_CATEGORY)  long getMessageId();
}
class MessageViewFragmentBase{
    void onCreate(  @Sink(SUSI_EMAIL) android.os.Bundle arg0);
   @Source(SUSI_SYNCHRONIZATION_DATA)  com.android.emailcommon.provider.EmailContent$Message reloadMessageSync(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.app.Activity arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.email.Controller getController();
   @Source(SUSI_NO_CATEGORY)  long getAccountId();
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.provider.EmailContent$Message getMessage();
}
class MessageViewFragmentBase$ContactStatusLoaderCallbacks{
   @Source(SUSI_CONTACT_INFORMATION)  android.os.Bundle createArguments(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
}
class MessageViewFragmentBase$LoadAttachmentsTask{
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.provider.EmailContent$Attachment[] doInBackground(  @Sink(SUSI_NO_CATEGORY) java.lang.Long[] arg0);
}
class MessageViewFragmentBase$MessageViewAttachmentInfo{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getUriForIntent(  android.content.Context arg0, long arg1);
}
class MessagesAdapter{
    void toggleSelected(  @Sink(SUSI_EMAIL) com.android.email.activity.MessageListItem arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Set getSelectedSet();
}
class MessagesAdapter$MessagesCursorLoader{
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor loadInBackground();
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor wrapCursor(  @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.provider.Account arg2, @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.provider.Mailbox arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4, @Sink(SUSI_NO_CATEGORY) boolean arg5, @Sink(SUSI_NO_CATEGORY) int arg6);
}
class MessagesAdapter$SearchCursorLoader{
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor loadInBackground();
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor wrapCursor(  @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.provider.Account arg2, @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.provider.Mailbox arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4, @Sink(SUSI_NO_CATEGORY) boolean arg5, @Sink(SUSI_NO_CATEGORY) int arg6);
}
class MessagesAdapter$SearchResultsCursor{
   @Source(SUSI_EMAIL)  com.android.emailcommon.provider.Mailbox getSearchedMailbox();
   @Source(SUSI_NO_CATEGORY)  int getResultsCount();
}
class MoveMessageToDialog{
   @Source(SUSI_EMAIL)  com.android.email.activity.MoveMessageToDialog newInstance(  @Sink(SUSI_EMAIL) long[] arg0, @Sink(SUSI_EMAIL) android.app.Fragment arg1);
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog onCreateDialog(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
}
class RecentMailboxManager{
   @Source(SUSI_NETWORK_INFORMATION)  java.util.ArrayList getMostRecent(  long arg0, boolean arg1);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.email.activity.RecentMailboxManager getInstance(  android.content.Context arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.emailcommon.utility.EmailAsyncTask touch(  long arg0, long arg1);
}
class ShortcutPickerFragment$AccountPickerLoader{
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor loadInBackground();
}
class ShortcutPickerFragment$AccountShortcutPickerFragment{
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getFromColumns();
}
class ShortcutPickerFragment$MailboxPickerLoader{
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor loadInBackground();
}
class ShortcutPickerFragment$MailboxShortcutPickerFragment{
   @Source(SUSI_EMAIL)  com.android.email.activity.ShortcutPickerFragment$MailboxShortcutPickerFragment newInstance(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) com.android.emailcommon.provider.Account arg1, @Sink(SUSI_EMAIL) java.lang.Integer arg2);
   @Source(SUSI_NO_CATEGORY)  int getFilter();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getFromColumns();
}
class ThreePaneLayout{
    void setMessageListWidthAnim(  @Sink(SUSI_EMAIL) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getPaneState();
   @Source(SUSI_NO_CATEGORY)  com.android.email.activity.MessageCommandButtonView getMessageCommandButtons();
   @Source(SUSI_NO_CATEGORY)  int getRightPaneId();
   @Source(SUSI_NO_CATEGORY)  com.android.email.activity.MessageCommandButtonView getInMessageCommandButtons();
   @Source(SUSI_NO_CATEGORY)  int getLeftPaneId();
   @Source(SUSI_NO_CATEGORY)  int getMiddlePaneId();
   @Source(SUSI_NO_CATEGORY)  int getVisiblePanes();
}
class ThreePaneLayout$SavedState{
    void writeToParcel(  @Sink(SUSI_EMAIL) android.os.Parcel arg0, @Sink(SUSI_EMAIL) int arg1);
}
class UIControllerBase{
    void onSearchSubmit(  @Sink(SUSI_EMAIL) java.lang.String arg0);
   @Source(SUSI_EMAIL)  long getMailboxListMailboxId();
   @Source(SUSI_EMAIL)  long getMessageListMailboxId();
   @Source(SUSI_EMAIL)  com.android.email.activity.MailboxListFragment getMailboxListFragment();
   @Source(SUSI_NO_CATEGORY)  com.android.email.activity.MessageListFragment getMessageListFragment();
   @Source(SUSI_NO_CATEGORY)  com.android.email.activity.MessageViewFragment getMessageViewFragment();
   @Source(SUSI_NO_CATEGORY)  long getMessageId();
   @Source(SUSI_NO_CATEGORY)  com.android.email.activity.MessageOrderManager getMessageOrderManager();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSearchHint();
   @Source(SUSI_NO_CATEGORY)  long getActualAccountId();
}
class UIControllerOnePane{
   @Source(SUSI_EMAIL)  boolean onUrlInMessageClicked(  @Sink(SUSI_EMAIL) java.lang.String arg0);
    void onSaveInstanceState(  @Sink(SUSI_EMAIL) android.os.Bundle arg0);
   @Source(SUSI_EMAIL)  long getMailboxSettingsMailboxId();
   @Source(SUSI_NO_CATEGORY)  long getUIAccountId();
   @Source(SUSI_NO_CATEGORY)  int getLayoutId();
}
class UIControllerOnePane$ActionBarControllerCallback{
   @Source(SUSI_EMAIL)  long getMailboxId();
   @Source(SUSI_NO_CATEGORY)  long getUIAccountId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessageSubject();
   @Source(SUSI_NO_CATEGORY)  int getTitleMode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSearchHint();
}
class UIControllerSearchTwoPane{
   @Source(SUSI_EMAIL)  long getMailboxSettingsMailboxId();
   @Source(SUSI_NO_CATEGORY)  long getUIAccountId();
   @Source(SUSI_NO_CATEGORY)  int getLayoutId();
}
class UIControllerTwoPane{
    void openInternal(  @Sink(SUSI_EMAIL) com.android.email.MessageListContext arg0, @Sink(SUSI_EMAIL) long arg1);
   @Source(SUSI_EMAIL)  boolean onUrlInMessageClicked(  @Sink(SUSI_EMAIL) java.lang.String arg0);
   @Source(SUSI_EMAIL)  long getMailboxSettingsMailboxId();
   @Source(SUSI_NO_CATEGORY)  int getLayoutId();
   @Source(SUSI_NO_CATEGORY)  long getUIAccountId();
}
class UIControllerTwoPane$ActionBarControllerCallback{
   @Source(SUSI_EMAIL)  long getMailboxId();
   @Source(SUSI_NO_CATEGORY)  int getTitleMode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSearchHint();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessageSubject();
   @Source(SUSI_NO_CATEGORY)  long getUIAccountId();
}
class UiUtilities{
    void setVisibilitySafe(  @Sink(SUSI_EMAIL) android.app.Activity arg0, @Sink(SUSI_EMAIL) int arg1, @Sink(SUSI_EMAIL) int arg2);
    void setVisibilitySafe(  @Sink(SUSI_EMAIL) android.view.View arg0, @Sink(SUSI_EMAIL) int arg1, @Sink(SUSI_EMAIL) int arg2);
    void setVisibilitySafe(  @Sink(SUSI_EMAIL) android.view.View arg0, @Sink(SUSI_EMAIL) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessageCountForUi(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  android.view.View getViewOrNull(  @Sink(SUSI_NO_CATEGORY) android.app.Activity arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) android.app.Activity arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.View getViewOrNull(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class Welcome{
    void startActivity(  @Sink(SUSI_EMAIL) android.content.Intent arg0);
   @Source(SUSI_EMAIL)  android.content.Intent createOpenAccountInboxIntent(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) long arg1);
   @Source(SUSI_EMAIL)  android.content.Intent createOpenMessageIntent(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) long arg2, @Sink(SUSI_EMAIL) long arg3);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent createAccountShortcutIntent(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
}

package com.android.gallery3d.filtershow.tools;

class SaveCopyTask{
    void saveBitmap(  @Sink(SUSI_LOG) android.graphics.Bitmap arg0, @Sink(SUSI_LOG) java.io.File arg1, @Sink(SUSI_LOG) java.lang.Object arg2);
    android.net.Uri doInBackground(  @Sink(SUSI_LOG) com.android.gallery3d.filtershow.presets.ImagePreset[] arg0);
   @Source(SUSI_NO_CATEGORY)  android.net.Uri insertContent(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1, @Sink(SUSI_NO_CATEGORY) java.io.File arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
   @Source(SUSI_IMAGE)  java.io.File getNewFile(  android.content.Context arg0, android.net.Uri arg1);
   @Source(SUSI_IMAGE)  java.io.File getFinalSaveDirectory(  android.content.Context arg0, android.net.Uri arg1);
}

package com.android.org.bouncycastle.asn1.x509;

class AlgorithmIdentifier{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Encodable getParameters();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getAlgorithm();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1TaggedObject arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getObjectId();
}
class SubjectPublicKeyInfo{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1TaggedObject arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive getPublicKey();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.DERBitString getPublicKeyData();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithm();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmId();
}
class X509DefaultEntryConverter{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive getConvertedValue(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class X509Name{
   @Source(SUSI_NO_CATEGORY)  java.util.Vector getValues();
   @Source(SUSI_NO_CATEGORY)  java.util.Vector getValues(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.x509.X509Name getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.x509.X509Name getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1TaggedObject arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.Vector getOIDs();
}
class X509NameEntryConverter{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Primitive convertHexEncoded(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}

package android.drm.mobile1;

class DrmConstraintInfo{
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  java.util.Date getStartDate();
   @Source(SUSI_NO_CATEGORY)  java.util.Date getEndDate();
   @Source(SUSI_NO_CATEGORY)  long getInterval();
}
class DrmRawContent{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getContentType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRightsAddress();
   @Source(SUSI_NO_CATEGORY)  int getRawType();
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream getContentInputStream(  @Sink(SUSI_NO_CATEGORY) android.drm.mobile1.DrmRights arg0);
   @Source(SUSI_NO_CATEGORY)  int getContentLength(  @Sink(SUSI_NO_CATEGORY) android.drm.mobile1.DrmRights arg0);
}
class DrmRights{
   @Source(SUSI_NO_CATEGORY)  android.drm.mobile1.DrmConstraintInfo getConstraint(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class DrmRightsManager{
   @Source(SUSI_NO_CATEGORY)  android.drm.mobile1.DrmRights installRights(  @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  android.drm.mobile1.DrmRightsManager getInstance();
   @Source(SUSI_NO_CATEGORY)  java.util.List getRightsList();
}

package com.android.org.bouncycastle.asn1.x500;

class AttributeTypeAndValue{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getType();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1Encodable getValue();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.x500.AttributeTypeAndValue getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class RDN{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.x500.AttributeTypeAndValue[] getTypesAndValues();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.x500.RDN getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.x500.AttributeTypeAndValue getFirst();
}
class X500Name{
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.x500.RDN[] getRDNs();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier[] getAttributeTypes();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.x500.RDN[] getRDNs(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.x500.X500Name getInstance(  @Sink(SUSI_NO_CATEGORY) com.android.org.bouncycastle.asn1.ASN1TaggedObject arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.x500.X500NameStyle getDefaultStyle();
   @Source(SUSI_NO_CATEGORY)  com.android.org.bouncycastle.asn1.x500.X500Name getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}

package android.net.wifi.p2p;

class IWifiP2pManager$Stub{
    boolean onTransact(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) android.os.Parcel arg1, @Sink(SUSI_NETWORK) android.os.Parcel arg2, @Sink(SUSI_NETWORK) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IWifiP2pManager$Stub$Proxy{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Messenger getMessenger();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class WifiP2pConfig{
    void writeToParcel(  @Sink(SUSI_NETWORK) android.os.Parcel arg0, @Sink(SUSI_NETWORK) int arg1);
}
class WifiP2pDevice{
    void writeToParcel(  @Sink(SUSI_NETWORK) android.os.Parcel arg0, @Sink(SUSI_NETWORK) int arg1);
}
class WifiP2pDeviceList{
    void updateGroupCapability(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) int arg1);
    void writeToParcel(  @Sink(SUSI_NETWORK) android.os.Parcel arg0, @Sink(SUSI_NETWORK) int arg1);
    void updateStatus(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) int arg1);
    void update(  @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pDevice arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Collection getDeviceList();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.wifi.p2p.WifiP2pDevice get(  java.lang.String arg0);
}
class WifiP2pGroup{
    void writeToParcel(  @Sink(SUSI_NETWORK) android.os.Parcel arg0, @Sink(SUSI_NETWORK) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterface();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.wifi.p2p.WifiP2pDevice getOwner();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Collection getClientList();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPassphrase();
   @Source(SUSI_NETWORK_INFORMATION)  int getNetworkId();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNetworkName();
}
class WifiP2pGroupList{
    void writeToParcel(  @Sink(SUSI_NETWORK) android.os.Parcel arg0, @Sink(SUSI_NETWORK) int arg1);
    void add(  @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pGroup arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getOwnerAddr(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getNetworkId(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Collection getGroupList();
   @Source(SUSI_NETWORK_INFORMATION)  int getNetworkId(  java.lang.String arg0, java.lang.String arg1);
}
class WifiP2pManager{
    void requestConnectionInfo(  @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$Channel arg0, @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$ConnectionInfoListener arg1);
    void setUpnpServiceResponseListener(  @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$Channel arg0, @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$UpnpServiceResponseListener arg1);
    void addServiceRequest(  @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$Channel arg0, @Sink(SUSI_NETWORK) android.net.wifi.p2p.nsd.WifiP2pServiceRequest arg1, @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$ActionListener arg2);
    void setDialogListener(  @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$Channel arg0, @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$DialogListener arg1);
    void discoverServices(  @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$Channel arg0, @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$ActionListener arg1);
    void discoverPeers(  @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$Channel arg0, @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$ActionListener arg1);
    void removeServiceRequest(  @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$Channel arg0, @Sink(SUSI_NETWORK) android.net.wifi.p2p.nsd.WifiP2pServiceRequest arg1, @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$ActionListener arg2);
    void setServiceResponseListener(  @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$Channel arg0, @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$ServiceResponseListener arg1);
    void setDnsSdResponseListeners(  @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$Channel arg0, @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$DnsSdServiceResponseListener arg1, @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$DnsSdTxtRecordListener arg2);
    void setDeviceName(  @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$Channel arg0, @Sink(SUSI_NETWORK) java.lang.String arg1, @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$ActionListener arg2);
    void requestPeers(  @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$Channel arg0, @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$PeerListListener arg1);
    void setWFDInfo(  @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$Channel arg0, @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pWfdInfo arg1, @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$ActionListener arg2);
    void requestGroupInfo(  @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$Channel arg0, @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$GroupInfoListener arg1);
    void removeLocalService(  @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$Channel arg0, @Sink(SUSI_NETWORK) android.net.wifi.p2p.nsd.WifiP2pServiceInfo arg1, @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$ActionListener arg2);
    void removeGroup(  @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$Channel arg0, @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$ActionListener arg1);
    void createGroup(  @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$Channel arg0, @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$ActionListener arg1);
    void cancelConnect(  @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$Channel arg0, @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$ActionListener arg1);
    void connect(  @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$Channel arg0, @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pConfig arg1, @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$ActionListener arg2);
    void addLocalService(  @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$Channel arg0, @Sink(SUSI_NETWORK) android.net.wifi.p2p.nsd.WifiP2pServiceInfo arg1, @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$ActionListener arg2);
    void requestPersistentGroupInfo(  @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$Channel arg0, @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$PersistentGroupInfoListener arg1);
    void stopPeerDiscovery(  @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$Channel arg0, @Sink(SUSI_NETWORK) android.net.wifi.p2p.WifiP2pManager$ActionListener arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.wifi.p2p.WifiP2pManager$Channel initialize(  android.content.Context arg0, android.os.Looper arg1, android.net.wifi.p2p.WifiP2pManager$ChannelListener arg2);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Messenger getMessenger();
}
class WifiP2pService{
    boolean onTransact(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) android.os.Parcel arg1, @Sink(SUSI_NETWORK) android.os.Parcel arg2, @Sink(SUSI_NETWORK) int arg3);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Messenger getMessenger();
}
class WifiP2pService$P2pStateMachine$DefaultState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiP2pService$P2pStateMachine$FrequencyConflictState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiP2pService$P2pStateMachine$GroupCreatedState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiP2pService$P2pStateMachine$GroupCreatingState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiP2pService$P2pStateMachine$GroupNegotiationState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiP2pService$P2pStateMachine$InactiveState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiP2pService$P2pStateMachine$OngoingGroupRemovalState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiP2pService$P2pStateMachine$P2pDisabledState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiP2pService$P2pStateMachine$P2pDisablingState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiP2pService$P2pStateMachine$P2pEnabledState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiP2pService$P2pStateMachine$P2pEnablingState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiP2pService$P2pStateMachine$P2pNotSupportedState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiP2pService$P2pStateMachine$ProvisionDiscoveryState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiP2pService$P2pStateMachine$UserAuthorizingInvitationState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiP2pService$P2pStateMachine$UserAuthorizingJoinState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class WifiP2pWfdInfo{
    void setCoupledSinkSupportAtSink(  @Sink(SUSI_NETWORK) boolean arg0);
    void setSessionAvailable(  @Sink(SUSI_NETWORK) boolean arg0);
    boolean setDeviceType(  @Sink(SUSI_NETWORK) int arg0);
    void setCoupledSinkSupportAtSource(  @Sink(SUSI_NETWORK) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getDeviceType();
   @Source(SUSI_NETWORK_INFORMATION)  int getMaxThroughput();
   @Source(SUSI_NETWORK_INFORMATION)  int getControlPort();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getDeviceInfoHex();
}

package javax.sip;

class DialogState{
   @Source(SUSI_NO_CATEGORY)  int getValue();
   @Source(SUSI_NO_CATEGORY)  javax.sip.DialogState getObject(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class DialogTerminatedEvent{
   @Source(SUSI_NO_CATEGORY)  javax.sip.Dialog getDialog();
}
class IOExceptionEvent{
   @Source(SUSI_NO_CATEGORY)  int getPort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHost();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTransport();
}
class RequestEvent{
   @Source(SUSI_NO_CATEGORY)  javax.sip.ServerTransaction getServerTransaction();
   @Source(SUSI_NO_CATEGORY)  javax.sip.message.Request getRequest();
   @Source(SUSI_NO_CATEGORY)  javax.sip.Dialog getDialog();
}
class ResponseEvent{
   @Source(SUSI_NO_CATEGORY)  javax.sip.Dialog getDialog();
   @Source(SUSI_NO_CATEGORY)  javax.sip.message.Response getResponse();
   @Source(SUSI_NO_CATEGORY)  javax.sip.ClientTransaction getClientTransaction();
}
class SipFactory{
   @Source(SUSI_NO_CATEGORY)  javax.sip.SipStack createSipStack(  @Sink(SUSI_NO_CATEGORY) java.util.Properties arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.SipFactory getInstance();
}
class TimeoutEvent{
   @Source(SUSI_NO_CATEGORY)  javax.sip.Timeout getTimeout();
}
class TransactionTerminatedEvent{
   @Source(SUSI_NO_CATEGORY)  javax.sip.ServerTransaction getServerTransaction();
   @Source(SUSI_NO_CATEGORY)  javax.sip.ClientTransaction getClientTransaction();
}

package android.net.wifi.p2p.nsd;

class WifiP2pDnsSdServiceResponse{
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Map getTxtRecord();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInstanceName();
   @Source(SUSI_NETWORK_INFORMATION)  int getDnsType();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getDnsQueryName();
   @Source(SUSI_NETWORK_INFORMATION)  int getVersion();
}
class WifiP2pServiceInfo{
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getSupplicantQueryList();
}
class WifiP2pServiceRequest{
   @Source(SUSI_NETWORK_INFORMATION)  int getTransactionId();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getSupplicantQuery();
}
class WifiP2pServiceResponse{
    void writeToParcel(  @Sink(SUSI_NETWORK) android.os.Parcel arg0, @Sink(SUSI_NETWORK) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getRawData();
   @Source(SUSI_NETWORK_INFORMATION)  int getStatus();
   @Source(SUSI_NETWORK_INFORMATION)  int getServiceType();
   @Source(SUSI_NETWORK_INFORMATION)  int getTransactionId();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.wifi.p2p.WifiP2pDevice getSrcDevice();
}
class WifiP2pUpnpServiceResponse{
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getUniqueServiceNames();
   @Source(SUSI_NETWORK_INFORMATION)  int getVersion();
}

package java.security.spec;

class DSAPrivateKeySpec{
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getP();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getX();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getQ();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getG();
}
class ECFieldF2m{
   @Source(SUSI_NO_CATEGORY)  int getM();
   @Source(SUSI_NO_CATEGORY)  int getFieldSize();
   @Source(SUSI_NO_CATEGORY)  int[] getMidTermsOfReductionPolynomial();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getReductionPolynomial();
}
class ECFieldFp{
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getP();
   @Source(SUSI_NO_CATEGORY)  int getFieldSize();
}
class ECParameterSpec{
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getOrder();
   @Source(SUSI_NO_CATEGORY)  int getCofactor();
   @Source(SUSI_NO_CATEGORY)  java.security.spec.ECPoint getGenerator();
   @Source(SUSI_NO_CATEGORY)  java.security.spec.EllipticCurve getCurve();
}
class ECPoint{
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getAffineX();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getAffineY();
}
class EllipticCurve{
   @Source(SUSI_NO_CATEGORY)  java.security.spec.ECField getField();
   @Source(SUSI_NO_CATEGORY)  byte[] getSeed();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getA();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getB();
}
class EncodedKeySpec{
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
}
class RSAPrivateCrtKeySpec{
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getPrimeQ();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getPrimeP();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getPrimeExponentQ();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getPrimeExponentP();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getCrtCoefficient();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getPublicExponent();
}
class RSAPrivateKeySpec{
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getModulus();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getPrivateExponent();
}
class RSAPublicKeySpec{
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getPublicExponent();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getModulus();
}
class X509EncodedKeySpec{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFormat();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
}

package com.google.android.apps.lightcycle.sensor;

class DeviceOrientationDetector{
   @Source(SUSI_NO_CATEGORY)  com.google.android.apps.lightcycle.sensor.DeviceOrientationDetector$DeviceOrientation getOrientation();
   @Source(SUSI_NO_CATEGORY)  int getDisplayInitialOrientationDegrees();
}
class OrientationEKF{
    void setHeadingDegrees(  @Sink(SUSI_NO_CATEGORY) double arg0);
   @Source(SUSI_NO_CATEGORY)  double getHeadingDegrees();
   @Source(SUSI_NO_CATEGORY)  double[] getGLMatrix();
}
class SensorReader{
    void setHeadingDegrees(  @Sink(SUSI_NO_CATEGORY) double arg0);
    void setGyroBias(  @Sink(SUSI_NO_CATEGORY) float[] arg0);
   @Source(SUSI_NO_CATEGORY)  com.google.android.apps.lightcycle.math.Vector3 getFilteredAcceleration();
   @Source(SUSI_NO_CATEGORY)  int getAzimuthInDeg();
   @Source(SUSI_NO_CATEGORY)  float[] getAndResetGyroData();
   @Source(SUSI_NO_CATEGORY)  int getNumGyroSamples();
   @Source(SUSI_NO_CATEGORY)  float getImuOrientationDegrees();
   @Source(SUSI_NO_CATEGORY)  double getHeadingDegrees();
   @Source(SUSI_NO_CATEGORY)  float getAngularVelocitySquaredRad();
   @Source(SUSI_NO_CATEGORY)  boolean getEkfEnabled();
   @Source(SUSI_NO_CATEGORY)  float[] getFilterOutput();
   @Source(SUSI_NO_CATEGORY)  float getAccelInPlaneRotationRadians();
}

package android.telephony.gsm;

class GsmCellLocation{
   @Source(SUSI_LOCATION_INFORMATION)  int getPsc();
   @Source(SUSI_LOCATION_INFORMATION)  int getLac();
   @Source(SUSI_LOCATION_INFORMATION)  int getCid();
}
class SmsManager{
    void sendTextMessage(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) java.lang.String arg2, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg3, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg4);
    void sendDataMessage(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) short arg2, @Sink(SUSI_SMS_MMS) byte[] arg3, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg4, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg5);
   @Source(SUSI_SMS_MMS)  boolean updateMessageOnSim(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) int arg1, @Sink(SUSI_SMS_MMS) byte[] arg2);
    void sendMultipartTextMessage(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) java.util.ArrayList arg2, @Sink(SUSI_SMS_MMS) java.util.ArrayList arg3, @Sink(SUSI_SMS_MMS) java.util.ArrayList arg4);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.ArrayList getAllMessagesFromSim();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.ArrayList divideMessage(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.gsm.SmsManager getDefault();
}

package android.nfc;

class INdefPushCallback$Stub{
   @Source(SUSI_NFC)  boolean onTransact(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) android.os.Parcel arg1, @Sink(SUSI_NFC) android.os.Parcel arg2, @Sink(SUSI_NFC) int arg3);
   @Source(SUSI_NFC)  android.os.IBinder asBinder();
}
class INdefPushCallback$Stub$Proxy{
   @Source(SUSI_NFC)  android.net.Uri[] getUris();
   @Source(SUSI_NFC)  android.nfc.NdefMessage createMessage();
   @Source(SUSI_NFC)  java.lang.String getInterfaceDescriptor();
}
class INfcAdapter$Stub{
   @Source(SUSI_NFC)  boolean onTransact(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) android.os.Parcel arg1, @Sink(SUSI_NFC) android.os.Parcel arg2, @Sink(SUSI_NFC) int arg3);
   @Source(SUSI_NFC)  android.os.IBinder asBinder();
}
class INfcAdapter$Stub$Proxy{
    void setNdefPushCallback(  @Sink(SUSI_NFC) android.nfc.INdefPushCallback arg0);
    void setForegroundDispatch(  @Sink(SUSI_NFC) android.app.PendingIntent arg0, @Sink(SUSI_NFC) android.content.IntentFilter[] arg1, @Sink(SUSI_NFC) android.nfc.TechListParcel arg2);
    void setP2pModes(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) int arg1);
   @Source(SUSI_NFC)  int getState();
   @Source(SUSI_NFC)  android.nfc.INfcTag getNfcTagInterface();
   @Source(SUSI_NFC)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NFC)  android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface(  @Sink(SUSI_NFC) java.lang.String arg0);
}
class INfcAdapterExtras$Stub{
   @Source(SUSI_NFC)  boolean onTransact(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) android.os.Parcel arg1, @Sink(SUSI_NFC) android.os.Parcel arg2, @Sink(SUSI_NFC) int arg3);
   @Source(SUSI_NFC)  android.os.IBinder asBinder();
}
class INfcAdapterExtras$Stub$Proxy{
    void setCardEmulationRoute(  @Sink(SUSI_NFC) java.lang.String arg0, @Sink(SUSI_NFC) int arg1);
   @Source(SUSI_NFC)  android.os.Bundle open(  @Sink(SUSI_NFC) java.lang.String arg0, @Sink(SUSI_NFC) android.os.IBinder arg1);
    void authenticate(  @Sink(SUSI_NFC) java.lang.String arg0, @Sink(SUSI_NFC) byte[] arg1);
   @Source(SUSI_NFC)  java.lang.String getDriverName(  @Sink(SUSI_NFC) java.lang.String arg0);
   @Source(SUSI_NFC)  int getCardEmulationRoute(  @Sink(SUSI_NFC) java.lang.String arg0);
   @Source(SUSI_NFC)  android.os.Bundle transceive(  @Sink(SUSI_NFC) java.lang.String arg0, @Sink(SUSI_NFC) byte[] arg1);
   @Source(SUSI_NFC)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NFC)  android.os.Bundle close(  @Sink(SUSI_NFC) java.lang.String arg0, @Sink(SUSI_NFC) android.os.IBinder arg1);
}
class INfcTag$Stub{
   @Source(SUSI_NFC)  boolean onTransact(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) android.os.Parcel arg1, @Sink(SUSI_NFC) android.os.Parcel arg2, @Sink(SUSI_NFC) int arg3);
   @Source(SUSI_NFC)  android.os.IBinder asBinder();
}
class INfcTag$Stub$Proxy{
   @Source(SUSI_NFC)  boolean canMakeReadOnly(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  int connect(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) int arg1);
   @Source(SUSI_NFC)  boolean ndefIsWritable(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  int reconnect(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  int setTimeout(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) int arg1);
   @Source(SUSI_NFC)  int ndefMakeReadOnly(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  int formatNdef(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) byte[] arg1);
   @Source(SUSI_NFC)  int ndefWrite(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) android.nfc.NdefMessage arg1);
   @Source(SUSI_NFC)  int close(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  int[] getTechList(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NFC)  android.nfc.NdefMessage ndefRead(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  android.nfc.TransceiveResult transceive(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) byte[] arg1, @Sink(SUSI_NFC) boolean arg2);
   @Source(SUSI_NFC)  boolean isPresent(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  android.nfc.Tag rediscover(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  int getMaxTransceiveLength(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  int getTimeout(  @Sink(SUSI_NFC) int arg0);
   @Source(SUSI_NFC)  boolean isNdef(  @Sink(SUSI_NFC) int arg0);
}
class NdefMessage{
    void writeToParcel(  @Sink(SUSI_NFC) android.os.Parcel arg0, @Sink(SUSI_NFC) int arg1);
   @Source(SUSI_NFC)  android.nfc.NdefRecord[] getRecords();
   @Source(SUSI_NFC)  int getByteArrayLength();
   @Source(SUSI_NFC)  byte[] toByteArray();
}
class NdefRecord{
   @Source(SUSI_NFC)  int getByteLength();
   @Source(SUSI_NFC)  byte[] getPayload();
   @Source(SUSI_NFC)  byte[] toByteArray();
   @Source(SUSI_NFC)  android.nfc.NdefRecord createUri(  @Sink(SUSI_NFC) java.lang.String arg0);
   @Source(SUSI_NFC)  byte[] getType();
   @Source(SUSI_NFC)  byte[] getId();
   @Source(SUSI_NFC)  short getTnf();
}
class NfcActivityManager{
    void setNdefPushMessage(  @Sink(SUSI_NFC) android.app.Activity arg0, @Sink(SUSI_NFC) android.nfc.NdefMessage arg1);
    void setOnNdefPushCompleteCallback(  @Sink(SUSI_NFC) android.app.Activity arg0, @Sink(SUSI_NFC) android.nfc.NfcAdapter$OnNdefPushCompleteCallback arg1);
    void setNdefPushMessageCallback(  @Sink(SUSI_NFC) android.app.Activity arg0, @Sink(SUSI_NFC) android.nfc.NfcAdapter$CreateNdefMessageCallback arg1);
    void setNdefPushContentUriCallback(  @Sink(SUSI_NFC) android.app.Activity arg0, @Sink(SUSI_NFC) android.nfc.NfcAdapter$CreateBeamUrisCallback arg1);
    void setNdefPushContentUri(  @Sink(SUSI_NFC) android.app.Activity arg0, @Sink(SUSI_NFC) android.net.Uri[] arg1);
   @Source(SUSI_NFC)  android.nfc.NfcActivityManager$NfcActivityState findResumedActivityState();
   @Source(SUSI_NFC)  android.net.Uri[] getUris();
   @Source(SUSI_NFC)  android.nfc.NfcActivityManager$NfcActivityState findActivityState(  @Sink(SUSI_NFC) android.app.Activity arg0);
   @Source(SUSI_NFC)  android.nfc.NfcActivityManager$NfcActivityState getActivityState(  @Sink(SUSI_NFC) android.app.Activity arg0);
   @Source(SUSI_NFC)  android.nfc.NfcActivityManager$NfcApplicationState findAppState(  @Sink(SUSI_NFC) android.app.Application arg0);
   @Source(SUSI_NFC)  android.nfc.NdefMessage createMessage();
}
class NfcAdapter{
    void enableForegroundDispatch(  @Sink(SUSI_NFC) android.app.Activity arg0, @Sink(SUSI_NFC) android.app.PendingIntent arg1, @Sink(SUSI_NFC) android.content.IntentFilter[] arg2, @Sink(SUSI_NFC) java.lang.String[][] arg3);
    void setNdefPushMessage(  @Sink(SUSI_NFC) android.nfc.NdefMessage arg0, @Sink(SUSI_NFC) android.app.Activity arg1, @Sink(SUSI_NFC) android.app.Activity[] arg2);
    void setBeamPushUris(  @Sink(SUSI_NFC) android.net.Uri[] arg0, @Sink(SUSI_NFC) android.app.Activity arg1);
    void setP2pModes(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) int arg1);
   @Source(SUSI_NFC)  android.content.Context getContext();
   @Source(SUSI_NFC)  int getSdkVersion();
   @Source(SUSI_NFC)  android.nfc.NfcAdapter getDefaultAdapter(  @Sink(SUSI_NFC) android.content.Context arg0);
   @Source(SUSI_NFC)  android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface();
   @Source(SUSI_NFC)  android.nfc.NfcAdapter getNfcAdapter(  @Sink(SUSI_NFC) android.content.Context arg0);
   @Source(SUSI_NFC)  android.nfc.INfcAdapter getService();
   @Source(SUSI_NFC)  android.nfc.NfcAdapter getDefaultAdapter();
   @Source(SUSI_NFC)  android.nfc.INfcTag getTagService();
   @Source(SUSI_NFC)  int getAdapterState();
}
class NfcManager{
   @Source(SUSI_NFC)  android.nfc.NfcAdapter getDefaultAdapter();
}
class Tag{
    void writeToParcel(  @Sink(SUSI_NFC) android.os.Parcel arg0, @Sink(SUSI_NFC) int arg1);
   @Source(SUSI_NFC)  java.lang.String[] getTechList();
   @Source(SUSI_NFC)  byte[] getId();
   @Source(SUSI_NFC)  byte[] readBytesWithNull(  @Sink(SUSI_NFC) android.os.Parcel arg0);
   @Source(SUSI_NFC)  android.nfc.INfcTag getTagService();
   @Source(SUSI_NFC)  int getServiceHandle();
   @Source(SUSI_NFC)  int getConnectedTechnology();
   @Source(SUSI_NFC)  android.os.Bundle getTechExtras(  @Sink(SUSI_NFC) int arg0);
}
class TechListParcel{
   @Source(SUSI_NFC)  java.lang.String[][] getTechLists();
}
class TransceiveResult{
   @Source(SUSI_NFC)  byte[] getResponseOrThrow();
}

package android.renderscript;

class Allocation{
    void setFromFieldPacker(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.renderscript.FieldPacker arg1);
    void setFromFieldPacker(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.renderscript.FieldPacker arg2);
    void setSurface(  @Sink(SUSI_NO_CATEGORY) android.view.Surface arg0);
    void setSurfaceTexture(  @Sink(SUSI_NO_CATEGORY) android.graphics.SurfaceTexture arg0);
   @Source(SUSI_LOCATION_INFORMATION)  android.renderscript.Allocation createTyped(  @Sink(SUSI_LOCATION_INFORMATION) android.renderscript.RenderScript arg0, @Sink(SUSI_LOCATION_INFORMATION) android.renderscript.Type arg1);
   @Source(SUSI_LOCATION_INFORMATION)  android.renderscript.Allocation createSized(  @Sink(SUSI_LOCATION_INFORMATION) android.renderscript.RenderScript arg0, @Sink(SUSI_LOCATION_INFORMATION) android.renderscript.Element arg1, @Sink(SUSI_LOCATION_INFORMATION) int arg2, @Sink(SUSI_LOCATION_INFORMATION) int arg3);
   @Source(SUSI_LOCATION_INFORMATION)  int getBytesSize();
   @Source(SUSI_LOCATION_INFORMATION)  android.renderscript.Allocation createTyped(  @Sink(SUSI_LOCATION_INFORMATION) android.renderscript.RenderScript arg0, @Sink(SUSI_LOCATION_INFORMATION) android.renderscript.Type arg1, @Sink(SUSI_LOCATION_INFORMATION) int arg2);
   @Source(SUSI_LOCATION_INFORMATION)  android.renderscript.Type typeFromBitmap(  @Sink(SUSI_LOCATION_INFORMATION) android.renderscript.RenderScript arg0, @Sink(SUSI_LOCATION_INFORMATION) android.graphics.Bitmap arg1, @Sink(SUSI_LOCATION_INFORMATION) android.renderscript.Allocation$MipmapControl arg2);
   @Source(SUSI_LOCATION_INFORMATION)  android.renderscript.Allocation createCubemapFromBitmap(  @Sink(SUSI_LOCATION_INFORMATION) android.renderscript.RenderScript arg0, @Sink(SUSI_LOCATION_INFORMATION) android.graphics.Bitmap arg1);
   @Source(SUSI_LOCATION_INFORMATION)  android.renderscript.Allocation createFromString(  @Sink(SUSI_LOCATION_INFORMATION) android.renderscript.RenderScript arg0, @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg1, @Sink(SUSI_LOCATION_INFORMATION) int arg2);
   @Source(SUSI_LOCATION_INFORMATION)  android.renderscript.Allocation createCubemapFromBitmap(  @Sink(SUSI_LOCATION_INFORMATION) android.renderscript.RenderScript arg0, @Sink(SUSI_LOCATION_INFORMATION) android.graphics.Bitmap arg1, @Sink(SUSI_LOCATION_INFORMATION) android.renderscript.Allocation$MipmapControl arg2, @Sink(SUSI_LOCATION_INFORMATION) int arg3);
   @Source(SUSI_LOCATION_INFORMATION)  android.graphics.SurfaceTexture getSurfaceTexture();
   @Source(SUSI_LOCATION_INFORMATION)  android.renderscript.Element getElement();
   @Source(SUSI_LOCATION_INFORMATION)  android.renderscript.Allocation createFromBitmap(  @Sink(SUSI_LOCATION_INFORMATION) android.renderscript.RenderScript arg0, @Sink(SUSI_LOCATION_INFORMATION) android.graphics.Bitmap arg1);
   @Source(SUSI_LOCATION_INFORMATION)  android.renderscript.Allocation createFromBitmapResource(  @Sink(SUSI_LOCATION_INFORMATION) android.renderscript.RenderScript arg0, @Sink(SUSI_LOCATION_INFORMATION) android.content.res.Resources arg1, @Sink(SUSI_LOCATION_INFORMATION) int arg2);
   @Source(SUSI_LOCATION_INFORMATION)  android.renderscript.Allocation createCubemapFromCubeFaces(  @Sink(SUSI_LOCATION_INFORMATION) android.renderscript.RenderScript arg0, @Sink(SUSI_LOCATION_INFORMATION) android.graphics.Bitmap arg1, @Sink(SUSI_LOCATION_INFORMATION) android.graphics.Bitmap arg2, @Sink(SUSI_LOCATION_INFORMATION) android.graphics.Bitmap arg3, @Sink(SUSI_LOCATION_INFORMATION) android.graphics.Bitmap arg4, @Sink(SUSI_LOCATION_INFORMATION) android.graphics.Bitmap arg5, @Sink(SUSI_LOCATION_INFORMATION) android.graphics.Bitmap arg6, @Sink(SUSI_LOCATION_INFORMATION) android.renderscript.Allocation$MipmapControl arg7, @Sink(SUSI_LOCATION_INFORMATION) int arg8);
   @Source(SUSI_LOCATION_INFORMATION)  android.renderscript.Type getType();
   @Source(SUSI_LOCATION_INFORMATION)  android.view.Surface getSurface();
   @Source(SUSI_LOCATION_INFORMATION)  android.renderscript.Allocation createCubemapFromCubeFaces(  @Sink(SUSI_LOCATION_INFORMATION) android.renderscript.RenderScript arg0, @Sink(SUSI_LOCATION_INFORMATION) android.graphics.Bitmap arg1, @Sink(SUSI_LOCATION_INFORMATION) android.graphics.Bitmap arg2, @Sink(SUSI_LOCATION_INFORMATION) android.graphics.Bitmap arg3, @Sink(SUSI_LOCATION_INFORMATION) android.graphics.Bitmap arg4, @Sink(SUSI_LOCATION_INFORMATION) android.graphics.Bitmap arg5, @Sink(SUSI_LOCATION_INFORMATION) android.graphics.Bitmap arg6);
   @Source(SUSI_LOCATION_INFORMATION)  android.renderscript.Allocation createSized(  @Sink(SUSI_LOCATION_INFORMATION) android.renderscript.RenderScript arg0, @Sink(SUSI_LOCATION_INFORMATION) android.renderscript.Element arg1, @Sink(SUSI_LOCATION_INFORMATION) int arg2);
   @Source(SUSI_LOCATION_INFORMATION)  int getUsage();
   @Source(SUSI_LOCATION_INFORMATION)  android.renderscript.Allocation createFromBitmapResource(  @Sink(SUSI_LOCATION_INFORMATION) android.renderscript.RenderScript arg0, @Sink(SUSI_LOCATION_INFORMATION) android.content.res.Resources arg1, @Sink(SUSI_LOCATION_INFORMATION) int arg2, @Sink(SUSI_LOCATION_INFORMATION) android.renderscript.Allocation$MipmapControl arg3, @Sink(SUSI_LOCATION_INFORMATION) int arg4);
}
class AllocationAdapter{
    void setLOD(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_LOCATION_INFORMATION)  int getID(  @Sink(SUSI_LOCATION_INFORMATION) android.renderscript.RenderScript arg0);
}
class BaseObj{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  int getID(  @Sink(SUSI_NO_CATEGORY) android.renderscript.RenderScript arg0);
}
class Element{
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Element$DataKind getDataKind();
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Element getSubElement(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Element$DataType getDataType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSubElementName(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getBytesSize();
   @Source(SUSI_NO_CATEGORY)  int getSubElementOffsetBytes(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getSubElementArraySize(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getSubElementCount();
   @Source(SUSI_NO_CATEGORY)  int getVectorSize();
}
class FieldPacker{
   @Source(SUSI_NO_CATEGORY)  byte[] getData();
}
class Matrix2f{
    void set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) float arg2);
   @Source(SUSI_NO_CATEGORY)  float[] getArray();
   @Source(SUSI_NO_CATEGORY)  float get(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class Matrix3f{
    void set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) float arg2);
   @Source(SUSI_NO_CATEGORY)  float[] getArray();
   @Source(SUSI_NO_CATEGORY)  float get(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class Matrix4f{
    void set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) float arg2);
   @Source(SUSI_NO_CATEGORY)  float[] getArray();
   @Source(SUSI_NO_CATEGORY)  float get(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class Mesh{
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Allocation getIndexSetAllocation(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getVertexAllocationCount();
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Allocation getVertexAllocation(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getPrimitiveCount();
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Mesh$Primitive getPrimitive(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Mesh$AllocationBuilder{
   @Source(SUSI_LOCATION_INFORMATION)  int getCurrentVertexTypeIndex();
   @Source(SUSI_LOCATION_INFORMATION)  int getCurrentIndexSetIndex();
}
class Mesh$Builder{
   @Source(SUSI_NO_CATEGORY)  int getCurrentIndexSetIndex();
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Type newType(  @Sink(SUSI_NO_CATEGORY) android.renderscript.Element arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getCurrentVertexTypeIndex();
}
class Mesh$TriangleMeshBuilder{
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Mesh create(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class Program{
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Program$TextureType getTextureType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Type getConstant(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getConstantCount();
   @Source(SUSI_NO_CATEGORY)  int getTextureCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTextureName(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Program$BaseProgramBuilder{
    android.renderscript.Program$BaseProgramBuilder setShader(  @Sink(SUSI_LOG) android.content.res.Resources arg0, @Sink(SUSI_LOG) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getCurrentConstantIndex();
   @Source(SUSI_NO_CATEGORY)  int getCurrentTextureIndex();
}
class ProgramFragmentFixedFunction$Builder{
   @Source(SUSI_NO_CATEGORY)  android.renderscript.ProgramFragmentFixedFunction$Builder setTexture(  @Sink(SUSI_NO_CATEGORY) android.renderscript.ProgramFragmentFixedFunction$Builder$EnvMode arg0, @Sink(SUSI_NO_CATEGORY) android.renderscript.ProgramFragmentFixedFunction$Builder$Format arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  android.renderscript.ProgramFragmentFixedFunction create();
}
class ProgramRaster{
   @Source(SUSI_NO_CATEGORY)  android.renderscript.ProgramRaster$CullMode getCullMode();
}
class ProgramStore{
   @Source(SUSI_NO_CATEGORY)  android.renderscript.ProgramStore$BlendSrcFunc getBlendSrcFunc();
   @Source(SUSI_NO_CATEGORY)  android.renderscript.ProgramStore$DepthFunc getDepthFunc();
   @Source(SUSI_NO_CATEGORY)  android.renderscript.ProgramStore$BlendDstFunc getBlendDstFunc();
}
class ProgramVertex{
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Element getInput(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getInputCount();
}
class ProgramVertexFixedFunction{
    void bindConstants(  @Sink(SUSI_NO_CATEGORY) android.renderscript.ProgramVertexFixedFunction$Constants arg0);
}
class ProgramVertexFixedFunction$Builder{
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Type getConstantInputType(  @Sink(SUSI_NO_CATEGORY) android.renderscript.RenderScript arg0);
   @Source(SUSI_NO_CATEGORY)  android.renderscript.ProgramVertexFixedFunction create();
}
class ProgramVertexFixedFunction$Constants{
    void setModelview(  @Sink(SUSI_NO_CATEGORY) android.renderscript.Matrix4f arg0);
    void setProjection(  @Sink(SUSI_NO_CATEGORY) android.renderscript.Matrix4f arg0);
    void setTexture(  @Sink(SUSI_NO_CATEGORY) android.renderscript.Matrix4f arg0);
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Allocation getAllocation();
}
class RSSurfaceView{
   @Source(SUSI_NO_CATEGORY)  android.renderscript.RenderScriptGL getRenderScriptGL();
}
class RenderScript{
    void setupDiskCache(  @Sink(SUSI_NO_CATEGORY) java.io.File arg0);
    void setPriority(  @Sink(SUSI_NO_CATEGORY) android.renderscript.RenderScript$Priority arg0);
   @Source(SUSI_NO_CATEGORY)  android.renderscript.RenderScript$RSErrorHandler getErrorHandler();
   @Source(SUSI_NO_CATEGORY)  android.content.Context getApplicationContext();
   @Source(SUSI_NO_CATEGORY)  android.renderscript.RenderScript$RSMessageHandler getMessageHandler();
   @Source(SUSI_NO_CATEGORY)  android.renderscript.RenderScript create(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class RenderScriptGL{
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
}
class Sampler{
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Sampler$Value getMagnification();
   @Source(SUSI_NO_CATEGORY)  float getAnisotropy();
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Sampler$Value getMinification();
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Sampler$Value getWrapT();
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Sampler$Value getWrapS();
}
class Script{
    void setVar(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
    void setVar(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setVar(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setVar(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.renderscript.FieldPacker arg1);
    void setTimeZone(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setVar(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setVar(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.renderscript.FieldPacker arg1, @Sink(SUSI_NO_CATEGORY) android.renderscript.Element arg2, @Sink(SUSI_NO_CATEGORY) int[] arg3);
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Script$FieldID createFieldID(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.renderscript.Element arg1);
    void setVar(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.renderscript.BaseObj arg1);
    void setVar(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) double arg1);
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Script$KernelID createKernelID(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.renderscript.Element arg2, @Sink(SUSI_NO_CATEGORY) android.renderscript.Element arg3);
}
class Script$FieldBase{
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Element getElement();
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Type getType();
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Allocation getAllocation();
}
class Type{
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Element getElement();
   @Source(SUSI_NO_CATEGORY)  int getX();
   @Source(SUSI_NO_CATEGORY)  int getZ();
   @Source(SUSI_NO_CATEGORY)  int getY();
}

package android.filterpacks.base;

class FrameBranch{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}
class RetargetFilter{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FrameFormat getOutputFormat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.filterfw.core.FrameFormat arg1);
}

package com.android.nfc.handover;

class BluetoothHeadsetHandover{
   @Source(SUSI_NFC)  boolean getProfileProxys();
}
class BluetoothOppHandover{
   @Source(SUSI_NFC)  java.lang.String getMimeTypeForUri(  @Sink(SUSI_NFC) android.content.Context arg0, @Sink(SUSI_NFC) android.net.Uri arg1);
}
class HandoverClient{
   @Source(SUSI_NFC)  android.nfc.NdefMessage sendHandoverRequest(  @Sink(SUSI_NFC) android.nfc.NdefMessage arg0);
}
class HandoverManager{
    void whitelistOppDevice(  @Sink(SUSI_NFC) android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_NFC)  com.android.nfc.handover.HandoverManager$BluetoothHandoverData parse(  @Sink(SUSI_NFC) android.nfc.NdefMessage arg0);
   @Source(SUSI_NFC)  android.nfc.NdefMessage createHandoverSelectMessage(  @Sink(SUSI_NFC) boolean arg0);
   @Source(SUSI_NFC)  android.nfc.NdefRecord createBluetoothOobDataRecord();
   @Source(SUSI_NFC)  android.nfc.NdefMessage createHandoverRequestMessage();
   @Source(SUSI_NFC)  com.android.nfc.handover.HandoverManager$BluetoothHandoverData parseBtOob(  @Sink(SUSI_NFC) java.nio.ByteBuffer arg0);
   @Source(SUSI_NFC)  com.android.nfc.handover.HandoverManager$BluetoothHandoverData parseHandoverSelect(  @Sink(SUSI_NFC) android.nfc.NdefMessage arg0);
   @Source(SUSI_NFC)  com.android.nfc.handover.HandoverManager$BluetoothHandoverData parseNokia(  @Sink(SUSI_NFC) java.nio.ByteBuffer arg0);
   @Source(SUSI_NFC)  com.android.nfc.handover.PendingHandoverTransfer registerInTransferLocked(  @Sink(SUSI_NFC) android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_NFC)  byte[] addressToReverseBytes(  @Sink(SUSI_NFC) java.lang.String arg0);
   @Source(SUSI_NFC)  android.nfc.NdefRecord createHandoverSelectRecord(  @Sink(SUSI_NFC) boolean arg0);
   @Source(SUSI_NFC)  android.nfc.NdefMessage tryHandoverRequest(  @Sink(SUSI_NFC) android.nfc.NdefMessage arg0);
   @Source(SUSI_NFC)  android.nfc.NdefRecord createHandoverRequestRecord();
   @Source(SUSI_NFC)  android.nfc.NdefRecord createCollisionRecord();
   @Source(SUSI_NFC)  android.nfc.NdefRecord createBluetoothAlternateCarrierRecord(  @Sink(SUSI_NFC) boolean arg0);
   @Source(SUSI_NFC)  com.android.nfc.handover.PendingHandoverTransfer registerOutTransferLocked(  @Sink(SUSI_NFC) com.android.nfc.handover.HandoverManager$BluetoothHandoverData arg0, @Sink(SUSI_NFC) android.net.Uri[] arg1);
}
class HandoverService{
    void createHandoverTransfer(  @Sink(SUSI_NFC) com.android.nfc.handover.PendingHandoverTransfer arg0);
    void onTransferComplete(  @Sink(SUSI_NFC) com.android.nfc.handover.HandoverTransfer arg0, @Sink(SUSI_NFC) boolean arg1);
}
class HandoverService$1{
    void onReceive(  @Sink(SUSI_NFC) android.content.Context arg0, @Sink(SUSI_NFC) android.content.Intent arg1);
}
class HandoverTransfer{
    void whitelistOppDevice(  @Sink(SUSI_NFC) android.bluetooth.BluetoothDevice arg0);
    void onScanCompleted(  @Sink(SUSI_NFC) java.lang.String arg0, @Sink(SUSI_NFC) android.net.Uri arg1);
   @Source(SUSI_NFC)  int getTransferId();
}

package org.apache.james.mime4j.field;

class ContentTypeField$Parser{
   @Source(SUSI_NO_CATEGORY)  org.apache.james.mime4j.field.Field parse(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
}
class DateTimeField{
   @Source(SUSI_NO_CATEGORY)  java.util.Date getDate();
}
class DelegatingFieldParser{
    void setFieldParser(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) org.apache.james.mime4j.field.FieldParser arg1);
   @Source(SUSI_NO_CATEGORY)  org.apache.james.mime4j.field.FieldParser getParser(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class Field{
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
}

package com.android.email.service;

class AccountService$1{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Bundle getConfigurationData(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getDeviceId();
}
class AttachmentDownloadService{
   @Source(SUSI_EMAIL)  boolean canPrefetchForAccount(  @Sink(SUSI_EMAIL) com.android.emailcommon.provider.Account arg0, @Sink(SUSI_EMAIL) java.io.File arg1);
    void addServiceIntentForTest(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) android.content.Intent arg1);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NETWORK_INFORMATION)  int getSize();
   @Source(SUSI_NETWORK_INFORMATION)  int getQueueSize();
}
class AttachmentDownloadService$AccountManagerStub{
   @Source(SUSI_ACCOUNT_INFORMATION)  int getNumberOfAccounts();
}
class AttachmentDownloadService$DownloadSet{
    void endDownload(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) int arg1);
}
class AttachmentDownloadService$ServiceCallback{
    void sendMessageStatus(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) java.lang.String arg1, @Sink(SUSI_EMAIL) int arg2, @Sink(SUSI_EMAIL) int arg3);
}
class EasAuthenticatorService$EasAuthenticator{
   @Source(SUSI_EMAIL)  android.os.Bundle addAccount(  @Sink(SUSI_EMAIL) android.accounts.AccountAuthenticatorResponse arg0, @Sink(SUSI_EMAIL) java.lang.String arg1, @Sink(SUSI_EMAIL) java.lang.String arg2, @Sink(SUSI_EMAIL) java.lang.String[] arg3, @Sink(SUSI_EMAIL) android.os.Bundle arg4);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAuthTokenLabel(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Bundle getAuthToken(  android.accounts.AccountAuthenticatorResponse arg0, android.accounts.Account arg1, java.lang.String arg2, android.os.Bundle arg3);
}
class EasTestAuthenticatorService$EasAuthenticator{
   @Source(SUSI_EMAIL)  android.os.Bundle addAccount(  @Sink(SUSI_EMAIL) android.accounts.AccountAuthenticatorResponse arg0, @Sink(SUSI_EMAIL) java.lang.String arg1, @Sink(SUSI_EMAIL) java.lang.String arg2, @Sink(SUSI_EMAIL) java.lang.String[] arg3, @Sink(SUSI_EMAIL) android.os.Bundle arg4);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Bundle getAuthToken(  android.accounts.AccountAuthenticatorResponse arg0, android.accounts.Account arg1, java.lang.String arg2, android.os.Bundle arg3);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAuthTokenLabel(  java.lang.String arg0);
}
class EmailBroadcastProcessorService{
    void processDevicePolicyMessage(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) int arg1);
    void processBroadcastIntent(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) android.content.Intent arg1);
    void setImapDeletePolicy(  @Sink(SUSI_EMAIL) android.content.Context arg0);
}
class EmailServiceUtils{
    void startService(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.emailcommon.service.IEmailService getService(  android.content.Context arg0, java.lang.String arg1, com.android.emailcommon.service.IEmailServiceCallback arg2);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.emailcommon.service.IEmailService getExchangeService(  android.content.Context arg0, com.android.emailcommon.service.IEmailServiceCallback arg1);
}
class EmailServiceUtils$NullEmailService{
    void setLogging(  @Sink(SUSI_EMAIL) int arg0);
    void sendMeetingResponse(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) int arg1);
    void sendMail(  @Sink(SUSI_EMAIL) long arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getApiLevel();
}
class MailService{
    void setupAccountManagerAccount(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) com.android.emailcommon.provider.Account arg1, @Sink(SUSI_EMAIL) boolean arg2, @Sink(SUSI_EMAIL) boolean arg3, @Sink(SUSI_EMAIL) boolean arg4, @Sink(SUSI_EMAIL) android.accounts.AccountManagerCallback arg5);
    void setupSyncReportsLocked(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) android.content.Context arg1);
    void actionSendPendingMail(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) long arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.ArrayList getPopImapAccountList(  android.content.Context arg0);
}
class MailService$ControllerResults{
    void updateMailboxCallback(  @Sink(SUSI_EMAIL) com.android.emailcommon.mail.MessagingException arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) long arg2, @Sink(SUSI_EMAIL) int arg3, @Sink(SUSI_EMAIL) int arg4, @Sink(SUSI_EMAIL) java.util.ArrayList arg5);
}
class PolicyService$1{
    void setAccountPolicy(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) com.android.emailcommon.provider.Policy arg1, @Sink(SUSI_EMAIL) java.lang.String arg2);
    void setAccountHoldFlag(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) boolean arg1);
}
class PopImapAuthenticatorService$PopImapAuthenticator{
   @Source(SUSI_EMAIL)  android.os.Bundle addAccount(  @Sink(SUSI_EMAIL) android.accounts.AccountAuthenticatorResponse arg0, @Sink(SUSI_EMAIL) java.lang.String arg1, @Sink(SUSI_EMAIL) java.lang.String arg2, @Sink(SUSI_EMAIL) java.lang.String[] arg3, @Sink(SUSI_EMAIL) android.os.Bundle arg4);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAuthTokenLabel(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Bundle getAuthToken(  android.accounts.AccountAuthenticatorResponse arg0, android.accounts.Account arg1, java.lang.String arg2, android.os.Bundle arg3);
}

package com.android.inputmethodcommon;

class InputMethodSettingsFragment{
    void setInputMethodSettingsCategoryTitle(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSubtypeEnablerTitle(  @Sink(SUSI_NO_CATEGORY) int arg0);
}

package java.nio.charset;

class Charset{
   @Source(SUSI_NO_CATEGORY)  java.lang.String name();
   @Source(SUSI_NO_CATEGORY)  java.lang.String displayName();
   @Source(SUSI_NO_CATEGORY)  java.util.Set aliases();
}
class CharsetDecoder{
   @Source(SUSI_NO_CATEGORY)  java.nio.charset.Charset charset();
   @Source(SUSI_NO_CATEGORY)  java.nio.charset.CharsetDecoder reset();
   @Source(SUSI_NO_CATEGORY)  java.nio.charset.CodingErrorAction unmappableCharacterAction();
   @Source(SUSI_NO_CATEGORY)  java.nio.charset.Charset detectedCharset();
   @Source(SUSI_NO_CATEGORY)  java.nio.charset.CodingErrorAction malformedInputAction();
   @Source(SUSI_NO_CATEGORY)  java.nio.charset.CoderResult implFlush(  @Sink(SUSI_NO_CATEGORY) java.nio.CharBuffer arg0);
   @Source(SUSI_NO_CATEGORY)  float maxCharsPerByte();
   @Source(SUSI_NO_CATEGORY)  java.nio.charset.CoderResult decode(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0, @Sink(SUSI_NO_CATEGORY) java.nio.CharBuffer arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String replacement();
   @Source(SUSI_NO_CATEGORY)  float averageCharsPerByte();
}
class CharsetEncoder{
   @Source(SUSI_NO_CATEGORY)  java.nio.charset.CodingErrorAction unmappableCharacterAction();
   @Source(SUSI_NO_CATEGORY)  java.nio.charset.Charset charset();
   @Source(SUSI_NO_CATEGORY)  java.nio.charset.CodingErrorAction malformedInputAction();
   @Source(SUSI_NO_CATEGORY)  float averageBytesPerChar();
   @Source(SUSI_NO_CATEGORY)  java.nio.charset.CoderResult encode(  @Sink(SUSI_NO_CATEGORY) java.nio.CharBuffer arg0, @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  java.nio.charset.CharsetEncoder reset();
   @Source(SUSI_NO_CATEGORY)  byte[] replacement();
   @Source(SUSI_NO_CATEGORY)  java.nio.charset.CoderResult implFlush(  @Sink(SUSI_NO_CATEGORY) java.nio.ByteBuffer arg0);
   @Source(SUSI_NO_CATEGORY)  float maxBytesPerChar();
}
class CoderResult{
   @Source(SUSI_NO_CATEGORY)  java.nio.charset.CoderResult unmappableForLength(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.nio.charset.CoderResult malformedForLength(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class IllegalCharsetNameException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCharsetName();
}
class MalformedInputException{
   @Source(SUSI_NO_CATEGORY)  int getInputLength();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
}
class UnmappableCharacterException{
   @Source(SUSI_NO_CATEGORY)  int getInputLength();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
}
class UnsupportedCharsetException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCharsetName();
}

package android.provider;

class Browser{
    void updateVisitedHistory(  @Sink(SUSI_LOG) android.content.ContentResolver arg0, @Sink(SUSI_LOG) java.lang.String arg1, @Sink(SUSI_LOG) boolean arg2);
    void sendString(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void saveBookmark(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void sendString(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_BROWSER_INFORMATION)  android.database.Cursor getAllBookmarks(  @Sink(SUSI_BROWSER_INFORMATION) android.content.ContentResolver arg0);
   @Source(SUSI_BROWSER_INFORMATION)  android.database.Cursor getAllVisitedUrls(  @Sink(SUSI_BROWSER_INFORMATION) android.content.ContentResolver arg0);
   @Source(SUSI_BROWSER_INFORMATION)  java.lang.String[] getVisitedHistory(  @Sink(SUSI_BROWSER_INFORMATION) android.content.ContentResolver arg0);
}
class BrowserContract$SyncState{
    void set(  @Sink(SUSI_NO_CATEGORY) android.content.ContentProviderClient arg0, @Sink(SUSI_NO_CATEGORY) android.accounts.Account arg1, @Sink(SUSI_NO_CATEGORY) byte[] arg2);
   @Source(SUSI_BROWSER_INFORMATION)  byte[] get(  @Sink(SUSI_BROWSER_INFORMATION) android.content.ContentProviderClient arg0, @Sink(SUSI_BROWSER_INFORMATION) android.accounts.Account arg1);
   @Source(SUSI_BROWSER_INFORMATION)  android.util.Pair getWithUri(  @Sink(SUSI_BROWSER_INFORMATION) android.content.ContentProviderClient arg0, @Sink(SUSI_BROWSER_INFORMATION) android.accounts.Account arg1);
}
class CalendarContract$Attendees{
   @Source(SUSI_CALENDAR_INFORMATION)  android.database.Cursor query(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.ContentResolver arg0, @Sink(SUSI_CALENDAR_INFORMATION) long arg1, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String[] arg2);
}
class CalendarContract$CalendarAlerts{
    void scheduleAlarm(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.app.AlarmManager arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  long findNextAlarmTime(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.ContentResolver arg0, @Sink(SUSI_CALENDAR_INFORMATION) long arg1);
}
class CalendarContract$CalendarEntity$EntityIteratorImpl{
   @Source(SUSI_CALENDAR_INFORMATION)  android.content.Entity getEntityAndIncrementCursor(  @Sink(SUSI_CALENDAR_INFORMATION) android.database.Cursor arg0);
}
class CalendarContract$EventDays{
   @Source(SUSI_CALENDAR_INFORMATION)  android.database.Cursor query(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.ContentResolver arg0, @Sink(SUSI_CALENDAR_INFORMATION) int arg1, @Sink(SUSI_CALENDAR_INFORMATION) int arg2, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String[] arg3);
}
class CalendarContract$EventsEntity$EntityIteratorImpl{
   @Source(SUSI_CALENDAR_INFORMATION)  android.content.Entity getEntityAndIncrementCursor(  @Sink(SUSI_CALENDAR_INFORMATION) android.database.Cursor arg0);
}
class CalendarContract$Instances{
   @Source(SUSI_CALENDAR_INFORMATION)  android.database.Cursor query(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.ContentResolver arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String[] arg1, @Sink(SUSI_CALENDAR_INFORMATION) long arg2, @Sink(SUSI_CALENDAR_INFORMATION) long arg3);
   @Source(SUSI_CALENDAR_INFORMATION)  android.database.Cursor query(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.ContentResolver arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String[] arg1, @Sink(SUSI_CALENDAR_INFORMATION) long arg2, @Sink(SUSI_CALENDAR_INFORMATION) long arg3, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg4);
}
class CalendarContract$Reminders{
   @Source(SUSI_CALENDAR_INFORMATION)  android.database.Cursor query(  @Sink(SUSI_CALENDAR_INFORMATION) android.content.ContentResolver arg0, @Sink(SUSI_CALENDAR_INFORMATION) long arg1, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String[] arg2);
}
class CallLog$Calls{
   @Source(SUSI_NO_CATEGORY)  android.net.Uri addCall(  @Sink(SUSI_NO_CATEGORY) com.android.internal.telephony.CallerInfo arg0, @Sink(SUSI_NO_CATEGORY) android.content.Context arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) long arg5, @Sink(SUSI_NO_CATEGORY) int arg6);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLastOutgoingCall(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class Contacts$ContactMethods{
    void addPostalLocation(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1, @Sink(SUSI_CONTACT_INFORMATION) double arg2, @Sink(SUSI_CONTACT_INFORMATION) double arg3);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getDisplayLabel(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) int arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.CharSequence arg3);
}
class Contacts$Organizations{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getDisplayLabel(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.CharSequence arg2);
}
class Contacts$People{
    void setPhotoData(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentResolver arg0, @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg1, @Sink(SUSI_CONTACT_INFORMATION) byte[] arg2);
   @Source(SUSI_CONTACT_INFORMATION)  long tryGetMyContactsGroupId(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentResolver arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.database.Cursor queryGroups(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentResolver arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1);
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri addToGroup(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentResolver arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2);
}
class Contacts$Phones{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getDisplayLabel(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.CharSequence arg2);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getDisplayLabel(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.CharSequence arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.CharSequence[] arg3);
}
class Contacts$Settings{
    void setSetting(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentResolver arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg3);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getSetting(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentResolver arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2);
}
class ContactsContract$CommonDataKinds$Phone{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getDisplayLabel(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.CharSequence arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.CharSequence[] arg3);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getDisplayLabel(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.CharSequence arg2);
}
class ContactsContract$Contacts{
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getLookupUri(  @Sink(SUSI_CONTACT_INFORMATION) long arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getLookupUri(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentResolver arg0, @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg1);
   @Source(SUSI_CONTACT_INFORMATION)  java.io.InputStream openContactPhotoInputStream(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentResolver arg0, @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg1, @Sink(SUSI_CONTACT_INFORMATION) boolean arg2);
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri lookupContact(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentResolver arg0, @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg1);
}
class ContactsContract$Data{
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getContactLookupUri(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentResolver arg0, @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg1);
}
class ContactsContract$Groups$EntityIteratorImpl{
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Entity getEntityAndIncrementCursor(  @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg0);
}
class ContactsContract$ProfileSyncState{
    void set(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentProviderClient arg0, @Sink(SUSI_CONTACT_INFORMATION) android.accounts.Account arg1, @Sink(SUSI_CONTACT_INFORMATION) byte[] arg2);
   @Source(SUSI_CONTACT_INFORMATION)  android.util.Pair getWithUri(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentProviderClient arg0, @Sink(SUSI_CONTACT_INFORMATION) android.accounts.Account arg1);
   @Source(SUSI_CONTACT_INFORMATION)  byte[] get(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentProviderClient arg0, @Sink(SUSI_CONTACT_INFORMATION) android.accounts.Account arg1);
}
class ContactsContract$QuickContact{
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent composeQuickContactsIntent(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) android.graphics.Rect arg1, @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg4);
}
class ContactsContract$RawContacts{
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getContactLookupUri(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentResolver arg0, @Sink(SUSI_CONTACT_INFORMATION) android.net.Uri arg1);
}
class ContactsContract$RawContacts$EntityIteratorImpl{
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Entity getEntityAndIncrementCursor(  @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg0);
}
class ContactsContract$SyncState{
    void set(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentProviderClient arg0, @Sink(SUSI_CONTACT_INFORMATION) android.accounts.Account arg1, @Sink(SUSI_CONTACT_INFORMATION) byte[] arg2);
   @Source(SUSI_CONTACT_INFORMATION)  android.util.Pair getWithUri(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentProviderClient arg0, @Sink(SUSI_CONTACT_INFORMATION) android.accounts.Account arg1);
   @Source(SUSI_CONTACT_INFORMATION)  byte[] get(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentProviderClient arg0, @Sink(SUSI_CONTACT_INFORMATION) android.accounts.Account arg1);
}
class DrmStore{
    android.content.Intent addDrmFile(  @Sink(SUSI_LOG) android.content.ContentResolver arg0, @Sink(SUSI_LOG) java.io.FileInputStream arg1, @Sink(SUSI_LOG) java.lang.String arg2);
}
class MediaStore{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getMediaScannerUri();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getVersion(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class MediaStore$Audio$Albums{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getContentUri(  java.lang.String arg0);
}
class MediaStore$Audio$Artists{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getContentUri(  java.lang.String arg0);
}
class MediaStore$Audio$Artists$Albums{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getContentUri(  java.lang.String arg0, long arg1);
}
class MediaStore$Audio$Genres{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getContentUriForAudioId(  java.lang.String arg0, int arg1);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getContentUri(  java.lang.String arg0);
}
class MediaStore$Audio$Genres$Members{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getContentUri(  java.lang.String arg0, long arg1);
}
class MediaStore$Audio$Media{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getContentUri(  java.lang.String arg0);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getContentUriForPath(  java.lang.String arg0);
}
class MediaStore$Audio$Playlists{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getContentUri(  java.lang.String arg0);
}
class MediaStore$Audio$Playlists$Members{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getContentUri(  java.lang.String arg0, long arg1);
}
class MediaStore$Files{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getMtpObjectsUri(  java.lang.String arg0, long arg1);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getContentUri(  java.lang.String arg0, long arg1);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getMtpObjectsUri(  java.lang.String arg0);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getMtpReferencesUri(  java.lang.String arg0, long arg1);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getContentUri(  java.lang.String arg0);
}
class MediaStore$Images$Media{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getContentUri(  java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor query(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor query(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor query(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg2);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getBitmap(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1);
}
class MediaStore$Images$Thumbnails{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getContentUri(  java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor queryMiniThumbnails(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor queryMiniThumbnail(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getThumbnail(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.graphics.BitmapFactory$Options arg3);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getThumbnail(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.graphics.BitmapFactory$Options arg4);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor query(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg2);
}
class MediaStore$InternalThumbnails{
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getThumbnail(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.graphics.BitmapFactory$Options arg4, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg5, @Sink(SUSI_NO_CATEGORY) boolean arg6);
}
class MediaStore$Video{
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor query(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg2);
}
class MediaStore$Video$Media{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getContentUri(  java.lang.String arg0);
}
class MediaStore$Video$Thumbnails{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getContentUri(  java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getThumbnail(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.graphics.BitmapFactory$Options arg4);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getThumbnail(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.graphics.BitmapFactory$Options arg3);
}
class Settings{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getGTalkDeviceId(  @Sink(SUSI_NO_CATEGORY) long arg0);
}
class Settings$Bookmarks{
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getIntentForShortcut(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) char arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTitle(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getLabelForFolder(  @Sink(SUSI_NO_CATEGORY) android.content.res.Resources arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class Settings$Global{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getUriFor(  java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  long getLong(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getBluetoothHeadsetPriorityKey(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getBluetoothA2dpSinkPriorityKey(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  long getLong(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  float getFloat(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getStringForUser(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  float getFloat(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) float arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getBluetoothInputDevicePriorityKey(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class Settings$NameValueCache{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getStringForUser(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class Settings$NameValueTable{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getUriFor(  android.net.Uri arg0, java.lang.String arg1);
}
class Settings$Secure{
    void setLocationProviderEnabledForUser(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getUriFor(  java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  long getLongForUser(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  long getLongForUser(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  long getLong(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getStringForUser(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getIntForUser(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  float getFloatForUser(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  float getFloat(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) float arg2);
   @Source(SUSI_NO_CATEGORY)  float getFloat(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getIntForUser(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  float getFloatForUser(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  long getLong(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class Settings$System{
    void setShowGTalkServiceStatusForUser(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getUriFor(  java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  float getFloatForUser(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getStringForUser(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  float getFloat(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) float arg2);
   @Source(SUSI_NO_CATEGORY)  long getLongForUser(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  long getLong(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
   @Source(SUSI_NO_CATEGORY)  long getLongForUser(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  boolean getShowGTalkServiceStatusForUser(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  long getLong(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  float getFloat(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getIntForUser(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  int getIntForUser(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  float getFloatForUser(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class SyncStateContract$Helpers{
    void set(  @Sink(SUSI_NO_CATEGORY) android.content.ContentProviderClient arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1, @Sink(SUSI_NO_CATEGORY) android.accounts.Account arg2, @Sink(SUSI_NO_CATEGORY) byte[] arg3);
    void update(  @Sink(SUSI_NO_CATEGORY) android.content.ContentProviderClient arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1, @Sink(SUSI_NO_CATEGORY) byte[] arg2);
   @Source(SUSI_FILE_INFORMATION)  android.util.Pair getWithUri(  android.content.ContentProviderClient arg0, android.net.Uri arg1, android.accounts.Account arg2);
   @Source(SUSI_NO_CATEGORY)  byte[] get(  @Sink(SUSI_NO_CATEGORY) android.content.ContentProviderClient arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1, @Sink(SUSI_NO_CATEGORY) android.accounts.Account arg2);
}
class Telephony$Mms{
   @Source(SUSI_SMS_MMS)  android.database.Cursor query(  @Sink(SUSI_SMS_MMS) android.content.ContentResolver arg0, @Sink(SUSI_SMS_MMS) java.lang.String[] arg1, @Sink(SUSI_SMS_MMS) java.lang.String arg2, @Sink(SUSI_SMS_MMS) java.lang.String arg3);
   @Source(SUSI_SMS_MMS)  android.database.Cursor query(  @Sink(SUSI_SMS_MMS) android.content.ContentResolver arg0, @Sink(SUSI_SMS_MMS) java.lang.String[] arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessageBoxName(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Telephony$Sms{
   @Source(SUSI_SMS_MMS)  boolean moveMessageToFolder(  @Sink(SUSI_SMS_MMS) android.content.Context arg0, @Sink(SUSI_SMS_MMS) android.net.Uri arg1, @Sink(SUSI_SMS_MMS) int arg2, @Sink(SUSI_SMS_MMS) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.database.Cursor query(  android.content.ContentResolver arg0, java.lang.String[] arg1, java.lang.String arg2, java.lang.String arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.database.Cursor query(  android.content.ContentResolver arg0, java.lang.String[] arg1);
}
class Telephony$Sms$Intents{
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.SmsMessage[] getMessagesFromIntent(  android.content.Intent arg0);
}
class Telephony$Threads{
   @Source(SUSI_NO_CATEGORY)  long getOrCreateThreadId(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  long getOrCreateThreadId(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.util.Set arg1);
}
class UserDictionary$Words{
    void addWord(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) java.util.Locale arg4);
}

package com.android.mms.widget;

class MmsWidgetService$MmsFactory{
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  int getViewTypeCount();
   @Source(SUSI_NO_CATEGORY)  android.widget.RemoteViews getViewAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.widget.RemoteViews getLoadingView();
}

package org.apache.http.impl.auth;

class BasicScheme{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSchemeName();
}
class DigestScheme{
    void overrideParamter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.Header authenticate(  @Sink(SUSI_NO_CATEGORY) org.apache.http.auth.Credentials arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.HttpRequest arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String createCnonce();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSchemeName();
}
class RFC2617Scheme{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRealm();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Map getParameters();
}

package sun.misc;

class Unsafe{
   @Source(SUSI_NO_CATEGORY)  sun.misc.Unsafe getUnsafe();
}

package com.android.server.net;

class NetworkIdentitySet{
    void writeToStream(  @Sink(SUSI_NETWORK) java.io.DataOutputStream arg0);
}
class NetworkPolicyManagerService{
    void setNetworkPolicies(  @Sink(SUSI_NETWORK) android.net.NetworkPolicy[] arg0);
    void snoozeLimit(  @Sink(SUSI_NETWORK) android.net.NetworkTemplate arg0);
    void setUidPolicy(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) int arg1);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkPolicy[] getNetworkPolicies();
   @Source(SUSI_NETWORK_INFORMATION)  int getUidPolicy(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  boolean getRestrictBackground();
   @Source(SUSI_NETWORK_INFORMATION)  int[] getUidsWithPolicy(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkQuotaInfo getNetworkQuotaInfo(  android.net.NetworkState arg0);
}
class NetworkStatsCollection{
    void write(  @Sink(SUSI_NETWORK) java.io.DataOutputStream arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  long getTotalBytes();
   @Source(SUSI_SYSTEM_SETTINGS)  long getFirstAtomicBucketMillis();
   @Source(SUSI_SYSTEM_SETTINGS)  long getStartMillis();
   @Source(SUSI_SYSTEM_SETTINGS)  long getEndMillis();
   @Source(SUSI_SYSTEM_SETTINGS)  android.net.NetworkStatsHistory getHistory(  @Sink(SUSI_SYSTEM_SETTINGS) android.net.NetworkTemplate arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2, @Sink(SUSI_SYSTEM_SETTINGS) int arg3, @Sink(SUSI_SYSTEM_SETTINGS) int arg4, @Sink(SUSI_SYSTEM_SETTINGS) long arg5, @Sink(SUSI_SYSTEM_SETTINGS) long arg6);
   @Source(SUSI_SYSTEM_SETTINGS)  android.net.NetworkStats getSummary(  @Sink(SUSI_SYSTEM_SETTINGS) android.net.NetworkTemplate arg0, @Sink(SUSI_SYSTEM_SETTINGS) long arg1, @Sink(SUSI_SYSTEM_SETTINGS) long arg2);
   @Source(SUSI_SYSTEM_SETTINGS)  android.net.NetworkStatsHistory getHistory(  @Sink(SUSI_SYSTEM_SETTINGS) android.net.NetworkTemplate arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1, @Sink(SUSI_SYSTEM_SETTINGS) int arg2, @Sink(SUSI_SYSTEM_SETTINGS) int arg3, @Sink(SUSI_SYSTEM_SETTINGS) int arg4);
}
class NetworkStatsRecorder{
    void setPersistThreshold(  @Sink(SUSI_NETWORK) long arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.server.net.NetworkStatsCollection getOrLoadCompleteLocked();
   @Source(SUSI_SYSTEM_SETTINGS)  android.net.NetworkStats$Entry getTotalSinceBootLocked(  @Sink(SUSI_SYSTEM_SETTINGS) android.net.NetworkTemplate arg0);
}
class NetworkStatsRecorder$CombiningRewriter{
    void write(  @Sink(SUSI_NETWORK) java.io.OutputStream arg0);
}
class NetworkStatsRecorder$RemoveUidRewriter{
    void write(  @Sink(SUSI_NETWORK) java.io.OutputStream arg0);
}
class NetworkStatsService{
    void setUidForeground(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) boolean arg1);
    boolean onTransact(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) android.os.Parcel arg1, @Sink(SUSI_NETWORK) android.os.Parcel arg2, @Sink(SUSI_NETWORK) int arg3);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NETWORK_INFORMATION)  long getNetworkTotalBytes(  android.net.NetworkTemplate arg0, long arg1, long arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getMobileIfaces();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStats getDataLayerSnapshotForUid(  int arg0);
}
class NetworkStatsService$1{
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStats getSummaryForNetwork(  android.net.NetworkTemplate arg0, long arg1, long arg2);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStatsHistory getHistoryForNetwork(  android.net.NetworkTemplate arg0, int arg1);
}
class NetworkStatsService$DefaultNetworkStatsSettings{
   @Source(SUSI_SYSTEM_SETTINGS)  long getDevPersistBytes(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  long getUidPersistBytes(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  long getPollInterval();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getXtConfig();
   @Source(SUSI_SYSTEM_SETTINGS)  long getXtPersistBytes(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getDevConfig();
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getUidConfig();
   @Source(SUSI_SYSTEM_SETTINGS)  long getTimeCacheMaxAge();
   @Source(SUSI_SYSTEM_SETTINGS)  long getGlobalAlertBytes(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  long getUidTagPersistBytes(  @Sink(SUSI_SYSTEM_SETTINGS) long arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getUidTagConfig();
}

package org.apache.harmony.xml.parsers;

class DocumentBuilderFactoryImpl{
    void setAttribute(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void setFeature(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NETWORK_INFORMATION)  boolean getFeature(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object getAttribute(  java.lang.String arg0);
}
class DocumentBuilderImpl{
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.DOMImplementation getDOMImplementation();
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.Document newDocument();
   @Source(SUSI_NETWORK_INFORMATION)  org.w3c.dom.Document parse(  org.xml.sax.InputSource arg0);
}

package com.android.providers.contacts.aggregation;

class ContactAggregator{
    void updatePhotoId(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1);
    void updateHasPhoneNumber(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1);
    void updateDisplayNameForRawContact(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1);
    void markForAggregation(  @Sink(SUSI_CONTACT_INFORMATION) long arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) boolean arg2);
    void updateLookupKeyForRawContact(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1);
    void markNewForAggregation(  @Sink(SUSI_CONTACT_INFORMATION) long arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
    void updateAggregateData(  @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.TransactionContext arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1);
    void updateStarred(  @Sink(SUSI_CONTACT_INFORMATION) long arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int markAllVisibleForAggregation(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg0);
   @Source(SUSI_CONTACT_INFORMATION)  long onRawContactInsert(  @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.TransactionContext arg0, @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg1, @Sink(SUSI_CONTACT_INFORMATION) long arg2);
    void setContactId(  @Sink(SUSI_CONTACT_INFORMATION) long arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1);
    void updateDisplayNameForContact(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1);
   @Source(SUSI_CONTACT_INFORMATION)  android.database.Cursor queryAggregationSuggestions(  @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteQueryBuilder arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String[] arg1, @Sink(SUSI_CONTACT_INFORMATION) long arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg4, @Sink(SUSI_CONTACT_INFORMATION) java.util.ArrayList arg5);
}
class ContactAggregator$MatchCandidateList{
    void add(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
}
class ContactAggregator$NameLookupSelectionBuilder{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getSelection();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String[] getCommonNicknameClusters(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
}
class ProfileAggregator{
    void aggregateContact(  @Sink(SUSI_CONTACT_INFORMATION) com.android.providers.contacts.TransactionContext arg0, @Sink(SUSI_CONTACT_INFORMATION) android.database.sqlite.SQLiteDatabase arg1, @Sink(SUSI_CONTACT_INFORMATION) long arg2);
}

package org.apache.http.impl.io;

class AbstractMessageParser{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpMessage parse();
}
class AbstractSessionInputBuffer{
   @Source(SUSI_NO_CATEGORY)  java.lang.String readLine();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.io.HttpTransportMetrics getMetrics();
}
class AbstractSessionOutputBuffer{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void writeLine(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void writeLine(  @Sink(SUSI_NO_CATEGORY) org.apache.http.util.CharArrayBuffer arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.io.HttpTransportMetrics getMetrics();
}
class ChunkedInputStream{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.Header[] getFooters();
}
class ChunkedOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
    void flushCacheWithAppend(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class ContentLengthOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class HttpTransportMetricsImpl{
   @Source(SUSI_NO_CATEGORY)  long getBytesTransferred();
}
class IdentityOutputStream{
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void write(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
}

package org.apache.http.conn.scheme;

class PlainSocketFactory{
   @Source(SUSI_NO_CATEGORY)  java.net.Socket connectSocket(  @Sink(SUSI_NO_CATEGORY) java.net.Socket arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.net.InetAddress arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) org.apache.http.params.HttpParams arg5);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory();
}
class Scheme{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  int getDefaultPort();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.conn.scheme.SocketFactory getSocketFactory();
}
class SchemeRegistry{
   @Source(SUSI_NO_CATEGORY)  org.apache.http.conn.scheme.Scheme register(  @Sink(SUSI_NO_CATEGORY) org.apache.http.conn.scheme.Scheme arg0);
    void setItems(  @Sink(SUSI_NO_CATEGORY) java.util.Map arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.conn.scheme.Scheme getScheme(  @Sink(SUSI_NO_CATEGORY) org.apache.http.HttpHost arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.conn.scheme.Scheme getScheme(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getSchemeNames();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.conn.scheme.Scheme get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}

package com.android.camera.drawable;

class TextDrawable{
    void setColorFilter(  @Sink(SUSI_NO_CATEGORY) android.graphics.ColorFilter arg0);
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicHeight();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicWidth();
   @Source(SUSI_NO_CATEGORY)  int getOpacity();
}

package android.graphics.drawable.shapes;

class Shape{
   @Source(SUSI_NO_CATEGORY)  float getWidth();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.shapes.Shape clone();
   @Source(SUSI_NO_CATEGORY)  float getHeight();
}

package com.android.email;

class AttachmentInfo{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getUriForIntent(  android.content.Context arg0, long arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getAttachmentIntent(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
}
class Clock{
   @Source(SUSI_NO_CATEGORY)  long getTime();
}
class Controller{
   @Source(SUSI_EMAIL)  boolean isMessagingController(  @Sink(SUSI_EMAIL) long arg0);
    void sendMessage(  @Sink(SUSI_EMAIL) com.android.emailcommon.provider.EmailContent$Message arg0);
   @Source(SUSI_EMAIL)  int searchMessages(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) com.android.emailcommon.service.SearchParams arg1);
    void sendMeetingResponse(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) int arg1);
    void setMessageFavoriteSync(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) boolean arg1);
    void sendPendingMessages(  @Sink(SUSI_EMAIL) long arg0);
   @Source(SUSI_EMAIL)  com.android.emailcommon.utility.EmailAsyncTask setMessageFavorite(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) boolean arg1);
    void loadAttachment(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) long arg2);
    void updateMailbox(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) boolean arg2);
    void setMessageReadSync(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) boolean arg1);
   @Source(SUSI_EMAIL)  com.android.emailcommon.utility.EmailAsyncTask setMessageRead(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) boolean arg1);
    void setMessageAnsweredOrForwarded(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) int arg1);
   @Source(SUSI_EMAIL)  long findOrCreateMailboxOfType(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) int arg1);
   @Source(SUSI_EMAIL)  com.android.emailcommon.provider.Mailbox getAttachmentMailbox();
   @Source(SUSI_EMAIL)  java.lang.String getMailboxServerName(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) int arg1);
   @Source(SUSI_EMAIL)  com.android.emailcommon.provider.Mailbox getSearchMailbox(  @Sink(SUSI_EMAIL) long arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.email.Controller getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getResultCallbacksForTest();
}
class Controller$LegacyListener{
    void sendPendingMessagesFailed(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) java.lang.Exception arg2);
    void sendPendingMessagesStarted(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) long arg1);
    void listFoldersFailed(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) java.lang.String arg1);
    void sendPendingMessagesCompleted(  @Sink(SUSI_EMAIL) long arg0);
    void synchronizeMailboxStarted(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) long arg1);
}
class Controller$ServiceCallback{
    void syncMailboxStatus(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) int arg1, @Sink(SUSI_EMAIL) int arg2);
    void sendMessageStatus(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) java.lang.String arg1, @Sink(SUSI_EMAIL) int arg2, @Sink(SUSI_EMAIL) int arg3);
    void syncMailboxListStatus(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) int arg1, @Sink(SUSI_EMAIL) int arg2);
}
class ControllerResultUiThreadWrapper{
    void setRegistered(  @Sink(SUSI_EMAIL) boolean arg0);
    void sendMailCallback(  @Sink(SUSI_EMAIL) com.android.emailcommon.mail.MessagingException arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) long arg2, @Sink(SUSI_EMAIL) int arg3);
   @Source(SUSI_NO_CATEGORY)  com.android.email.Controller$Result getWrappee();
}
class Email{
   @Source(SUSI_EMAIL)  boolean setServicesEnabledSync(  @Sink(SUSI_EMAIL) android.content.Context arg0);
    void enableStrictMode(  @Sink(SUSI_EMAIL) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessageDecodeErrorString();
}
class EmailConnectivityManager{
   @Source(SUSI_NETWORK_INFORMATION)  int getActiveNetworkType(  android.content.Context arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getActiveNetworkType();
   @Source(SUSI_NETWORK_INFORMATION)  int getActiveNetworkType(  android.net.ConnectivityManager arg0);
}
class FixedLengthInputStream{
   @Source(SUSI_NO_CATEGORY)  int getLength();
}
class FolderProperties{
   @Source(SUSI_EMAIL)  int getMessageCountForCombinedMailbox(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) long arg1);
   @Source(SUSI_EMAIL)  java.lang.String getCombinedMailboxName(  @Sink(SUSI_EMAIL) long arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getIcon(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.email.FolderProperties getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayName(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayName(  @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayName(  @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.provider.Mailbox arg0);
   @Source(SUSI_NO_CATEGORY)  int getMessageCount(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getMessageCount(  @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg0);
}
class GroupMessagingListener{
    void sendPendingMessagesFailed(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) java.lang.Exception arg2);
    void addListener(  @Sink(SUSI_EMAIL) com.android.email.MessagingListener arg0);
    void sendPendingMessagesCompleted(  @Sink(SUSI_EMAIL) long arg0);
    void sendPendingMessagesStarted(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) long arg1);
}
class LegacyConversions{
    void saveAttachmentBody(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) com.android.emailcommon.mail.Part arg1, @Sink(SUSI_EMAIL) com.android.emailcommon.provider.EmailContent$Attachment arg2, @Sink(SUSI_EMAIL) long arg3);
   @Source(SUSI_EMAIL)  int inferMailboxTypeFromName(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.mail.Message makeMessage(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.provider.EmailContent$Message arg1);
}
class MessageListContext{
    void writeToParcel(  @Sink(SUSI_EMAIL) android.os.Parcel arg0, @Sink(SUSI_EMAIL) int arg1);
   @Source(SUSI_EMAIL)  long getSearchedMailbox();
   @Source(SUSI_EMAIL)  long getMailboxId();
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.service.SearchParams getSearchParams();
}
class MessagingController{
    void checkMail(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) com.android.email.MessagingListener arg2);
    void listFolders(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) com.android.email.MessagingListener arg1);
    void loadAttachment(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) long arg2, @Sink(SUSI_EMAIL) long arg3, @Sink(SUSI_EMAIL) com.android.email.MessagingListener arg4, @Sink(SUSI_EMAIL) boolean arg5);
    void sendPendingMessages(  @Sink(SUSI_EMAIL) com.android.emailcommon.provider.Account arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) com.android.email.MessagingListener arg2);
    void processPendingActions(  @Sink(SUSI_EMAIL) long arg0);
    void loadMessageForView(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) com.android.email.MessagingListener arg1);
    void sendPendingMessagesSynchronous(  @Sink(SUSI_EMAIL) com.android.emailcommon.provider.Account arg0, @Sink(SUSI_EMAIL) long arg1);
    void copyOneMessageToProvider(  @Sink(SUSI_EMAIL) com.android.emailcommon.mail.Message arg0, @Sink(SUSI_EMAIL) com.android.emailcommon.provider.EmailContent$Message arg1, @Sink(SUSI_EMAIL) int arg2, @Sink(SUSI_EMAIL) android.content.Context arg3);
   @Source(SUSI_NO_CATEGORY)  com.android.email.MessagingController getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) com.android.email.Controller arg1);
}
class MessagingController$4{
    void messageRetrieved(  @Sink(SUSI_EMAIL) com.android.emailcommon.mail.Message arg0);
}
class MessagingController$8{
    void onMessageUidChange(  @Sink(SUSI_EMAIL) com.android.emailcommon.mail.Message arg0, @Sink(SUSI_EMAIL) java.lang.String arg1);
}
class MessagingController$9{
    void onMessageUidChange(  @Sink(SUSI_EMAIL) com.android.emailcommon.mail.Message arg0, @Sink(SUSI_EMAIL) java.lang.String arg1);
}
class MessagingExceptionStrings{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getErrorString(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.mail.MessagingException arg1);
}
class MessagingListener{
    void sendPendingMessagesStarted(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) long arg1);
    void sendPendingMessagesCompleted(  @Sink(SUSI_EMAIL) long arg0);
    void sendPendingMessagesFailed(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) java.lang.Exception arg2);
}
class NotificationController{
    void showPasswordExpiredNotification(  @Sink(SUSI_EMAIL) long arg0);
    void setupSoundAndVibration(  @Sink(SUSI_EMAIL) android.app.Notification$Builder arg0, @Sink(SUSI_EMAIL) com.android.emailcommon.provider.Account arg1);
    void showPasswordExpiringNotification(  @Sink(SUSI_EMAIL) long arg0);
    void showDownloadForwardFailedNotification(  @Sink(SUSI_EMAIL) com.android.emailcommon.provider.EmailContent$Attachment arg0);
    void showLoginFailedNotification(  @Sink(SUSI_EMAIL) long arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.Notification createNewMessageNotification(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg2, @Sink(SUSI_NO_CATEGORY) long arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
   @Source(SUSI_NO_CATEGORY)  com.android.email.NotificationController getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  android.text.SpannableString getNewMessageTitle(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getRingerMode();
}
class NotificationController$NotificationThread{
   @Source(SUSI_NO_CATEGORY)  android.os.Looper getLooper();
}
class Preferences{
    void setEnableStrictMode(  @Sink(SUSI_EMAIL) boolean arg0);
    void setLastUsedAccountId(  @Sink(SUSI_EMAIL) long arg0);
    void setTextZoom(  @Sink(SUSI_EMAIL) int arg0);
    void setAutoAdvanceDirection(  @Sink(SUSI_EMAIL) int arg0);
    void setEnableExchangeLogging(  @Sink(SUSI_EMAIL) boolean arg0);
    void setEnableDebugLogging(  @Sink(SUSI_EMAIL) boolean arg0);
    void setSenderAsTrusted(  @Sink(SUSI_EMAIL) java.lang.String arg0);
    void setEnableExchangeFileLogging(  @Sink(SUSI_EMAIL) boolean arg0);
    void setForceOneMinuteRefresh(  @Sink(SUSI_EMAIL) boolean arg0);
    void setOneTimeInitializationProgress(  @Sink(SUSI_EMAIL) int arg0);
    void setHasShownRequireManualSync(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) com.android.emailcommon.provider.Account arg1, @Sink(SUSI_EMAIL) boolean arg2);
    void setInhibitGraphicsAcceleration(  @Sink(SUSI_EMAIL) boolean arg0);
   @Source(SUSI_SYNCHRONIZATION_DATA)  boolean getHasShownRequireManualSync(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.content.Context arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) com.android.emailcommon.provider.Account arg1);
   @Source(SUSI_NO_CATEGORY)  boolean getEnableExchangeLogging();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLegacyBackupPreference(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getInhibitGraphicsAcceleration();
   @Source(SUSI_NO_CATEGORY)  long getLastUsedAccountId();
   @Source(SUSI_NO_CATEGORY)  com.android.email.Preferences getPreferences(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  int getTextZoom();
   @Source(SUSI_NO_CATEGORY)  boolean getEnableStrictMode();
   @Source(SUSI_NO_CATEGORY)  int getAutoAdvanceDirection();
   @Source(SUSI_NO_CATEGORY)  int getOneTimeInitializationProgress();
   @Source(SUSI_NO_CATEGORY)  boolean getEnableExchangeFileLogging();
   @Source(SUSI_NO_CATEGORY)  boolean getForceOneMinuteRefresh();
   @Source(SUSI_NO_CATEGORY)  boolean getEnableDebugLogging();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDeviceUID();
   @Source(SUSI_NO_CATEGORY)  android.content.SharedPreferences getSharedPreferences(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class RecipientAdapter{
    void setAccount(  @Sink(SUSI_EMAIL) android.accounts.Account arg0);
   @Source(SUSI_NO_CATEGORY)  int getDefaultPhotoResource();
   @Source(SUSI_NO_CATEGORY)  int getItemLayout();
}
class RefreshManager{
   @Source(SUSI_EMAIL)  boolean refreshMailboxList(  @Sink(SUSI_EMAIL) long arg0);
   @Source(SUSI_EMAIL)  boolean sendPendingMessages(  @Sink(SUSI_EMAIL) long arg0);
   @Source(SUSI_NETWORK_INFORMATION)  long getLastMessageListRefreshTime(  long arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.email.RefreshManager$Status getMessageListStatusForTest(  long arg0);
   @Source(SUSI_NETWORK_INFORMATION)  com.android.email.RefreshManager getInstance(  android.content.Context arg0);
   @Source(SUSI_NETWORK_INFORMATION)  boolean isRefreshingAnyMessageListForTest();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Collection getListenersForTest();
   @Source(SUSI_EMAIL)  boolean isRefreshingAnyMailboxListForTest();
   @Source(SUSI_EMAIL)  com.android.email.RefreshManager$Status getMailboxListStatusForTest(  @Sink(SUSI_EMAIL) long arg0);
   @Source(SUSI_EMAIL)  long getLastMailboxListRefreshTime(  @Sink(SUSI_EMAIL) long arg0);
}
class RefreshManager$ControllerResult{
    void sendMailCallback(  @Sink(SUSI_EMAIL) com.android.emailcommon.mail.MessagingException arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) long arg2, @Sink(SUSI_EMAIL) int arg3);
    void updateMailboxCallback(  @Sink(SUSI_EMAIL) com.android.emailcommon.mail.MessagingException arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) long arg2, @Sink(SUSI_EMAIL) int arg3, @Sink(SUSI_EMAIL) int arg4, @Sink(SUSI_EMAIL) java.util.ArrayList arg5);
    void serviceCheckMailCallback(  @Sink(SUSI_EMAIL) com.android.emailcommon.mail.MessagingException arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) long arg2, @Sink(SUSI_EMAIL) int arg3, @Sink(SUSI_EMAIL) long arg4);
}
class RefreshManager$RefreshStatusMap{
   @Source(SUSI_NETWORK_INFORMATION)  com.android.email.RefreshManager$Status get(  long arg0);
}
class RefreshManager$Status{
   @Source(SUSI_NETWORK_INFORMATION)  long getLastRefreshTime();
}
class ResourceHelper{
   @Source(SUSI_NO_CATEGORY)  int getAccountColorIndex(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  int getAccountColor(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  int getAccountColorId(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Paint getAccountColorPaint(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.email.ResourceHelper getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class SecurityPolicy{
    void setAccountHoldFlag(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) boolean arg2);
    void setAccountHoldFlag(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) com.android.emailcommon.provider.Account arg1, @Sink(SUSI_EMAIL) boolean arg2);
    void setAccountPolicy(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) com.android.emailcommon.provider.Account arg1, @Sink(SUSI_EMAIL) com.android.emailcommon.provider.Policy arg2, @Sink(SUSI_EMAIL) java.lang.String arg3);
    void setAccountPolicy(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) com.android.emailcommon.provider.Policy arg1, @Sink(SUSI_EMAIL) java.lang.String arg2);
    void policiesRequired(  @Sink(SUSI_EMAIL) long arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getAdminComponent();
   @Source(SUSI_NO_CATEGORY)  boolean wipeExpiredAccounts(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) com.android.email.Controller arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.provider.Policy getAggregatePolicy();
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.provider.Policy computeAggregatePolicy();
   @Source(SUSI_NO_CATEGORY)  com.android.email.SecurityPolicy getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.admin.DevicePolicyManager getDPM();
   @Source(SUSI_NO_CATEGORY)  int getInactiveReasons(  @Sink(SUSI_NO_CATEGORY) com.android.emailcommon.provider.Policy arg0);
}
class Throttle{
   @Source(SUSI_NETWORK_INFORMATION)  long getLastEventTimeForTest();
   @Source(SUSI_NETWORK_INFORMATION)  int getTimeoutForTest();
}
class VendorPolicyLoader{
   @Source(SUSI_EMAIL)  com.android.email.activity.setup.AccountSettingsUtils$Provider findProviderForDomain(  @Sink(SUSI_EMAIL) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getImapIdValues(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle getPolicy(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.email.VendorPolicyLoader getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}

package org.apache.http.conn.ssl;

class AbstractVerifier{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getDNSSubjectAlts(  java.security.cert.X509Certificate arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getCNs(  java.security.cert.X509Certificate arg0);
}
class SSLSocketFactory{
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory();
   @Source(SUSI_NETWORK_INFORMATION)  java.net.Socket connectSocket(  java.net.Socket arg0, java.lang.String arg1, int arg2, java.net.InetAddress arg3, int arg4, org.apache.http.params.HttpParams arg5);
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.conn.ssl.X509HostnameVerifier getHostnameVerifier();
   @Source(SUSI_NETWORK_INFORMATION)  java.net.Socket createSocket();
   @Source(SUSI_NETWORK_INFORMATION)  java.net.Socket createSocket(  java.net.Socket arg0, java.lang.String arg1, int arg2, boolean arg3);
}

package com.android.mms.util;

class AddressUtils{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFrom(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1);
}
class BackgroundLoaderManager{
   @Source(SUSI_SMS_MMS)  boolean addCallback(  @Sink(SUSI_SMS_MMS) android.net.Uri arg0, @Sink(SUSI_SMS_MMS) com.android.mms.util.ItemLoadedCallback arg1);
}
class BlobCache{
   @Source(SUSI_NO_CATEGORY)  byte[] lookup(  @Sink(SUSI_NO_CATEGORY) long arg0);
}
class CacheManager{
   @Source(SUSI_NO_CATEGORY)  com.android.mms.util.BlobCache getCache(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
}
class DownloadManager{
    void markState(  @Sink(SUSI_SMS_MMS) android.net.Uri arg0, @Sink(SUSI_SMS_MMS) int arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.mms.util.DownloadManager getInstance();
   @Source(SUSI_NO_CATEGORY)  com.android.mms.util.DownloadManager access$000();
   @Source(SUSI_NO_CATEGORY)  boolean getAutoDownloadState(  @Sink(SUSI_NO_CATEGORY) android.content.SharedPreferences arg0);
}
class DraftCache{
   @Source(SUSI_NO_CATEGORY)  boolean getSavingDraft();
   @Source(SUSI_NO_CATEGORY)  com.android.mms.util.DraftCache getInstance();
}
class ImageCacheService{
    void putImageData(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) int arg1, @Sink(SUSI_SMS_MMS) byte[] arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.mms.util.ImageCacheService$ImageData getImageData(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] getBytes(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class NullItemLoadedFuture{
    void setIsDone(  @Sink(SUSI_SMS_MMS) boolean arg0);
}
class PduLoaderManager{
   @Source(SUSI_NO_CATEGORY)  com.android.mms.util.ItemLoadedFuture getPdu(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) com.android.mms.util.ItemLoadedCallback arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTag();
}
class RateController{
   @Source(SUSI_NO_CATEGORY)  com.android.mms.util.RateController getInstance();
}
class Recycler{
   @Source(SUSI_NO_CATEGORY)  int getMessageMinLimit();
   @Source(SUSI_NO_CATEGORY)  com.android.mms.util.Recycler$MmsRecycler getMmsRecycler();
   @Source(SUSI_NO_CATEGORY)  int getMessageMaxLimit();
   @Source(SUSI_NO_CATEGORY)  com.android.mms.util.Recycler$SmsRecycler getSmsRecycler();
}
class Recycler$MmsRecycler{
    void setMessageLimit(  @Sink(SUSI_SMS_MMS) android.content.Context arg0, @Sink(SUSI_SMS_MMS) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor getAllThreads(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  int getMessageLimit(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  long getThreadId(  @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg0);
}
class Recycler$SmsRecycler{
    void setMessageLimit(  @Sink(SUSI_SMS_MMS) android.content.Context arg0, @Sink(SUSI_SMS_MMS) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor getAllThreads(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  long getThreadId(  @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg0);
   @Source(SUSI_NO_CATEGORY)  int getMessageLimit(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class SendingProgressTokenManager{
    void put(  @Sink(SUSI_SMS_MMS) java.lang.Object arg0, @Sink(SUSI_SMS_MMS) long arg1);
   @Source(SUSI_NO_CATEGORY)  long get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class SimpleCache{
   @Source(SUSI_SMS_MMS)  java.lang.Object put(  @Sink(SUSI_SMS_MMS) java.lang.Object arg0, @Sink(SUSI_SMS_MMS) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class SmileyParser{
   @Source(SUSI_NO_CATEGORY)  com.android.mms.util.SmileyParser getInstance();
}
class ThumbnailManager{
   @Source(SUSI_NO_CATEGORY)  com.android.mms.util.ItemLoadedFuture getVideoThumbnail(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) com.android.mms.util.ItemLoadedCallback arg1);
   @Source(SUSI_NO_CATEGORY)  com.android.mms.util.ItemLoadedFuture getThumbnail(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) com.android.mms.util.ItemLoadedCallback arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTag();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap access$300();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap access$200();
}

package com.android.bluetooth.pan;

class PanService{
    void handlePanDeviceStateChange(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothDevice arg0, @Sink(SUSI_BLUETOOTH) java.lang.String arg1, @Sink(SUSI_BLUETOOTH) int arg2, @Sink(SUSI_BLUETOOTH) int arg3, @Sink(SUSI_BLUETOOTH) int arg4);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getName();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getConnectionState(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getConnectedDevices();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getDevicesMatchingConnectionStates(  int[] arg0);
}
class PanService$BluetoothPanBinder{
    void setBluetoothTethering(  @Sink(SUSI_BLUETOOTH) boolean arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getConnectedDevices();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getDevicesMatchingConnectionStates(  int[] arg0);
}

package android.text.format;

class DateFormat{
   @Source(SUSI_NO_CATEGORY)  java.text.DateFormat getTimeFormat(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  java.text.DateFormat getMediumDateFormat(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  java.text.DateFormat getLongDateFormat(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  java.text.DateFormat getDateFormatForSetting(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  char[] getDateFormatOrder(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  java.text.DateFormat getDateFormat(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class DateUtils{
   @Source(SUSI_NO_CATEGORY)  java.lang.String writeDateTime(  @Sink(SUSI_NO_CATEGORY) java.util.Calendar arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getStandaloneMonthString(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMonthString(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAMPMString(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getRelativeTimeSpanString(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDayOfWeekString(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getRelativeTimeSpanString(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getRelativeTimeSpanString(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getRelativeTimeSpanString(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getRelativeDateTimeString(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) long arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getRelativeTimeSpanString(  @Sink(SUSI_NO_CATEGORY) long arg0);
}
class Time{
   @Source(SUSI_NO_CATEGORY)  long setJulianDay(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void set(  @Sink(SUSI_NO_CATEGORY) android.text.format.Time arg0);
   @Source(SUSI_NO_CATEGORY)  int getWeekNumber();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCurrentTimezone();
   @Source(SUSI_NO_CATEGORY)  int getJulianDay(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  int getActualMaximum(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getWeeksSinceEpochFromJulianDay(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getJulianMondayFromWeeksSinceEpoch(  @Sink(SUSI_NO_CATEGORY) int arg0);
}

package com.android.contacts.interactions;

class ContactDeletionInteraction{
   @Source(SUSI_CONTACT_INFORMATION)  android.app.LoaderManager getLoaderManager();
}
class GroupCreationDialogFragment{
    void onCompleted(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
    void show(  @Sink(SUSI_CONTACT_INFORMATION) android.app.FragmentManager arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg3, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.interactions.GroupCreationDialogFragment$OnGroupCreatedListener arg4);
   @Source(SUSI_CONTACT_INFORMATION)  int getTitleResourceId();
}
class GroupDeletionDialogFragment{
    void show(  @Sink(SUSI_CONTACT_INFORMATION) android.app.FragmentManager arg0, @Sink(SUSI_CONTACT_INFORMATION) long arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) boolean arg3);
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Dialog onCreateDialog(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg0);
}
class GroupNameDialogFragment{
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Dialog onCreateDialog(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg0);
}
class ImportExportDialogFragment{
    void show(  @Sink(SUSI_CONTACT_INFORMATION) android.app.FragmentManager arg0, @Sink(SUSI_CONTACT_INFORMATION) boolean arg1);
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Dialog onCreateDialog(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg0);
}
class ImportExportDialogFragment$1{
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
}
class PhoneNumberInteraction{
    void onLoadComplete(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Loader arg0, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg1);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.CursorLoader getLoader();
}
class PhoneNumberInteraction$PhoneDisambiguationDialogFragment{
    void show(  @Sink(SUSI_CONTACT_INFORMATION) android.app.FragmentManager arg0, @Sink(SUSI_CONTACT_INFORMATION) java.util.ArrayList arg1, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.interactions.PhoneNumberInteraction$InteractionType arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg3);
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Dialog onCreateDialog(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg0);
}
class PhoneNumberInteraction$PhoneItemAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
}
class TestLoaderManager{
    void dump(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) java.io.FileDescriptor arg1, @Sink(SUSI_FILE) java.io.PrintWriter arg2, @Sink(SUSI_FILE) java.lang.String[] arg3);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Loader restartLoader(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg1, @Sink(SUSI_CONTACT_INFORMATION) android.app.LoaderManager$LoaderCallbacks arg2);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Loader getLoader(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Loader initLoader(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg1, @Sink(SUSI_CONTACT_INFORMATION) android.app.LoaderManager$LoaderCallbacks arg2);
}

package com.googlecode.mp4parser.authoring.tracks;

class CroppedTrack{
   @Source(SUSI_SYNCHRONIZATION_DATA)  long[] getSyncSamples();
   @Source(SUSI_NO_CATEGORY)  java.util.List getSamples();
   @Source(SUSI_NO_CATEGORY)  java.util.List getCompositionTimeEntries();
   @Source(SUSI_NO_CATEGORY)  java.util.List getSampleDependencies();
   @Source(SUSI_NO_CATEGORY)  java.util.List getDecodingTimeEntries();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHandler();
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.SampleDescriptionBox getSampleDescriptionBox();
   @Source(SUSI_NO_CATEGORY)  com.googlecode.mp4parser.authoring.TrackMetaData getTrackMetaData();
   @Source(SUSI_NO_CATEGORY)  com.coremedia.iso.boxes.Box getMediaHeaderBox();
}

package android.net;

class BaseNetworkStateTracker{
    void setUserDataEnable(  @Sink(SUSI_NETWORK) boolean arg0);
    void setTeardownRequested(  @Sink(SUSI_NETWORK) boolean arg0);
    void setPolicyDataEnable(  @Sink(SUSI_NETWORK) boolean arg0);
    void setDependencyMet(  @Sink(SUSI_NETWORK) boolean arg0);
    boolean setRadio(  @Sink(SUSI_NETWORK) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LinkProperties getLinkProperties();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LinkCapabilities getLinkCapabilities();
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Handler getTargetHandler();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkInfo getNetworkInfo();
}
class CaptivePortalTracker$ActiveNetworkState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class CaptivePortalTracker$DefaultState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class CaptivePortalTracker$DelayedCaptiveCheckState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class CaptivePortalTracker$NoActiveNetworkState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class ConnectivityManager{
    int startUsingNetworkFeature(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) java.lang.String arg1);
    int setUsbTethering(  @Sink(SUSI_NETWORK) boolean arg0);
    void setDataDependency(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) boolean arg1);
    boolean setRadios(  @Sink(SUSI_NETWORK) boolean arg0);
    void setNetworkPreference(  @Sink(SUSI_NETWORK) int arg0);
    void setBackgroundDataSetting(  @Sink(SUSI_NETWORK) boolean arg0);
    void setMobileDataEnabled(  @Sink(SUSI_NETWORK) boolean arg0);
    void setGlobalProxy(  @Sink(SUSI_NETWORK) android.net.ProxyProperties arg0);
    boolean setRadio(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) boolean arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getTetherableUsbRegexs();
   @Source(SUSI_NETWORK_INFORMATION)  boolean isNetworkSupported(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getNetworkPreference();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNetworkTypeName(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  boolean getMobileDataEnabled();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkInfo[] getAllNetworkInfo();
   @Source(SUSI_NETWORK_INFORMATION)  int stopUsingNetworkFeature(  int arg0, java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkInfo getNetworkInfo(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getTetheredIfaces();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getTetheringErroredIfaces();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LinkProperties getActiveLinkProperties();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getBackgroundDataSetting();
   @Source(SUSI_NETWORK_INFORMATION)  int tether(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkInfo getActiveNetworkInfoForUid(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getTetherableIfaces();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkInfo getActiveNetworkInfo();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.ProxyProperties getProxy();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getTetherableWifiRegexs();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LinkProperties getLinkProperties(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo();
   @Source(SUSI_NETWORK_INFORMATION)  int untether(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.ProxyProperties getGlobalProxy();
   @Source(SUSI_NETWORK_INFORMATION)  int getLastTetherError(  java.lang.String arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String[] getTetherableBluetoothRegexs();
}
class Credentials{
   @Source(SUSI_NO_CATEGORY)  int getUid();
   @Source(SUSI_NO_CATEGORY)  int getPid();
   @Source(SUSI_NO_CATEGORY)  int getGid();
}
class DhcpInfoInternal{
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Collection getRoutes();
}
class DhcpStateMachine$DefaultState{
    boolean processMessage(  @Sink(SUSI_LOG) android.os.Message arg0);
}
class DhcpStateMachine$RunningState{
    boolean processMessage(  @Sink(SUSI_LOG) android.os.Message arg0);
}
class DhcpStateMachine$StoppedState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class DhcpStateMachine$WaitBeforeRenewalState{
    boolean processMessage(  @Sink(SUSI_LOG) android.os.Message arg0);
}
class DhcpStateMachine$WaitBeforeStartState{
    boolean processMessage(  @Sink(SUSI_NETWORK) android.os.Message arg0);
}
class DnsPinger{
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getDnsList();
}
class DummyDataStateTracker{
    void setDependencyMet(  @Sink(SUSI_NETWORK) boolean arg0);
    void setPolicyDataEnable(  @Sink(SUSI_NETWORK) boolean arg0);
    void setUserDataEnable(  @Sink(SUSI_NETWORK) boolean arg0);
    boolean setRadio(  @Sink(SUSI_NETWORK) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkInfo getNetworkInfo();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LinkProperties getLinkProperties();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getTcpBufferSizesPropName();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LinkCapabilities getLinkCapabilities();
}
class EthernetDataTracker{
    void setTeardownRequested(  @Sink(SUSI_NETWORK) boolean arg0);
    void setDependencyMet(  @Sink(SUSI_NETWORK) boolean arg0);
    boolean setRadio(  @Sink(SUSI_NETWORK) boolean arg0);
    void setPolicyDataEnable(  @Sink(SUSI_LOG) boolean arg0);
    void setUserDataEnable(  @Sink(SUSI_LOG) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LinkProperties getLinkProperties();
   @Source(SUSI_NETWORK_INFORMATION)  int getDefaultGatewayAddr();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.EthernetDataTracker getInstance();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LinkCapabilities getLinkCapabilities();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkInfo getNetworkInfo();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getTcpBufferSizesPropName();
}
class IConnectivityManager$Stub{
    boolean onTransact(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) android.os.Parcel arg1, @Sink(SUSI_NETWORK) android.os.Parcel arg2, @Sink(SUSI_NETWORK) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IConnectivityManager$Stub$Proxy{
    int startUsingNetworkFeature(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) java.lang.String arg1, @Sink(SUSI_NETWORK) android.os.IBinder arg2);
    void reportInetCondition(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) int arg1);
    int setUsbTethering(  @Sink(SUSI_NETWORK) boolean arg0);
    void setGlobalProxy(  @Sink(SUSI_NETWORK) android.net.ProxyProperties arg0);
    boolean requestRouteToHostAddress(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) byte[] arg1);
    void setNetworkPreference(  @Sink(SUSI_NETWORK) int arg0);
    boolean prepareVpn(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) java.lang.String arg1);
    int stopUsingNetworkFeature(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) java.lang.String arg1);
    boolean setRadios(  @Sink(SUSI_NETWORK) boolean arg0);
    int untether(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void requestNetworkTransitionWakelock(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    boolean setRadio(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) boolean arg1);
    boolean requestRouteToHost(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) int arg1);
    void setPolicyDataEnable(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) boolean arg1);
    int tether(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void setMobileDataEnabled(  @Sink(SUSI_NETWORK) boolean arg0);
    void setDataDependency(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) boolean arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getTetherableWifiRegexs();
   @Source(SUSI_NETWORK_INFORMATION)  boolean isNetworkSupported(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getNetworkPreference();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkInfo[] getAllNetworkInfo();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getTetheredIfaces();
   @Source(SUSI_NETWORK_INFORMATION)  int getLastTetherError(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LinkProperties getActiveLinkProperties();
   @Source(SUSI_NETWORK_INFORMATION)  android.os.ParcelFileDescriptor establishVpn(  com.android.internal.net.VpnConfig arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LinkProperties getLinkProperties(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkState[] getAllNetworkState();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getTetheredIfacePairs();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkInfo getActiveNetworkInfoForUid(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkInfo getNetworkInfo(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.ProxyProperties getProxy();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getTetherableIfaces();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkInfo getActiveNetworkInfo();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getTetheringErroredIfaces();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getTetherableUsbRegexs();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.ProxyProperties getGlobalProxy();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NETWORK_INFORMATION)  com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String[] getTetherableBluetoothRegexs();
}
class INetworkManagementEventObserver$Stub{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class INetworkManagementEventObserver$Stub$Proxy{
    void interfaceAdded(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void interfaceLinkStateChanged(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) boolean arg1);
    void limitReached(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) java.lang.String arg1);
    void interfaceRemoved(  @Sink(SUSI_NETWORK) java.lang.String arg0);
    void interfaceStatusChanged(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) boolean arg1);
    void interfaceClassDataActivityChanged(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) boolean arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class INetworkPolicyListener$Stub{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class INetworkPolicyListener$Stub$Proxy{
    void onUidRulesChanged(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) int arg1);
    void onMeteredIfacesChanged(  @Sink(SUSI_NETWORK) java.lang.String[] arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class INetworkPolicyManager$Stub{
    boolean onTransact(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) android.os.Parcel arg1, @Sink(SUSI_NETWORK) android.os.Parcel arg2, @Sink(SUSI_NETWORK) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class INetworkPolicyManager$Stub$Proxy{
    void registerListener(  @Sink(SUSI_NETWORK) android.net.INetworkPolicyListener arg0);
    void unregisterListener(  @Sink(SUSI_NETWORK) android.net.INetworkPolicyListener arg0);
    void setUidPolicy(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) int arg1);
    void setNetworkPolicies(  @Sink(SUSI_NETWORK) android.net.NetworkPolicy[] arg0);
    void setRestrictBackground(  @Sink(SUSI_NETWORK) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkPolicy[] getNetworkPolicies();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NETWORK_INFORMATION)  int getUidPolicy(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  boolean isUidForeground(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkQuotaInfo getNetworkQuotaInfo(  android.net.NetworkState arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int[] getUidsWithPolicy(  int arg0);
}
class INetworkStatsService$Stub{
    boolean onTransact(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) android.os.Parcel arg1, @Sink(SUSI_NETWORK) android.os.Parcel arg2, @Sink(SUSI_NETWORK) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class INetworkStatsService$Stub$Proxy{
    void advisePersistThreshold(  @Sink(SUSI_NETWORK) long arg0);
    void incrementOperationCount(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) int arg1, @Sink(SUSI_NETWORK) int arg2);
    void setUidForeground(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) boolean arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStats getDataLayerSnapshotForUid(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NETWORK_INFORMATION)  long getNetworkTotalBytes(  android.net.NetworkTemplate arg0, long arg1, long arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getMobileIfaces();
}
class INetworkStatsSession$Stub{
    boolean onTransact(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) android.os.Parcel arg1, @Sink(SUSI_NETWORK) android.os.Parcel arg2, @Sink(SUSI_NETWORK) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class INetworkStatsSession$Stub$Proxy{
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStatsHistory getHistoryForNetwork(  android.net.NetworkTemplate arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStats getSummaryForNetwork(  android.net.NetworkTemplate arg0, long arg1, long arg2);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStatsHistory getHistoryForUid(  android.net.NetworkTemplate arg0, int arg1, int arg2, int arg3, int arg4);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStats getSummaryForAllUid(  android.net.NetworkTemplate arg0, long arg1, long arg2, boolean arg3);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class IThrottleManager$Stub{
    boolean onTransact(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) android.os.Parcel arg1, @Sink(SUSI_NETWORK) android.os.Parcel arg2, @Sink(SUSI_NETWORK) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IThrottleManager$Stub$Proxy{
   @Source(SUSI_NETWORK_INFORMATION)  long getPeriodStartTime(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NETWORK_INFORMATION)  long getCliffThreshold(  java.lang.String arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getCliffLevel(  java.lang.String arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  long getByteCount(  java.lang.String arg0, int arg1, int arg2, int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  long getResetTime(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getHelpUri();
   @Source(SUSI_NETWORK_INFORMATION)  int getThrottle(  java.lang.String arg0);
}
class InterfaceConfiguration{
    void writeToParcel(  @Sink(SUSI_NETWORK) android.os.Parcel arg0, @Sink(SUSI_NETWORK) int arg1);
    void setFlag(  @Sink(SUSI_NETWORK) java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LinkAddress getLinkAddress();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getHardwareAddress();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Iterable getFlags();
}
class LinkAddress{
   @Source(SUSI_NETWORK_INFORMATION)  int getNetworkPrefixLength();
   @Source(SUSI_NETWORK_INFORMATION)  java.net.InetAddress getAddress();
}
class LinkCapabilities{
    void put(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String get(  int arg0);
}
class LinkCapabilities$1{
    android.net.LinkCapabilities createFromParcel(  @Sink(SUSI_NETWORK) android.os.Parcel arg0);
}
class LinkProperties{
    void writeToParcel(  @Sink(SUSI_NETWORK) android.os.Parcel arg0, @Sink(SUSI_NETWORK) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.ProxyProperties getHttpProxy();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Collection getAddresses();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Collection getRoutes();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Collection getDnses();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceName();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Collection getLinkAddresses();
}
class LinkProperties$1{
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LinkProperties createFromParcel(  android.os.Parcel arg0);
}
class LocalServerSocket{
   @Source(SUSI_NETWORK_INFORMATION)  java.io.FileDescriptor getFileDescriptor();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LocalSocketAddress getLocalSocketAddress();
}
class LocalSocket{
    void setSoTimeout(  @Sink(SUSI_NETWORK) int arg0);
    void setReceiveBufferSize(  @Sink(SUSI_NETWORK) int arg0);
    void setSendBufferSize(  @Sink(SUSI_NETWORK) int arg0);
    void setFileDescriptorsForSend(  @Sink(SUSI_FILE) java.io.FileDescriptor[] arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LocalSocketAddress getRemoteSocketAddress();
   @Source(SUSI_NETWORK_INFORMATION)  java.io.FileDescriptor getFileDescriptor();
   @Source(SUSI_NETWORK_INFORMATION)  java.io.InputStream getInputStream();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.Credentials getPeerCredentials();
   @Source(SUSI_NETWORK_INFORMATION)  int getSendBufferSize();
   @Source(SUSI_NETWORK_INFORMATION)  java.io.OutputStream getOutputStream();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LocalSocketAddress getLocalSocketAddress();
   @Source(SUSI_NETWORK_INFORMATION)  int getReceiveBufferSize();
   @Source(SUSI_NETWORK_INFORMATION)  java.io.FileDescriptor[] getAncillaryFileDescriptors();
   @Source(SUSI_NETWORK_INFORMATION)  int getSoTimeout();
}
class LocalSocketAddress{
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LocalSocketAddress$Namespace getNamespace();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getName();
}
class LocalSocketAddress$Namespace{
   @Source(SUSI_NO_CATEGORY)  int getId();
}
class LocalSocketImpl{
    void setFileDescriptorsForSend(  @Sink(SUSI_FILE) java.io.FileDescriptor[] arg0);
    void bind(  @Sink(SUSI_FILE) android.net.LocalSocketAddress arg0);
    void access$600(  @Sink(SUSI_FILE) android.net.LocalSocketImpl arg0, @Sink(SUSI_FILE) byte[] arg1, @Sink(SUSI_FILE) int arg2, @Sink(SUSI_FILE) int arg3, @Sink(SUSI_FILE) java.io.FileDescriptor arg4);
    void setOption(  @Sink(SUSI_FILE) int arg0, @Sink(SUSI_FILE) java.lang.Object arg1);
    void access$700(  @Sink(SUSI_FILE) android.net.LocalSocketImpl arg0, @Sink(SUSI_FILE) int arg1, @Sink(SUSI_FILE) java.io.FileDescriptor arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object getOption(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.io.FileDescriptor[] getAncillaryFileDescriptors();
   @Source(SUSI_NETWORK_INFORMATION)  java.io.OutputStream getOutputStream();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LocalSocketAddress getSockAddress();
   @Source(SUSI_NETWORK_INFORMATION)  java.io.FileDescriptor getFileDescriptor();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.Credentials getPeerCredentials();
   @Source(SUSI_NETWORK_INFORMATION)  java.io.InputStream getInputStream();
}
class LocalSocketImpl$SocketOutputStream{
    void write(  @Sink(SUSI_NETWORK) byte[] arg0);
}
class MobileDataStateTracker{
    boolean setRadio(  @Sink(SUSI_NETWORK) boolean arg0);
    void setDependencyMet(  @Sink(SUSI_NETWORK) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LinkProperties getLinkProperties();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkInfo getNetworkInfo();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getTcpBufferSizesPropName();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LinkCapabilities getLinkCapabilities();
}
class NetworkIdentity{
   @Source(SUSI_NETWORK_INFORMATION)  boolean getRoaming();
   @Source(SUSI_NETWORK_INFORMATION)  int getSubType();
   @Source(SUSI_NETWORK_INFORMATION)  int getType();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getSubscriberId();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNetworkId();
}
class NetworkInfo{
   @Source(SUSI_NETWORK_INFORMATION)  int getSubtype();
   @Source(SUSI_NETWORK_INFORMATION)  int getType();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkInfo$State getState();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getTypeName();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getSubtypeName();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkInfo$DetailedState getDetailedState();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getExtraInfo();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getReason();
}
class NetworkPolicy{
    void writeToParcel(  @Sink(SUSI_NETWORK) android.os.Parcel arg0, @Sink(SUSI_NETWORK) int arg1);
}
class NetworkPolicyManager{
    void setRestrictBackground(  @Sink(SUSI_NETWORK) boolean arg0);
    void setNetworkPolicies(  @Sink(SUSI_NETWORK) android.net.NetworkPolicy[] arg0);
    void setUidPolicy(  @Sink(SUSI_NETWORK) int arg0, @Sink(SUSI_NETWORK) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getUidPolicy(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  boolean getRestrictBackground();
   @Source(SUSI_NETWORK_INFORMATION)  long computeNextCycleBoundary(  long arg0, android.net.NetworkPolicy arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int[] getUidsWithPolicy(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  long computeLastCycleBoundary(  long arg0, android.net.NetworkPolicy arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkPolicy[] getNetworkPolicies();
}
class NetworkQuotaInfo{
   @Source(SUSI_NETWORK_INFORMATION)  long getEstimatedBytes();
   @Source(SUSI_NETWORK_INFORMATION)  long getSoftLimitBytes();
   @Source(SUSI_NETWORK_INFORMATION)  long getHardLimitBytes();
}
class NetworkState{
    void writeToParcel(  @Sink(SUSI_NETWORK) android.os.Parcel arg0, @Sink(SUSI_NETWORK) int arg1);
}
class NetworkStats{
    void dump(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) java.io.PrintWriter arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStats$Entry getTotal(  android.net.NetworkStats$Entry arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStats$Entry getTotal(  android.net.NetworkStats$Entry arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  long getElapsedRealtimeAge();
   @Source(SUSI_NETWORK_INFORMATION)  long getElapsedRealtime();
   @Source(SUSI_NETWORK_INFORMATION)  long getTotalBytes();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStats$Entry getTotal(  android.net.NetworkStats$Entry arg0, java.util.HashSet arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStats$Entry getTotalIncludingTags(  android.net.NetworkStats$Entry arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int[] getUniqueUids();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getUniqueIfaces();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStats$Entry getValues(  int arg0, android.net.NetworkStats$Entry arg1);
}
class NetworkStatsHistory{
    void writeToParcel(  @Sink(SUSI_NETWORK) android.os.Parcel arg0, @Sink(SUSI_NETWORK) int arg1);
    void writeToStream(  @Sink(SUSI_NETWORK) java.io.DataOutputStream arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStatsHistory$Entry getValues(  int arg0, android.net.NetworkStatsHistory$Entry arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStatsHistory$Entry getValues(  long arg0, long arg1, long arg2, android.net.NetworkStatsHistory$Entry arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkStatsHistory$Entry getValues(  long arg0, long arg1, android.net.NetworkStatsHistory$Entry arg2);
   @Source(SUSI_NETWORK_INFORMATION)  int getIndexBefore(  long arg0);
   @Source(SUSI_NETWORK_INFORMATION)  long getTotalBytes();
   @Source(SUSI_NETWORK_INFORMATION)  long getStart();
   @Source(SUSI_NETWORK_INFORMATION)  long getEnd();
   @Source(SUSI_NETWORK_INFORMATION)  int getIndexAfter(  long arg0);
   @Source(SUSI_NETWORK_INFORMATION)  long getBucketDuration();
}
class NetworkStatsHistory$DataStreamUtils{
    void writeVarLong(  @Sink(SUSI_NETWORK) java.io.DataOutputStream arg0, @Sink(SUSI_NETWORK) long arg1);
    void writeVarLongArray(  @Sink(SUSI_NETWORK) java.io.DataOutputStream arg0, @Sink(SUSI_NETWORK) long[] arg1, @Sink(SUSI_NETWORK) int arg2);
}
class NetworkStatsHistory$ParcelUtils{
    void writeLongArray(  @Sink(SUSI_NETWORK) android.os.Parcel arg0, @Sink(SUSI_NETWORK) long[] arg1, @Sink(SUSI_NETWORK) int arg2);
}
class NetworkTemplate{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getSubscriberId();
   @Source(SUSI_NETWORK_INFORMATION)  int getMatchRule();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNetworkId();
}
class NetworkUtils{
   @Source(SUSI_NETWORK_INFORMATION)  java.net.InetAddress getNetworkPart(  java.net.InetAddress arg0, int arg1);
}
class Proxy{
    void setHttpProxySystemProperty(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) java.lang.String arg1, @Sink(SUSI_NETWORK) java.lang.String arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getHost(  android.content.Context arg0);
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.HttpHost getPreferredHttpHost(  android.content.Context arg0, java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.net.Proxy getProxy(  android.content.Context arg0, java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getDefaultHost();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.conn.routing.HttpRoutePlanner getAndroidProxySelectorRoutePlanner(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class ProxyProperties{
   @Source(SUSI_NETWORK_INFORMATION)  java.net.InetSocketAddress getSocketAddress();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getExclusionList();
   @Source(SUSI_NETWORK_INFORMATION)  int getPort();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getHost();
}
class RouteInfo{
   @Source(SUSI_NETWORK_INFORMATION)  java.net.InetAddress getGateway();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.LinkAddress getDestination();
}
class SSLCertificateSocketFactory{
    void setUseSessionTickets(  @Sink(SUSI_NETWORK) java.net.Socket arg0, @Sink(SUSI_NETWORK) boolean arg1);
    void setHostname(  @Sink(SUSI_NETWORK) java.net.Socket arg0, @Sink(SUSI_NETWORK) java.lang.String arg1);
    void setSoWriteTimeout(  @Sink(SUSI_NETWORK) java.net.Socket arg0, @Sink(SUSI_NETWORK) int arg1);
    void setNpnProtocols(  @Sink(SUSI_NETWORK) byte[][] arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.net.Socket createSocket(  java.net.InetAddress arg0, int arg1, java.net.InetAddress arg2, int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getSupportedCipherSuites();
   @Source(SUSI_NETWORK_INFORMATION)  java.net.Socket createSocket(  java.net.Socket arg0, java.lang.String arg1, int arg2, boolean arg3);
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.conn.ssl.SSLSocketFactory getHttpSocketFactory(  int arg0, android.net.SSLSessionCache arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.net.Socket createSocket();
   @Source(SUSI_NETWORK_INFORMATION)  java.net.Socket createSocket(  java.net.InetAddress arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLSocketFactory getDefault(  int arg0, android.net.SSLSessionCache arg1);
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getNpnSelectedProtocol(  java.net.Socket arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getDefaultCipherSuites();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.SocketFactory getDefault(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  byte[] toNpnProtocolsList(  byte[][] arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.net.Socket createSocket(  java.lang.String arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.net.Socket createSocket(  java.lang.String arg0, int arg1, java.net.InetAddress arg2, int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLSocketFactory getInsecure(  int arg0, android.net.SSLSessionCache arg1);
}
class SSLCertificateSocketFactory$1{
   @Source(SUSI_NETWORK_INFORMATION)  java.security.cert.X509Certificate[] getAcceptedIssuers();
}
class SntpClient{
    boolean requestTime(  @Sink(SUSI_NETWORK) java.lang.String arg0, @Sink(SUSI_NETWORK) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  long getNtpTimeReference();
   @Source(SUSI_NETWORK_INFORMATION)  long getNtpTime();
   @Source(SUSI_NETWORK_INFORMATION)  long getRoundTripTime();
}
class ThrottleManager{
   @Source(SUSI_NETWORK_INFORMATION)  long getResetTime(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getCliffLevel(  java.lang.String arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  long getByteCount(  java.lang.String arg0, int arg1, int arg2, int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getHelpUri();
   @Source(SUSI_NETWORK_INFORMATION)  long getCliffThreshold(  java.lang.String arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  long getPeriodStartTime(  java.lang.String arg0);
}
class TrafficStats{
    void setThreadStatsUid(  @Sink(SUSI_NETWORK) int arg0);
    void setThreadStatsTag(  @Sink(SUSI_NETWORK) int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  long getMobileRxPackets();
   @Source(SUSI_NETWORK_INFORMATION)  int getThreadStatsTag();
   @Source(SUSI_NETWORK_INFORMATION)  long getTxPackets(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  long getTotalRxBytes();
   @Source(SUSI_NETWORK_INFORMATION)  long getRxPackets(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  long getTotalRxPackets();
   @Source(SUSI_NETWORK_INFORMATION)  long getMobileTxBytes();
   @Source(SUSI_NETWORK_INFORMATION)  long getTxBytes(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  long getMobileRxBytes();
   @Source(SUSI_NETWORK_INFORMATION)  long getMobileTxPackets();
   @Source(SUSI_NETWORK_INFORMATION)  long getRxBytes(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  long getTotalTxPackets();
   @Source(SUSI_NETWORK_INFORMATION)  long getTotalTxBytes();
}
class Uri{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String access$600();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getBooleanQueryParameter(  java.lang.String arg0, boolean arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String access$300();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getQueryParameter(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getQueryParameters(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Set getQueryParameterNames();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toSafeString();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.Uri normalizeScheme();
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getCanonicalUri();
}
class Uri$AbstractHierarchicalUri{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getHost();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getUserInfo();
   @Source(SUSI_NETWORK_INFORMATION)  int getPort();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getLastPathSegment();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncodedUserInfo();
}
class Uri$AbstractPart{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getDecoded();
}
class Uri$Builder{
   @Source(SUSI_NETWORK_INFORMATION)  android.net.Uri$Builder clearQuery();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.Uri$Builder encodedQuery(  java.lang.String arg0);
}
class Uri$HierarchicalUri{
    void writeToParcel(  @Sink(SUSI_NETWORK) android.os.Parcel arg0, @Sink(SUSI_NETWORK) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.net.Uri$Builder buildUpon();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getQuery();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncodedAuthority();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getPathSegments();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getScheme();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncodedSchemeSpecificPart();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getSchemeSpecificPart();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncodedFragment();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPath();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncodedQuery();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncodedPath();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getFragment();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAuthority();
}
class Uri$OpaqueUri{
    void writeToParcel(  @Sink(SUSI_NETWORK) android.os.Parcel arg0, @Sink(SUSI_NETWORK) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncodedAuthority();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncodedSchemeSpecificPart();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getPathSegments();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getQuery();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getHost();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAuthority();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPath();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getLastPathSegment();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncodedPath();
   @Source(SUSI_NETWORK_INFORMATION)  int getPort();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getScheme();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncodedQuery();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getFragment();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getSchemeSpecificPart();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncodedUserInfo();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncodedFragment();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getUserInfo();
}
class Uri$Part{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncoded();
}
class Uri$PathPart{
   @Source(SUSI_NETWORK_INFORMATION)  android.net.Uri$PathSegments getPathSegments();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncoded();
}
class Uri$PathSegments{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object get(  int arg0);
}
class Uri$PathSegmentsBuilder{
   @Source(SUSI_NETWORK_INFORMATION)  android.net.Uri$PathSegments build();
}
class Uri$StringUri{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPath();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncodedQuery();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncodedFragment();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getSchemeSpecificPart();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncodedAuthority();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getScheme();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncodedSchemeSpecificPart();
   @Source(SUSI_NETWORK_INFORMATION)  android.net.Uri$Builder buildUpon();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAuthority();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getPathSegments();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEncodedPath();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getQuery();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getFragment();
}
class WebAddress{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getHost();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPath();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAuthInfo();
   @Source(SUSI_NETWORK_INFORMATION)  int getPort();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getScheme();
}

package javax.crypto.spec;

class DHParameterSpec{
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getP();
   @Source(SUSI_NO_CATEGORY)  int getL();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getG();
}
class DHPublicKeySpec{
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getY();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getP();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getG();
}
class IvParameterSpec{
   @Source(SUSI_NO_CATEGORY)  byte[] getIV();
}
class PBEKeySpec{
   @Source(SUSI_NO_CATEGORY)  int getKeyLength();
   @Source(SUSI_NO_CATEGORY)  byte[] getSalt();
   @Source(SUSI_NO_CATEGORY)  char[] getPassword();
   @Source(SUSI_NO_CATEGORY)  int getIterationCount();
}
class SecretKeySpec{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlgorithm();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFormat();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
}

package com.android.commands.monkey;

class Monkey$ActivityController{
   @Source(SUSI_NO_CATEGORY)  boolean appCrashed(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) long arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5);
   @Source(SUSI_NO_CATEGORY)  int appNotResponding(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  boolean activityStarting(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  boolean activityResuming(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class MonkeyEvent{
   @Source(SUSI_NO_CATEGORY)  int getEventType();
}
class MonkeyKeyEvent{
   @Source(SUSI_NO_CATEGORY)  int getAction();
   @Source(SUSI_NO_CATEGORY)  int getKeyCode();
   @Source(SUSI_NO_CATEGORY)  long getDownTime();
   @Source(SUSI_NO_CATEGORY)  long getEventTime();
}
class MonkeyMotionEvent{
   @Source(SUSI_NO_CATEGORY)  long getDownTime();
   @Source(SUSI_NO_CATEGORY)  long getEventTime();
   @Source(SUSI_NO_CATEGORY)  boolean getIntermediateNote();
   @Source(SUSI_NO_CATEGORY)  int getAction();
}
class MonkeySourceNetwork{
    void setVerbose(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.commands.monkey.MonkeyEvent getNextEvent();
}
class MonkeySourceNetwork$CommandQueueImpl{
   @Source(SUSI_NO_CATEGORY)  com.android.commands.monkey.MonkeyEvent getNextQueuedEvent();
}
class MonkeySourceNetwork$MonkeyCommandReturn{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
}
class MonkeySourceNetworkVars$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.String get();
}
class MonkeySourceNetworkVars$10{
   @Source(SUSI_NO_CATEGORY)  java.lang.String get();
}
class MonkeySourceNetworkVars$2{
   @Source(SUSI_NO_CATEGORY)  java.lang.String get();
}
class MonkeySourceNetworkVars$3{
   @Source(SUSI_NO_CATEGORY)  java.lang.String get();
}
class MonkeySourceNetworkVars$4{
   @Source(SUSI_NO_CATEGORY)  java.lang.String get();
}
class MonkeySourceNetworkVars$5{
   @Source(SUSI_NO_CATEGORY)  java.lang.String get();
}
class MonkeySourceNetworkVars$6{
   @Source(SUSI_NO_CATEGORY)  java.lang.String get();
}
class MonkeySourceNetworkVars$7{
   @Source(SUSI_NO_CATEGORY)  java.lang.String get();
}
class MonkeySourceNetworkVars$8{
   @Source(SUSI_NO_CATEGORY)  java.lang.String get();
}
class MonkeySourceNetworkVars$9{
   @Source(SUSI_NO_CATEGORY)  java.lang.String get();
}
class MonkeySourceNetworkVars$StaticVarGetter{
   @Source(SUSI_NO_CATEGORY)  java.lang.String get();
}
class MonkeySourceNetworkViews$GetChildren{
   @Source(SUSI_NO_CATEGORY)  com.android.commands.monkey.MonkeySourceNetwork$MonkeyCommandReturn query(  @Sink(SUSI_NO_CATEGORY) android.view.accessibility.AccessibilityNodeInfo arg0, @Sink(SUSI_NO_CATEGORY) java.util.List arg1);
}
class MonkeySourceNetworkViews$GetViewsWithTextCommand{
   @Source(SUSI_NO_CATEGORY)  com.android.commands.monkey.MonkeySourceNetwork$MonkeyCommandReturn translateCommand(  @Sink(SUSI_NO_CATEGORY) java.util.List arg0, @Sink(SUSI_NO_CATEGORY) com.android.commands.monkey.MonkeySourceNetwork$CommandQueue arg1);
}
class MonkeySourceNetworkViews$QueryViewCommand{
   @Source(SUSI_NO_CATEGORY)  com.android.commands.monkey.MonkeySourceNetwork$MonkeyCommandReturn translateCommand(  @Sink(SUSI_NO_CATEGORY) java.util.List arg0, @Sink(SUSI_NO_CATEGORY) com.android.commands.monkey.MonkeySourceNetwork$CommandQueue arg1);
}
class MonkeySourceRandom{
    void setFactors(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setFactors(  @Sink(SUSI_NO_CATEGORY) float[] arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.commands.monkey.MonkeyEvent getNextEvent();
   @Source(SUSI_NO_CATEGORY)  int getKeyCode(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getKeyName(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class MonkeySourceRandomScript{
   @Source(SUSI_NO_CATEGORY)  com.android.commands.monkey.MonkeyEvent getNextEvent();
}
class MonkeySourceScript{
   @Source(SUSI_NO_CATEGORY)  com.android.commands.monkey.MonkeyEvent getNextEvent();
}
class MonkeyTouchEvent{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTypeLabel();
}
class MonkeyTrackballEvent{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTypeLabel();
}

package com.android.bluetooth.hdp;

class HealthService{
    boolean registerAppConfiguration(  @Sink(SUSI_BLUETOOTH) android.bluetooth.BluetoothHealthAppConfiguration arg0, @Sink(SUSI_BLUETOOTH) android.bluetooth.IBluetoothHealthCallback arg1);
   @Source(SUSI_BLUETOOTH_INFORMATION)  com.android.bluetooth.btservice.ProfileService$IProfileServiceBinder initBinder();
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.lang.String getName();
   @Source(SUSI_BLUETOOTH_INFORMATION)  int getHealthDeviceConnectionState(  android.bluetooth.BluetoothDevice arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getHealthDevicesMatchingConnectionStates(  int[] arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List lookupHealthDevicesMatchingStates(  int[] arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.ParcelFileDescriptor getMainChannelFd(  android.bluetooth.BluetoothDevice arg0, android.bluetooth.BluetoothHealthAppConfiguration arg1);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getConnectedHealthDevices();
}
class HealthService$BluetoothHealthBinder{
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getHealthDevicesMatchingConnectionStates(  int[] arg0);
   @Source(SUSI_BLUETOOTH_INFORMATION)  java.util.List getConnectedHealthDevices();
   @Source(SUSI_BLUETOOTH_INFORMATION)  android.os.ParcelFileDescriptor getMainChannelFd(  android.bluetooth.BluetoothDevice arg0, android.bluetooth.BluetoothHealthAppConfiguration arg1);
}

package android.speech;

class IRecognitionListener$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IRecognitionListener$Stub$Proxy{
    void onEvent(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void onRmsChanged(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void onBufferReceived(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
    void onError(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IRecognitionService$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IRecognitionService$Stub$Proxy{
    void startListening(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.speech.IRecognitionListener arg1);
    void stopListening(  @Sink(SUSI_NO_CATEGORY) android.speech.IRecognitionListener arg0);
    void cancel(  @Sink(SUSI_NO_CATEGORY) android.speech.IRecognitionListener arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class RecognitionService$RecognitionServiceBinder{
    void startListening(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.speech.IRecognitionListener arg1);
}
class SpeechRecognizer{
    void startListening(  @Sink(SUSI_LOG) android.content.Intent arg0);
    void setRecognitionListener(  @Sink(SUSI_NO_CATEGORY) android.speech.RecognitionListener arg0);
   @Source(SUSI_NO_CATEGORY)  android.speech.SpeechRecognizer createSpeechRecognizer(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}

package java.security.cert;

class CRL{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType();
}
class CertPath{
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object writeReplace();
}
class CertPathValidator{
   @Source(SUSI_NO_CATEGORY)  java.security.cert.CertPathValidator getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.security.cert.CertPathValidator getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.security.Provider arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlgorithm();
   @Source(SUSI_NO_CATEGORY)  java.security.cert.CertPathValidator getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.security.Provider getProvider();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDefaultType();
}
class CertPathValidatorException{
   @Source(SUSI_NO_CATEGORY)  java.security.cert.CertPath getCertPath();
   @Source(SUSI_NO_CATEGORY)  int getIndex();
}
class CertStore{
   @Source(SUSI_NO_CATEGORY)  java.security.cert.CertStoreParameters getCertStoreParameters();
   @Source(SUSI_NO_CATEGORY)  java.security.cert.CertStore getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.security.cert.CertStoreParameters arg1, @Sink(SUSI_NO_CATEGORY) java.security.Provider arg2);
   @Source(SUSI_NO_CATEGORY)  java.security.cert.CertStore getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.security.cert.CertStoreParameters arg1);
   @Source(SUSI_NO_CATEGORY)  java.security.Provider getProvider();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getCertificates(  @Sink(SUSI_NO_CATEGORY) java.security.cert.CertSelector arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getCRLs(  @Sink(SUSI_NO_CATEGORY) java.security.cert.CRLSelector arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDefaultType();
   @Source(SUSI_NO_CATEGORY)  java.security.cert.CertStore getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.security.cert.CertStoreParameters arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
}
class Certificate{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object writeReplace();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType();
}
class CertificateFactory{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType();
   @Source(SUSI_NO_CATEGORY)  java.security.Provider getProvider();
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator getCertPathEncodings();
}
class CertificateFactorySpi{
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator engineGetCertPathEncodings();
}
class PKIXCertPathChecker{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
}
class PKIXParameters{
    void setDate(  @Sink(SUSI_NO_CATEGORY) java.util.Date arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Date getDate();
   @Source(SUSI_NO_CATEGORY)  java.util.List getCertPathCheckers();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSigProvider();
   @Source(SUSI_NO_CATEGORY)  java.util.List getCertStores();
   @Source(SUSI_NO_CATEGORY)  java.security.cert.CertSelector getTargetCertConstraints();
   @Source(SUSI_NO_CATEGORY)  java.util.Set getInitialPolicies();
   @Source(SUSI_NO_CATEGORY)  boolean getPolicyQualifiersRejected();
   @Source(SUSI_NO_CATEGORY)  java.util.Set getTrustAnchors();
}
class TrustAnchor{
   @Source(SUSI_NO_CATEGORY)  java.security.PublicKey getCAPublicKey();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCAName();
   @Source(SUSI_NO_CATEGORY)  byte[] getNameConstraints();
   @Source(SUSI_NO_CATEGORY)  java.security.cert.X509Certificate getTrustedCert();
   @Source(SUSI_NO_CATEGORY)  javax.security.auth.x500.X500Principal getCA();
}
class X509Certificate{
   @Source(SUSI_NO_CATEGORY)  javax.security.auth.x500.X500Principal getIssuerX500Principal();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getSubjectAlternativeNames();
   @Source(SUSI_NO_CATEGORY)  javax.security.auth.x500.X500Principal getSubjectX500Principal();
   @Source(SUSI_NO_CATEGORY)  java.util.List getExtendedKeyUsage();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getIssuerAlternativeNames();
}

package com.android.deskclock.stopwatch;

class StopwatchFragment$ImageLabelAdapter{
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.deskclock.stopwatch.StopwatchFragment$ImageLabelAdapter getShowAllAdapter();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getClassName(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPackageName(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class StopwatchFragment$LapsListAdapter{
    void setLapTimes(  @Sink(SUSI_NO_CATEGORY) long[] arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  long[] getLapTimes();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  long getItemId(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class StopwatchService{
   @Source(SUSI_NO_CATEGORY)  int onStartCommand(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class Stopwatches{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getShareTitle(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTimeText(  @Sink(SUSI_NO_CATEGORY) long arg0);
}

package com.google.android.gms.panorama.internal;

class IPanoramaCallbacks$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IPanoramaCallbacks$Stub$Proxy{
    void onPanoramaInfoLoaded(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg3);
}
class PanoramaClientImpl{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getStartServiceAction();
   @Source(SUSI_NO_CATEGORY)  android.os.IInterface createServiceInterface(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getServiceDescriptor();
}

package android.content;

class AbstractThreadedSyncAdapter{
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.os.IBinder getSyncAdapterBinder();
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
}
class AbstractThreadedSyncAdapter$ISyncAdapterImpl{
    void startSync(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.content.ISyncContext arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg2, @Sink(SUSI_SYNCHRONIZATION_DATA) android.os.Bundle arg3);
    void initialize(  @Sink(SUSI_NO_CATEGORY) android.accounts.Account arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class AsyncQueryHandler{
   @Source(SUSI_NO_CATEGORY)  android.os.Handler createHandler(  @Sink(SUSI_NO_CATEGORY) android.os.Looper arg0);
}
class AsyncTaskLoader{
    void dump(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) java.io.FileDescriptor arg1, @Sink(SUSI_FILE) java.io.PrintWriter arg2, @Sink(SUSI_FILE) java.lang.String[] arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object onLoadInBackground();
}
class BroadcastReceiver{
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.content.BroadcastReceiver$PendingResult goAsync();
   @Source(SUSI_NO_CATEGORY)  boolean getAbortBroadcast();
   @Source(SUSI_NO_CATEGORY)  int getSendingUserId();
   @Source(SUSI_NO_CATEGORY)  android.content.BroadcastReceiver$PendingResult getPendingResult();
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder peekService(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1);
   @Source(SUSI_NO_CATEGORY)  int getResultCode();
   @Source(SUSI_NO_CATEGORY)  boolean getDebugUnregister();
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle getResultExtras(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getResultData();
}
class BroadcastReceiver$PendingResult{
    void setExtrasClassLoader(  @Sink(SUSI_NO_CATEGORY) java.lang.ClassLoader arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle getResultExtras(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int getResultCode();
   @Source(SUSI_NO_CATEGORY)  int getSendingUserId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getResultData();
   @Source(SUSI_NO_CATEGORY)  boolean getAbortBroadcast();
}
class ClipData{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getItemCount();
   @Source(SUSI_NO_CATEGORY)  android.content.ClipData$Item getItemAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.ClipDescription getDescription();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getIcon();
}
class ClipData$Item{
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getUri();
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getIntent();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getText();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHtmlText();
}
class ClipDescription{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMimeType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getMimeTypeCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getLabel();
}
class ClipboardManager{
    void setText(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg0);
    void setPrimaryClip(  @Sink(SUSI_NO_CATEGORY) android.content.ClipData arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.ClipData getPrimaryClip();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getText();
   @Source(SUSI_NO_CATEGORY)  android.content.ClipDescription getPrimaryClipDescription();
}
class ComponentName{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getClassName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getShortClassName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPackageName();
}
class ContentProvider{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
   @Source(SUSI_NO_CATEGORY)  android.content.pm.PathPermission[] getPathPermissions();
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor query(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) android.os.CancellationSignal arg5);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getReadPermission();
   @Source(SUSI_NO_CATEGORY)  android.content.IContentProvider getIContentProvider();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getStreamTypes(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.os.ParcelFileDescriptor openPipeHelper(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg3, @Sink(SUSI_NO_CATEGORY) android.content.ContentProvider$PipeDataWriter arg4);
   @Source(SUSI_NO_CATEGORY)  int bulkInsert(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) android.content.ContentValues[] arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getWritePermission();
   @Source(SUSI_NO_CATEGORY)  android.content.res.AssetFileDescriptor openTypedAssetFile(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
   @Source(SUSI_NO_CATEGORY)  android.os.ParcelFileDescriptor openFileHelper(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class ContentProvider$Transport{
   @Source(SUSI_NO_CATEGORY)  android.os.ICancellationSignal createCancellationSignal();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getStreamTypes(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor query(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) android.os.ICancellationSignal arg5);
   @Source(SUSI_NO_CATEGORY)  android.content.ContentProvider getContentProvider();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProviderName();
}
class ContentProviderClient{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor query(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getStreamTypes(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.ContentProvider getLocalContentProvider();
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor query(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) android.os.CancellationSignal arg5);
   @Source(SUSI_NO_CATEGORY)  android.net.Uri insert(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) android.content.ContentValues arg1);
}
class ContentProviderNative{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class ContentProviderOperation{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getUri();
   @Source(SUSI_NO_CATEGORY)  int getType();
   @Source(SUSI_NO_CATEGORY)  android.content.ContentProviderResult apply(  @Sink(SUSI_NO_CATEGORY) android.content.ContentProvider arg0, @Sink(SUSI_NO_CATEGORY) android.content.ContentProviderResult[] arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class ContentProviderOperation$Builder{
   @Source(SUSI_NO_CATEGORY)  android.content.ContentProviderOperation$Builder withSelectionBackReference(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.ContentProviderOperation$Builder withValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.ContentProviderOperation$Builder withValues(  @Sink(SUSI_NO_CATEGORY) android.content.ContentValues arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.ContentProviderOperation$Builder withValueBackReference(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class ContentProviderProxy{
    android.content.res.AssetFileDescriptor openTypedAssetFile(  @Sink(SUSI_FILE) android.net.Uri arg0, @Sink(SUSI_FILE) java.lang.String arg1, @Sink(SUSI_FILE) android.os.Bundle arg2);
    android.content.res.AssetFileDescriptor openAssetFile(  @Sink(SUSI_FILE) android.net.Uri arg0, @Sink(SUSI_FILE) java.lang.String arg1);
    android.os.ParcelFileDescriptor openFile(  @Sink(SUSI_FILE) android.net.Uri arg0, @Sink(SUSI_FILE) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.ContentProviderResult[] applyBatch(  @Sink(SUSI_NO_CATEGORY) java.util.ArrayList arg0);
   @Source(SUSI_NO_CATEGORY)  int delete(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg2);
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle call(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
   @Source(SUSI_NO_CATEGORY)  int update(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) android.content.ContentValues arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3);
   @Source(SUSI_NO_CATEGORY)  int bulkInsert(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) android.content.ContentValues[] arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
   @Source(SUSI_NO_CATEGORY)  android.net.Uri insert(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) android.content.ContentValues arg1);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor query(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) android.os.ICancellationSignal arg5);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getStreamTypes(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class ContentProviderResult{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class ContentResolver{
    void setIsSyncable(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) int arg2);
    void setSyncAutomatically(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) boolean arg2);
    void notifyChange(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) android.database.ContentObserver arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void notifyChange(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) android.database.ContentObserver arg1);
    void notifyChange(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) android.database.ContentObserver arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.util.List getCurrentSyncs();
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.content.SyncInfo getCurrentSync();
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.content.SyncAdapterType[] getSyncAdapterTypes();
   @Source(SUSI_SYNCHRONIZATION_DATA)  int getIsSyncable(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1);
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.content.SyncStatusInfo getSyncStatus(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1);
   @Source(SUSI_SYNCHRONIZATION_DATA)  boolean getSyncAutomatically(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1);
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.util.List getPeriodicSyncs(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.net.Uri insert(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) android.content.ContentValues arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.IContentProvider acquireExistingProvider(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor query(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) android.os.CancellationSignal arg5);
   @Source(SUSI_NO_CATEGORY)  android.content.IContentProvider acquireUnstableProvider(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream openInputStream(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.IContentService getContentService();
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor query(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4);
   @Source(SUSI_NO_CATEGORY)  android.content.ContentResolver$OpenResourceIdResult getResourceId(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.IContentProvider acquireProvider(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.OutputStream openOutputStream(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle call(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getStreamTypes(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class ContentService{
    void setSyncAutomatically(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) boolean arg2);
    void setIsSyncable(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) int arg2);
    void setMasterSyncAutomatically(  @Sink(SUSI_SYNCHRONIZATION_DATA) boolean arg0);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.lang.String[] arg1);
    void notifyChange(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) android.database.IContentObserver arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.content.SyncStatusInfo getSyncStatus(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1);
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.content.SyncAdapterType[] getSyncAdapterTypes();
   @Source(SUSI_SYNCHRONIZATION_DATA)  int getIsSyncable(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1);
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.util.List getCurrentSyncs();
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.util.List getPeriodicSyncs(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1);
}
class ContentService$ObserverNode{
    void dumpLocked(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2, @Sink(SUSI_FILE) java.lang.String arg3, @Sink(SUSI_FILE) java.lang.String arg4, @Sink(SUSI_FILE) int[] arg5, @Sink(SUSI_FILE) android.util.SparseIntArray arg6);
}
class ContentService$ObserverNode$ObserverEntry{
    void dumpLocked(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2, @Sink(SUSI_FILE) java.lang.String arg3, @Sink(SUSI_FILE) java.lang.String arg4, @Sink(SUSI_FILE) android.util.SparseIntArray arg5);
}
class ContentValues{
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Float arg1);
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Byte arg1);
    void putNull(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Integer arg1);
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Short arg1);
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Long arg1);
    void putAll(  @Sink(SUSI_NO_CATEGORY) android.content.ContentValues arg0);
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Boolean arg1);
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Double arg1);
    void putStringArrayList(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.ArrayList arg1);
    void put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAsString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Float getAsFloat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Double getAsDouble(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getStringArrayList(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Short getAsShort(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getAsByteArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Boolean getAsBoolean(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Byte getAsByte(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Integer getAsInteger(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Long getAsLong(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class Context{
   @Source(SUSI_NO_CATEGORY)  boolean bindService(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.content.ServiceConnection arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object[] arg1);
   @Source(SUSI_NO_CATEGORY)  int getThemeResId();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getText(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ContextWrapper{
    void setWallpaper(  @Sink(SUSI_ACCOUNT_SETTINGS) java.io.InputStream arg0);
    java.io.FileInputStream openFileInput(  @Sink(SUSI_FILE) java.lang.String arg0);
    java.io.FileOutputStream openFileOutput(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) int arg1);
    void sendStickyBroadcastAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg1);
    void sendOrderedBroadcastAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.content.BroadcastReceiver arg3, @Sink(SUSI_NO_CATEGORY) android.os.Handler arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) java.lang.String arg6, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg7);
    void startActivity(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void sendOrderedBroadcast(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void startActivities(  @Sink(SUSI_NO_CATEGORY) android.content.Intent[] arg0);
    void sendStickyOrderedBroadcast(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.content.BroadcastReceiver arg1, @Sink(SUSI_NO_CATEGORY) android.os.Handler arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg5);
    void startActivity(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
   @Source(SUSI_NO_CATEGORY)  android.database.sqlite.SQLiteDatabase openOrCreateDatabase(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.database.sqlite.SQLiteDatabase$CursorFactory arg2);
    void startIntentSender(  @Sink(SUSI_NO_CATEGORY) android.content.IntentSender arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg5);
    void startActivitiesAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Intent[] arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg2);
    void sendStickyBroadcast(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
    void setTheme(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void sendBroadcast(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
    void sendStickyOrderedBroadcastAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg1, @Sink(SUSI_NO_CATEGORY) android.content.BroadcastReceiver arg2, @Sink(SUSI_NO_CATEGORY) android.os.Handler arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg6);
    void sendBroadcastAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  boolean startInstrumentation(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
   @Source(SUSI_NO_CATEGORY)  boolean bindService(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.content.ServiceConnection arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setWallpaper(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName startService(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
    void sendOrderedBroadcast(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.content.BroadcastReceiver arg2, @Sink(SUSI_NO_CATEGORY) android.os.Handler arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg6);
    void startActivities(  @Sink(SUSI_NO_CATEGORY) android.content.Intent[] arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void startIntentSender(  @Sink(SUSI_NO_CATEGORY) android.content.IntentSender arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
    void sendBroadcast(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void startActivityAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName startServiceAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg1);
    void sendBroadcastAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg1);
    void startActivityAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg2);
   @Source(SUSI_NO_CATEGORY)  boolean bindService(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.content.ServiceConnection arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.database.sqlite.SQLiteDatabase openOrCreateDatabase(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.database.sqlite.SQLiteDatabase$CursorFactory arg2, @Sink(SUSI_NO_CATEGORY) android.database.DatabaseErrorHandler arg3);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ApplicationInfo getApplicationInfo();
   @Source(SUSI_NO_CATEGORY)  int getWallpaperDesiredMinimumWidth();
   @Source(SUSI_NO_CATEGORY)  android.content.res.Resources getResources();
   @Source(SUSI_NO_CATEGORY)  android.view.CompatibilityInfoHolder getCompatibilityInfo(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.File getDatabasePath(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.res.AssetManager getAssets();
   @Source(SUSI_NO_CATEGORY)  android.content.SharedPreferences getSharedPreferences(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.io.File getExternalFilesDir(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.Context createPackageContext(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.ClassLoader getClassLoader();
   @Source(SUSI_NO_CATEGORY)  java.io.File getDir(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.res.Resources$Theme getTheme();
   @Source(SUSI_NO_CATEGORY)  java.io.File getObbDir();
   @Source(SUSI_NO_CATEGORY)  java.io.File getFilesDir();
   @Source(SUSI_NO_CATEGORY)  android.content.ContentResolver getContentResolver();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPackageResourcePath();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPackageCodePath();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getSystemService(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.File getExternalCacheDir();
   @Source(SUSI_NO_CATEGORY)  android.content.Context createPackageContextAsUser(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.Context getBaseContext();
   @Source(SUSI_NO_CATEGORY)  android.content.Context getApplicationContext();
   @Source(SUSI_NO_CATEGORY)  int getWallpaperDesiredMinimumHeight();
   @Source(SUSI_NO_CATEGORY)  android.content.Context createDisplayContext(  @Sink(SUSI_NO_CATEGORY) android.view.Display arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.File getFileStreamPath(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getWallpaper();
   @Source(SUSI_NO_CATEGORY)  java.io.File getSharedPrefsFile(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getThemeResId();
   @Source(SUSI_NO_CATEGORY)  android.content.Context createConfigurationContext(  @Sink(SUSI_NO_CATEGORY) android.content.res.Configuration arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.File getCacheDir();
   @Source(SUSI_NO_CATEGORY)  android.content.pm.PackageManager getPackageManager();
   @Source(SUSI_NO_CATEGORY)  android.os.Looper getMainLooper();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPackageName();
}
class CursorEntityIterator{
   @Source(SUSI_NO_CATEGORY)  android.content.Entity next();
}
class CursorLoader{
    void dump(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) java.io.FileDescriptor arg1, @Sink(SUSI_FILE) java.io.PrintWriter arg2, @Sink(SUSI_FILE) java.lang.String[] arg3);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getUri();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSelection();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getProjection();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSortOrder();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getSelectionArgs();
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor loadInBackground();
}
class Entity{
   @Source(SUSI_NO_CATEGORY)  android.content.ContentValues getEntityValues();
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getSubValues();
}
class IClipboard$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IClipboard$Stub$Proxy{
    void setPrimaryClip(  @Sink(SUSI_NO_CATEGORY) android.content.ClipData arg0);
    void removePrimaryClipChangedListener(  @Sink(SUSI_NO_CATEGORY) android.content.IOnPrimaryClipChangedListener arg0);
    void addPrimaryClipChangedListener(  @Sink(SUSI_NO_CATEGORY) android.content.IOnPrimaryClipChangedListener arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NO_CATEGORY)  android.content.ClipData getPrimaryClip(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.ClipDescription getPrimaryClipDescription();
}
class IContentService$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IContentService$Stub$Proxy{
    void setIsSyncable(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) int arg2);
   @Source(SUSI_SYNCHRONIZATION_DATA)  boolean isSyncPending(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1);
    void cancelSync(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1);
    void setSyncAutomatically(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) boolean arg2);
    void setMasterSyncAutomatically(  @Sink(SUSI_SYNCHRONIZATION_DATA) boolean arg0);
    void requestSync(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) android.os.Bundle arg2);
    void removePeriodicSync(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) android.os.Bundle arg2);
    void addPeriodicSync(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) android.os.Bundle arg2, @Sink(SUSI_SYNCHRONIZATION_DATA) long arg3);
   @Source(SUSI_SYNCHRONIZATION_DATA)  boolean isSyncActive(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1);
    void addStatusChangeListener(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.ISyncStatusObserver arg1);
    void unregisterContentObserver(  @Sink(SUSI_NO_CATEGORY) android.database.IContentObserver arg0);
    void removeStatusChangeListener(  @Sink(SUSI_NO_CATEGORY) android.content.ISyncStatusObserver arg0);
    void notifyChange(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) android.database.IContentObserver arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
    void registerContentObserver(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) android.database.IContentObserver arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_SYNCHRONIZATION_DATA)  int getIsSyncable(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1);
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.util.List getPeriodicSyncs(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1);
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.content.SyncStatusInfo getSyncStatus(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1);
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.content.SyncAdapterType[] getSyncAdapterTypes();
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.util.List getCurrentSyncs();
   @Source(SUSI_SYNCHRONIZATION_DATA)  boolean getSyncAutomatically(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1);
}
class IIntentReceiver$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IIntentReceiver$Stub$Proxy{
    void performReceive(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4, @Sink(SUSI_NO_CATEGORY) boolean arg5, @Sink(SUSI_NO_CATEGORY) int arg6);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IIntentSender$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IIntentSender$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  int send(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.content.IIntentReceiver arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IOnPrimaryClipChangedListener$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IOnPrimaryClipChangedListener$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class ISyncAdapter$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class ISyncAdapter$Stub$Proxy{
    void startSync(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.content.ISyncContext arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg2, @Sink(SUSI_SYNCHRONIZATION_DATA) android.os.Bundle arg3);
    void cancelSync(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.content.ISyncContext arg0);
    void initialize(  @Sink(SUSI_NO_CATEGORY) android.accounts.Account arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class ISyncContext$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class ISyncContext$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class ISyncStatusObserver$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class ISyncStatusObserver$Stub$Proxy{
    void onStatusChanged(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class Intent{
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setAllowFds(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int[] arg1);
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean[] arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) double[] arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putIntegerArrayListExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.ArrayList arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) double arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence[] arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) float[] arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent createChooser(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) char[] arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) char arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtras(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
    void setSourceBounds(  @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putStringArrayListExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.ArrayList arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent setDataAndNormalize(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.io.Serializable arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) short arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent setAction(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent setClassName(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtras(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) short[] arg1);
    void setExtrasClassLoader(  @Sink(SUSI_NO_CATEGORY) java.lang.ClassLoader arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent parseUri(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putParcelableArrayListExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.ArrayList arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putCharSequenceArrayListExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.ArrayList arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long[] arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcelable[] arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) byte arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent setTypeAndNormalize(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent setClassName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent putExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcelable arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent setDataAndTypeAndNormalize(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  char getCharExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) char arg1);
   @Source(SUSI_NO_CATEGORY)  long getLongExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] getByteArrayExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getStringExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Parcelable getParcelableExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent setClass(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Class arg1);
   @Source(SUSI_NO_CATEGORY)  int getIntExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.io.Serializable getSerializableExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getFlags();
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getSelector();
   @Source(SUSI_NO_CATEGORY)  char[] getCharArrayExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int[] getIntArrayExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence[] getCharSequenceArrayExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  float getFloatExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPackage();
   @Source(SUSI_NO_CATEGORY)  java.util.Set getCategories();
   @Source(SUSI_NO_CATEGORY)  android.content.ClipData getClipData();
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getCharSequenceArrayListExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType();
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getIntentOld(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  float[] getFloatArrayExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  boolean[] getBooleanArrayExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getParcelableArrayListExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getSourceBounds();
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getIntent(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getStringArrayListExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  byte getByteExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) byte arg1);
   @Source(SUSI_NO_CATEGORY)  double[] getDoubleArrayExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle getBundleExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getIntegerArrayListExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String resolveTypeIfNeeded(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder getIBinderExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAction();
   @Source(SUSI_NO_CATEGORY)  short[] getShortArrayExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  short getShortExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) short arg1);
   @Source(SUSI_NO_CATEGORY)  long[] getLongArrayExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getComponent();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getCharSequenceExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getStringArrayExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDataString();
   @Source(SUSI_NO_CATEGORY)  double getDoubleExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) double arg1);
   @Source(SUSI_NO_CATEGORY)  android.os.Parcelable[] getParcelableArrayExtra(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.net.Uri getData();
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle getExtras();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getScheme();
}
class Intent$FilterComparison{
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getIntent();
}
class IntentFilter{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getPriority();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAction(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDataScheme(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCategory(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.PatternMatcher getDataPath(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDataType(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.IntentFilter$AuthorityEntry getDataAuthority(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class IntentFilter$AuthorityEntry{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHost();
   @Source(SUSI_NO_CATEGORY)  int getPort();
}
class IntentSender{
    void writeIntentSenderOrNullToParcel(  @Sink(SUSI_NO_CATEGORY) android.content.IntentSender arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1);
    void sendIntent(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2, @Sink(SUSI_NO_CATEGORY) android.content.IntentSender$OnFinished arg3, @Sink(SUSI_NO_CATEGORY) android.os.Handler arg4);
    void sendIntent(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2, @Sink(SUSI_NO_CATEGORY) android.content.IntentSender$OnFinished arg3, @Sink(SUSI_NO_CATEGORY) android.os.Handler arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTargetPackage();
   @Source(SUSI_NO_CATEGORY)  android.content.IIntentSender getTarget();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCreatorPackage();
   @Source(SUSI_NO_CATEGORY)  int getCreatorUid();
   @Source(SUSI_NO_CATEGORY)  android.os.UserHandle getCreatorUserHandle();
}
class Loader{
    void dump(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) java.io.FileDescriptor arg1, @Sink(SUSI_FILE) java.io.PrintWriter arg2, @Sink(SUSI_FILE) java.lang.String[] arg3);
   @Source(SUSI_NO_CATEGORY)  int getId();
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
}
class OperationApplicationException{
   @Source(SUSI_NO_CATEGORY)  int getNumSuccessfulYieldPoints();
}
class PeriodicSync{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class PeriodicSync$1{
   @Source(SUSI_NO_CATEGORY)  android.content.PeriodicSync createFromParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0);
}
class SyncAdapterType{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSettingsActivity();
}
class SyncAdaptersCache$MySerializer{
    void writeAsXml(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) org.xmlpull.v1.XmlSerializer arg1);
}
class SyncContext{
    void setStatusText(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.os.IBinder getSyncContextBinder();
}
class SyncInfo{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class SyncManager{
    void dumpSyncState(  @Sink(SUSI_SYNCHRONIZATION_DATA) java.io.PrintWriter arg0);
    void dumpSyncHistory(  @Sink(SUSI_SYNCHRONIZATION_DATA) java.io.PrintWriter arg0);
    void cancelActiveSync(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) int arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg2);
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1);
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.content.SyncAdapterType[] getSyncAdapterTypes(  @Sink(SUSI_SYNCHRONIZATION_DATA) int arg0);
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.content.SyncStorageEngine getSyncStorageEngine();
   @Source(SUSI_NO_CATEGORY)  long access$3000();
   @Source(SUSI_NO_CATEGORY)  long access$3700();
   @Source(SUSI_NO_CATEGORY)  android.accounts.AccountAndUser[] access$2800();
   @Source(SUSI_NO_CATEGORY)  java.lang.String formatTime(  @Sink(SUSI_NO_CATEGORY) long arg0);
}
class SyncManager$ActiveSyncContext{
   @Source(SUSI_SYNCHRONIZATION_DATA)  boolean bindToSyncAdapter(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.content.pm.RegisteredServicesCache$ServiceInfo arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) int arg1);
    void onServiceConnected(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.content.ComponentName arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) android.os.IBinder arg1);
    void sendHeartbeat();
    void toString(  @Sink(SUSI_NO_CATEGORY) java.lang.StringBuilder arg0);
}
class SyncQueue{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getOperations();
}
class SyncResult{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class SyncStatusInfo{
    void setPeriodicSyncTime(  @Sink(SUSI_SYNCHRONIZATION_DATA) int arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) long arg1);
   @Source(SUSI_SYNCHRONIZATION_DATA)  long getPeriodicSyncTime(  @Sink(SUSI_SYNCHRONIZATION_DATA) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getLastFailureMesgAsInt(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class SyncStorageEngine{
    void addPeriodicSync(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) int arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg2, @Sink(SUSI_SYNCHRONIZATION_DATA) android.os.Bundle arg3, @Sink(SUSI_SYNCHRONIZATION_DATA) long arg4);
    void setSyncAutomatically(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) int arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg2, @Sink(SUSI_SYNCHRONIZATION_DATA) boolean arg3);
    void setMasterSyncAutomatically(  @Sink(SUSI_SYNCHRONIZATION_DATA) boolean arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) int arg1);
    void removePeriodicSync(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) int arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg2, @Sink(SUSI_SYNCHRONIZATION_DATA) android.os.Bundle arg3);
    void setIsSyncable(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) int arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg2, @Sink(SUSI_SYNCHRONIZATION_DATA) int arg3);
    void setBackoff(  @Sink(SUSI_NO_CATEGORY) android.accounts.Account arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) long arg3, @Sink(SUSI_NO_CATEGORY) long arg4);
    void setDelayUntilTime(  @Sink(SUSI_NO_CATEGORY) android.accounts.Account arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) long arg3);
   @Source(SUSI_SYNCHRONIZATION_DATA)  int getIsSyncable(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) int arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg2);
   @Source(SUSI_SYNCHRONIZATION_DATA)  int getSyncRandomOffset();
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.util.ArrayList getSyncHistory();
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.util.ArrayList getSyncStatus();
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.content.SyncStatusInfo getOrCreateSyncStatus(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.content.SyncStorageEngine$AuthorityInfo arg0);
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.util.List getPeriodicSyncs(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) int arg1, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg2);
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.util.List getCurrentSyncs(  @Sink(SUSI_SYNCHRONIZATION_DATA) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getDelayUntilTime(  @Sink(SUSI_NO_CATEGORY) android.accounts.Account arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getPendingOperations();
   @Source(SUSI_NO_CATEGORY)  android.content.SyncStorageEngine$AuthorityInfo getAuthority(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getAuthorities();
   @Source(SUSI_NO_CATEGORY)  android.content.SyncStorageEngine$AuthorityInfo getOrCreateAuthority(  @Sink(SUSI_NO_CATEGORY) android.accounts.Account arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.SyncStorageEngine getSingleton();
   @Source(SUSI_NO_CATEGORY)  int getIntColumn(  @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getPendingOperationCount();
   @Source(SUSI_NO_CATEGORY)  android.util.Pair getBackoff(  @Sink(SUSI_NO_CATEGORY) android.accounts.Account arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  long getLongColumn(  @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.SyncStatusInfo getStatusByAccountAndAuthority(  @Sink(SUSI_NO_CATEGORY) android.accounts.Account arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.SyncStorageEngine$DayStats[] getDayStatistics();
}
class UriMatcher{
    void addURI(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}

package android.graphics;

class Bitmap{
    void setHasMipMap(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setHasAlpha(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setPixels(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) int arg6);
    void setPixel(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getByteCount();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap createBitmap(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap$Config arg2);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap createBitmap(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap$Config arg5);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap createBitmap(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap$Config arg3);
   @Source(SUSI_NO_CATEGORY)  byte[] getNinePatchChunk();
   @Source(SUSI_NO_CATEGORY)  int[] getLayoutBounds();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap$Config getConfig();
   @Source(SUSI_NO_CATEGORY)  int getScaledHeight(  @Sink(SUSI_NO_CATEGORY) android.graphics.Canvas arg0);
   @Source(SUSI_NO_CATEGORY)  int getScaledHeight(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getScaledWidth(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getRowBytes();
   @Source(SUSI_NO_CATEGORY)  int getGenerationId();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap createBitmap(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
   @Source(SUSI_NO_CATEGORY)  int getScaledWidth(  @Sink(SUSI_NO_CATEGORY) android.util.DisplayMetrics arg0);
   @Source(SUSI_NO_CATEGORY)  int getPixel(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getScaledWidth(  @Sink(SUSI_NO_CATEGORY) android.graphics.Canvas arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap createBitmap(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) android.graphics.Matrix arg5, @Sink(SUSI_NO_CATEGORY) boolean arg6);
   @Source(SUSI_NO_CATEGORY)  int getScaledHeight(  @Sink(SUSI_NO_CATEGORY) android.util.DisplayMetrics arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap createBitmap(  @Sink(SUSI_NO_CATEGORY) android.util.DisplayMetrics arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap$Config arg3);
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  int getDefaultDensity();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap createBitmap(  @Sink(SUSI_NO_CATEGORY) android.util.DisplayMetrics arg0, @Sink(SUSI_NO_CATEGORY) int[] arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap$Config arg4);
   @Source(SUSI_NO_CATEGORY)  int getDensity();
}
class BitmapRegionDecoder{
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  int getHeight();
}
class Canvas{
    void setMatrix(  @Sink(SUSI_NO_CATEGORY) android.graphics.Matrix arg0);
    void setViewport(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Matrix getMatrix();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getClipBounds();
   @Source(SUSI_NO_CATEGORY)  int getMaximumBitmapWidth();
   @Source(SUSI_NO_CATEGORY)  int getDensity();
   @Source(SUSI_NO_CATEGORY)  int getMaximumBitmapHeight();
   @Source(SUSI_NO_CATEGORY)  javax.microedition.khronos.opengles.GL getGL();
   @Source(SUSI_NO_CATEGORY)  android.graphics.DrawFilter getDrawFilter();
}
class ColorMatrix{
    void setRotate(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setSaturation(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void set(  @Sink(SUSI_NO_CATEGORY) float[] arg0);
    void setConcat(  @Sink(SUSI_NO_CATEGORY) android.graphics.ColorMatrix arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.ColorMatrix arg1);
    void set(  @Sink(SUSI_NO_CATEGORY) android.graphics.ColorMatrix arg0);
    void setScale(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) float arg3);
   @Source(SUSI_NO_CATEGORY)  float[] getArray();
}
class Interpolator{
    void setRepeatMirror(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setKeyFrame(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) float[] arg2, @Sink(SUSI_NO_CATEGORY) float[] arg3);
    void setKeyFrame(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) float[] arg2);
   @Source(SUSI_NO_CATEGORY)  int getValueCount();
   @Source(SUSI_NO_CATEGORY)  int getKeyFrameCount();
}
class Matrix{
    void setTranslate(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setRotate(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2);
    void setScale(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) float arg3);
    void setSkew(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setSkew(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) float arg3);
    void set(  @Sink(SUSI_NO_CATEGORY) android.graphics.Matrix arg0);
    void setSinCos(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) float arg3);
   @Source(SUSI_NO_CATEGORY)  boolean setPolyToPoly(  @Sink(SUSI_NO_CATEGORY) float[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) float[] arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
    void setRotate(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setConcat(  @Sink(SUSI_NO_CATEGORY) android.graphics.Matrix arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Matrix arg1);
    void setValues(  @Sink(SUSI_NO_CATEGORY) float[] arg0);
    void setScale(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_NO_CATEGORY)  boolean setRectToRect(  @Sink(SUSI_NO_CATEGORY) android.graphics.RectF arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.RectF arg1, @Sink(SUSI_NO_CATEGORY) android.graphics.Matrix$ScaleToFit arg2);
    void setSinCos(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
}
class Matrix$1{
   @Source(SUSI_NO_CATEGORY)  boolean setPolyToPoly(  @Sink(SUSI_NO_CATEGORY) float[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) float[] arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
   @Source(SUSI_NO_CATEGORY)  boolean setConcat(  @Sink(SUSI_NO_CATEGORY) android.graphics.Matrix arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Matrix arg1);
   @Source(SUSI_NO_CATEGORY)  boolean setRectToRect(  @Sink(SUSI_NO_CATEGORY) android.graphics.RectF arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.RectF arg1, @Sink(SUSI_NO_CATEGORY) android.graphics.Matrix$ScaleToFit arg2);
}
class NinePatch{
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  int getDensity();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Region getTransparentRegion(  @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg0);
   @Source(SUSI_NO_CATEGORY)  int getWidth();
}
class Paint{
    void setBidiFlags(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void set(  @Sink(SUSI_NO_CATEGORY) android.graphics.Paint arg0);
    void setTextAlign(  @Sink(SUSI_NO_CATEGORY) android.graphics.Paint$Align arg0);
    void setStyle(  @Sink(SUSI_NO_CATEGORY) android.graphics.Paint$Style arg0);
    void setStrokeCap(  @Sink(SUSI_NO_CATEGORY) android.graphics.Paint$Cap arg0);
    void setStrokeJoin(  @Sink(SUSI_NO_CATEGORY) android.graphics.Paint$Join arg0);
    void setARGB(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Typeface getTypeface();
   @Source(SUSI_NO_CATEGORY)  int getTextRunCursor(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
   @Source(SUSI_NO_CATEGORY)  int getTextRunCursor(  @Sink(SUSI_NO_CATEGORY) char[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Shader getShader();
   @Source(SUSI_NO_CATEGORY)  android.graphics.ColorFilter getColorFilter();
   @Source(SUSI_NO_CATEGORY)  float getTextRunAdvances(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) float[] arg6, @Sink(SUSI_NO_CATEGORY) int arg7, @Sink(SUSI_NO_CATEGORY) int arg8);
   @Source(SUSI_NO_CATEGORY)  float getFontSpacing();
   @Source(SUSI_NO_CATEGORY)  float getTextRunAdvances(  @Sink(SUSI_NO_CATEGORY) char[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) float[] arg6, @Sink(SUSI_NO_CATEGORY) int arg7);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Paint$Join getStrokeJoin();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Paint$FontMetricsInt getFontMetricsInt();
   @Source(SUSI_NO_CATEGORY)  int getTextRunCursor(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rasterizer getRasterizer();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Paint$Align getTextAlign();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Paint$FontMetrics getFontMetrics();
   @Source(SUSI_NO_CATEGORY)  java.util.Locale getTextLocale();
   @Source(SUSI_NO_CATEGORY)  int getTextWidths(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) float[] arg1);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Paint$Cap getStrokeCap();
   @Source(SUSI_NO_CATEGORY)  float getTextRunAdvances(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) float[] arg6, @Sink(SUSI_NO_CATEGORY) int arg7, @Sink(SUSI_NO_CATEGORY) int arg8);
   @Source(SUSI_NO_CATEGORY)  int getTextWidths(  @Sink(SUSI_NO_CATEGORY) char[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) float[] arg3);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Paint$Style getStyle();
   @Source(SUSI_NO_CATEGORY)  float getTextRunAdvances(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) float[] arg6, @Sink(SUSI_NO_CATEGORY) int arg7);
   @Source(SUSI_NO_CATEGORY)  android.graphics.PathEffect getPathEffect();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Xfermode getXfermode();
   @Source(SUSI_NO_CATEGORY)  float getTextRunAdvances(  @Sink(SUSI_NO_CATEGORY) char[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) float[] arg6, @Sink(SUSI_NO_CATEGORY) int arg7, @Sink(SUSI_NO_CATEGORY) int arg8);
   @Source(SUSI_NO_CATEGORY)  android.graphics.MaskFilter getMaskFilter();
   @Source(SUSI_NO_CATEGORY)  int getTextWidths(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) float[] arg3);
   @Source(SUSI_NO_CATEGORY)  int getTextWidths(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) float[] arg3);
   @Source(SUSI_NO_CATEGORY)  float getTextRunAdvances(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) float[] arg6, @Sink(SUSI_NO_CATEGORY) int arg7);
   @Source(SUSI_NO_CATEGORY)  int getTextGlyphs(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) char[] arg6);
   @Source(SUSI_NO_CATEGORY)  int getBidiFlags();
}
class Path{
    void set(  @Sink(SUSI_NO_CATEGORY) android.graphics.Path arg0);
    void setLastPoint(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
    void setFillType(  @Sink(SUSI_NO_CATEGORY) android.graphics.Path$FillType arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Path$FillType getFillType();
}
class Picture$RecordingCanvas{
    void setBitmap(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0);
}
class PointF{
    void set(  @Sink(SUSI_NO_CATEGORY) android.graphics.PointF arg0);
}
class Rect{
   @Source(SUSI_NO_CATEGORY)  boolean setIntersect(  @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg1);
    void set(  @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg0);
}
class RectF{
    void set(  @Sink(SUSI_NO_CATEGORY) android.graphics.RectF arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setIntersect(  @Sink(SUSI_NO_CATEGORY) android.graphics.RectF arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.RectF arg1);
    void set(  @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg0);
}
class Region{
   @Source(SUSI_NO_CATEGORY)  boolean set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  boolean setPath(  @Sink(SUSI_NO_CATEGORY) android.graphics.Path arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Region arg1);
   @Source(SUSI_NO_CATEGORY)  boolean set(  @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg0);
   @Source(SUSI_NO_CATEGORY)  boolean set(  @Sink(SUSI_NO_CATEGORY) android.graphics.Region arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Path getBoundaryPath();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getBounds();
}
class SurfaceTexture{
    void setDefaultBufferSize(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  long getTimestamp();
}
class Typeface{
   @Source(SUSI_NO_CATEGORY)  android.graphics.Typeface create(  @Sink(SUSI_NO_CATEGORY) android.graphics.Typeface arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getStyle();
}
class YuvImage{
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  int[] getStrides();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  byte[] getYuvData();
   @Source(SUSI_NO_CATEGORY)  int getYuvFormat();
}

package org.apache.http;

class HttpHost{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getHostName();
   @Source(SUSI_NO_CATEGORY)  int getPort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSchemeName();
}
class ProtocolVersion{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProtocol();
   @Source(SUSI_NO_CATEGORY)  int getMajor();
   @Source(SUSI_NO_CATEGORY)  int getMinor();
}

package com.android.contacts.detail;

class ActionsViewContainer{
    void setPosition(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.ContextMenu$ContextMenuInfo getContextMenuInfo();
}
class CarouselTab{
    void setLabel(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
}
class ContactDetailDisplayUtils{
    void setDisplayName(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.Contact arg1, @Sink(SUSI_CONTACT_INFORMATION) android.widget.TextView arg2);
    void setCompanyName(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.Contact arg1, @Sink(SUSI_CONTACT_INFORMATION) android.widget.TextView arg2);
    void setSocialSnippet(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.Contact arg1, @Sink(SUSI_CONTACT_INFORMATION) android.widget.TextView arg2, @Sink(SUSI_CONTACT_INFORMATION) android.widget.ImageView arg3);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View addStreamItemText(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.util.StreamItemEntry arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg2);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getCompany(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.Contact arg1);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getPhoneticName(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.Contact arg1);
   @Source(SUSI_CONTACT_INFORMATION)  android.text.Html$ImageGetter getImageGetter(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getDisplayName(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.Contact arg1);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getAttribution(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.Contact arg1);
}
class ContactDetailDisplayUtils$DefaultImageGetter{
   @Source(SUSI_CONTACT_INFORMATION)  android.graphics.drawable.Drawable getDrawable(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
}
class ContactDetailDisplayUtils$StreamPhotoTag{
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getStreamItemPhotoUri();
}
class ContactDetailFragment{
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Context getContext();
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getUri();
   @Source(SUSI_CONTACT_INFORMATION)  int getFirstListItemOffset();
}
class ContactDetailFragment$AddConnectionViewEntry{
   @Source(SUSI_CONTACT_INFORMATION)  android.graphics.drawable.Drawable getIcon();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getLabel();
}
class ContactDetailFragment$AddToMyContactsQuickFix{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getTitle();
}
class ContactDetailFragment$InvitableAccountTypesAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.account.AccountType getItem(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_CONTACT_INFORMATION)  long getItemId(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getCount();
}
class ContactDetailFragment$KindTitleViewEntry{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getTitle();
}
class ContactDetailFragment$MakeLocalCopyQuickFix{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getTitle();
}
class ContactDetailFragment$NetworkTitleViewEntry{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getLabel();
   @Source(SUSI_CONTACT_INFORMATION)  android.graphics.drawable.Drawable getIcon();
}
class ContactDetailFragment$ViewAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  int getViewTypeCount();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.detail.ContactDetailFragment$ViewEntry getItem(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_CONTACT_INFORMATION)  int getCount();
   @Source(SUSI_CONTACT_INFORMATION)  long getItemId(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class ContactDetailFragment$ViewEntry{
   @Source(SUSI_CONTACT_INFORMATION)  int getViewType();
   @Source(SUSI_CONTACT_INFORMATION)  long getId();
}
class ContactDetailFragment$ViewEntryDimensions{
   @Source(SUSI_CONTACT_INFORMATION)  int getWidePaddingLeft();
   @Source(SUSI_CONTACT_INFORMATION)  int getPaddingBottom();
   @Source(SUSI_CONTACT_INFORMATION)  int getPaddingLeft();
   @Source(SUSI_CONTACT_INFORMATION)  int getPaddingTop();
   @Source(SUSI_CONTACT_INFORMATION)  int getPaddingRight();
}
class ContactDetailFragmentCarousel{
   @Source(SUSI_CONTACT_INFORMATION)  int getCurrentPage();
}
class ContactDetailLayoutController{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.activities.ContactDetailActivity$FragmentKeyListener getCurrentPage();
}
class ContactDetailPhotoSetter{
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View$OnClickListener setupContactPhotoForClick(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.Contact arg1, @Sink(SUSI_CONTACT_INFORMATION) android.widget.ImageView arg2, @Sink(SUSI_CONTACT_INFORMATION) boolean arg3);
}
class ContactDetailTabCarousel{
    void restoreCurrentTab(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  float getStoredYCoordinateForTab(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getAllowedVerticalScrollLength();
   @Source(SUSI_CONTACT_INFORMATION)  int getAllowedHorizontalScrollLength();
}
class ContactDetailUpdatesFragment{
   @Source(SUSI_CONTACT_INFORMATION)  int getFirstListItemOffset();
}
class ContactDetailViewPagerAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  int getCount();
   @Source(SUSI_CONTACT_INFORMATION)  int getItemPosition(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.Object arg0);
}
class PhotoSelectionHandler{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.RawContactDeltaList getDeltaForAttachingPhotoToContact();
   @Source(SUSI_CONTACT_INFORMATION)  long getWritableEntityId();
}
class StreamItemAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Object getItem(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getItemViewType(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getCount();
   @Source(SUSI_CONTACT_INFORMATION)  int getViewTypeCount();
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_CONTACT_INFORMATION)  long getItemId(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}

package com.android.internal.location;

class GpsNetInitiatedHandler{
   @Source(SUSI_LOCATION_INFORMATION)  byte[] stringToByteArray(  @Sink(SUSI_LOCATION_INFORMATION) java.lang.String arg0, @Sink(SUSI_LOCATION_INFORMATION) boolean arg1);
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getDialogTitle(  @Sink(SUSI_LOCATION_INFORMATION) com.android.internal.location.GpsNetInitiatedHandler$GpsNiNotification arg0, @Sink(SUSI_LOCATION_INFORMATION) android.content.Context arg1);
}
class ILocationProvider$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_LOCATION_INFORMATION)  android.os.IBinder asBinder();
}
class ILocationProvider$Stub$Proxy{
    void setRequest(  @Sink(SUSI_NO_CATEGORY) com.android.internal.location.ProviderRequest arg0, @Sink(SUSI_NO_CATEGORY) android.os.WorkSource arg1);
   @Source(SUSI_NO_CATEGORY)  boolean sendExtraCommand(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
   @Source(SUSI_LOCATION_INFORMATION)  long getStatusUpdateTime();
   @Source(SUSI_LOCATION_INFORMATION)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_LOCATION_INFORMATION)  int getStatus(  @Sink(SUSI_LOCATION_INFORMATION) android.os.Bundle arg0);
   @Source(SUSI_LOCATION_INFORMATION)  com.android.internal.location.ProviderProperties getProperties();
}
class ProviderRequest{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}

package android.appwidget;

class AppWidgetHost{
    void setUserId(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void startListeningAsUser(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.appwidget.AppWidgetHostView createView(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.appwidget.AppWidgetProviderInfo arg2);
   @Source(SUSI_NO_CATEGORY)  android.appwidget.AppWidgetHostView onCreateView(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.appwidget.AppWidgetProviderInfo arg2);
   @Source(SUSI_NO_CATEGORY)  int[] getAppWidgetIds();
}
class AppWidgetHostView{
    void setUserId(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void updateAppWidgetSize(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) boolean arg5);
    void updateAppWidgetSize(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
    void updateAppWidgetOptions(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getDefaultPaddingForWidget(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg1, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg2);
   @Source(SUSI_NO_CATEGORY)  android.view.View getDefaultView();
   @Source(SUSI_NO_CATEGORY)  android.view.View getErrorView();
   @Source(SUSI_NO_CATEGORY)  android.appwidget.AppWidgetProviderInfo getAppWidgetInfo();
   @Source(SUSI_NO_CATEGORY)  int getAppWidgetId();
}
class AppWidgetHostView$ParcelableSparseArray$1{
   @Source(SUSI_NO_CATEGORY)  android.appwidget.AppWidgetHostView$ParcelableSparseArray createFromParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0);
}
class AppWidgetManager{
    void bindAppWidgetId(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
    void updateAppWidget(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) android.widget.RemoteViews arg1);
    void setBindAppWidgetPermission(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void updateAppWidget(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) android.widget.RemoteViews arg1);
    void updateAppWidget(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.widget.RemoteViews arg1);
   @Source(SUSI_NO_CATEGORY)  boolean bindAppWidgetIdIfAllowed(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg1);
    void notifyAppWidgetViewDataChanged(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void bindAppWidgetId(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg1);
    void bindRemoteViewsService(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg2, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg3);
   @Source(SUSI_NO_CATEGORY)  boolean bindAppWidgetIdIfAllowed(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
    void updateAppWidgetOptions(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void notifyAppWidgetViewDataChanged(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getInstalledProviders();
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle getAppWidgetOptions(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getInstalledProviders(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.appwidget.AppWidgetManager getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  int[] getAppWidgetIds(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
}
class AppWidgetProviderInfo{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}

package com.android.emailcommon.mail;

class Address{
    void setAddress(  @Sink(SUSI_EMAIL) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAddress();
}
class Folder{
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
}
class Message{
   @Source(SUSI_EMAIL)  boolean isMimeType(  @Sink(SUSI_EMAIL) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
}
class Multipart{
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  com.android.emailcommon.mail.BodyPart getBodyPart(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getContentType();
}
class PackedString{
   @Source(SUSI_NO_CATEGORY)  java.lang.String get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class PackedString$Builder{
    void put(  @Sink(SUSI_EMAIL) java.lang.String arg0, @Sink(SUSI_EMAIL) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}

package com.android.internal.policy.impl.keyguard;

class ClockView$AmPm{
    void setShowAmPm(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setIsMorning(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class KeyguardAbsKeyInputView{
   @Source(SUSI_NO_CATEGORY)  int getWrongPasswordStringId();
   @Source(SUSI_NO_CATEGORY)  com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback getCallback();
}
class KeyguardActivityLauncher{
    void launchActivityWithAnimation(  @Sink(SUSI_LOG) android.content.Intent arg0, @Sink(SUSI_LOG) boolean arg1, @Sink(SUSI_LOG) android.os.Bundle arg2, @Sink(SUSI_LOG) android.os.Handler arg3, @Sink(SUSI_LOG) java.lang.Runnable arg4);
    void launchWidgetPicker(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String access$300();
   @Source(SUSI_NO_CATEGORY)  com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher$CameraWidgetInfo getCameraWidgetInfo();
}
class KeyguardCircleFramedDrawable{
    void setColorFilter(  @Sink(SUSI_NO_CATEGORY) android.graphics.ColorFilter arg0);
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getScale();
   @Source(SUSI_NO_CATEGORY)  int getOpacity();
}
class KeyguardHostView{
   @Source(SUSI_NO_CATEGORY)  long getUserActivityTimeout();
}
class KeyguardHostView$7{
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
   @Source(SUSI_NO_CATEGORY)  com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback getCallback();
   @Source(SUSI_NO_CATEGORY)  com.android.internal.widget.LockPatternUtils getLockPatternUtils();
}
class KeyguardHostView$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class KeyguardLinearLayout{
    void setTopChild(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
}
class KeyguardMessageArea{
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getCurrentMessage();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getOwnerInfo();
}
class KeyguardMessageArea$Helper{
    void setTimeout(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setMessage(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setMessage(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Object[] arg2);
}
class KeyguardMultiUserAvatar{
    void setActive(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Runnable arg2);
    void setPressed(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.UserInfo getUserInfo();
}
class KeyguardPasswordView{
   @Source(SUSI_NO_CATEGORY)  int getWrongPasswordStringId();
   @Source(SUSI_NO_CATEGORY)  int getPasswordTextViewId();
}
class KeyguardSecurityContainer{
   @Source(SUSI_NO_CATEGORY)  com.android.internal.policy.impl.keyguard.KeyguardSecurityViewFlipper getFlipper();
}
class KeyguardSecurityModel{
   @Source(SUSI_FILE_INFORMATION)  com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode getSecurityMode();
   @Source(SUSI_FILE_INFORMATION)  com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode getBackupSecurityMode(  com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode getAlternateFor(  @Sink(SUSI_NO_CATEGORY) com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode arg0);
}
class KeyguardSecurityViewFlipper{
    void setLockPatternUtils(  @Sink(SUSI_NO_CATEGORY) com.android.internal.widget.LockPatternUtils arg0);
   @Source(SUSI_FILE_INFORMATION)  com.android.internal.policy.impl.keyguard.KeyguardSecurityView getSecurityView();
   @Source(SUSI_NO_CATEGORY)  com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback getCallback();
}
class KeyguardSelectorView{
   @Source(SUSI_NO_CATEGORY)  com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback getCallback();
}
class KeyguardSelectorView$3{
   @Source(SUSI_NO_CATEGORY)  com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback getCallback();
   @Source(SUSI_NO_CATEGORY)  com.android.internal.widget.LockPatternUtils getLockPatternUtils();
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
}
class KeyguardStatusView{
   @Source(SUSI_NO_CATEGORY)  int getAppWidgetId();
}
class KeyguardTransportControlView$IRemoteControlDisplayWeak{
    void setMetadata(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void setCurrentClientId(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.app.PendingIntent arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void setArtwork(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg1);
    void setAllMetadata(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg2);
    void setTransportControlFlags(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setPlaybackState(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) long arg2);
}
class KeyguardTransportControlView$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class KeyguardUpdateMonitor{
    void sendKeyguardVisibilityChanged(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.internal.telephony.IccCardConstants$State getSimState();
   @Source(SUSI_NO_CATEGORY)  int getPhoneState();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTelephonySpn();
   @Source(SUSI_NO_CATEGORY)  int getFailedUnlockAttempts();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTelephonyPlmn();
   @Source(SUSI_NO_CATEGORY)  com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getMaxBiometricUnlockAttemptsReached();
}
class KeyguardViewMediator{
    void setCurrentUser(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setHidden(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class KeyguardViewMediator$2{
    void setNeedsInput(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class KeyguardViewStateManager{
   @Source(SUSI_NO_CATEGORY)  int getTransportState();
   @Source(SUSI_NO_CATEGORY)  boolean isBouncing();
}
class KeyguardWidgetFrame{
   @Source(SUSI_NO_CATEGORY)  float getBackgroundAlpha();
   @Source(SUSI_NO_CATEGORY)  int getContentAppWidgetId();
   @Source(SUSI_NO_CATEGORY)  android.view.View getContent();
   @Source(SUSI_NO_CATEGORY)  android.os.Handler getWorkerHandler();
   @Source(SUSI_NO_CATEGORY)  int getSmallFrameHeight();
   @Source(SUSI_NO_CATEGORY)  float getBackgroundAlphaMultiplier();
   @Source(SUSI_NO_CATEGORY)  float getContentAlpha();
}
class KeyguardWidgetPager{
    void addWidget(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setPageHoveringOverDeleteDropTarget(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void sendAccessibilityEvent(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setCurrentPage(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame getWidgetPageAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getWidgetToResetOnPageFadeOut();
   @Source(SUSI_NO_CATEGORY)  float getAlphaForPage(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  int getWidgetPageIndex(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  float getOutlineAlphaForPage(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  long getUserActivityTimeout();
}
class KeyguardWidgetPager$ZInterpolator{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class PagedView{
    void snapToPage(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
   @Source(SUSI_NO_CATEGORY)  boolean performAccessibilityAction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void setScaleX(  @Sink(SUSI_NO_CATEGORY) float arg0);
    void setCurrentPage(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getViewportWidth();
   @Source(SUSI_NO_CATEGORY)  int getViewportHeight();
   @Source(SUSI_NO_CATEGORY)  int getChildWidth(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getPageNearestToCenterOfScreen();
   @Source(SUSI_NO_CATEGORY)  int getPageForView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  int getPageNearestToPoint(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  int getNextPage();
   @Source(SUSI_NO_CATEGORY)  int getCurrentPage();
   @Source(SUSI_NO_CATEGORY)  float getMaxScrollProgress();
   @Source(SUSI_NO_CATEGORY)  int getScaledMeasuredWidth(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getScrollingIndicator();
   @Source(SUSI_NO_CATEGORY)  float distanceInfluenceForSnapDuration(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getPageAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getChildOffset(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getViewportOffsetX();
   @Source(SUSI_NO_CATEGORY)  int getViewportOffsetY();
   @Source(SUSI_NO_CATEGORY)  float[] mapPointFromParentToView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2);
   @Source(SUSI_NO_CATEGORY)  float getBoundedScrollProgress(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getRelativeChildOffset(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getScrollProgress(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getChildIndexForRelativeOffset(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float[] mapPointFromViewToParent(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2);
   @Source(SUSI_NO_CATEGORY)  int getPageCount();
   @Source(SUSI_NO_CATEGORY)  float maxOverScroll();
}
class PagedView$10{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class PagedView$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class PagedView$ScrollInterpolator{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class SlidingChallengeLayout{
    void setHandleAlpha(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  int getMaxChallengeTop();
   @Source(SUSI_NO_CATEGORY)  int getBouncerAnimationDuration();
}
class SlidingChallengeLayout$1{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Float get(  @Sink(SUSI_NO_CATEGORY) com.android.internal.policy.impl.keyguard.SlidingChallengeLayout arg0);
}
class SlidingChallengeLayout$2{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class SlidingChallengeLayout$3{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}

package org.apache.http.impl;

class AbstractHttpClientConnection{
    void sendRequestHeader(  @Sink(SUSI_NO_CATEGORY) org.apache.http.HttpRequest arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.impl.entity.EntitySerializer createEntitySerializer();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpResponse receiveResponseHeader();
   @Source(SUSI_NO_CATEGORY)  boolean isResponseAvailable(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpResponseFactory createHttpResponseFactory();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.HttpConnectionMetrics getMetrics();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer();
}
class EnglishReasonPhraseCatalog{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getReason(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.util.Locale arg1);
}
class HttpConnectionMetricsImpl{
    void setMetric(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  long getSentBytesCount();
   @Source(SUSI_NO_CATEGORY)  long getRequestCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getMetric(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  long getResponseCount();
   @Source(SUSI_NO_CATEGORY)  long getReceivedBytesCount();
}
class SocketHttpClientConnection{
    void setSocketTimeout(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.net.Socket getSocket();
   @Source(SUSI_NO_CATEGORY)  int getRemotePort();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getRemoteAddress();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getLocalAddress();
   @Source(SUSI_NO_CATEGORY)  int getSocketTimeout();
   @Source(SUSI_NO_CATEGORY)  int getLocalPort();
}

package org.apache.harmony.security.provider.crypto;

class RandomBitsSupplier{
   @Source(SUSI_NO_CATEGORY)  byte[] getRandomBits(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class SHA1PRNG_SecureRandomImpl{
   @Source(SUSI_NO_CATEGORY)  byte[] engineGenerateSeed(  @Sink(SUSI_NO_CATEGORY) int arg0);
}

package org.apache.harmony.security.utils;

class AlgNameMapper{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getStandardName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class Array{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getBytesAsString(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
}
class JarUtils{
   @Source(SUSI_NO_CATEGORY)  java.security.cert.Certificate[] verifySignature(  @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg0, @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg1);
}
class ObjectIdentifier{
   @Source(SUSI_NO_CATEGORY)  int[] getOid();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getGroup();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
}

package com.android.contacts.list;

class AccountFilterActivity{
    void onItemClick(  @Sink(SUSI_CONTACT_INFORMATION) android.widget.AdapterView arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) int arg2, @Sink(SUSI_CONTACT_INFORMATION) long arg3);
   @Source(SUSI_CONTACT_INFORMATION)  java.util.List access$100(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
}
class AccountFilterActivity$FilterListAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.list.ContactListFilter getItem(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_CONTACT_INFORMATION)  long getItemId(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getCount();
}
class ContactBrowseListFragment{
    void setFilter(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.list.ContactListFilter arg0);
    void restoreSavedState(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg0);
    void setSearchMode(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getSelectedContactUri();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.list.ContactListFilter getFilter();
}
class ContactEntryListAdapter{
    void setDefaultFilterHeaderText(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
    void setPinnedSectionTitle(  @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
   @Source(SUSI_CONTACT_INFORMATION)  int getViewTypeCount();
   @Source(SUSI_CONTACT_INFORMATION)  int getContactNameDisplayOrder();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.list.ContactListFilter getFilter();
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View newHeaderView(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg2, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg3);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View createPinnedSectionHeaderView(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg1);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.ContactPhotoManager getPhotoLoader();
   @Source(SUSI_CONTACT_INFORMATION)  char[] getUpperCaseQueryString();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.list.DirectoryPartition createDefaultDirectoryPartition();
   @Source(SUSI_CONTACT_INFORMATION)  int getDirectoryResultLimit();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getQueryString();
   @Source(SUSI_CONTACT_INFORMATION)  int getItemViewType(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getQuantityText(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) int arg2);
   @Source(SUSI_CONTACT_INFORMATION)  boolean getDisplayPhotos();
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getContactUri(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg1, @Sink(SUSI_CONTACT_INFORMATION) int arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3);
   @Source(SUSI_CONTACT_INFORMATION)  int getSortOrder();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getContactsCount();
}
class ContactEntryListFragment{
    void onCreate(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg0);
    void loadDirectoryPartition(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.list.DirectoryPartition arg1);
   @Source(SUSI_CONTACT_INFORMATION)  android.widget.ListView getListView();
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Loader onCreateLoader(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg1);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getView();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.widget.ContextMenuAdapter getContextMenuAdapter();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.list.ContactEntryListAdapter getAdapter();
   @Source(SUSI_CONTACT_INFORMATION)  int getContactNameDisplayOrder();
   @Source(SUSI_CONTACT_INFORMATION)  int getDirectorySearchMode();
   @Source(SUSI_CONTACT_INFORMATION)  android.app.LoaderManager getLoaderManager();
   @Source(SUSI_CONTACT_INFORMATION)  android.content.CursorLoader createCursorLoader();
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Context getContext();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getQueryString();
   @Source(SUSI_CONTACT_INFORMATION)  int getSortOrder();
}
class ContactListAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  int getSelectedContactPosition();
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getContactUri(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg1);
   @Source(SUSI_CONTACT_INFORMATION)  long getSelectedContactId();
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getFirstContactUri();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String[] getProjection(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getContactUri(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getSelectedContactLookupKey();
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View newView(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg4);
   @Source(SUSI_CONTACT_INFORMATION)  long getSelectedContactDirectoryId();
}
class ContactListFilter{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.list.ContactListFilter restoreDefaultPreferences(  @Sink(SUSI_CONTACT_INFORMATION) android.content.SharedPreferences arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getId();
}
class ContactListFilterController{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.list.ContactListFilterController getInstance(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
}
class ContactListFilterControllerImpl{
    void setContactListFilter(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.list.ContactListFilter arg0, @Sink(SUSI_CONTACT_INFORMATION) boolean arg1);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.list.ContactListFilter getFilter();
}
class ContactListFilterView{
    void setActivated(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
}
class ContactListItemView{
    void setSectionHeader(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
    void setData(  @Sink(SUSI_CONTACT_INFORMATION) char[] arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
    void setPresence(  @Sink(SUSI_CONTACT_INFORMATION) android.graphics.drawable.Drawable arg0);
    void setPhoneticName(  @Sink(SUSI_CONTACT_INFORMATION) char[] arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
    void setSnippet(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.widget.TextView getNameTextView();
   @Source(SUSI_CONTACT_INFORMATION)  android.widget.TextView getDataView();
   @Source(SUSI_CONTACT_INFORMATION)  android.widget.TextView getPhoneticNameTextView();
   @Source(SUSI_CONTACT_INFORMATION)  android.widget.TextView getLabelView();
   @Source(SUSI_CONTACT_INFORMATION)  android.widget.QuickContactBadge getQuickContact();
   @Source(SUSI_CONTACT_INFORMATION)  android.widget.TextView getCountView();
   @Source(SUSI_CONTACT_INFORMATION)  android.widget.TextView getStatusView();
   @Source(SUSI_CONTACT_INFORMATION)  android.widget.ImageView getPhotoView();
   @Source(SUSI_CONTACT_INFORMATION)  android.widget.TextView getSnippetView();
   @Source(SUSI_CONTACT_INFORMATION)  int getDefaultPhotoViewSize();
}
class ContactListPinnedHeaderView{
    void setCountView(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
    void setSectionHeader(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
}
class ContactPickerFragment{
    void restoreSavedState(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg0);
}
class ContactTileAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_CONTACT_INFORMATION)  int getCount();
   @Source(SUSI_CONTACT_INFORMATION)  int getColumnCount();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Object getItem(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getDivider();
   @Source(SUSI_CONTACT_INFORMATION)  long getItemId(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getItemViewType(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getNumFrequents();
   @Source(SUSI_CONTACT_INFORMATION)  int getViewTypeCount();
   @Source(SUSI_CONTACT_INFORMATION)  int getFrequentHeaderPosition();
}
class ContactTileListFragment{
    void enableQuickContact(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
}
class ContactTileListFragment$2{
   @Source(SUSI_CONTACT_INFORMATION)  int getApproximateTileWidth();
}
class ContactTilePhoneFrequentView{
   @Source(SUSI_CONTACT_INFORMATION)  int getApproximateImageSize();
}
class ContactTileView{
    void setHorizontalDividerVisibility(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.widget.QuickContactBadge getQuickContact();
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View$OnClickListener createClickListener();
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getLookupUri();
}
class ContactsRequest{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getActivityTitle();
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent getRedirectIntent();
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getContactUri();
   @Source(SUSI_CONTACT_INFORMATION)  int getActionCode();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getQueryString();
}
class ContactsSectionIndexer{
    void setProfileHeader(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Object[] getSections();
   @Source(SUSI_CONTACT_INFORMATION)  int getSectionForPosition(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getPositionForSection(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class CustomContactListFilterActivity{
   @Source(SUSI_CONTACT_INFORMATION)  boolean onChildClick(  @Sink(SUSI_CONTACT_INFORMATION) android.widget.ExpandableListView arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) int arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3, @Sink(SUSI_CONTACT_INFORMATION) long arg4);
   @Source(SUSI_SYNCHRONIZATION_DATA)  int getSyncMode(  @Sink(SUSI_SYNCHRONIZATION_DATA) com.android.contacts.list.CustomContactListFilterActivity$AccountDisplay arg0);
}
class CustomContactListFilterActivity$AccountDisplay{
    void setShouldSync(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.list.CustomContactListFilterActivity$GroupDelta arg0, @Sink(SUSI_CONTACT_INFORMATION) boolean arg1, @Sink(SUSI_CONTACT_INFORMATION) boolean arg2);
    void setShouldSync(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.list.CustomContactListFilterActivity$GroupDelta arg0, @Sink(SUSI_CONTACT_INFORMATION) boolean arg1);
    void setShouldSync(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
}
class CustomContactListFilterActivity$AccountSet{
   @Source(SUSI_CONTACT_INFORMATION)  java.util.ArrayList buildDiff();
}
class CustomContactListFilterActivity$CustomFilterConfigurationLoader{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.list.CustomContactListFilterActivity$AccountSet loadInBackground();
}
class CustomContactListFilterActivity$DisplayAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getChildView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) boolean arg2, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg3, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg4);
   @Source(SUSI_CONTACT_INFORMATION)  long getChildId(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Object getGroup(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  long getGroupId(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Object getChild(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
   @Source(SUSI_CONTACT_INFORMATION)  int getGroupCount();
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getGroupView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) boolean arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg2, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg3);
   @Source(SUSI_CONTACT_INFORMATION)  int getChildrenCount(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class CustomContactListFilterActivity$GroupDelta{
   @Source(SUSI_SYNCHRONIZATION_DATA)  boolean getShouldSync();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.list.CustomContactListFilterActivity$GroupDelta fromSettings(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentResolver arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg3, @Sink(SUSI_CONTACT_INFORMATION) boolean arg4);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getTitle(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  boolean getVisible();
}
class DefaultContactBrowseListFragment{
    void setSearchMode(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
    void setFilter(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.list.ContactListFilter arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.list.ContactEntryListAdapter createListAdapter();
}
class DefaultContactListAdapter{
    void bindView(  @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3);
}
class DirectoryListLoader{
   @Source(SUSI_CONTACT_INFORMATION)  android.database.Cursor loadInBackground();
}
class DirectoryPartition{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getDirectoryType();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getDisplayName();
   @Source(SUSI_CONTACT_INFORMATION)  int getStatus();
   @Source(SUSI_CONTACT_INFORMATION)  long getDirectoryId();
}
class EmailAddressListAdapter{
    void bindView(  @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View newView(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg4);
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getDataUri(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class JoinContactListAdapter{
    void bindView(  @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3);
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getContactUri(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg1);
   @Source(SUSI_CONTACT_INFORMATION)  int getItemViewType(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
   @Source(SUSI_CONTACT_INFORMATION)  int getViewTypeCount();
}
class JoinContactListFragment{
    void restoreSavedState(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg0);
    void setQueryString(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) boolean arg1);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.list.ContactEntryListAdapter createListAdapter();
}
class JoinContactLoader{
   @Source(SUSI_CONTACT_INFORMATION)  android.database.Cursor loadInBackground();
}
class LegacyContactListAdapter{
    void bindView(  @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3);
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getPersonUri(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View newView(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg4);
}
class LegacyPhoneNumberListAdapter{
    void bindView(  @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3);
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getPhoneUri(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View newView(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg4);
}
class LegacyPostalAddressListAdapter{
    void bindView(  @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View newView(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg4);
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getContactMethodUri(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class PhoneFavoriteFragment{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.list.ContactListFilter getFilter();
}
class PhoneFavoriteFragment$ContactTileAdapterListener{
   @Source(SUSI_CONTACT_INFORMATION)  int getApproximateTileWidth();
}
class PhoneFavoriteMergedAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  int getSectionForPosition(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Object[] getSections();
   @Source(SUSI_CONTACT_INFORMATION)  int getViewTypeCount();
   @Source(SUSI_CONTACT_INFORMATION)  int getCount();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Object getItem(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getPositionForSection(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  long getItemId(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getItemViewType(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class PhoneNumberListAdapter{
    void bindView(  @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3);
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getDataUri(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View newView(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg4);
}
class PhoneNumberPickerFragment{
    void setSearchMode(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
    void restoreSavedState(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.list.ContactListFilter getFilter();
}
class PostalAddressListAdapter{
    void bindView(  @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View newView(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg4);
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getDataUri(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class ProfileAndContactsLoader{
   @Source(SUSI_CONTACT_INFORMATION)  android.database.Cursor loadInBackground();
}
class ProfileAndContactsLoader$1{
   @Source(SUSI_CONTACT_INFORMATION)  android.os.Bundle getExtras();
}
class ProviderStatusWatcher{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.list.ProviderStatusWatcher$Status getProviderStatus();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.list.ProviderStatusWatcher getInstance(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
}

package com.android.emailcommon.service;

class AccountServiceProxy{
    void notifyLoginSucceeded(  @Sink(SUSI_EMAIL) long arg0);
    void notifyLoginFailed(  @Sink(SUSI_EMAIL) long arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Bundle getConfigurationData(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getDeviceId();
   @Source(SUSI_NETWORK_INFORMATION)  int getAccountColor(  long arg0);
}
class EmailServiceProxy{
    void sendMeetingResponse(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) int arg1);
    void setLogging(  @Sink(SUSI_EMAIL) int arg0);
    void sendMail(  @Sink(SUSI_EMAIL) long arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getApiLevel();
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Bundle validate(  com.android.emailcommon.provider.HostAuth arg0);
}
class IAccountService$Stub{
   @Source(SUSI_EMAIL)  boolean onTransact(  @Sink(SUSI_EMAIL) int arg0, @Sink(SUSI_EMAIL) android.os.Parcel arg1, @Sink(SUSI_EMAIL) android.os.Parcel arg2, @Sink(SUSI_EMAIL) int arg3);
}
class IAccountService$Stub$Proxy{
    void reconcileAccounts(  @Sink(SUSI_EMAIL) java.lang.String arg0, @Sink(SUSI_EMAIL) java.lang.String arg1);
    void notifyLoginFailed(  @Sink(SUSI_EMAIL) long arg0);
    void notifyLoginSucceeded(  @Sink(SUSI_EMAIL) long arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getAccountColor(  long arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Bundle getConfigurationData(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getDeviceId();
}
class IEmailService$Stub{
   @Source(SUSI_EMAIL)  boolean onTransact(  @Sink(SUSI_EMAIL) int arg0, @Sink(SUSI_EMAIL) android.os.Parcel arg1, @Sink(SUSI_EMAIL) android.os.Parcel arg2, @Sink(SUSI_EMAIL) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IEmailService$Stub$Proxy{
    void deleteAccountPIMData(  @Sink(SUSI_EMAIL) long arg0);
    void updateFolderList(  @Sink(SUSI_EMAIL) long arg0);
   @Source(SUSI_EMAIL)  boolean deleteFolder(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) java.lang.String arg1);
   @Source(SUSI_EMAIL)  int searchMessages(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) com.android.emailcommon.service.SearchParams arg1, @Sink(SUSI_EMAIL) long arg2);
   @Source(SUSI_EMAIL)  boolean renameFolder(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) java.lang.String arg1, @Sink(SUSI_EMAIL) java.lang.String arg2);
    void setCallback(  @Sink(SUSI_EMAIL) com.android.emailcommon.service.IEmailServiceCallback arg0);
   @Source(SUSI_EMAIL)  boolean createFolder(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) java.lang.String arg1);
    void stopSync(  @Sink(SUSI_EMAIL) long arg0);
    void startSync(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) boolean arg1);
    void sendMail(  @Sink(SUSI_EMAIL) long arg0);
    void sendMeetingResponse(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) int arg1);
    void loadAttachment(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) boolean arg1);
    void hostChanged(  @Sink(SUSI_EMAIL) long arg0);
    void setLogging(  @Sink(SUSI_EMAIL) int arg0);
    void loadMore(  @Sink(SUSI_EMAIL) long arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getApiLevel();
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Bundle validate(  com.android.emailcommon.provider.HostAuth arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.Bundle autoDiscover(  java.lang.String arg0, java.lang.String arg1);
}
class IEmailServiceCallback$Stub{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IEmailServiceCallback$Stub$Proxy{
    void loadMessageStatus(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) int arg1, @Sink(SUSI_EMAIL) int arg2);
    void syncMailboxListStatus(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) int arg1, @Sink(SUSI_EMAIL) int arg2);
    void loadAttachmentStatus(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) int arg2, @Sink(SUSI_EMAIL) int arg3);
    void syncMailboxStatus(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) int arg1, @Sink(SUSI_EMAIL) int arg2);
    void sendMessageStatus(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) java.lang.String arg1, @Sink(SUSI_EMAIL) int arg2, @Sink(SUSI_EMAIL) int arg3);
}
class IPolicyService$Stub$Proxy{
    void setAccountHoldFlag(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) boolean arg1);
    void setAccountPolicy(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) com.android.emailcommon.provider.Policy arg1, @Sink(SUSI_EMAIL) java.lang.String arg2);
}
class PolicyServiceProxy{
    void setAccountHoldFlag(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) com.android.emailcommon.provider.Account arg1, @Sink(SUSI_EMAIL) boolean arg2);
    void setAccountPolicy(  @Sink(SUSI_EMAIL) android.content.Context arg0, @Sink(SUSI_EMAIL) long arg1, @Sink(SUSI_EMAIL) com.android.emailcommon.provider.Policy arg2, @Sink(SUSI_EMAIL) java.lang.String arg3);
    void setAccountPolicy(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) com.android.emailcommon.provider.Policy arg1, @Sink(SUSI_EMAIL) java.lang.String arg2);
    void setAccountHoldFlag(  @Sink(SUSI_EMAIL) long arg0, @Sink(SUSI_EMAIL) boolean arg1);
}

package android.app;

class ActionBar{
    void setStackedBackgroundDrawable(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
    void setHomeButtonEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setSplitBackgroundDrawable(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.Context getThemedContext();
}
class Activity{
    void dump(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) java.io.FileDescriptor arg1, @Sink(SUSI_FILE) java.io.PrintWriter arg2, @Sink(SUSI_FILE) java.lang.String[] arg3);
    void dumpInner(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) java.io.FileDescriptor arg1, @Sink(SUSI_FILE) java.io.PrintWriter arg2, @Sink(SUSI_FILE) java.lang.String[] arg3);
    void openContextMenu(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
    void setProgress(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setContentView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup$LayoutParams arg1);
    void setVolumeControlStream(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean startNextMatchingActivity(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
   @Source(SUSI_NO_CATEGORY)  boolean startNextMatchingActivity(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
    void startActivityAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg1);
   @Source(SUSI_NO_CATEGORY)  boolean startActivityIfNeeded(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
    void startActivityFromChild(  @Sink(SUSI_NO_CATEGORY) android.app.Activity arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  boolean navigateUpTo(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
    void setTitle(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void startIntentSender(  @Sink(SUSI_NO_CATEGORY) android.content.IntentSender arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
    void setFeatureDrawableResource(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void startActivity(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void setProgressBarIndeterminate(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void startIntentSender(  @Sink(SUSI_NO_CATEGORY) android.content.IntentSender arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg5);
    void onCreate(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
    void startActivityFromFragment(  @Sink(SUSI_NO_CATEGORY) android.app.Fragment arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg3);
    void startActivityFromChild(  @Sink(SUSI_NO_CATEGORY) android.app.Activity arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg3);
    void setFinishOnTouchOutside(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void startActivityForResult(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setSecondaryProgress(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void onWindowAttributesChanged(  @Sink(SUSI_NO_CATEGORY) android.view.WindowManager$LayoutParams arg0);
    void startSearch(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
    void setProgressBarVisibility(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  boolean showDialog(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void startActivity(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
    void setFeatureDrawableAlpha(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void onRestoreInstanceState(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
    void startActivities(  @Sink(SUSI_NO_CATEGORY) android.content.Intent[] arg0);
    void startIntentSenderFromChild(  @Sink(SUSI_NO_CATEGORY) android.app.Activity arg0, @Sink(SUSI_NO_CATEGORY) android.content.IntentSender arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) int arg6);
    void startActivityForResult(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
   @Source(SUSI_NO_CATEGORY)  boolean onKeyDown(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.KeyEvent arg1);
    void setPersistent(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setImmersive(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.ActionMode startActionMode(  @Sink(SUSI_NO_CATEGORY) android.view.ActionMode$Callback arg0);
    void startIntentSenderFromChild(  @Sink(SUSI_NO_CATEGORY) android.app.Activity arg0, @Sink(SUSI_NO_CATEGORY) android.content.IntentSender arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) int arg6, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg7);
    void setRequestedOrientation(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setProgressBarIndeterminateVisibility(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void startActivityFromFragment(  @Sink(SUSI_NO_CATEGORY) android.app.Fragment arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setContentView(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setContentView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  boolean startActivityIfNeeded(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void startIntentSenderForResult(  @Sink(SUSI_NO_CATEGORY) android.content.IntentSender arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
    void setFeatureDrawable(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg1);
    void startIntentSenderForResult(  @Sink(SUSI_NO_CATEGORY) android.content.IntentSender arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg6);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor managedQuery(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor managedQuery(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4);
   @Source(SUSI_NO_CATEGORY)  android.app.ActionBar getActionBar();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLocalClassName();
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getComponentName();
   @Source(SUSI_NO_CATEGORY)  android.view.Window getWindow();
   @Source(SUSI_NO_CATEGORY)  android.view.View getCurrentFocus();
   @Source(SUSI_NO_CATEGORY)  android.app.FragmentManager getFragmentManager();
   @Source(SUSI_NO_CATEGORY)  android.view.LayoutInflater getLayoutInflater();
   @Source(SUSI_NO_CATEGORY)  android.view.WindowManager getWindowManager();
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getCallingActivity();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTitle();
   @Source(SUSI_NO_CATEGORY)  int getVolumeControlStream();
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getParentActivityIntent();
   @Source(SUSI_NO_CATEGORY)  android.content.SharedPreferences getPreferences(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.LoaderManager getLoaderManager();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getLastNonConfigurationInstance();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getSystemService(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder getActivityToken();
   @Source(SUSI_NO_CATEGORY)  int getRequestedOrientation();
   @Source(SUSI_NO_CATEGORY)  android.app.LoaderManagerImpl getLoaderManager(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getIntent();
   @Source(SUSI_NO_CATEGORY)  android.view.MenuInflater getMenuInflater();
   @Source(SUSI_NO_CATEGORY)  android.view.View onCreateView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.content.Context arg2, @Sink(SUSI_NO_CATEGORY) android.util.AttributeSet arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCallingPackage();
   @Source(SUSI_NO_CATEGORY)  int getTaskId();
   @Source(SUSI_NO_CATEGORY)  android.app.Activity getParent();
   @Source(SUSI_NO_CATEGORY)  int getTitleColor();
   @Source(SUSI_NO_CATEGORY)  java.util.HashMap getLastNonConfigurationChildInstances();
   @Source(SUSI_NO_CATEGORY)  int getChangingConfigurations();
   @Source(SUSI_NO_CATEGORY)  android.app.Application getApplication();
}
class ActivityGroup{
   @Source(SUSI_NO_CATEGORY)  android.app.Activity getCurrentActivity();
   @Source(SUSI_NO_CATEGORY)  android.app.LocalActivityManager getLocalActivityManager();
}
class ActivityManager{
    void setFrontActivityScreenCompatMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setPackageScreenCompatMode(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setPackageAskScreenCompat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  int getLauncherLargeIconSize();
   @Source(SUSI_NO_CATEGORY)  int getMemoryClass();
   @Source(SUSI_NO_CATEGORY)  java.util.Map getAllPackageLaunchCounts();
   @Source(SUSI_NO_CATEGORY)  int getLauncherLargeIconDensity();
   @Source(SUSI_NO_CATEGORY)  java.util.List getRecentTasksForUser(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.internal.os.PkgUsageStats[] getAllPackageUsageStats();
   @Source(SUSI_NO_CATEGORY)  java.util.List getRunningServices(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void getMemoryInfo(  @Sink(SUSI_NO_CATEGORY) android.app.ActivityManager$MemoryInfo arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getTaskTopThumbnail(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getProcessesInErrorState();
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ConfigurationInfo getDeviceConfigurationInfo();
   @Source(SUSI_NO_CATEGORY)  int getPackageScreenCompatMode(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getRecentTasks(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.List getRunningTasks(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.app.IThumbnailReceiver arg2);
   @Source(SUSI_NO_CATEGORY)  int getFrontActivityScreenCompatMode();
   @Source(SUSI_NO_CATEGORY)  java.util.List getRunningExternalApplications();
   @Source(SUSI_NO_CATEGORY)  java.util.List getRunningTasks(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Debug$MemoryInfo[] getProcessMemoryInfo(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.PendingIntent getRunningServiceControlPanel(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.ActivityManager$TaskThumbnails getTaskThumbnails(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getPackageAskScreenCompat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getRunningAppProcesses();
   @Source(SUSI_NO_CATEGORY)  int getCurrentUser();
    void getMyMemoryState(  @Sink(SUSI_NO_CATEGORY) android.app.ActivityManager$RunningAppProcessInfo arg0);
   @Source(SUSI_NO_CATEGORY)  int getLargeMemoryClass();
}
class ActivityManager$RecentTaskInfo{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class ActivityManager$RunningAppProcessInfo{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class ActivityManager$RunningServiceInfo{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class ActivityManager$RunningTaskInfo{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class ActivityManager$TaskThumbnails{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getSubThumbnail(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ActivityManagerNative{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
   @Source(SUSI_NO_CATEGORY)  android.app.IActivityManager getDefault();
}
class ActivityManagerProxy{
   @Source(SUSI_NO_CATEGORY)  android.content.Intent registerReceiver(  @Sink(SUSI_NO_CATEGORY) android.app.IApplicationThread arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.content.IIntentReceiver arg2, @Sink(SUSI_NO_CATEGORY) android.content.IntentFilter arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
    void backupAgentCreated(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1);
    void activityResumed(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
   @Source(SUSI_NO_CATEGORY)  boolean refContentProvider(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int checkUriPermission(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setProcessLimit(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void forceStopPackage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void finishInstrumentation(  @Sink(SUSI_NO_CATEGORY) android.app.IApplicationThread arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder peekService(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void moveTaskToBack(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean moveActivityTaskToBack(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  int stopUser(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.app.IStopUserCallback arg1);
    void registerProcessObserver(  @Sink(SUSI_NO_CATEGORY) android.app.IProcessObserver arg0);
    void signalPersistentProcesses(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void removeContentProvider(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  boolean killProcessesBelowForeground(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int checkPermission(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setLockScreenShown(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setImmersive(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void finishReceiver(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4);
   @Source(SUSI_NO_CATEGORY)  boolean finishActivity(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2);
    void setDebugApp(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  boolean isIntentSenderAnActivity(  @Sink(SUSI_NO_CATEGORY) android.content.IIntentSender arg0);
   @Source(SUSI_NO_CATEGORY)  boolean profileControl(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
    void setProcessForeground(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  boolean willActivityBeVisible(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
    void publishService(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg2);
    void activityIdle(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) android.content.res.Configuration arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void finishSubActivity(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void attachApplication(  @Sink(SUSI_NO_CATEGORY) android.app.IApplicationThread arg0);
    void unbindFinished(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void setRequestedOrientation(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void activitySlept(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
   @Source(SUSI_NO_CATEGORY)  boolean clearApplicationUserData(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.content.pm.IPackageDataObserver arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int startActivityAsUser(  @Sink(SUSI_NO_CATEGORY) android.app.IApplicationThread arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) int arg6, @Sink(SUSI_NO_CATEGORY) java.lang.String arg7, @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg8, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg9, @Sink(SUSI_NO_CATEGORY) int arg10);
    void grantUriPermission(  @Sink(SUSI_NO_CATEGORY) android.app.IApplicationThread arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void killApplicationWithAppId(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setPackageAskScreenCompat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void unstableProviderDied(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
   @Source(SUSI_NO_CATEGORY)  boolean unbindService(  @Sink(SUSI_NO_CATEGORY) android.app.IServiceConnection arg0);
   @Source(SUSI_NO_CATEGORY)  int startActivityIntentSender(  @Sink(SUSI_NO_CATEGORY) android.app.IApplicationThread arg0, @Sink(SUSI_NO_CATEGORY) android.content.IntentSender arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5, @Sink(SUSI_NO_CATEGORY) int arg6, @Sink(SUSI_NO_CATEGORY) int arg7, @Sink(SUSI_NO_CATEGORY) int arg8, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg9);
    void unregisterReceiver(  @Sink(SUSI_NO_CATEGORY) android.content.IIntentReceiver arg0);
    void publishContentProviders(  @Sink(SUSI_NO_CATEGORY) android.app.IApplicationThread arg0, @Sink(SUSI_NO_CATEGORY) java.util.List arg1);
    void startRunning(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
    void setAlwaysFinish(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.IActivityManager$WaitResult startActivityAndWait(  @Sink(SUSI_NO_CATEGORY) android.app.IApplicationThread arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) int arg6, @Sink(SUSI_NO_CATEGORY) java.lang.String arg7, @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg8, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg9, @Sink(SUSI_NO_CATEGORY) int arg10);
   @Source(SUSI_NO_CATEGORY)  boolean startNextMatchingActivity(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
    void setServiceForeground(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.app.Notification arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4);
   @Source(SUSI_NO_CATEGORY)  boolean startInstrumentation(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg3, @Sink(SUSI_NO_CATEGORY) android.app.IInstrumentationWatcher arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
   @Source(SUSI_NO_CATEGORY)  boolean handleApplicationWtf(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.app.ApplicationErrorReport$CrashInfo arg2);
    void noteWakeupAlarm(  @Sink(SUSI_NO_CATEGORY) android.content.IIntentSender arg0);
   @Source(SUSI_NO_CATEGORY)  int startActivity(  @Sink(SUSI_NO_CATEGORY) android.app.IApplicationThread arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) int arg6, @Sink(SUSI_NO_CATEGORY) java.lang.String arg7, @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg8, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg9);
    void activityDestroyed(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
    void serviceDoneExecuting(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void moveTaskBackwards(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean switchUser(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean isIntentSenderTargetedToPackage(  @Sink(SUSI_NO_CATEGORY) android.content.IIntentSender arg0);
   @Source(SUSI_NO_CATEGORY)  boolean stopServiceToken(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void cancelIntentSender(  @Sink(SUSI_NO_CATEGORY) android.content.IIntentSender arg0);
    void crashApplication(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
    void activityPaused(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
    void killBackgroundProcesses(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean removeSubTask(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int bindService(  @Sink(SUSI_NO_CATEGORY) android.app.IApplicationThread arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) android.app.IServiceConnection arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) int arg6);
   @Source(SUSI_NO_CATEGORY)  int checkGrantUriPermission(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void closeSystemDialogs(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void handleApplicationCrash(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) android.app.ApplicationErrorReport$CrashInfo arg1);
   @Source(SUSI_NO_CATEGORY)  boolean bindBackupAgent(  @Sink(SUSI_NO_CATEGORY) android.content.pm.ApplicationInfo arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void unbroadcastIntent(  @Sink(SUSI_NO_CATEGORY) android.app.IApplicationThread arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void reportThumbnail(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg1, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg2);
    void unregisterProcessObserver(  @Sink(SUSI_NO_CATEGORY) android.app.IProcessObserver arg0);
    void killApplicationProcess(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder newUriPermissionOwner(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int startActivityWithConfig(  @Sink(SUSI_NO_CATEGORY) android.app.IApplicationThread arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) int arg6, @Sink(SUSI_NO_CATEGORY) android.content.res.Configuration arg7, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg8, @Sink(SUSI_NO_CATEGORY) int arg9);
   @Source(SUSI_NO_CATEGORY)  boolean killPids(  @Sink(SUSI_NO_CATEGORY) int[] arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  boolean dumpHeap(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg4);
    void unregisterUserSwitchObserver(  @Sink(SUSI_NO_CATEGORY) android.app.IUserSwitchObserver arg0);
    void setFrontActivityScreenCompatMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean removeTask(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void moveTaskToFront(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
    void activityStopped(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg2, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg3);
   @Source(SUSI_NO_CATEGORY)  int startActivities(  @Sink(SUSI_NO_CATEGORY) android.app.IApplicationThread arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent[] arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg2, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg3, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
    void registerUserSwitchObserver(  @Sink(SUSI_NO_CATEGORY) android.app.IUserSwitchObserver arg0);
    void removeContentProviderExternal(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1);
    void setActivityController(  @Sink(SUSI_NO_CATEGORY) android.app.IActivityController arg0);
   @Source(SUSI_NO_CATEGORY)  boolean targetTaskAffinityMatchesActivity(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void overridePendingTransition(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  int broadcastIntent(  @Sink(SUSI_NO_CATEGORY) android.app.IApplicationThread arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.content.IIntentReceiver arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg6, @Sink(SUSI_NO_CATEGORY) java.lang.String arg7, @Sink(SUSI_NO_CATEGORY) boolean arg8, @Sink(SUSI_NO_CATEGORY) boolean arg9, @Sink(SUSI_NO_CATEGORY) int arg10);
   @Source(SUSI_NO_CATEGORY)  boolean navigateUpTo(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg3);
    void showWaitingForDebugger(  @Sink(SUSI_NO_CATEGORY) android.app.IApplicationThread arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  boolean shutdown(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean finishActivityAffinity(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
    void setPackageScreenCompatMode(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean isImmersive(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
    void grantUriPermissionFromOwner(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
    void handleApplicationStrictModeViolation(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.StrictMode$ViolationInfo arg2);
   @Source(SUSI_NO_CATEGORY)  int handleIncomingUser(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5, @Sink(SUSI_NO_CATEGORY) java.lang.String arg6);
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName startService(  @Sink(SUSI_NO_CATEGORY) android.app.IApplicationThread arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  int stopService(  @Sink(SUSI_NO_CATEGORY) android.app.IApplicationThread arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_FILE_INFORMATION)  android.os.ParcelFileDescriptor openContentUri(  android.net.Uri arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getRunningAppProcesses();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPackageForIntentSender(  @Sink(SUSI_NO_CATEGORY) android.content.IIntentSender arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getProcessesInErrorState();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPackageForToken(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
   @Source(SUSI_NO_CATEGORY)  int getRequestedOrientation(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getIntentForIntentSender(  @Sink(SUSI_NO_CATEGORY) android.content.IIntentSender arg0);
   @Source(SUSI_NO_CATEGORY)  int getFrontActivityScreenCompatMode();
   @Source(SUSI_NO_CATEGORY)  java.util.List getTasks(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.app.IThumbnailReceiver arg2);
   @Source(SUSI_NO_CATEGORY)  long[] getProcessPss(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
   @Source(SUSI_NO_CATEGORY)  boolean isUserRunning(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.UserInfo getCurrentUser();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProviderMimeType(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getLaunchedFromUid(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getActivityClassForToken(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.PendingIntent getRunningServiceControlPanel(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.IActivityManager$ContentProviderHolder getContentProviderExternal(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg2);
   @Source(SUSI_NO_CATEGORY)  android.app.IActivityManager$ContentProviderHolder getContentProvider(  @Sink(SUSI_NO_CATEGORY) android.app.IApplicationThread arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
   @Source(SUSI_NO_CATEGORY)  java.util.List getServices(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  long inputDispatchingTimedOut(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getCallingActivity(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getRecentTasks(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  boolean getPackageAskScreenCompat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int[] getRunningUserIds();
   @Source(SUSI_NO_CATEGORY)  android.app.ActivityManager$TaskThumbnails getTaskThumbnails(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getUidForIntentSender(  @Sink(SUSI_NO_CATEGORY) android.content.IIntentSender arg0);
   @Source(SUSI_NO_CATEGORY)  int getTaskForActivity(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ConfigurationInfo getDeviceConfigurationInfo();
   @Source(SUSI_NO_CATEGORY)  android.os.Debug$MemoryInfo[] getProcessMemoryInfo(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
   @Source(SUSI_NO_CATEGORY)  int getPackageScreenCompatMode(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getTaskTopThumbnail(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.res.Configuration getConfiguration();
   @Source(SUSI_NO_CATEGORY)  java.util.List getRunningExternalApplications();
   @Source(SUSI_NO_CATEGORY)  int getProcessLimit();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCallingPackage(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.IIntentSender getIntentSender(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) android.content.Intent[] arg5, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg6, @Sink(SUSI_NO_CATEGORY) int arg7, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg8, @Sink(SUSI_NO_CATEGORY) int arg9);
}
class ActivityOptions{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPackageName();
   @Source(SUSI_NO_CATEGORY)  int getAnimationType();
   @Source(SUSI_NO_CATEGORY)  int getCustomExitResId();
   @Source(SUSI_NO_CATEGORY)  int getCustomEnterResId();
   @Source(SUSI_NO_CATEGORY)  int getStartY();
   @Source(SUSI_NO_CATEGORY)  int getStartX();
   @Source(SUSI_NO_CATEGORY)  int getStartWidth();
   @Source(SUSI_NO_CATEGORY)  int getStartHeight();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getThumbnail();
   @Source(SUSI_NO_CATEGORY)  android.os.IRemoteCallback getOnAnimationStartListener();
}
class ActivityThread{
    void registerOnActivityPausedListener(  @Sink(SUSI_NO_CATEGORY) android.app.Activity arg0, @Sink(SUSI_NO_CATEGORY) android.app.OnActivityPausedListener arg1);
   @Source(SUSI_NO_CATEGORY)  android.os.Handler getHandler();
   @Source(SUSI_NO_CATEGORY)  android.content.pm.IPackageManager getPackageManager();
   @Source(SUSI_NO_CATEGORY)  android.app.Instrumentation getInstrumentation();
   @Source(SUSI_NO_CATEGORY)  android.app.ContextImpl getSystemContext();
   @Source(SUSI_NO_CATEGORY)  android.app.ActivityThread$ApplicationThread getApplicationThread();
   @Source(SUSI_NO_CATEGORY)  android.app.Application getApplication();
   @Source(SUSI_NO_CATEGORY)  android.os.Looper getLooper();
   @Source(SUSI_NO_CATEGORY)  android.content.res.Resources getTopLevelResources(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.res.Configuration arg2, @Sink(SUSI_NO_CATEGORY) android.content.res.CompatibilityInfo arg3);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getIntentBeingBroadcast();
   @Source(SUSI_NO_CATEGORY)  android.app.LoadedApk getPackageInfo(  @Sink(SUSI_NO_CATEGORY) android.content.pm.ApplicationInfo arg0, @Sink(SUSI_NO_CATEGORY) android.content.res.CompatibilityInfo arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.res.Resources getTopLevelResources(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.res.Configuration arg2, @Sink(SUSI_NO_CATEGORY) android.app.LoadedApk arg3);
   @Source(SUSI_NO_CATEGORY)  android.app.LoadedApk getPackageInfo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.content.res.CompatibilityInfo arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  android.util.DisplayMetrics getDisplayMetricsLocked(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.res.CompatibilityInfo arg1);
   @Source(SUSI_NO_CATEGORY)  int getIntCoreSetting(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.res.Configuration getConfiguration();
   @Source(SUSI_NO_CATEGORY)  android.app.Activity getActivity(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.LoadedApk getPackageInfoNoCheck(  @Sink(SUSI_NO_CATEGORY) android.content.pm.ApplicationInfo arg0, @Sink(SUSI_NO_CATEGORY) android.content.res.CompatibilityInfo arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProfileFilePath();
   @Source(SUSI_NO_CATEGORY)  android.content.res.Configuration applyConfigCompatMainThread(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.res.Configuration arg1, @Sink(SUSI_NO_CATEGORY) android.content.res.CompatibilityInfo arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProcessName();
   @Source(SUSI_NO_CATEGORY)  android.app.LoadedApk getPackageInfo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.content.res.CompatibilityInfo arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
}
class ActivityThread$ApplicationThread{
    void dumpDbInfo(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.lang.String[] arg1);
    void dumpGfxInfo(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.lang.String[] arg1);
    void dumpActivity(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) android.os.IBinder arg1, @Sink(SUSI_FILE) java.lang.String arg2, @Sink(SUSI_FILE) java.lang.String[] arg3);
    void dumpService(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) android.os.IBinder arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void dumpProvider(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) android.os.IBinder arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void scheduleConfigurationChanged(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.res.Configuration arg0);
    void dispatchPackageBroadcast(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1);
    void setCoreSettings(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
    void setSchedulingGroup(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setHttpProxy(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void scheduleLaunchActivity(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.content.pm.ActivityInfo arg3, @Sink(SUSI_NO_CATEGORY) android.content.res.Configuration arg4, @Sink(SUSI_NO_CATEGORY) android.content.res.CompatibilityInfo arg5, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg6, @Sink(SUSI_NO_CATEGORY) java.util.List arg7, @Sink(SUSI_NO_CATEGORY) java.util.List arg8, @Sink(SUSI_NO_CATEGORY) boolean arg9, @Sink(SUSI_NO_CATEGORY) boolean arg10, @Sink(SUSI_NO_CATEGORY) java.lang.String arg11, @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg12, @Sink(SUSI_NO_CATEGORY) boolean arg13);
   @Source(SUSI_NO_CATEGORY)  android.os.Debug$MemoryInfo dumpMemInfo(  @Sink(SUSI_NO_CATEGORY) java.io.FileDescriptor arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3);
}
class ActivityThread$EventLoggingReporter{
    void report(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object[] arg1);
}
class ActivityThread$H{
    void handleMessage(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
}
class AlarmManager{
    void set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) android.app.PendingIntent arg2);
    void setTime(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setInexactRepeating(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) android.app.PendingIntent arg3);
    void setRepeating(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) android.app.PendingIntent arg3);
    void setTimeZone(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class AlertDialog{
    void setView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
    void setIcon(  @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg0);
    void setButton(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1, @Sink(SUSI_NO_CATEGORY) android.os.Message arg2);
    void setInverseBackgroundForced(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setIcon(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setCustomTitle(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
    void setIconAttribute(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setButton(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1, @Sink(SUSI_NO_CATEGORY) android.content.DialogInterface$OnClickListener arg2);
    void setView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
   @Source(SUSI_NO_CATEGORY)  android.widget.ListView getListView();
   @Source(SUSI_NO_CATEGORY)  android.widget.Button getButton(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class AlertDialog$Builder{
   @Source(SUSI_NO_CATEGORY)  android.app.AlertDialog$Builder setMultiChoiceItems(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean[] arg1, @Sink(SUSI_NO_CATEGORY) android.content.DialogInterface$OnMultiChoiceClickListener arg2);
   @Source(SUSI_NO_CATEGORY)  android.app.AlertDialog$Builder setSingleChoiceItems(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.DialogInterface$OnClickListener arg2);
   @Source(SUSI_NO_CATEGORY)  android.app.AlertDialog$Builder setMessage(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.AlertDialog$Builder setNeutralButton(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.DialogInterface$OnClickListener arg1);
   @Source(SUSI_NO_CATEGORY)  android.app.AlertDialog$Builder setIconAttribute(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.AlertDialog$Builder setNegativeButton(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.DialogInterface$OnClickListener arg1);
   @Source(SUSI_NO_CATEGORY)  android.app.AlertDialog$Builder setPositiveButton(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.DialogInterface$OnClickListener arg1);
   @Source(SUSI_NO_CATEGORY)  android.app.AlertDialog$Builder setItems(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.content.DialogInterface$OnClickListener arg1);
   @Source(SUSI_NO_CATEGORY)  android.app.AlertDialog$Builder setTitle(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.AlertDialog show();
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
}
class AppGlobals{
   @Source(SUSI_NO_CATEGORY)  android.app.Application getInitialApplication();
   @Source(SUSI_NO_CATEGORY)  android.content.pm.IPackageManager getPackageManager();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInitialPackage();
}
class Application{
   @Source(SUSI_NO_CATEGORY)  boolean bindService(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.content.ServiceConnection arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class ApplicationErrorReport{
    void dump(  @Sink(SUSI_NO_CATEGORY) android.util.Printer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getErrorReportReceiver(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getErrorReportReceiver(  @Sink(SUSI_NO_CATEGORY) android.content.pm.PackageManager arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
}
class ApplicationErrorReport$AnrInfo{
    void dump(  @Sink(SUSI_NO_CATEGORY) android.util.Printer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class ApplicationErrorReport$BatteryInfo{
    void dump(  @Sink(SUSI_NO_CATEGORY) android.util.Printer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class ApplicationErrorReport$CrashInfo{
    void dump(  @Sink(SUSI_NO_CATEGORY) android.util.Printer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class ApplicationErrorReport$RunningServiceInfo{
    void dump(  @Sink(SUSI_NO_CATEGORY) android.util.Printer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class ApplicationLoaders{
   @Source(SUSI_NO_CATEGORY)  java.lang.ClassLoader getClassLoader(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.ClassLoader arg2);
   @Source(SUSI_NO_CATEGORY)  android.app.ApplicationLoaders getDefault();
}
class ApplicationPackageManager{
   @Source(SUSI_SYNCHRONIZATION_DATA)  boolean addPermissionAsync(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.content.pm.PermissionInfo arg0);
   @Source(SUSI_NO_CATEGORY)  boolean hasSystemFeature(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setApplicationEnabledSetting(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void addPackageToPreferred(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  boolean addPermission(  @Sink(SUSI_NO_CATEGORY) android.content.pm.PermissionInfo arg0);
    void setComponentEnabledSetting(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void setInstallerPackageName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getApplicationIcon(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ResolveInfo resolveActivityAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ActivityInfo getActivityInfo(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInstallerPackageName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List queryBroadcastReceivers(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.List queryIntentActivitiesAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.List getPreferredPackages(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getAllPermissionGroups(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getApplicationLogo(  @Sink(SUSI_NO_CATEGORY) android.content.pm.ApplicationInfo arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getInstalledPackages(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] canonicalToCurrentPackageNames(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getPackagesForUid(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getActivityIcon(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List queryContentProviders(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNameForUid(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.PermissionInfo getPermissionInfo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getApplicationIcon(  @Sink(SUSI_NO_CATEGORY) android.content.pm.ApplicationInfo arg0);
   @Source(SUSI_NO_CATEGORY)  int getUidForSharedUser(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getDrawable(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.pm.ApplicationInfo arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.List getInstalledApplications(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getApplicationLogo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getActivityLogo(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getInstalledPackages(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ProviderInfo getProviderInfo(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getPreferredActivities(  @Sink(SUSI_NO_CATEGORY) java.util.List arg0, @Sink(SUSI_NO_CATEGORY) java.util.List arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.res.Resources getResourcesForActivity(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.PackageInfo getPackageInfo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.List queryIntentServicesAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.List queryPermissionsByGroup(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getLaunchIntentForPackage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void getPackageSizeInfo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.pm.IPackageStatsObserver arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.List queryIntentActivities(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.PermissionGroupInfo getPermissionGroupInfo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int[] getPackageGids(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getActivityLogo(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getActivityIcon(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.FeatureInfo[] getSystemAvailableFeatures();
   @Source(SUSI_NO_CATEGORY)  java.util.List queryBroadcastReceivers(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getDefaultActivityIcon();
   @Source(SUSI_NO_CATEGORY)  java.util.List queryInstrumentation(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getSystemSharedLibraryNames();
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ActivityInfo getReceiverInfo(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.res.Resources getResourcesForApplication(  @Sink(SUSI_NO_CATEGORY) android.content.pm.ApplicationInfo arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getApplicationLabel(  @Sink(SUSI_NO_CATEGORY) android.content.pm.ApplicationInfo arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ProviderInfo resolveContentProvider(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.res.XmlResourceParser getXml(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.pm.ApplicationInfo arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getText(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.pm.ApplicationInfo arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.InstrumentationInfo getInstrumentationInfo(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.res.Resources getResourcesForApplicationAsUser(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] currentToCanonicalPackageNames(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.res.Resources getResourcesForApplication(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getComponentEnabledSetting(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ResolveInfo resolveService(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.List queryIntentServices(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ServiceInfo getServiceInfo(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity();
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ApplicationInfo getApplicationInfo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.List queryIntentActivityOptions(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent[] arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  int getApplicationEnabledSetting(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class ApplicationThreadNative{
    boolean onTransact(  @Sink(SUSI_FILE) int arg0, @Sink(SUSI_FILE) android.os.Parcel arg1, @Sink(SUSI_FILE) android.os.Parcel arg2, @Sink(SUSI_FILE) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class ApplicationThreadProxy{
    void dumpDbInfo(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.lang.String[] arg1);
    void dumpActivity(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) android.os.IBinder arg1, @Sink(SUSI_FILE) java.lang.String arg2, @Sink(SUSI_FILE) java.lang.String[] arg3);
    void dumpProvider(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) android.os.IBinder arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void dumpService(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) android.os.IBinder arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void dumpGfxInfo(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.lang.String[] arg1);
    android.os.Debug$MemoryInfo dumpMemInfo(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) boolean arg1, @Sink(SUSI_FILE) boolean arg2, @Sink(SUSI_FILE) java.lang.String[] arg3);
    void dumpHeap(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg2);
    void scheduleTrimMemory(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void scheduleLaunchActivity(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.content.pm.ActivityInfo arg3, @Sink(SUSI_NO_CATEGORY) android.content.res.Configuration arg4, @Sink(SUSI_NO_CATEGORY) android.content.res.CompatibilityInfo arg5, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg6, @Sink(SUSI_NO_CATEGORY) java.util.List arg7, @Sink(SUSI_NO_CATEGORY) java.util.List arg8, @Sink(SUSI_NO_CATEGORY) boolean arg9, @Sink(SUSI_NO_CATEGORY) boolean arg10, @Sink(SUSI_NO_CATEGORY) java.lang.String arg11, @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg12, @Sink(SUSI_NO_CATEGORY) boolean arg13);
    void scheduleWindowVisibility(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void requestThumbnail(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
    void scheduleCreateBackupAgent(  @Sink(SUSI_NO_CATEGORY) android.content.pm.ApplicationInfo arg0, @Sink(SUSI_NO_CATEGORY) android.content.res.CompatibilityInfo arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void scheduleNewIntent(  @Sink(SUSI_NO_CATEGORY) java.util.List arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1);
    void scheduleActivityConfigurationChanged(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
    void setSchedulingGroup(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setHttpProxy(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void scheduleBindService(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void scheduleSendResult(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) java.util.List arg1);
    void scheduleRegisteredReceiver(  @Sink(SUSI_NO_CATEGORY) android.content.IIntentReceiver arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg4, @Sink(SUSI_NO_CATEGORY) boolean arg5, @Sink(SUSI_NO_CATEGORY) boolean arg6, @Sink(SUSI_NO_CATEGORY) int arg7);
    void scheduleServiceArgs(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg4);
    void schedulePauseActivity(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void scheduleCrash(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void scheduleStopService(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
    void setCoreSettings(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
    void scheduleRelaunchActivity(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) java.util.List arg1, @Sink(SUSI_NO_CATEGORY) java.util.List arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4, @Sink(SUSI_NO_CATEGORY) android.content.res.Configuration arg5);
    void profilerControl(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void dispatchPackageBroadcast(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1);
    void scheduleDestroyActivity(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void scheduleCreateService(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) android.content.pm.ServiceInfo arg1, @Sink(SUSI_NO_CATEGORY) android.content.res.CompatibilityInfo arg2);
    void unstableProviderDied(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
    void scheduleStopActivity(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void scheduleResumeActivity(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void updatePackageCompatibilityInfo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.content.res.CompatibilityInfo arg1);
    void scheduleSleeping(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void scheduleUnbindService(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1);
    void scheduleReceiver(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.content.pm.ActivityInfo arg1, @Sink(SUSI_NO_CATEGORY) android.content.res.CompatibilityInfo arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg5, @Sink(SUSI_NO_CATEGORY) boolean arg6, @Sink(SUSI_NO_CATEGORY) int arg7);
    void bindApplication(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.content.pm.ApplicationInfo arg1, @Sink(SUSI_NO_CATEGORY) java.util.List arg2, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg5, @Sink(SUSI_NO_CATEGORY) boolean arg6, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg7, @Sink(SUSI_NO_CATEGORY) android.app.IInstrumentationWatcher arg8, @Sink(SUSI_NO_CATEGORY) int arg9, @Sink(SUSI_NO_CATEGORY) boolean arg10, @Sink(SUSI_NO_CATEGORY) boolean arg11, @Sink(SUSI_NO_CATEGORY) boolean arg12, @Sink(SUSI_NO_CATEGORY) android.content.res.Configuration arg13, @Sink(SUSI_NO_CATEGORY) android.content.res.CompatibilityInfo arg14, @Sink(SUSI_NO_CATEGORY) java.util.Map arg15, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg16);
}
class BackStackRecord{
    void dump(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) java.io.FileDescriptor arg1, @Sink(SUSI_FILE) java.io.PrintWriter arg2, @Sink(SUSI_FILE) java.lang.String[] arg3);
   @Source(SUSI_NO_CATEGORY)  android.app.FragmentTransaction setCustomAnimations(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getTransitionStyle();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  int getBreadCrumbTitleRes();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getBreadCrumbShortTitle();
   @Source(SUSI_NO_CATEGORY)  int getBreadCrumbShortTitleRes();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getBreadCrumbTitle();
   @Source(SUSI_NO_CATEGORY)  int getTransition();
   @Source(SUSI_NO_CATEGORY)  int getId();
}
class BackStackState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class ContextImpl{
    java.io.FileInputStream openFileInput(  @Sink(SUSI_FILE) java.lang.String arg0);
    java.io.FileOutputStream openFileOutput(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) int arg1);
    void sendOrderedBroadcastAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.content.BroadcastReceiver arg3, @Sink(SUSI_NO_CATEGORY) android.os.Handler arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) java.lang.String arg6, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg7);
    void sendStickyBroadcastAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg1);
    void sendBroadcastAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void startActivities(  @Sink(SUSI_NO_CATEGORY) android.content.Intent[] arg0);
   @Source(SUSI_NO_CATEGORY)  boolean startInstrumentation(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
    void sendBroadcast(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void sendOrderedBroadcast(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.content.BroadcastReceiver arg2, @Sink(SUSI_NO_CATEGORY) android.os.Handler arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg6);
    void setFilePermissionsFromMode(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void sendStickyBroadcast(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
    void startActivity(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
    void sendBroadcast(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
    void sendBroadcastAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg1);
    void sendStickyOrderedBroadcast(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.content.BroadcastReceiver arg1, @Sink(SUSI_NO_CATEGORY) android.os.Handler arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg5);
    void sendOrderedBroadcast(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void sendStickyOrderedBroadcastAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg1, @Sink(SUSI_NO_CATEGORY) android.content.BroadcastReceiver arg2, @Sink(SUSI_NO_CATEGORY) android.os.Handler arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg6);
   @Source(SUSI_NO_CATEGORY)  android.database.sqlite.SQLiteDatabase openOrCreateDatabase(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.database.sqlite.SQLiteDatabase$CursorFactory arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName startService(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
   @Source(SUSI_NO_CATEGORY)  boolean bindService(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.content.ServiceConnection arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void startActivityAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName startServiceAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg1);
    void setWallpaper(  @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg0);
    void startIntentSender(  @Sink(SUSI_NO_CATEGORY) android.content.IntentSender arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg5);
    void startIntentSender(  @Sink(SUSI_NO_CATEGORY) android.content.IntentSender arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
    void startActivityAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg2);
   @Source(SUSI_NO_CATEGORY)  boolean bindService(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.content.ServiceConnection arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  android.database.sqlite.SQLiteDatabase openOrCreateDatabase(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.database.sqlite.SQLiteDatabase$CursorFactory arg2, @Sink(SUSI_NO_CATEGORY) android.database.DatabaseErrorHandler arg3);
    void setWallpaper(  @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPackageCodePath();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getSystemService(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.res.AssetManager getAssets();
   @Source(SUSI_NO_CATEGORY)  java.io.File getCacheDir();
   @Source(SUSI_NO_CATEGORY)  int getThemeResId();
   @Source(SUSI_NO_CATEGORY)  java.io.File getObbDir();
   @Source(SUSI_NO_CATEGORY)  android.content.res.Resources getResources();
   @Source(SUSI_NO_CATEGORY)  int getWallpaperDesiredMinimumHeight();
   @Source(SUSI_NO_CATEGORY)  android.content.ContentResolver getContentResolver();
   @Source(SUSI_NO_CATEGORY)  int getUserId();
   @Source(SUSI_NO_CATEGORY)  java.io.File getDir(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Context createPackageContext(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.io.File getExternalCacheDir();
   @Source(SUSI_NO_CATEGORY)  java.io.File getSharedPrefsFile(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.CompatibilityInfoHolder getCompatibilityInfo(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.File getDatabasePath(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.ContextImpl getImpl(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ApplicationInfo getApplicationInfo();
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder getActivityToken();
   @Source(SUSI_NO_CATEGORY)  android.os.Looper getMainLooper();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getWallpaper();
   @Source(SUSI_NO_CATEGORY)  java.io.File getFileStreamPath(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.Context createPackageContextAsUser(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.Context getApplicationContext();
   @Source(SUSI_NO_CATEGORY)  java.io.File getFilesDir();
   @Source(SUSI_NO_CATEGORY)  java.lang.ClassLoader getClassLoader();
   @Source(SUSI_NO_CATEGORY)  android.content.Context getReceiverRestrictedContext();
   @Source(SUSI_NO_CATEGORY)  android.content.res.Resources$Theme getTheme();
   @Source(SUSI_NO_CATEGORY)  int getWallpaperDesiredMinimumWidth();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPackageName();
   @Source(SUSI_NO_CATEGORY)  android.content.pm.PackageManager getPackageManager();
   @Source(SUSI_NO_CATEGORY)  java.io.File getExternalFilesDir(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.SharedPreferences getSharedPreferences(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPackageResourcePath();
   @Source(SUSI_NO_CATEGORY)  android.content.Context getOuterContext();
}
class ContextImpl$15{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object createStaticService();
}
class ContextImpl$20{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getService(  @Sink(SUSI_NO_CATEGORY) android.app.ContextImpl arg0);
}
class ContextImpl$ApplicationContentResolver{
    void setMasterSyncAutomatically(  @Sink(SUSI_SYNCHRONIZATION_DATA) boolean arg0);
   @Source(SUSI_SYNCHRONIZATION_DATA)  boolean getSyncAutomatically(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1);
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.util.List getPeriodicSyncs(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1);
   @Source(SUSI_SYNCHRONIZATION_DATA)  int getIsSyncable(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.accounts.Account arg0, @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg1);
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.content.SyncInfo getCurrentSync();
}
class ContextImpl$ServiceFetcher{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object getService(  android.app.ContextImpl arg0);
}
class ContextImpl$StaticServiceFetcher{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object getService(  android.app.ContextImpl arg0);
}
class DatePickerDialog{
    void updateDate(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  android.widget.DatePicker getDatePicker();
}
class Dialog{
    void onRestoreInstanceState(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
    void setFeatureDrawableResource(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setCanceledOnTouchOutside(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setContentView(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setVolumeControlStream(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setContentView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
    void setTitle(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setFeatureDrawableAlpha(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setContentView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup$LayoutParams arg1);
    void setFeatureDrawable(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.drawable.Drawable arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.View getCurrentFocus();
   @Source(SUSI_NO_CATEGORY)  android.app.Activity getOwnerActivity();
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
   @Source(SUSI_NO_CATEGORY)  android.view.LayoutInflater getLayoutInflater();
   @Source(SUSI_NO_CATEGORY)  android.app.ActionBar getActionBar();
   @Source(SUSI_NO_CATEGORY)  android.view.Window getWindow();
   @Source(SUSI_NO_CATEGORY)  int getVolumeControlStream();
}
class DialogFragment{
    void dump(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) java.io.FileDescriptor arg1, @Sink(SUSI_FILE) java.io.PrintWriter arg2, @Sink(SUSI_FILE) java.lang.String[] arg3);
   @Source(SUSI_NO_CATEGORY)  int getTheme();
   @Source(SUSI_NO_CATEGORY)  boolean getShowsDialog();
   @Source(SUSI_NO_CATEGORY)  android.view.LayoutInflater getLayoutInflater(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog getDialog();
}
class DownloadManager{
    android.os.ParcelFileDescriptor openDownloadedFile(  @Sink(SUSI_FILE) long arg0);
    void setAccessAllDownloads(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  long addCompletedDownload(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) long arg5, @Sink(SUSI_NO_CATEGORY) boolean arg6);
    void restartDownload(  @Sink(SUSI_NO_CATEGORY) long[] arg0);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getDownloadUri(  long arg0);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getUriForDownloadedFile(  long arg0);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor query(  @Sink(SUSI_NO_CATEGORY) android.app.DownloadManager$Query arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Long getMaxBytesOverMobile(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getWhereClauseForIds(  @Sink(SUSI_NO_CATEGORY) long[] arg0);
   @Source(SUSI_NO_CATEGORY)  int markRowDeleted(  @Sink(SUSI_NO_CATEGORY) long[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getWhereArgsForIds(  @Sink(SUSI_NO_CATEGORY) long[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMimeTypeForDownloadedFile(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  long getActiveNetworkWarningBytes(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Long getRecommendedMaxBytesOverMobile(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class DownloadManager$CursorTranslator{
   @Source(SUSI_NO_CATEGORY)  long getLong(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class DownloadManager$Query{
   @Source(SUSI_NO_CATEGORY)  android.app.DownloadManager$Query setFilterByStatus(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor runQuery(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg2);
}
class DownloadManager$Request{
    android.app.DownloadManager$Request setDestinationInExternalFilesDir(  @Sink(SUSI_FILE) android.content.Context arg0, @Sink(SUSI_FILE) java.lang.String arg1, @Sink(SUSI_FILE) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  android.app.DownloadManager$Request setShowRunningNotification(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.ContentValues toContentValues(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.DownloadManager$Request setDestinationInExternalPublicDir(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.app.DownloadManager$Request addRequestHeader(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class ExpandableListActivity{
   @Source(SUSI_NO_CATEGORY)  boolean setSelectedChild(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void setSelectedGroup(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.widget.ExpandableListView getExpandableListView();
   @Source(SUSI_NO_CATEGORY)  android.widget.ExpandableListAdapter getExpandableListAdapter();
   @Source(SUSI_NO_CATEGORY)  long getSelectedPosition();
   @Source(SUSI_NO_CATEGORY)  long getSelectedId();
}
class Fragment{
    void dump(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) java.io.FileDescriptor arg1, @Sink(SUSI_FILE) java.io.PrintWriter arg2, @Sink(SUSI_FILE) java.lang.String[] arg3);
    void startActivity(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
    void startActivityForResult(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void setInitialSavedState(  @Sink(SUSI_NO_CATEGORY) android.app.Fragment$SavedState arg0);
    void startActivity(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void startActivityForResult(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
   @Source(SUSI_NO_CATEGORY)  android.app.Fragment instantiate(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTag();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object[] arg1);
   @Source(SUSI_NO_CATEGORY)  int getTargetRequestCode();
   @Source(SUSI_NO_CATEGORY)  android.app.LoaderManager getLoaderManager();
   @Source(SUSI_NO_CATEGORY)  boolean getUserVisibleHint();
   @Source(SUSI_NO_CATEGORY)  android.view.LayoutInflater getLayoutInflater(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.FragmentManager getChildFragmentManager();
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle getArguments();
   @Source(SUSI_NO_CATEGORY)  android.app.FragmentManager getFragmentManager();
   @Source(SUSI_NO_CATEGORY)  android.view.View getView();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getRetainInstance();
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getText(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.Fragment getTargetFragment();
   @Source(SUSI_NO_CATEGORY)  android.app.Activity getActivity();
   @Source(SUSI_NO_CATEGORY)  int getId();
   @Source(SUSI_NO_CATEGORY)  android.content.res.Resources getResources();
   @Source(SUSI_NO_CATEGORY)  android.app.Fragment getParentFragment();
}
class FragmentManager{
   @Source(SUSI_NO_CATEGORY)  android.app.FragmentTransaction openTransaction();
}
class FragmentManagerImpl{
    void dump(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) java.io.FileDescriptor arg1, @Sink(SUSI_FILE) java.io.PrintWriter arg2, @Sink(SUSI_FILE) java.lang.String[] arg3);
    void setBackStackIndex(  @Sink(SUSI_LOG) int arg0, @Sink(SUSI_LOG) android.app.BackStackRecord arg1);
    void moveToState(  @Sink(SUSI_LOG) android.app.Fragment arg0, @Sink(SUSI_LOG) int arg1, @Sink(SUSI_LOG) int arg2, @Sink(SUSI_LOG) int arg3, @Sink(SUSI_LOG) boolean arg4);
    void dispatchConfigurationChanged(  @Sink(SUSI_SYSTEM_SETTINGS) android.content.res.Configuration arg0);
    void putFragment(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.app.Fragment arg2);
   @Source(SUSI_NO_CATEGORY)  boolean dispatchContextItemSelected(  @Sink(SUSI_NO_CATEGORY) android.view.MenuItem arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.Fragment$SavedState saveFragmentInstanceState(  @Sink(SUSI_NO_CATEGORY) android.app.Fragment arg0);
    void dispatchOptionsMenuClosed(  @Sink(SUSI_NO_CATEGORY) android.view.Menu arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle saveFragmentBasicState(  @Sink(SUSI_NO_CATEGORY) android.app.Fragment arg0);
   @Source(SUSI_NO_CATEGORY)  boolean dispatchCreateOptionsMenu(  @Sink(SUSI_NO_CATEGORY) android.view.Menu arg0, @Sink(SUSI_NO_CATEGORY) android.view.MenuInflater arg1);
   @Source(SUSI_NO_CATEGORY)  boolean dispatchOptionsItemSelected(  @Sink(SUSI_NO_CATEGORY) android.view.MenuItem arg0);
    void dispatchTrimMemory(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean dispatchPrepareOptionsMenu(  @Sink(SUSI_NO_CATEGORY) android.view.Menu arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList retainNonConfig();
   @Source(SUSI_NO_CATEGORY)  android.app.FragmentManager$BackStackEntry getBackStackEntryAt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getBackStackEntryCount();
   @Source(SUSI_NO_CATEGORY)  android.app.Fragment getFragment(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class FragmentManagerState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class IActivityController$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IActivityController$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  boolean appCrashed(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) long arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5);
   @Source(SUSI_NO_CATEGORY)  int appNotResponding(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  boolean activityStarting(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int appEarlyNotResponding(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  boolean activityResuming(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IActivityManager$ContentProviderHolder{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class IActivityManager$WaitResult{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class IAlarmManager$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IAlarmManager$Stub$Proxy{
    void setTime(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setInexactRepeating(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) android.app.PendingIntent arg3);
    void setTimeZone(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setRepeating(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) android.app.PendingIntent arg3);
    void set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) android.app.PendingIntent arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IBackupAgent$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IBackupAgent$Stub$Proxy{
    void doRestoreFile(  @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) long arg5, @Sink(SUSI_NO_CATEGORY) long arg6, @Sink(SUSI_NO_CATEGORY) int arg7, @Sink(SUSI_NO_CATEGORY) android.app.backup.IBackupManager arg8);
    void doBackup(  @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg0, @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg1, @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.app.backup.IBackupManager arg4);
    void doRestore(  @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.app.backup.IBackupManager arg4);
    void doFullBackup(  @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.app.backup.IBackupManager arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IInstrumentationWatcher$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IInstrumentationWatcher$Stub$Proxy{
    void instrumentationStatus(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
    void instrumentationFinished(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class INotificationManager$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class INotificationManager$Stub$Proxy{
    void cancelAllNotifications(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean areNotificationsEnabledForPackage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void cancelNotificationWithTag(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void enqueueToast(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.app.ITransientNotification arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void enqueueNotificationWithTag(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.app.Notification arg3, @Sink(SUSI_NO_CATEGORY) int[] arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
    void setNotificationsEnabledForPackage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void cancelToast(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.app.ITransientNotification arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IProcessObserver$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IProcessObserver$Stub$Proxy{
    void onForegroundActivitiesChanged(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void onImportanceChanged(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void onProcessDied(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class ISearchManager$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class ISearchManager$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  java.util.List getSearchablesInGlobalSearch();
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getAssistIntent(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NO_CATEGORY)  java.util.List getGlobalSearchActivities();
   @Source(SUSI_NO_CATEGORY)  android.app.SearchableInfo getSearchableInfo(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getWebSearchActivity();
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getGlobalSearchActivity();
}
class IServiceConnection$Stub{
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class IServiceConnection$Stub$Proxy{
    void connected(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class IStopUserCallback$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IStopUserCallback$Stub$Proxy{
    void userStopAborted(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void userStopped(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IThumbnailReceiver$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IThumbnailReceiver$Stub$Proxy{
    void newThumbnail(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg1, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IThumbnailRetriever$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IThumbnailRetriever$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getThumbnail(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ITransientNotification$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class ITransientNotification$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IUiModeManager$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IUiModeManager$Stub$Proxy{
    void enableCarMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void disableCarMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setNightMode(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getCurrentModeType();
   @Source(SUSI_NO_CATEGORY)  int getNightMode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IUserSwitchObserver$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IUserSwitchObserver$Stub$Proxy{
    void onUserSwitching(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.IRemoteCallback arg1);
    void onUserSwitchComplete(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IWallpaperManager$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IWallpaperManager$Stub$Proxy{
    void setDimensionHints(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean hasNamedWallpaper(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setWallpaperComponent(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.ParcelFileDescriptor setWallpaper(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.ParcelFileDescriptor getWallpaper(  @Sink(SUSI_NO_CATEGORY) android.app.IWallpaperManagerCallback arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NO_CATEGORY)  android.app.WallpaperInfo getWallpaperInfo();
   @Source(SUSI_NO_CATEGORY)  int getHeightHint();
   @Source(SUSI_NO_CATEGORY)  int getWidthHint();
}
class IWallpaperManagerCallback$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IWallpaperManagerCallback$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class Instrumentation{
    void sendCharacterSync(  @Sink(SUSI_SYNCHRONIZATION_DATA) int arg0);
    void sendKeyDownUpSync(  @Sink(SUSI_SYNCHRONIZATION_DATA) int arg0);
    void sendStringSync(  @Sink(SUSI_SYNCHRONIZATION_DATA) java.lang.String arg0);
   @Source(SUSI_SYNCHRONIZATION_DATA)  android.app.Activity startActivitySync(  @Sink(SUSI_SYNCHRONIZATION_DATA) android.content.Intent arg0);
    void callActivityOnSaveInstanceState(  @Sink(SUSI_NO_CATEGORY) android.app.Activity arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void execStartActivitiesAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg2, @Sink(SUSI_NO_CATEGORY) android.app.Activity arg3, @Sink(SUSI_NO_CATEGORY) android.content.Intent[] arg4, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg5, @Sink(SUSI_NO_CATEGORY) int arg6);
    void callActivityOnCreate(  @Sink(SUSI_NO_CATEGORY) android.app.Activity arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void callActivityOnRestoreInstanceState(  @Sink(SUSI_NO_CATEGORY) android.app.Activity arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
    void setInTouchMode(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle getAllocCounts();
   @Source(SUSI_NO_CATEGORY)  android.content.Context getTargetContext();
   @Source(SUSI_NO_CATEGORY)  android.app.Instrumentation$ActivityResult execStartActivity(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg2, @Sink(SUSI_NO_CATEGORY) android.app.Activity arg3, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg6);
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getComponentName();
   @Source(SUSI_NO_CATEGORY)  android.app.Instrumentation$ActivityResult execStartActivity(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg2, @Sink(SUSI_NO_CATEGORY) android.app.Fragment arg3, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg6);
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle getBinderCounts();
   @Source(SUSI_NO_CATEGORY)  android.app.Instrumentation$ActivityResult execStartActivity(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg2, @Sink(SUSI_NO_CATEGORY) android.app.Activity arg3, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg6, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg7);
}
class Instrumentation$ActivityMonitor{
   @Source(SUSI_NO_CATEGORY)  android.content.IntentFilter getFilter();
   @Source(SUSI_NO_CATEGORY)  android.app.Activity getLastActivity();
   @Source(SUSI_NO_CATEGORY)  int getHits();
   @Source(SUSI_NO_CATEGORY)  android.app.Instrumentation$ActivityResult getResult();
}
class Instrumentation$ActivityResult{
   @Source(SUSI_NO_CATEGORY)  int getResultCode();
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getResultData();
}
class KeyguardManager{
   @Source(SUSI_NO_CATEGORY)  android.app.KeyguardManager$KeyguardLock newKeyguardLock(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class ListActivity{
    void setSelection(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.widget.ListAdapter getListAdapter();
   @Source(SUSI_NO_CATEGORY)  long getSelectedItemId();
   @Source(SUSI_NO_CATEGORY)  android.widget.ListView getListView();
   @Source(SUSI_NO_CATEGORY)  int getSelectedItemPosition();
}
class ListFragment{
    void setSelection(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setListShownNoAnimation(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setListShown(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  long getSelectedItemId();
   @Source(SUSI_NO_CATEGORY)  int getSelectedItemPosition();
   @Source(SUSI_NO_CATEGORY)  android.widget.ListAdapter getListAdapter();
   @Source(SUSI_NO_CATEGORY)  android.widget.ListView getListView();
}
class LoadedApk{
   @Source(SUSI_NO_CATEGORY)  android.content.IIntentReceiver forgetReceiverDispatcher(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.content.BroadcastReceiver arg1);
   @Source(SUSI_NO_CATEGORY)  android.app.IServiceConnection forgetServiceDispatcher(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.content.ServiceConnection arg1);
   @Source(SUSI_NO_CATEGORY)  android.app.Application getApplication();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDataDir();
   @Source(SUSI_NO_CATEGORY)  android.app.IServiceConnection getServiceDispatcher(  @Sink(SUSI_NO_CATEGORY) android.content.ServiceConnection arg0, @Sink(SUSI_NO_CATEGORY) android.content.Context arg1, @Sink(SUSI_NO_CATEGORY) android.os.Handler arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.ClassLoader getClassLoader();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAppDir();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLibDir();
   @Source(SUSI_NO_CATEGORY)  android.content.res.AssetManager getAssets(  @Sink(SUSI_NO_CATEGORY) android.app.ActivityThread arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.File getDataDirFile();
   @Source(SUSI_NO_CATEGORY)  android.content.IIntentReceiver getReceiverDispatcher(  @Sink(SUSI_NO_CATEGORY) android.content.BroadcastReceiver arg0, @Sink(SUSI_NO_CATEGORY) android.content.Context arg1, @Sink(SUSI_NO_CATEGORY) android.os.Handler arg2, @Sink(SUSI_NO_CATEGORY) android.app.Instrumentation arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4);
   @Source(SUSI_NO_CATEGORY)  android.content.res.Resources getResources(  @Sink(SUSI_NO_CATEGORY) android.app.ActivityThread arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPackageName();
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ApplicationInfo getApplicationInfo();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getResDir();
}
class LoadedApk$ReceiverDispatcher{
   @Source(SUSI_NO_CATEGORY)  android.content.BroadcastReceiver getIntentReceiver();
   @Source(SUSI_NO_CATEGORY)  java.lang.RuntimeException getUnregisterLocation();
   @Source(SUSI_NO_CATEGORY)  android.app.IntentReceiverLeaked getLocation();
   @Source(SUSI_NO_CATEGORY)  android.content.IIntentReceiver getIIntentReceiver();
}
class LoadedApk$ReceiverDispatcher$InnerReceiver{
    void performReceive(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4, @Sink(SUSI_NO_CATEGORY) boolean arg5, @Sink(SUSI_NO_CATEGORY) int arg6);
}
class LoadedApk$ServiceDispatcher{
    void doConnected(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.RuntimeException getUnbindLocation();
   @Source(SUSI_NETWORK_INFORMATION)  android.content.ServiceConnection getServiceConnection();
   @Source(SUSI_NETWORK_INFORMATION)  android.app.ServiceConnectionLeaked getLocation();
   @Source(SUSI_NETWORK_INFORMATION)  android.app.IServiceConnection getIServiceConnection();
   @Source(SUSI_NETWORK_INFORMATION)  int getFlags();
}
class LoadedApk$WarningContextClassLoader{
    void setClassAssertionStatus(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setPackageAssertionStatus(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setDefaultAssertionStatus(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Class loadClass(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.io.InputStream getResourceAsStream(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.net.URL getResource(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Enumeration getResources(  java.lang.String arg0);
}
class LoaderManagerImpl{
    void dump(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) java.io.FileDescriptor arg1, @Sink(SUSI_FILE) java.io.PrintWriter arg2, @Sink(SUSI_FILE) java.lang.String[] arg3);
    void installLoader(  @Sink(SUSI_NO_CATEGORY) android.app.LoaderManagerImpl$LoaderInfo arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.Loader initLoader(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1, @Sink(SUSI_NO_CATEGORY) android.app.LoaderManager$LoaderCallbacks arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.Loader getLoader(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.Loader restartLoader(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1, @Sink(SUSI_NO_CATEGORY) android.app.LoaderManager$LoaderCallbacks arg2);
}
class LoaderManagerImpl$LoaderInfo{
    void dump(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) java.io.FileDescriptor arg1, @Sink(SUSI_FILE) java.io.PrintWriter arg2, @Sink(SUSI_FILE) java.lang.String[] arg3);
}
class LocalActivityManager{
    void dispatchCreate(  @Sink(SUSI_LOG) android.os.Bundle arg0);
    void dispatchPause(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.Window startActivity(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg1);
    void dispatchDestroy(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.Activity getActivity(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle saveInstanceState();
   @Source(SUSI_NO_CATEGORY)  java.util.HashMap dispatchRetainNonConfigurationInstance();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCurrentId();
   @Source(SUSI_NO_CATEGORY)  android.view.Window destroyActivity(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  android.app.Activity getCurrentActivity();
}
class Notification{
    void setUser(  @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg0);
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class Notification$Action{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class Notification$Builder{
   @Source(SUSI_NO_CATEGORY)  android.app.Notification$Builder setOngoing(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.Notification$Builder setOnlyAlertOnce(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.Notification$Builder setAutoCancel(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.Notification getNotification();
}
class Notification$Style{
   @Source(SUSI_NO_CATEGORY)  android.widget.RemoteViews getStandardView(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class NotificationManager{
    void notifyAsUser(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) int arg1, @Sink(SUSI_LOG) android.app.Notification arg2, @Sink(SUSI_LOG) android.os.UserHandle arg3);
    void notify(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) int arg1, @Sink(SUSI_LOG) android.app.Notification arg2);
    void notify(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.app.Notification arg1);
   @Source(SUSI_NO_CATEGORY)  android.app.INotificationManager getService();
}
class PendingIntent{
    void send(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2, @Sink(SUSI_NO_CATEGORY) android.app.PendingIntent$OnFinished arg3, @Sink(SUSI_NO_CATEGORY) android.os.Handler arg4, @Sink(SUSI_NO_CATEGORY) java.lang.String arg5);
    void send(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2);
    void send(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.app.PendingIntent$OnFinished arg1, @Sink(SUSI_NO_CATEGORY) android.os.Handler arg2);
    void writePendingIntentOrNullToParcel(  @Sink(SUSI_NO_CATEGORY) android.app.PendingIntent arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1);
    void send(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2, @Sink(SUSI_NO_CATEGORY) android.app.PendingIntent$OnFinished arg3, @Sink(SUSI_NO_CATEGORY) android.os.Handler arg4);
    void send(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getIntent();
   @Source(SUSI_NO_CATEGORY)  android.app.PendingIntent getActivities(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent[] arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg4);
   @Source(SUSI_NO_CATEGORY)  android.app.PendingIntent getBroadcastAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg4);
   @Source(SUSI_NO_CATEGORY)  android.content.IIntentSender getTarget();
   @Source(SUSI_NO_CATEGORY)  int getCreatorUid();
   @Source(SUSI_NO_CATEGORY)  android.app.PendingIntent getActivity(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.app.PendingIntent getActivitiesAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent[] arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg4, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg5);
   @Source(SUSI_NO_CATEGORY)  android.app.PendingIntent getActivityAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg4, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg5);
   @Source(SUSI_NO_CATEGORY)  android.os.UserHandle getCreatorUserHandle();
   @Source(SUSI_NO_CATEGORY)  android.app.PendingIntent getBroadcast(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.content.IntentSender getIntentSender();
   @Source(SUSI_NO_CATEGORY)  android.app.PendingIntent getService(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTargetPackage();
   @Source(SUSI_NO_CATEGORY)  android.app.PendingIntent getActivities(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent[] arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.app.PendingIntent getActivity(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg4);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCreatorPackage();
}
class ProgressDialog{
   @Source(SUSI_NO_CATEGORY)  int getMax();
   @Source(SUSI_NO_CATEGORY)  int getProgress();
   @Source(SUSI_NO_CATEGORY)  int getSecondaryProgress();
}
class ReceiverRestrictedContext{
   @Source(SUSI_NO_CATEGORY)  android.content.Intent registerReceiver(  @Sink(SUSI_NO_CATEGORY) android.content.BroadcastReceiver arg0, @Sink(SUSI_NO_CATEGORY) android.content.IntentFilter arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.os.Handler arg3);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent registerReceiverAsUser(  @Sink(SUSI_NO_CATEGORY) android.content.BroadcastReceiver arg0, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg1, @Sink(SUSI_NO_CATEGORY) android.content.IntentFilter arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) android.os.Handler arg4);
   @Source(SUSI_NO_CATEGORY)  boolean bindService(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0, @Sink(SUSI_NO_CATEGORY) android.content.ServiceConnection arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent registerReceiver(  @Sink(SUSI_NO_CATEGORY) android.content.BroadcastReceiver arg0, @Sink(SUSI_NO_CATEGORY) android.content.IntentFilter arg1);
}
class ResultInfo{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class SearchDialog{
    void setListSelection(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setWorking(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}
class SearchManager{
    void startGlobalSearch(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) boolean arg1, @Sink(SUSI_LOG) android.os.Bundle arg2, @Sink(SUSI_LOG) android.graphics.Rect arg3);
    void startSearch(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg2, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4);
    void triggerSearch(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
    void startSearch(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg2, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4, @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg5);
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getGlobalSearchActivity();
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor getSuggestions(  @Sink(SUSI_NO_CATEGORY) android.app.SearchableInfo arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.List getSearchablesInGlobalSearch();
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getAssistIntent(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getWebSearchActivity();
   @Source(SUSI_NO_CATEGORY)  android.app.SearchableInfo getSearchableInfo(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor getSuggestions(  @Sink(SUSI_NO_CATEGORY) android.app.SearchableInfo arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getAssistIntent(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.List getGlobalSearchActivities();
}
class SearchableInfo{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean getVoiceSearchLaunchRecognizer();
   @Source(SUSI_NO_CATEGORY)  android.app.SearchableInfo getActivityMetaData(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.content.pm.ActivityInfo arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getVoiceLanguageId();
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getSearchActivity();
   @Source(SUSI_NO_CATEGORY)  int getImeOptions();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSuggestPath();
   @Source(SUSI_NO_CATEGORY)  android.content.Context getProviderContext(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.content.Context arg1);
   @Source(SUSI_NO_CATEGORY)  boolean getVoiceSearchLaunchWebSearch();
   @Source(SUSI_NO_CATEGORY)  int getVoicePromptTextId();
   @Source(SUSI_NO_CATEGORY)  int getSuggestThreshold();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSuggestIntentData();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSuggestAuthority();
   @Source(SUSI_NO_CATEGORY)  boolean getVoiceSearchEnabled();
   @Source(SUSI_NO_CATEGORY)  int getVoiceMaxResults();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSuggestPackage();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSuggestSelection();
   @Source(SUSI_NO_CATEGORY)  int getSettingsDescriptionId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSuggestIntentAction();
   @Source(SUSI_NO_CATEGORY)  int getInputType();
   @Source(SUSI_NO_CATEGORY)  int getHintId();
   @Source(SUSI_NO_CATEGORY)  int getIconId();
   @Source(SUSI_NO_CATEGORY)  int getLabelId();
   @Source(SUSI_NO_CATEGORY)  android.content.Context getActivityContext(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  int getVoiceLanguageModeId();
   @Source(SUSI_NO_CATEGORY)  int getSearchButtonText();
}
class SearchableInfo$ActionKeyInfo{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSuggestActionMsgColumn();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getQueryActionMsg();
   @Source(SUSI_NO_CATEGORY)  int getKeyCode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSuggestActionMsg();
}
class Service{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void setForeground(  @Sink(SUSI_LOG) boolean arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getClassName();
   @Source(SUSI_NETWORK_INFORMATION)  android.app.Application getApplication();
}
class SharedPreferencesImpl{
   @Source(SUSI_NO_CATEGORY)  java.util.Set getStringSet(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.Set arg1);
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.Map getAll();
   @Source(SUSI_NO_CATEGORY)  float getFloat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_NO_CATEGORY)  long getLong(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
}
class SharedPreferencesImpl$EditorImpl{
   @Source(SUSI_NO_CATEGORY)  android.content.SharedPreferences$Editor remove(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.SharedPreferences$Editor putInt(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.SharedPreferences$Editor putBoolean(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.SharedPreferences$Editor putStringSet(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.Set arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.SharedPreferences$Editor putString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.SharedPreferences$Editor putLong(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  android.content.SharedPreferences$Editor putFloat(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
}
class StatusBarManager{
    void setIconVisibility(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void setIcon(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
}
class TaskStackBuilder{
    void startActivities(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg1);
    void startActivities(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0);
   @Source(SUSI_NO_CATEGORY)  android.app.TaskStackBuilder addParentStack(  @Sink(SUSI_NO_CATEGORY) android.content.ComponentName arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent[] getIntents();
   @Source(SUSI_NO_CATEGORY)  android.app.PendingIntent getPendingIntent(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.app.PendingIntent getPendingIntent(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2);
   @Source(SUSI_NO_CATEGORY)  int getIntentCount();
   @Source(SUSI_NO_CATEGORY)  android.app.PendingIntent getPendingIntent(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg2, @Sink(SUSI_NO_CATEGORY) android.os.UserHandle arg3);
}
class UiModeManager{
    void setNightMode(  @Sink(SUSI_LOG) int arg0);
    void enableCarMode(  @Sink(SUSI_LOG) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getNightMode();
   @Source(SUSI_NO_CATEGORY)  int getCurrentModeType();
}
class WallpaperInfo{
    void dump(  @Sink(SUSI_NO_CATEGORY) android.util.Printer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSettingsActivity();
   @Source(SUSI_NO_CATEGORY)  android.content.ComponentName getComponent();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPackageName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getServiceName();
   @Source(SUSI_NO_CATEGORY)  android.content.pm.ServiceInfo getServiceInfo();
}
class WallpaperManager{
    void setResource(  @Sink(SUSI_LOG) int arg0);
    void setStream(  @Sink(SUSI_LOG) java.io.InputStream arg0);
    void setBitmap(  @Sink(SUSI_LOG) android.graphics.Bitmap arg0);
    void setWallpaperOffsets(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2);
    void sendWallpaperCommand(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg5);
   @Source(SUSI_NO_CATEGORY)  android.app.IWallpaperManager getIWallpaperManager();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap getBitmap();
   @Source(SUSI_NO_CATEGORY)  android.app.WallpaperManager getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap generateBitmap(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getDrawable();
   @Source(SUSI_NO_CATEGORY)  int getDesiredMinimumWidth();
   @Source(SUSI_NO_CATEGORY)  android.app.WallpaperInfo getWallpaperInfo();
   @Source(SUSI_NO_CATEGORY)  java.lang.String access$200();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable peekDrawable();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable getFastDrawable();
   @Source(SUSI_NO_CATEGORY)  android.graphics.drawable.Drawable peekFastDrawable();
   @Source(SUSI_NO_CATEGORY)  int getDesiredMinimumHeight();
}
class WallpaperManager$FastBitmapDrawable{
    void setColorFilter(  @Sink(SUSI_NO_CATEGORY) android.graphics.ColorFilter arg0);
    void setAlpha(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDither(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setFilterBitmap(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setBounds(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  int getOpacity();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicWidth();
   @Source(SUSI_NO_CATEGORY)  int getMinimumHeight();
   @Source(SUSI_NO_CATEGORY)  int getIntrinsicHeight();
   @Source(SUSI_NO_CATEGORY)  int getMinimumWidth();
}

package android.media.effect.effects;

class BackDropperEffect{
    void setParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void apply(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
}

package com.android.nfc.snep;

class SnepClient{
   @Source(SUSI_NFC)  com.android.nfc.snep.SnepMessage get(  @Sink(SUSI_NFC) android.nfc.NdefMessage arg0);
}
class SnepMessage{
   @Source(SUSI_NFC)  byte getVersion();
   @Source(SUSI_NFC)  com.android.nfc.snep.SnepMessage getGetRequest(  @Sink(SUSI_NFC) int arg0, @Sink(SUSI_NFC) android.nfc.NdefMessage arg1);
   @Source(SUSI_NFC)  byte getField();
   @Source(SUSI_NFC)  android.nfc.NdefMessage getNdefMessage();
   @Source(SUSI_NFC)  com.android.nfc.snep.SnepMessage getSuccessResponse(  @Sink(SUSI_NFC) android.nfc.NdefMessage arg0);
   @Source(SUSI_NFC)  byte[] toByteArray();
   @Source(SUSI_NFC)  com.android.nfc.snep.SnepMessage getMessage(  @Sink(SUSI_NFC) byte arg0);
   @Source(SUSI_NFC)  int getLength();
   @Source(SUSI_NFC)  int getAcceptableLength();
   @Source(SUSI_NFC)  com.android.nfc.snep.SnepMessage getPutRequest(  @Sink(SUSI_NFC) android.nfc.NdefMessage arg0);
}
class SnepMessenger{
    void sendMessage(  @Sink(SUSI_NFC) com.android.nfc.snep.SnepMessage arg0);
   @Source(SUSI_NFC)  com.android.nfc.snep.SnepMessage getMessage();
}

package android.hardware.input;

class IInputDevicesChangedListener$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IInputDevicesChangedListener$Stub$Proxy{
    void onInputDevicesChanged(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class IInputManager$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class IInputManager$Stub$Proxy{
    void tryPointerSpeed(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  boolean hasKeys(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int[] arg2, @Sink(SUSI_NO_CATEGORY) boolean[] arg3);
    void removeKeyboardLayoutForInputDevice(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void vibrate(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long[] arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg3);
    void setCurrentKeyboardLayoutForInputDevice(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void cancelVibrate(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg1);
    void addKeyboardLayoutForInputDevice(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  boolean injectInputEvent(  @Sink(SUSI_NO_CATEGORY) android.view.InputEvent arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void registerInputDevicesChangedListener(  @Sink(SUSI_NO_CATEGORY) android.hardware.input.IInputDevicesChangedListener arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCurrentKeyboardLayoutForInputDevice(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.InputDevice getInputDevice(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
   @Source(SUSI_NO_CATEGORY)  android.hardware.input.KeyboardLayout getKeyboardLayout(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.hardware.input.KeyboardLayout[] getKeyboardLayouts();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getKeyboardLayoutsForInputDevice(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int[] getInputDeviceIds();
}
class InputManager{
    void setCurrentKeyboardLayoutForInputDevice(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) java.lang.String arg1);
    void setPointerSpeed(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  android.os.Vibrator getInputDeviceVibrator(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCurrentKeyboardLayoutForInputDevice(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.InputDevice getInputDevice(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.hardware.input.KeyboardLayout getKeyboardLayout(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int[] getInputDeviceIds();
   @Source(SUSI_NO_CATEGORY)  boolean[] deviceHasKeys(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.InputDevice getInputDeviceByDescriptor(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getKeyboardLayoutsForInputDevice(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.hardware.input.InputManager getInstance();
   @Source(SUSI_NO_CATEGORY)  android.hardware.input.KeyboardLayout[] getKeyboardLayouts();
   @Source(SUSI_NO_CATEGORY)  int getPointerSpeed(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class KeyboardLayout{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDescriptor();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCollection();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLabel();
}

package com.android.inputmethod.compat;

class CompatUtils{
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getInputLanguageSelectionIntent(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Class getClass(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Method getMethod(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Class[] arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Field getField(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.reflect.Constructor getConstructor(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Class[] arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getFieldValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1, @Sink(SUSI_NO_CATEGORY) java.lang.reflect.Field arg2);
}
class InputMethodManagerCompatWrapper{
    void setInputMethodAndSubtype(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) android.view.inputmethod.InputMethodSubtype arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.inputmethod.compat.InputMethodManagerCompatWrapper getInstance();
   @Source(SUSI_NO_CATEGORY)  android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype();
}
class SuggestionSpanUtils{
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTextWithAutoCorrectionIndicatorUnderline(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getTextWithSuggestionSpan(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg1, @Sink(SUSI_NO_CATEGORY) com.android.inputmethod.latin.SuggestedWords arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
}
class SuggestionsInfoCompatUtils{
   @Source(SUSI_NO_CATEGORY)  int getValueOf_RESULT_ATTR_HAS_RECOMMENDED_SUGGESTIONS();
}

package com.android.videoeditor.util;

class FileUtils{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMaskFilename(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAudioTrackFilename(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSimpleName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.File getProjectsRootDir(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class ImageUtils{
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap buildOverlayBitmap(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.graphics.Bitmap arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4, @Sink(SUSI_NO_CATEGORY) int arg5, @Sink(SUSI_NO_CATEGORY) int arg6);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Bitmap scaleImage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
}
class MediaItemUtils{
   @Source(SUSI_NO_CATEGORY)  long getMinimumImageItemDuration();
   @Source(SUSI_NO_CATEGORY)  long getMinimumVideoItemDuration();
   @Source(SUSI_NO_CATEGORY)  long getDefaultImageDuration();
   @Source(SUSI_NO_CATEGORY)  long getMinimumMediaItemDuration(  @Sink(SUSI_NO_CATEGORY) com.android.videoeditor.service.MovieMediaItem arg0);
}
class StringUtils{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSimpleTimestampAsString(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDurationAsString(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTimestampAsString(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
}

package javax.net.ssl;

class DefaultSSLServerSocketFactory{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getSupportedCipherSuites();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getDefaultCipherSuites();
}
class DefaultSSLSocketFactory{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getSupportedCipherSuites();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getDefaultCipherSuites();
}
class HandshakeCompletedEvent{
   @Source(SUSI_NETWORK_INFORMATION)  javax.security.cert.X509Certificate[] getPeerCertificateChain();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLSocket getSocket();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLSession getSession();
   @Source(SUSI_NETWORK_INFORMATION)  java.security.Principal getLocalPrincipal();
   @Source(SUSI_NETWORK_INFORMATION)  java.security.cert.Certificate[] getLocalCertificates();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getCipherSuite();
   @Source(SUSI_NETWORK_INFORMATION)  java.security.cert.Certificate[] getPeerCertificates();
   @Source(SUSI_NETWORK_INFORMATION)  java.security.Principal getPeerPrincipal();
}
class HttpsURLConnection{
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.HostnameVerifier getDefaultHostnameVerifier();
   @Source(SUSI_NETWORK_INFORMATION)  java.security.Principal getLocalPrincipal();
   @Source(SUSI_NETWORK_INFORMATION)  java.security.Principal getPeerPrincipal();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.HostnameVerifier getHostnameVerifier();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLSocketFactory getSSLSocketFactory();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory();
}
class KeyManagerFactory{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAlgorithm();
   @Source(SUSI_NETWORK_INFORMATION)  java.security.Provider getProvider();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getDefaultAlgorithm();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.KeyManager[] getKeyManagers();
}
class SSLContext{
    void setDefault(  @Sink(SUSI_NO_CATEGORY) javax.net.ssl.SSLContext arg0);
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLSessionContext getServerSessionContext();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLParameters getSupportedSSLParameters();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getProtocol();
   @Source(SUSI_NETWORK_INFORMATION)  java.security.Provider getProvider();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLSessionContext getClientSessionContext();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLContext getDefault();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLParameters getDefaultSSLParameters();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLSocketFactory getSocketFactory();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLServerSocketFactory getServerSocketFactory();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLContext getInstance(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLContext getInstance(  java.lang.String arg0, java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLContext getInstance(  java.lang.String arg0, java.security.Provider arg1);
}
class SSLContextSpi{
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLParameters engineGetDefaultSSLParameters();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLParameters engineGetSupportedSSLParameters();
}
class SSLEngine{
    void setSSLParameters(  @Sink(SUSI_NO_CATEGORY) javax.net.ssl.SSLParameters arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getPeerPort();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLEngineResult unwrap(  java.nio.ByteBuffer arg0, java.nio.ByteBuffer arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPeerHost();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLEngineResult wrap(  java.nio.ByteBuffer[] arg0, java.nio.ByteBuffer arg1);
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLEngineResult wrap(  java.nio.ByteBuffer arg0, java.nio.ByteBuffer arg1);
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLEngineResult unwrap(  java.nio.ByteBuffer arg0, java.nio.ByteBuffer[] arg1);
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLParameters getSSLParameters();
}
class SSLEngineResult{
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLEngineResult$Status getStatus();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus();
}
class SSLParameters{
    void setProtocols(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
    void setCipherSuites(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getCipherSuites();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getNeedClientAuth();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getProtocols();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getWantClientAuth();
}
class SSLServerSocketFactory{
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ServerSocketFactory getDefault();
}
class SSLSessionBindingEvent{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getName();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLSession getSession();
}
class SSLSocket{
    void setSSLParameters(  @Sink(SUSI_NO_CATEGORY) javax.net.ssl.SSLParameters arg0);
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.SSLParameters getSSLParameters();
}
class SSLSocketFactory{
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.SocketFactory getDefault();
}
class TrustManagerFactory{
   @Source(SUSI_NETWORK_INFORMATION)  java.security.Provider getProvider();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getDefaultAlgorithm();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAlgorithm();
   @Source(SUSI_NETWORK_INFORMATION)  javax.net.ssl.TrustManager[] getTrustManagers();
}
class X509ExtendedKeyManager{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String chooseEngineClientAlias(  java.lang.String[] arg0, java.security.Principal[] arg1, javax.net.ssl.SSLEngine arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String chooseEngineServerAlias(  java.lang.String arg0, java.security.Principal[] arg1, javax.net.ssl.SSLEngine arg2);
}

package com.android.uiautomator.core;

class AccessibilityNodeInfoHelper{
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getVisibleBoundsInScreen(  @Sink(SUSI_NO_CATEGORY) android.view.accessibility.AccessibilityNodeInfo arg0);
}
class InteractionController{
    boolean sendKey(  @Sink(SUSI_LOG) int arg0, @Sink(SUSI_LOG) int arg1);
    boolean sendText(  @Sink(SUSI_LOG) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  boolean sendKeyAndWaitForEvent(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) long arg3);
}
class QueryController{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCurrentActivityName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCurrentPackageName();
   @Source(SUSI_NO_CATEGORY)  android.view.accessibility.AccessibilityNodeInfo getRootNode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLastTraversedText();
   @Source(SUSI_NO_CATEGORY)  int getPatternCount(  @Sink(SUSI_NO_CATEGORY) com.android.uiautomator.core.UiSelector arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.accessibility.AccessibilityNodeInfo getAccessibilityRootNode();
}
class Tracer{
    void setOutputFilename(  @Sink(SUSI_FILE) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.uiautomator.core.Tracer getInstance();
}
class UiAutomatorBridge{
   @Source(SUSI_NO_CATEGORY)  com.android.uiautomator.core.InteractionController getInteractionController();
   @Source(SUSI_NO_CATEGORY)  com.android.uiautomator.core.QueryController getQueryController();
}
class UiDevice{
    void dumpWindowHierarchy(  @Sink(SUSI_FILE) java.lang.String arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean pressKeyCode(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  boolean pressKeyCode(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0, @Sink(SUSI_SYSTEM_SETTINGS) int arg1);
    void registerWatcher(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) com.android.uiautomator.core.UiWatcher arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCurrentPackageName();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Point getDisplaySizeDp();
   @Source(SUSI_NO_CATEGORY)  int getDisplayWidth();
   @Source(SUSI_NO_CATEGORY)  com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLastTraversedText();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCurrentActivityName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProductName();
   @Source(SUSI_NO_CATEGORY)  com.android.uiautomator.core.UiDevice getInstance();
   @Source(SUSI_NO_CATEGORY)  int getDisplayHeight();
   @Source(SUSI_NO_CATEGORY)  int getDisplayRotation();
}
class UiSelector{
   @Source(SUSI_NO_CATEGORY)  com.android.uiautomator.core.UiSelector getParentSelector();
   @Source(SUSI_NO_CATEGORY)  com.android.uiautomator.core.UiSelector getPatternSelector();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.uiautomator.core.UiSelector getContainerSelector();
   @Source(SUSI_NO_CATEGORY)  com.android.uiautomator.core.UiSelector getChildSelector();
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getInstance();
   @Source(SUSI_NO_CATEGORY)  boolean getBoolean(  @Sink(SUSI_NO_CATEGORY) int arg0);
}

package gov.nist.core;

class DuplicateNameValueList{
    void set(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.NameValue put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) gov.nist.core.NameValue arg1);
    void set(  @Sink(SUSI_NO_CATEGORY) gov.nist.core.NameValue arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getNameValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator getNames();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class GenericObject{
    void dbgPrint(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String debugDump();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getIndentation();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.Match getMatcher();
   @Source(SUSI_NO_CATEGORY)  java.lang.Class getClassFromName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class GenericObjectList{
   @Source(SUSI_NO_CATEGORY)  boolean match(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String debugDump();
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.GenericObject next();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.GenericObject first();
   @Source(SUSI_NO_CATEGORY)  java.lang.String encode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getIndentation();
}
class Host{
    void setHostname(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setAddress(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setHostAddress(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHostname();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getIpAddress();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAddress();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getInetAddress();
}
class HostPort{
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getInetAddress();
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.Host getHost();
   @Source(SUSI_NO_CATEGORY)  int getPort();
}
class InternalErrorHandler{
    void handleException(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class LexerCore{
   @Source(SUSI_NO_CATEGORY)  java.util.Hashtable addLexer(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void addKeyword(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getBuffer();
   @Source(SUSI_NO_CATEGORY)  int getPtr();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNextId();
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.Token getNextToken();
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.Token match(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRest();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) char arg0);
}
class MultiValueMapImpl{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object put(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.List put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.List arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.List put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class NameValue{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValueAsObject();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getKey();
}
class NameValueList{
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.NameValue put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) gov.nist.core.NameValue arg1);
    void set(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object put(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void set(  @Sink(SUSI_NO_CATEGORY) gov.nist.core.NameValue arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.NameValue get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.NameValue getNameValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator getNames();
}
class ParserCore{
    void peekLine(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void dbg_leave(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void dbg_enter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.NameValue nameValue();
}
class StringTokenizer{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSDPFieldName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLine();
   @Source(SUSI_NO_CATEGORY)  char getNextChar();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNextToken(  @Sink(SUSI_NO_CATEGORY) char arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Vector getLines();
}
class ThreadAuditor{
   @Source(SUSI_NO_CATEGORY)  long getPingIntervalInMillisecs();
}
class ThreadAuditor$ThreadHandle{
   @Source(SUSI_NO_CATEGORY)  java.lang.Thread getThread();
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  long getPingIntervalInMillisecs();
}
class Token{
   @Source(SUSI_NO_CATEGORY)  int getTokenType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTokenValue();
}

package com.android.i18n.phonenumbers.geocoding;

class AreaCodeMap{
    void writeExternal(  @Sink(SUSI_NO_CATEGORY) java.io.ObjectOutput arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.geocoding.AreaCodeMapStorageStrategy getSmallerMapStorage(  @Sink(SUSI_NO_CATEGORY) java.util.SortedMap arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.geocoding.AreaCodeMapStorageStrategy getAreaCodeMapStorage();
}
class AreaCodeMapStorageStrategy{
   @Source(SUSI_NO_CATEGORY)  java.util.TreeSet getPossibleLengths();
   @Source(SUSI_NO_CATEGORY)  int getNumOfEntries();
}
class DefaultMapStorage{
   @Source(SUSI_NO_CATEGORY)  int getPrefix(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDescription(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class FlyweightMapStorage{
    void writeExternal(  @Sink(SUSI_NO_CATEGORY) java.io.ObjectOutput arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDescription(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getPrefix(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class MappingFileProvider{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFileName(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
}
class PhoneNumberOfflineGeocoder{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDescriptionForNumber(  @Sink(SUSI_NO_CATEGORY) com.android.i18n.phonenumbers.Phonenumber$PhoneNumber arg0, @Sink(SUSI_NO_CATEGORY) java.util.Locale arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDescriptionForValidNumber(  @Sink(SUSI_NO_CATEGORY) com.android.i18n.phonenumbers.Phonenumber$PhoneNumber arg0, @Sink(SUSI_NO_CATEGORY) java.util.Locale arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDescriptionForNumber(  @Sink(SUSI_NO_CATEGORY) com.android.i18n.phonenumbers.Phonenumber$PhoneNumber arg0, @Sink(SUSI_NO_CATEGORY) java.util.Locale arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDescriptionForValidNumber(  @Sink(SUSI_NO_CATEGORY) com.android.i18n.phonenumbers.Phonenumber$PhoneNumber arg0, @Sink(SUSI_NO_CATEGORY) java.util.Locale arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder getInstance();
}

package com.google.common.collect;

class AbstractIterator{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object next();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object endOfData();
}
class AbstractLinkedIterator{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object next();
}
class AbstractListMultimap{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection createCollection();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class AbstractMapEntry{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class AbstractMultimap{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection createEntries();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection entries();
   @Source(SUSI_NO_CATEGORY)  java.util.Set keySet();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection createCollection(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Collection get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator createEntryIterator();
   @Source(SUSI_NO_CATEGORY)  java.util.Map asMap();
   @Source(SUSI_NO_CATEGORY)  java.util.Map backingMap();
}
class AbstractMultimap$3{
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator iterator();
}
class AbstractMultimap$4{
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator iterator();
}
class AbstractMultimap$AsMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class AbstractMultimap$WrappedCollection{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.AbstractMultimap$WrappedCollection getAncestor();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getKey();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getDelegate();
}
class AbstractMultimap$WrappedCollection$WrappedIterator{
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator getDelegateIterator();
}
class AbstractMultimap$WrappedList{
   @Source(SUSI_NO_CATEGORY)  boolean addAll(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.util.Collection arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.List getListDelegate();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
}
class AbstractMultimap$WrappedList$WrappedListIterator{
    void set(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class AbstractMultimap$WrappedSortedSet{
   @Source(SUSI_NO_CATEGORY)  java.util.SortedSet getSortedSetDelegate();
}
class AbstractMultiset{
   @Source(SUSI_NO_CATEGORY)  boolean setCount(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int setCount(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.Set createElementSet();
   @Source(SUSI_NO_CATEGORY)  java.util.Set entrySet();
   @Source(SUSI_NO_CATEGORY)  java.util.Set elementSet();
   @Source(SUSI_NO_CATEGORY)  java.util.Set createEntrySet();
}
class AbstractSetMultimap{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Collection createCollection();
}
class AbstractSortedMultiset{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.SortedMultiset createDescendingMultiset();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.SortedMultiset subMultiset(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BoundType arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg2, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BoundType arg3);
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.SortedMultiset descendingMultiset();
   @Source(SUSI_NO_CATEGORY)  java.util.Set createElementSet();
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator descendingIterator();
}
class AbstractSortedSetMultimap{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection createCollection();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class ArrayListMultimap{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection createCollection();
   @Source(SUSI_NO_CATEGORY)  java.util.List get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class BstCountBasedBalancePolicies$1{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.BstNode balance(  @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNodeFactory arg0, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNode arg1, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNode arg2, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNode arg3);
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.BstNode combine(  @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNodeFactory arg0, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNode arg1, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNode arg2);
}
class BstCountBasedBalancePolicies$2{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.BstNode balance(  @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNodeFactory arg0, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNode arg1, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNode arg2, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNode arg3);
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.BstNode combine(  @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNodeFactory arg0, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNode arg1, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNode arg2);
}
class BstCountBasedBalancePolicies$3{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.BstNode balance(  @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNodeFactory arg0, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNode arg1, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNode arg2, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNode arg3);
}
class BstModificationResult{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.BstNode getOriginalTarget();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.BstModificationResult$ModificationType getType();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.BstNode getChangedTarget();
}
class BstMutationResult{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.BstNode getOriginalRoot();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.BstNode getChangedRoot();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.BstNode getOriginalTarget();
}
class BstMutationRule{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.BstModifier getModifier();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.BstNodeFactory getNodeFactory();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.BstBalancePolicy getBalancePolicy();
}
class BstNode{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getKey();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.BstNode getChild(  @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstSide arg0);
}
class BstNodeFactory{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.BstNode createLeaf(  @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNode arg0);
}
class BstOperations{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.BstNode insertMax(  @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNode arg0, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNode arg1, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNodeFactory arg2, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstBalancePolicy arg3);
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.BstNode insertMin(  @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNode arg0, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNode arg1, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstNodeFactory arg2, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BstBalancePolicy arg3);
}
class BstPath{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.BstNode getTip();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.BstPath getPrefix();
}
class ComputingConcurrentHashMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getOrCompute(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class ComputingConcurrentHashMap$ComputationExceptionReference{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry();
}
class ComputingConcurrentHashMap$ComputedReference{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get();
}
class ComputingConcurrentHashMap$ComputingMapAdapter{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class ComputingConcurrentHashMap$ComputingSegment{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getOrCompute(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) com.google.common.base.Function arg2);
}
class ComputingConcurrentHashMap$ComputingValueReference{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get();
}
class EmptyImmutableList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class EmptyImmutableMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class ForwardingCollection{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] toArray(  @Sink(SUSI_NO_CATEGORY) java.lang.Object[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object delegate();
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator iterator();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] standardToArray();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] standardToArray(  @Sink(SUSI_NO_CATEGORY) java.lang.Object[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String standardToString();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] toArray();
}
class ForwardingConcurrentMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object putIfAbsent(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object replace(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object delegate();
}
class ForwardingIterator{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object delegate();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object next();
}
class ForwardingMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object put(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.Set keySet();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object delegate();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection values();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object remove(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Set entrySet();
}
class ForwardingMap$StandardKeySet{
   @Source(SUSI_NO_CATEGORY)  java.util.Map map();
}
class ForwardingMap$StandardValues{
   @Source(SUSI_NO_CATEGORY)  java.util.Map map();
}
class ForwardingMapEntry{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getKey();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object delegate();
}
class ForwardingMultimap{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Map asMap();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection removeAll(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Collection entries();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object delegate();
   @Source(SUSI_NO_CATEGORY)  java.util.Set keySet();
}
class ForwardingMultiset{
   @Source(SUSI_NO_CATEGORY)  boolean setCount(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int setCount(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object delegate();
   @Source(SUSI_NO_CATEGORY)  int add(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.Set elementSet();
   @Source(SUSI_NO_CATEGORY)  int count(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String standardToString();
   @Source(SUSI_NO_CATEGORY)  java.util.Set entrySet();
}
class ForwardingMultiset$StandardElementSet{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.Multiset multiset();
}
class ForwardingObject{
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
}
class ForwardingSet{
   @Source(SUSI_NO_CATEGORY)  int standardHashCode();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object delegate();
}
class GenericMapMaker{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMaker$RemovalListener getRemovalListener();
}
class ImmutableCollection{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.ImmutableList asList();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object writeReplace();
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator iterator();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.ImmutableList createAsList();
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] toArray();
}
class ImmutableCollection$Builder{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.ImmutableCollection$Builder add(  @Sink(SUSI_NO_CATEGORY) java.lang.Object[] arg0);
}
class ImmutableEntry{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getKey();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class ImmutableList{
   @Source(SUSI_NO_CATEGORY)  java.util.ListIterator listIterator(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.UnmodifiableIterator iterator();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object writeReplace();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.ImmutableList asList();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.ImmutableList reverse();
   @Source(SUSI_NO_CATEGORY)  java.util.List subList(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.UnmodifiableListIterator listIterator();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
}
class ImmutableList$ReverseImmutableList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ImmutableMap{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection values();
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object writeReplace();
   @Source(SUSI_NO_CATEGORY)  java.util.Set keySet();
   @Source(SUSI_NO_CATEGORY)  java.util.Set entrySet();
}
class ImmutableMap$SerializedForm{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object readResolve();
}
class ImmutableSet{
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator iterator();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object writeReplace();
}
class ImmutableSet$ArrayImmutableSet{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.ImmutableList createAsList();
}
class ImmutableSet$TransformedImmutableSet$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ImmutableSortedAsList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ImmutableSortedMap{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.ImmutableSet entrySet();
   @Source(SUSI_NO_CATEGORY)  java.util.Comparator unsafeComparator();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.ImmutableSortedMap headMap(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.UnmodifiableIterator valueIterator();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.ImmutableSortedMap tailMap(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object writeReplace();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.ImmutableSortedMap subMap(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
}
class ImmutableSortedMap$Builder{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.ImmutableMap$Builder put(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
}
class ImmutableSortedMap$SerializedForm{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object readResolve();
}
class ImmutableSortedSet{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.ImmutableSortedSet tailSet(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.ImmutableSortedSet headSet(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.Comparator comparator();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.ImmutableSortedSet subSet(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object writeReplace();
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator iterator();
}
class Iterators{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getOnlyElement(  @Sink(SUSI_NO_CATEGORY) java.util.Iterator arg0);
}
class Iterators$11{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Iterators$12{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Lists$AbstractListWrapper{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Lists$CharSequenceAsList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Character get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Lists$OnePlusArrayList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Lists$Partition{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Lists$ReverseList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getForwardList();
}
class Lists$ReverseList$1{
    void set(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Lists$StringAsImmutableList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Character get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Lists$StringAsImmutableList$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Character get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Lists$TransformingRandomAccessList{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Object get(  int arg0);
}
class Lists$TwoPlusArrayList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class MapMaker{
   @Source(SUSI_NO_CATEGORY)  com.google.common.base.Ticker getTicker();
   @Source(SUSI_NO_CATEGORY)  com.google.common.base.Equivalence getKeyEquivalence();
   @Source(SUSI_NO_CATEGORY)  long getExpireAfterWriteNanos();
   @Source(SUSI_NO_CATEGORY)  long getExpireAfterAccessNanos();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$Strength getValueStrength();
   @Source(SUSI_NO_CATEGORY)  int getConcurrencyLevel();
   @Source(SUSI_NO_CATEGORY)  int getInitialCapacity();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$Strength getKeyStrength();
   @Source(SUSI_NO_CATEGORY)  com.google.common.base.Equivalence getValueEquivalence();
}
class MapMaker$NullComputingConcurrentMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class MapMaker$NullConcurrentMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object putIfAbsent(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class MapMakerInternalMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object put(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object putIfAbsent(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getLiveValue(  @Sink(SUSI_NO_CATEGORY) com.google.common.collect.MapMakerInternalMap$ReferenceEntry arg0);
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class MapMakerInternalMap$1{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get();
}
class MapMakerInternalMap$AbstractReferenceEntry{
    void setExpirationTime(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable();
   @Source(SUSI_NO_CATEGORY)  int getHash();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference();
   @Source(SUSI_NO_CATEGORY)  long getExpirationTime();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getKey();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable();
}
class MapMakerInternalMap$AbstractSerializationProxy{
    void readEntries(  @Sink(SUSI_NO_CATEGORY) java.io.ObjectInputStream arg0);
}
class MapMakerInternalMap$EntryFactory{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$EntryFactory getFactory(  @Sink(SUSI_NO_CATEGORY) com.google.common.collect.MapMakerInternalMap$Strength arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry copyEntry(  @Sink(SUSI_NO_CATEGORY) com.google.common.collect.MapMakerInternalMap$Segment arg0, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.MapMakerInternalMap$ReferenceEntry arg1, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.MapMakerInternalMap$ReferenceEntry arg2);
}
class MapMakerInternalMap$EvictionQueue$1{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable();
}
class MapMakerInternalMap$ExpirationQueue$1{
   @Source(SUSI_NO_CATEGORY)  long getExpirationTime();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable();
}
class MapMakerInternalMap$HashIterator{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$WriteThroughEntry nextEntry();
}
class MapMakerInternalMap$NullEntry{
    void setExpirationTime(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getKey();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext();
   @Source(SUSI_NO_CATEGORY)  long getExpirationTime();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable();
   @Source(SUSI_NO_CATEGORY)  int getHash();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable();
}
class MapMakerInternalMap$Segment{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getLiveEntry(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getLiveValue(  @Sink(SUSI_NO_CATEGORY) com.google.common.collect.MapMakerInternalMap$ReferenceEntry arg0);
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getFirst(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class MapMakerInternalMap$SoftEntry{
    void setExpirationTime(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getKey();
   @Source(SUSI_NO_CATEGORY)  int getHash();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable();
   @Source(SUSI_NO_CATEGORY)  long getExpirationTime();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference();
}
class MapMakerInternalMap$SoftEvictableEntry{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable();
}
class MapMakerInternalMap$SoftExpirableEntry{
   @Source(SUSI_NO_CATEGORY)  long getExpirationTime();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable();
}
class MapMakerInternalMap$SoftExpirableEvictableEntry{
   @Source(SUSI_NO_CATEGORY)  long getExpirationTime();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable();
}
class MapMakerInternalMap$SoftValueReference{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry();
}
class MapMakerInternalMap$StrongEntry{
    void setExpirationTime(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  long getExpirationTime();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getKey();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable();
   @Source(SUSI_NO_CATEGORY)  int getHash();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable();
}
class MapMakerInternalMap$StrongEvictableEntry{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable();
}
class MapMakerInternalMap$StrongExpirableEntry{
   @Source(SUSI_NO_CATEGORY)  long getExpirationTime();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable();
}
class MapMakerInternalMap$StrongExpirableEvictableEntry{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable();
   @Source(SUSI_NO_CATEGORY)  long getExpirationTime();
}
class MapMakerInternalMap$StrongValueReference{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry();
}
class MapMakerInternalMap$WeakEntry{
    void setExpirationTime(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  long getExpirationTime();
   @Source(SUSI_NO_CATEGORY)  int getHash();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getKey();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ValueReference getValueReference();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNext();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable();
}
class MapMakerInternalMap$WeakEvictableEntry{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable();
}
class MapMakerInternalMap$WeakExpirableEntry{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable();
   @Source(SUSI_NO_CATEGORY)  long getExpirationTime();
}
class MapMakerInternalMap$WeakExpirableEvictableEntry{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousExpirable();
   @Source(SUSI_NO_CATEGORY)  long getExpirationTime();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextEvictable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getPreviousEvictable();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getNextExpirable();
}
class MapMakerInternalMap$WeakValueReference{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry();
}
class MapMakerInternalMap$WriteThroughEntry{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getKey();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue();
}
class Maps$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getKey();
}
class Maps$AbstractFilteredMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object put(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Maps$FilteredEntryMap$EntrySet$1$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Maps$ImprovedAbstractMap{
   @Source(SUSI_NO_CATEGORY)  java.util.Set entrySet();
}
class Maps$TransformedEntriesMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Multimaps$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getKey();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue();
}
class Multimaps$CustomListMultimap{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection createCollection();
}
class Multimaps$CustomSetMultimap{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection createCollection();
}
class Multimaps$CustomSortedSetMultimap{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection createCollection();
}
class Multimaps$FilteredMultimap{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Map asMap();
}
class Multimaps$Keys{
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator entryIterator();
   @Source(SUSI_NO_CATEGORY)  java.util.Set createEntrySet();
}
class Multimaps$Keys$1$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getElement();
}
class Multimaps$MapMultimap{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Multimaps$MapMultimap$AsMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Multimaps$MapMultimap$AsMapEntries$1$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getKey();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue();
}
class Multimaps$TransformedEntriesListMultimap{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Multimaps$TransformedEntriesMultimap{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Multimaps$TransformedEntriesMultimap$TransformedEntries$1$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getKey();
}
class Multimaps$UnmodifiableListMultimap{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Multimaps$UnmodifiableMultimap{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Multimaps$UnmodifiableSetMultimap{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Multimaps$UnmodifiableSortedSetMultimap{
   @Source(SUSI_NO_CATEGORY)  java.util.Collection get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Multisets$ImmutableEntry{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getElement();
   @Source(SUSI_NO_CATEGORY)  int getCount();
}
class Multisets$SetMultiset{
   @Source(SUSI_NO_CATEGORY)  boolean setCount(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
}
class Multisets$UnmodifiableMultiset{
   @Source(SUSI_NO_CATEGORY)  int setCount(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  boolean setCount(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.Set elementSet();
}
class Multisets$UnmodifiableSortedMultiset{
   @Source(SUSI_NO_CATEGORY)  java.util.Set createElementSet();
}
class Ordering{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.Ordering reverse();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.Ordering nullsFirst();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object max(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object min(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.Ordering nullsLast();
}
class RegularImmutableList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class RegularImmutableList$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class RegularImmutableMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class RegularImmutableMap$Values$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class RegularImmutableSortedSet{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.ImmutableSortedSet headSetImpl(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.ImmutableSortedSet tailSetImpl(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
}
class Serialization{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.Serialization$FieldSetter getFieldSetter(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class Serialization$FieldSetter{
    void set(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void set(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class Sets$CartesianSet$Axis{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getForIndex(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Sets$PowerSet$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Sets$SetFromMap{
   @Source(SUSI_NO_CATEGORY)  boolean add(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class SingletonImmutableList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class SingletonImmutableMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class SortedMultisets$DescendingMultiset{
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.SortedMultiset tailMultiset(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BoundType arg1);
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.SortedMultiset headMultiset(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BoundType arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.Set createEntrySet();
   @Source(SUSI_NO_CATEGORY)  java.util.Set entrySet();
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.SortedMultiset subMultiset(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BoundType arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg2, @Sink(SUSI_NO_CATEGORY) com.google.common.collect.BoundType arg3);
}
class SortedMultisets$ElementSet{
   @Source(SUSI_NO_CATEGORY)  java.util.SortedSet tailSet(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.SortedSet headSet(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.SortedSet subSet(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.Multiset multiset();
}
class TransformedImmutableList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.google.common.collect.ImmutableList subList(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class TransformedImmutableList$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class TreeMultiset{
   @Source(SUSI_NO_CATEGORY)  boolean setCount(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int setCount(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator descendingEntryIterator();
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator entryIterator();
}
class TreeMultiset$LiveEntry{
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getElement();
}
class TreeMultiset$Reference{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get();
}

package com.android.server.accessibility;

class AccessibilityManagerService{
   @Source(SUSI_NO_CATEGORY)  boolean sendAccessibilityEvent(  @Sink(SUSI_NO_CATEGORY) android.view.accessibility.AccessibilityEvent arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getEnabledAccessibilityServiceList(  int arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  boolean getActiveWindowBounds(  android.graphics.Rect arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getInstalledAccessibilityServiceList(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getActiveWindowId();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getAccessibilityFocusBoundsInActiveWindow(  android.graphics.Rect arg0);
}
class AccessibilityManagerService$MainHandler{
    void handleMessage(  @Sink(SUSI_NO_CATEGORY) android.os.Message arg0);
}
class AccessibilityManagerService$SecurityPolicy{
   @Source(SUSI_NETWORK_INFORMATION)  int getRetrievalAllowingWindowLocked();
}
class AccessibilityManagerService$Service{
    void setServiceInfo(  @Sink(SUSI_NO_CATEGORY) android.accessibilityservice.AccessibilityServiceInfo arg0);
    void setDynamicallyConfigurableProperties(  @Sink(SUSI_NO_CATEGORY) android.accessibilityservice.AccessibilityServiceInfo arg0);
    void notifyGesture(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void notifyAccessibilityEvent(  @Sink(SUSI_NO_CATEGORY) android.view.accessibility.AccessibilityEvent arg0);
   @Source(SUSI_NO_CATEGORY)  boolean performAccessibilityAction(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) android.view.accessibility.IAccessibilityInteractionConnectionCallback arg5, @Sink(SUSI_NO_CATEGORY) long arg6);
   @Source(SUSI_NETWORK_INFORMATION)  float findAccessibilityNodeInfosByText(  int arg0, long arg1, java.lang.String arg2, int arg3, android.view.accessibility.IAccessibilityInteractionConnectionCallback arg4, long arg5);
   @Source(SUSI_NETWORK_INFORMATION)  android.accessibilityservice.AccessibilityServiceInfo getServiceInfo();
}
class ScreenMagnifier$DisplayProvider{
   @Source(SUSI_NO_CATEGORY)  android.view.DisplayInfo getDisplayInfo();
   @Source(SUSI_NO_CATEGORY)  android.view.Display getDisplay();
}
class ScreenMagnifier$MagnificationController{
    void setMagnifiedRegionCenter(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void setScaleAndMagnifiedRegionCenter(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
    void setAccessibilityTransformation(  @Sink(SUSI_NO_CATEGORY) com.android.server.accessibility.ScreenMagnifier$MagnificationController$MagnificationSpec arg0);
    void setScale(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) float arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
   @Source(SUSI_NO_CATEGORY)  float getScaledOffsetX();
   @Source(SUSI_NO_CATEGORY)  float getScaledOffsetY();
   @Source(SUSI_NO_CATEGORY)  com.android.server.accessibility.ScreenMagnifier$MagnificationController$MagnificationSpec getAccessibilityTransformation();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getMagnifiedRegionBounds();
   @Source(SUSI_NO_CATEGORY)  float getMagnifiedRegionCenterX();
   @Source(SUSI_NO_CATEGORY)  float getMagnifiedRegionCenterY();
   @Source(SUSI_NO_CATEGORY)  float getScale();
}
class ScreenMagnifier$Viewport{
    void setFrameShown(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getBounds();
}
class ScreenMagnifier$Viewport$ViewportWindow{
    void setBounds(  @Sink(SUSI_NO_CATEGORY) android.graphics.Rect arg0);
   @Source(SUSI_NO_CATEGORY)  int getAlpha();
   @Source(SUSI_NO_CATEGORY)  android.graphics.Rect getBounds();
}
class TouchExplorer$InjectedPointerTracker{
   @Source(SUSI_NO_CATEGORY)  android.view.MotionEvent getLastInjectedHoverEvent();
   @Source(SUSI_NO_CATEGORY)  int getInjectedPointersDown();
   @Source(SUSI_NO_CATEGORY)  android.view.MotionEvent getLastInjectedHoverEventForClick();
   @Source(SUSI_NO_CATEGORY)  long getLastInjectedDownEventTime();
   @Source(SUSI_NO_CATEGORY)  int getInjectedPointerDownCount();
}
class TouchExplorer$ReceivedPointerTracker{
   @Source(SUSI_NO_CATEGORY)  int getLastReceivedDownEdgeFlags();
   @Source(SUSI_NO_CATEGORY)  float getReceivedPointerDownY(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  float getReceivedPointerDownX(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getLastReceivedUpPointerId();
   @Source(SUSI_NO_CATEGORY)  float getLastReceivedUpPointerDownX();
   @Source(SUSI_NO_CATEGORY)  float getLastReceivedUpPointerDownY();
   @Source(SUSI_NO_CATEGORY)  int getActivePointers();
   @Source(SUSI_NO_CATEGORY)  int getPrimaryActivePointerId();
   @Source(SUSI_NO_CATEGORY)  int getActivePointerCount();
   @Source(SUSI_NO_CATEGORY)  int getReceivedPointerDownCount();
   @Source(SUSI_NO_CATEGORY)  long getReceivedPointerDownTime(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.MotionEvent getLastReceivedEvent();
   @Source(SUSI_NO_CATEGORY)  long getLastReceivedUpPointerDownTime();
}
class TouchExplorer$SendHoverDelayed{
   @Source(SUSI_NO_CATEGORY)  float getY();
   @Source(SUSI_NO_CATEGORY)  float getX();
}

package gov.nist.javax.sip.stack;

class DefaultRouter{
   @Source(SUSI_NO_CATEGORY)  javax.sip.address.Hop getOutboundProxy();
   @Source(SUSI_NO_CATEGORY)  javax.sip.address.Hop getNextHop(  @Sink(SUSI_NO_CATEGORY) javax.sip.message.Request arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.ListIterator getNextHops(  @Sink(SUSI_NO_CATEGORY) javax.sip.message.Request arg0);
}
class HandshakeCompletedListenerImpl{
   @Source(SUSI_NO_CATEGORY)  javax.net.ssl.HandshakeCompletedEvent getHandshakeCompletedEvent();
}
class HopImpl{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTransport();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHost();
   @Source(SUSI_NO_CATEGORY)  int getPort();
}
class IOHandler{
   @Source(SUSI_NO_CATEGORY)  java.net.Socket sendBytes(  @Sink(SUSI_NO_CATEGORY) java.net.InetAddress arg0, @Sink(SUSI_NO_CATEGORY) java.net.InetAddress arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) byte[] arg4, @Sink(SUSI_NO_CATEGORY) boolean arg5, @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.stack.MessageChannel arg6);
   @Source(SUSI_NO_CATEGORY)  java.net.SocketAddress obtainLocalAddress(  @Sink(SUSI_NO_CATEGORY) java.net.InetAddress arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.net.InetAddress arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NO_CATEGORY)  java.net.Socket getSocket(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class MessageChannel{
    void sendMessage(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPMessage arg0, @Sink(SUSI_NO_CATEGORY) java.net.InetAddress arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void sendMessage(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPMessage arg0, @Sink(SUSI_NO_CATEGORY) javax.sip.address.Hop arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getKey(  @Sink(SUSI_NO_CATEGORY) java.net.InetAddress arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getKey(  @Sink(SUSI_NO_CATEGORY) gov.nist.core.HostPort arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRawIpSourceAddress();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHost();
   @Source(SUSI_NO_CATEGORY)  int getPort();
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.HostPort getPeerHostPort();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor();
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.HostPort getViaHostPort();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.Via getViaHeader();
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.HostPort getHostPort();
}
class MessageProcessor{
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getIpAddress();
   @Source(SUSI_NO_CATEGORY)  int getDefaultPort(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.Via getViaHeader();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTransport();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.ListeningPointImpl getListeningPoint();
   @Source(SUSI_NO_CATEGORY)  int getPort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSentBy();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSavedIpAddress();
}
class SIPClientTransaction{
    void setDialog(  @Sink(SUSI_VOIP) gov.nist.javax.sip.stack.SIPDialog arg0, @Sink(SUSI_VOIP) java.lang.String arg1);
    void processResponse(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPResponse arg0, @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.stack.MessageChannel arg1);
    void setState(  @Sink(SUSI_NO_CATEGORY) javax.sip.TransactionState arg0);
    void sendMessage(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPMessage arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.Dialog getDialog();
   @Source(SUSI_NO_CATEGORY)  javax.sip.address.Hop getNextHop();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.Via getOutgoingViaHeader();
   @Source(SUSI_NO_CATEGORY)  javax.sip.message.Request createAck();
   @Source(SUSI_NO_CATEGORY)  int getViaPort();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.SIPDialog getDefaultDialog();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.MessageChannel getRequestChannel();
   @Source(SUSI_NO_CATEGORY)  javax.sip.message.Request createCancel();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getViaHost();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.SIPDialog getDialog(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class SIPDialog{
    void sendReliableProvisionalResponse(  @Sink(SUSI_NO_CATEGORY) javax.sip.message.Response arg0);
    void setState(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void sendRequest(  @Sink(SUSI_NO_CATEGORY) javax.sip.ClientTransaction arg0);
    void sendRequest(  @Sink(SUSI_NO_CATEGORY) javax.sip.ClientTransaction arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void startRetransmitTimer(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.stack.SIPServerTransaction arg0, @Sink(SUSI_NO_CATEGORY) javax.sip.message.Response arg1);
    void setLastResponse(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.stack.SIPTransaction arg0, @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPResponse arg1);
    void sendAck(  @Sink(SUSI_NO_CATEGORY) javax.sip.message.Request arg0);
    void setResponseTags(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPResponse arg0);
   @Source(SUSI_NO_CATEGORY)  long getOriginalLocalSequenceNumber();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.SipProviderImpl getSipProvider();
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.EventHeader getEventHeader();
   @Source(SUSI_NO_CATEGORY)  javax.sip.Transaction getFirstTransaction();
   @Source(SUSI_NO_CATEGORY)  javax.sip.address.Address getRemoteTarget();
   @Source(SUSI_NO_CATEGORY)  javax.sip.DialogState getState();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.SIPTransactionStack getStack();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getRemoteTag();
   @Source(SUSI_NO_CATEGORY)  javax.sip.address.Address getRemoteParty();
   @Source(SUSI_NO_CATEGORY)  long getRemoteSeqNumber();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getApplicationData();
   @Source(SUSI_NO_CATEGORY)  javax.sip.header.CallIdHeader getCallId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMethod();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getEarlyDialogId();
   @Source(SUSI_NO_CATEGORY)  javax.sip.address.Address getLocalParty();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDialogId();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.message.SIPResponse getLastResponse();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.message.SIPRequest getLastAckReceived();
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator getRouteSet();
   @Source(SUSI_NO_CATEGORY)  int getLocalSequenceNumber();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLocalTag();
   @Source(SUSI_NO_CATEGORY)  javax.sip.message.Response createReliableProvisionalResponse(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.message.Request createAck(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.Contact getMyContactHeader();
   @Source(SUSI_NO_CATEGORY)  long getLocalSeqNumber();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.SIPTransaction getLastTransaction();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.SIPServerTransaction getInviteTransaction();
   @Source(SUSI_NO_CATEGORY)  int getRemoteSequenceNumber();
   @Source(SUSI_NO_CATEGORY)  javax.sip.message.Request createRequest(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.message.SIPRequest getLastAckSent();
   @Source(SUSI_NO_CATEGORY)  javax.sip.message.Request createPrack(  @Sink(SUSI_NO_CATEGORY) javax.sip.message.Response arg0);
}
class SIPDialogErrorEvent{
   @Source(SUSI_NO_CATEGORY)  int getErrorID();
}
class SIPServerTransaction{
    void setState(  @Sink(SUSI_NO_CATEGORY) javax.sip.TransactionState arg0);
    void processRequest(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPRequest arg0, @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.stack.MessageChannel arg1);
    void sendResponse(  @Sink(SUSI_NO_CATEGORY) javax.sip.message.Response arg0);
    void sendMessage(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPMessage arg0);
    void setMapped(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setOriginalRequest(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPRequest arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.SIPServerTransaction getCanceledInviteTransaction();
   @Source(SUSI_NO_CATEGORY)  int getViaPort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getViaHost();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.MessageChannel getResponseChannel();
   @Source(SUSI_NO_CATEGORY)  javax.sip.TransactionState getState();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.message.SIPResponse getLastResponse();
   @Source(SUSI_NO_CATEGORY)  javax.sip.Dialog getDialog();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.message.SIPResponse getReliableProvisionalResponse();
}
class SIPTransaction{
    void sendMessage(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPMessage arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMethod();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPeerAddress();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.message.SIPRequest getOriginalRequest();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCipherSuite();
   @Source(SUSI_NO_CATEGORY)  int getPeerPacketSourcePort();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.message.SIPResponse getLastResponse();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPeerProtocol();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getPeerPacketSourceAddress();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.MessageChannel getMessageChannel();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHost();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getPeerInetAddress();
   @Source(SUSI_NO_CATEGORY)  int getViaPort();
   @Source(SUSI_NO_CATEGORY)  int getPeerPort();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.header.Via getViaHeader();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor();
   @Source(SUSI_NO_CATEGORY)  int getPort();
   @Source(SUSI_NO_CATEGORY)  javax.sip.message.Response getResponse();
   @Source(SUSI_NO_CATEGORY)  java.security.cert.Certificate[] getLocalCertificates();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getBranchId();
   @Source(SUSI_NO_CATEGORY)  javax.sip.message.Request getRequest();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTransactionId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getBranch();
   @Source(SUSI_NO_CATEGORY)  long getCSeq();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getKey();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.SipProviderImpl getSipProvider();
   @Source(SUSI_NO_CATEGORY)  javax.sip.TransactionState getState();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getApplicationData();
   @Source(SUSI_NO_CATEGORY)  int getRetransmitTimer();
   @Source(SUSI_NO_CATEGORY)  java.security.cert.Certificate[] getPeerCertificates();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getViaHost();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTransport();
}
class SIPTransactionErrorEvent{
   @Source(SUSI_NO_CATEGORY)  int getErrorID();
}
class SIPTransactionStack{
    void putDialog(  @Sink(SUSI_VOIP) gov.nist.javax.sip.stack.SIPDialog arg0);
    gov.nist.javax.sip.stack.SIPDialog createDialog(  @Sink(SUSI_VOIP) gov.nist.javax.sip.stack.SIPTransaction arg0);
    void addTransactionPendingAck(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.stack.SIPServerTransaction arg0);
    void putInMergeTable(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.stack.SIPServerTransaction arg0, @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPRequest arg1);
    void putPendingTransaction(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.stack.SIPServerTransaction arg0);
    void setHostAddress(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void addForkedClientTransaction(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.stack.SIPClientTransaction arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  gov.nist.javax.sip.stack.ServerRequestInterface newSIPServerRequest(  @Sink(SUSI_SYSTEM_SETTINGS) gov.nist.javax.sip.message.SIPRequest arg0, @Sink(SUSI_SYSTEM_SETTINGS) gov.nist.javax.sip.stack.MessageChannel arg1);
   @Source(SUSI_NO_CATEGORY)  javax.sip.Dialog getJoinDialog(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.header.extensions.JoinHeader arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.net.AddressResolver getAddressResolver();
   @Source(SUSI_NO_CATEGORY)  javax.sip.Dialog getReplacesDialog(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.header.extensions.ReplacesHeader arg0);
   @Source(SUSI_NO_CATEGORY)  javax.sip.address.Router getRouter(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPRequest arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.ServerResponseInterface newSIPServerResponse(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPResponse arg0, @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.stack.MessageChannel arg1);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.SIPClientTransaction createClientTransaction(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPRequest arg0, @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.stack.MessageChannel arg1);
   @Source(SUSI_NO_CATEGORY)  javax.sip.address.Hop getNextHop(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPRequest arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.MessageProcessor createMessageProcessor(  @Sink(SUSI_NO_CATEGORY) java.net.InetAddress arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.SIPClientTransaction getForkedTransaction(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHostAddress();
   @Source(SUSI_NO_CATEGORY)  int getClientTransactionTableSize();
   @Source(SUSI_NO_CATEGORY)  javax.sip.address.Router getRouter();
   @Source(SUSI_NO_CATEGORY)  int getSendUdpBufferSize();
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.ServerLogger getServerLogger();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.SIPTransaction findTransaction(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPMessage arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.MessageChannel createRawMessageChannel(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) javax.sip.address.Hop arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getDialogs(  @Sink(SUSI_NO_CATEGORY) javax.sip.DialogState arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.SIPDialog getDialog(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.MessageProcessor[] getMessageProcessors();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.SIPClientTransaction findSubscribeTransaction(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPRequest arg0, @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.ListeningPointImpl arg1);
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.net.NetworkLayer getNetworkLayer();
   @Source(SUSI_NO_CATEGORY)  java.util.Timer getTimer();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.SIPServerTransaction findPendingTransaction(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPRequest arg0);
   @Source(SUSI_NO_CATEGORY)  int getReceiveUdpBufferSize();
   @Source(SUSI_NO_CATEGORY)  int getActiveClientTransactionCount();
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.StackLogger getStackLogger();
   @Source(SUSI_NO_CATEGORY)  int getServerTransactionTableSize();
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.ThreadAuditor getThreadAuditor();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getDialogs();
   @Source(SUSI_NO_CATEGORY)  int getMaxMessageSize();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.SIPServerTransaction getRetransmissionAlertTransaction(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.SIPTransaction findCancelTransaction(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPRequest arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.MessageChannel createMessageChannel(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPRequest arg0, @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.stack.MessageProcessor arg1, @Sink(SUSI_NO_CATEGORY) javax.sip.address.Hop arg2);
}
class TCPMessageChannel{
    void sendMessage(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) java.net.InetAddress arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
    void sendMessage(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPMessage arg0);
    void processMessage(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPMessage arg0);
   @Source(SUSI_NO_CATEGORY)  int getPeerPacketSourcePort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPeerAddress();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getPeerInetAddress();
   @Source(SUSI_NO_CATEGORY)  int getViaPort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTransport();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPeerProtocol();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getKey();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getViaHost();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack();
   @Source(SUSI_NO_CATEGORY)  int getPeerPort();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getPeerPacketSourceAddress();
}
class TCPMessageProcessor{
    void cacheMessageChannel(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.stack.TCPMessageChannel arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.MessageChannel createMessageChannel(  @Sink(SUSI_NO_CATEGORY) java.net.InetAddress arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.MessageChannel createMessageChannel(  @Sink(SUSI_NO_CATEGORY) gov.nist.core.HostPort arg0);
   @Source(SUSI_NO_CATEGORY)  int getDefaultTargetPort();
   @Source(SUSI_NO_CATEGORY)  int getMaximumMessageSize();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTransport();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack();
}
class TLSMessageChannel{
    void sendMessage(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) java.net.InetAddress arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
    void sendMessage(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPMessage arg0);
    void processMessage(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPMessage arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getKey();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getPeerInetAddress();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl getHandshakeCompletedListener();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPeerProtocol();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTransport();
   @Source(SUSI_NO_CATEGORY)  int getPeerPacketSourcePort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPeerAddress();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getPeerPacketSourceAddress();
   @Source(SUSI_NO_CATEGORY)  int getPeerPort();
   @Source(SUSI_NO_CATEGORY)  int getViaPort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getViaHost();
}
class TLSMessageProcessor{
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.MessageChannel createMessageChannel(  @Sink(SUSI_NO_CATEGORY) gov.nist.core.HostPort arg0);
    void cacheMessageChannel(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.stack.TLSMessageChannel arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.MessageChannel createMessageChannel(  @Sink(SUSI_NO_CATEGORY) java.net.InetAddress arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  int getDefaultTargetPort();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack();
   @Source(SUSI_NO_CATEGORY)  int getMaximumMessageSize();
}
class UDPMessageChannel{
    void sendMessage(  @Sink(SUSI_NO_CATEGORY) gov.nist.javax.sip.message.SIPMessage arg0);
    void sendMessage(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) java.net.InetAddress arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3, @Sink(SUSI_NO_CATEGORY) boolean arg4);
    void sendMessage(  @Sink(SUSI_NO_CATEGORY) byte[] arg0, @Sink(SUSI_NO_CATEGORY) java.net.InetAddress arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) boolean arg3);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getViaHost();
   @Source(SUSI_NO_CATEGORY)  int getPort();
   @Source(SUSI_NO_CATEGORY)  int getViaPort();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack();
   @Source(SUSI_NO_CATEGORY)  int getPeerPort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getKey();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getPeerPacketSourceAddress();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPeerProtocol();
   @Source(SUSI_NO_CATEGORY)  java.net.InetAddress getPeerInetAddress();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTransport();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHost();
   @Source(SUSI_NO_CATEGORY)  int getPeerPacketSourcePort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPeerName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPeerAddress();
}
class UDPMessageProcessor{
   @Source(SUSI_NO_CATEGORY)  int getMaximumMessageSize();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack();
   @Source(SUSI_NO_CATEGORY)  int getDefaultTargetPort();
   @Source(SUSI_NO_CATEGORY)  int getPort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTransport();
}

package com.android.contacts.editor;

class AggregationSuggestionEngine{
   @Source(SUSI_CONTACT_INFORMATION)  int getSuggestedContactCount();
   @Source(SUSI_CONTACT_INFORMATION)  android.os.Handler getHandler();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.List getSuggestions();
}
class BaseRawContactEditorView{
    void setPhotoBitmap(  @Sink(SUSI_CONTACT_INFORMATION) android.graphics.Bitmap arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.editor.PhotoEditorView getPhotoEditor();
}
class ContactEditorFragment{
   @Source(SUSI_CONTACT_INFORMATION)  boolean save(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
    void setIntentExtras(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg0);
    void setData(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.Contact arg0);
    void setAggregationSuggestionViewEnabled(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
   @Source(SUSI_CONTACT_INFORMATION)  long getContactId();
   @Source(SUSI_CONTACT_INFORMATION)  android.database.Cursor access$1202(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.editor.ContactEditorFragment arg0, @Sink(SUSI_CONTACT_INFORMATION) android.database.Cursor arg1);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.editor.BaseRawContactEditorView getRawContactEditorView(  @Sink(SUSI_CONTACT_INFORMATION) long arg0);
}
class ContactEditorFragment$AggregationSuggestionAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Object getItem(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_CONTACT_INFORMATION)  int getCount();
   @Source(SUSI_CONTACT_INFORMATION)  long getItemId(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class ContactEditorFragment$CancelEditDialogFragment{
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Dialog onCreateDialog(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg0);
}
class ContactEditorFragment$JoinSuggestedContactDialogFragment{
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Dialog onCreateDialog(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg0);
}
class ContactEditorFragment$PhotoHandler{
    void startPhotoActivity(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Intent arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg2);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener getListener();
   @Source(SUSI_CONTACT_INFORMATION)  long getWritableEntityId();
}
class ContactEditorFragment$PhotoHandler$PhotoEditorListener{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getCurrentPhotoFile();
}
class ContactEditorFragment$SuggestionEditConfirmationDialogFragment{
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Dialog onCreateDialog(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg0);
}
class ContactEditorUtils{
    void saveDefaultAndAllAccounts(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.account.AccountWithDataSet arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.account.AccountWithDataSet getCreatedAccount(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.content.Intent arg1);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.editor.ContactEditorUtils getInstance(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String[] getWritableAccountTypeStrings();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.List getSavedAccounts();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.account.AccountWithDataSet getDefaultAccount();
}
class EditorAnimator{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.editor.EditorAnimator getInstance();
}
class EventFieldEditorView{
    void setValues(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.dataitem.DataKind arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta$ValuesDelta arg1, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta arg2, @Sink(SUSI_CONTACT_INFORMATION) boolean arg3, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.editor.ViewIdGenerator arg4);
    void setEnabled(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
    void onFieldChanged(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Dialog createDialog(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.account.AccountType$EditType getType();
   @Source(SUSI_CONTACT_INFORMATION)  int getDefaultHourForBirthday();
}
class GroupMembershipView{
    void setEnabled(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
}
class GroupMembershipView$GroupMembershipAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_CONTACT_INFORMATION)  int getItemViewType(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getViewTypeCount();
}
class GroupMembershipView$GroupSelectionItem{
   @Source(SUSI_CONTACT_INFORMATION)  long getGroupId();
}
class KindSectionView{
    void setEnabled(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
    void setTitleVisible(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getTitle();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind getKind();
   @Source(SUSI_CONTACT_INFORMATION)  int getEditorCount();
}
class LabeledEditorView{
    void setEnabled(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
    void saveValue(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
    void onFieldChanged(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
    void setDeleteButtonVisible(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind getKind();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.account.AccountType$EditType getType();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.RawContactDelta$ValuesDelta getValues();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.RawContactDelta$ValuesDelta getEntry();
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Dialog createDialog(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg0);
}
class LabeledEditorView$EditTypeAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getDropDownView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
}
class PhoneticNameEditorView{
    void setValues(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.dataitem.DataKind arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta$ValuesDelta arg1, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta arg2, @Sink(SUSI_CONTACT_INFORMATION) boolean arg3, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.editor.ViewIdGenerator arg4);
}
class PhoneticNameEditorView$PhoneticValuesDelta{
    void put(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Long getId();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getAsString(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
}
class PhotoActionPopup$ChoiceListItem{
   @Source(SUSI_CONTACT_INFORMATION)  int getId();
}
class PhotoEditorView{
    void setSuperPrimary(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
    void setDeletable(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
    void setPhotoBitmap(  @Sink(SUSI_CONTACT_INFORMATION) android.graphics.Bitmap arg0);
    void setEnabled(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
}
class RawContactEditorView{
    void setEnabled(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
    void setPhotoBitmap(  @Sink(SUSI_CONTACT_INFORMATION) android.graphics.Bitmap arg0);
   @Source(SUSI_CONTACT_INFORMATION)  long getRawContactId();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.editor.TextFieldsEditorView getPhoneticNameEditor();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.editor.TextFieldsEditorView getNameEditor();
}
class RawContactReadOnlyEditorView{
    void setState(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.account.AccountType arg1, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.editor.ViewIdGenerator arg2, @Sink(SUSI_CONTACT_INFORMATION) boolean arg3);
   @Source(SUSI_CONTACT_INFORMATION)  long getRawContactId();
}
class SelectAccountDialogFragment{
    void show(  @Sink(SUSI_CONTACT_INFORMATION) android.app.FragmentManager arg0, @Sink(SUSI_CONTACT_INFORMATION) android.app.Fragment arg1, @Sink(SUSI_CONTACT_INFORMATION) int arg2, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.util.AccountsListAdapter$AccountListFilter arg3, @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg4);
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Dialog onCreateDialog(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg0);
}
class SplitContactConfirmationDialogFragment{
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Dialog onCreateDialog(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg0);
}
class StructuredNameEditorView{
    void setValues(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.dataitem.DataKind arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta$ValuesDelta arg1, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta arg2, @Sink(SUSI_CONTACT_INFORMATION) boolean arg3, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.editor.ViewIdGenerator arg4);
    void onFieldChanged(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
}
class TextFieldsEditorView{
    void setValues(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.dataitem.DataKind arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta$ValuesDelta arg1, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta arg2, @Sink(SUSI_CONTACT_INFORMATION) boolean arg3, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.editor.ViewIdGenerator arg4);
    void setEnabled(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
    void onFieldChanged(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
}
class TextFieldsEditorView$SavedState{
    void writeToParcel(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Parcel arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
}
class ViewIdGenerator{
   @Source(SUSI_CONTACT_INFORMATION)  int getId(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.dataitem.DataKind arg1, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.RawContactDelta$ValuesDelta arg2, @Sink(SUSI_CONTACT_INFORMATION) int arg3);
}

package android.animation;

class Animator{
    void setTarget(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  android.animation.Animator clone();
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getListeners();
}
class AnimatorInflater{
   @Source(SUSI_NO_CATEGORY)  android.animation.Animator loadAnimator(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class AnimatorSet{
   @Source(SUSI_NO_CATEGORY)  android.animation.Animator setDuration(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setTarget(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  long getStartDelay();
   @Source(SUSI_NO_CATEGORY)  long getDuration();
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getChildAnimations();
}
class AnimatorSet$Builder{
   @Source(SUSI_NO_CATEGORY)  android.animation.AnimatorSet$Builder before(  @Sink(SUSI_NO_CATEGORY) android.animation.Animator arg0);
   @Source(SUSI_NO_CATEGORY)  android.animation.AnimatorSet$Builder with(  @Sink(SUSI_NO_CATEGORY) android.animation.Animator arg0);
   @Source(SUSI_NO_CATEGORY)  android.animation.AnimatorSet$Builder after(  @Sink(SUSI_NO_CATEGORY) android.animation.Animator arg0);
   @Source(SUSI_NO_CATEGORY)  android.animation.AnimatorSet$Builder after(  @Sink(SUSI_NO_CATEGORY) long arg0);
}
class AnimatorSet$DependencyListener{
    void onAnimationStart(  @Sink(SUSI_NO_CATEGORY) android.animation.Animator arg0);
    void onAnimationEnd(  @Sink(SUSI_NO_CATEGORY) android.animation.Animator arg0);
}
class FloatKeyframeSet{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  float getFloatValue(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class IntKeyframeSet{
   @Source(SUSI_NO_CATEGORY)  int getIntValue(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class Keyframe{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
   @Source(SUSI_NO_CATEGORY)  java.lang.Class getType();
   @Source(SUSI_NO_CATEGORY)  android.animation.TimeInterpolator getInterpolator();
   @Source(SUSI_NO_CATEGORY)  float getFraction();
}
class Keyframe$FloatKeyframe{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  float getFloatValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue();
}
class Keyframe$IntKeyframe{
    void setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue();
   @Source(SUSI_NO_CATEGORY)  int getIntValue();
}
class Keyframe$ObjectKeyframe{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue();
}
class KeyframeSet{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class LayoutTransition{
   @Source(SUSI_NO_CATEGORY)  long getStartDelay(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getDuration(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.animation.TimeInterpolator getInterpolator(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getTransitionListeners();
   @Source(SUSI_NO_CATEGORY)  long getStagger(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  android.animation.Animator getAnimator(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class ObjectAnimator{
    void setObjectValues(  @Sink(SUSI_NO_CATEGORY) java.lang.Object[] arg0);
    void setPropertyName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setFloatValues(  @Sink(SUSI_NO_CATEGORY) float[] arg0);
   @Source(SUSI_NO_CATEGORY)  android.animation.Animator setDuration(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setIntValues(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getTarget();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPropertyName();
}
class PropertyValuesHolder{
    void setAnimatedValue(  @Sink(SUSI_LOG) java.lang.Object arg0);
    void setupSetterAndGetter(  @Sink(SUSI_LOG) java.lang.Object arg0);
    void setObjectValues(  @Sink(SUSI_NO_CATEGORY) java.lang.Object[] arg0);
    void setupEndValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
    void setFloatValues(  @Sink(SUSI_NO_CATEGORY) float[] arg0);
    void setupStartValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
    void setKeyframes(  @Sink(SUSI_NO_CATEGORY) android.animation.Keyframe[] arg0);
    void setIntValues(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
    void setupSetter(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPropertyName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMethodName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getAnimatedValue();
}
class PropertyValuesHolder$FloatPropertyValuesHolder{
    void setAnimatedValue(  @Sink(SUSI_LOG) java.lang.Object arg0);
    void setupSetter(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0);
    void setFloatValues(  @Sink(SUSI_NO_CATEGORY) float[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getAnimatedValue();
}
class PropertyValuesHolder$IntPropertyValuesHolder{
    void setAnimatedValue(  @Sink(SUSI_LOG) java.lang.Object arg0);
    void setIntValues(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
    void setupSetter(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getAnimatedValue();
}
class ValueAnimator{
    void setFrameDelay(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  android.animation.Animator setDuration(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setObjectValues(  @Sink(SUSI_NO_CATEGORY) java.lang.Object[] arg0);
    void setValues(  @Sink(SUSI_NO_CATEGORY) android.animation.PropertyValuesHolder[] arg0);
    void setIntValues(  @Sink(SUSI_NO_CATEGORY) int[] arg0);
    void setFloatValues(  @Sink(SUSI_NO_CATEGORY) float[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getAnimatedValue();
   @Source(SUSI_NO_CATEGORY)  float getDurationScale();
   @Source(SUSI_NO_CATEGORY)  android.animation.TimeInterpolator getInterpolator();
   @Source(SUSI_NO_CATEGORY)  long getDuration();
   @Source(SUSI_NO_CATEGORY)  long getStartDelay();
   @Source(SUSI_NO_CATEGORY)  long getFrameDelay();
   @Source(SUSI_NO_CATEGORY)  int getRepeatCount();
   @Source(SUSI_NO_CATEGORY)  int getCurrentAnimationsCount();
   @Source(SUSI_NO_CATEGORY)  android.animation.PropertyValuesHolder[] getValues();
   @Source(SUSI_NO_CATEGORY)  long getCurrentPlayTime();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getAnimatedValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  float getAnimatedFraction();
   @Source(SUSI_NO_CATEGORY)  int getRepeatMode();
}

package com.android.providers.userdictionary;

class DictionaryBackupAgent{
    void onRestore(  @Sink(SUSI_NO_CATEGORY) android.app.backup.BackupDataInput arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg2);
    void onBackup(  @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg0, @Sink(SUSI_NO_CATEGORY) android.app.backup.BackupDataOutput arg1, @Sink(SUSI_NO_CATEGORY) android.os.ParcelFileDescriptor arg2);
}
class UserDictionaryProvider{
   @Source(SUSI_NO_CATEGORY)  int update(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) android.content.ContentValues arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3);
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor query(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg3, @Sink(SUSI_NO_CATEGORY) java.lang.String arg4);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0);
}

package com.android.gallery3d.data;

class ActionImage{
   @Source(SUSI_IMAGE)  android.net.Uri getContentUri();
   @Source(SUSI_IMAGE)  java.lang.String getMimeType();
   @Source(SUSI_IMAGE)  int getWidth();
   @Source(SUSI_IMAGE)  int getMediaType();
   @Source(SUSI_IMAGE)  int getSupportedOperations();
   @Source(SUSI_IMAGE)  int getHeight();
}
class BitmapPool{
   @Source(SUSI_IMAGE)  android.graphics.Bitmap getBitmap(  int arg0, int arg1);
   @Source(SUSI_IMAGE)  android.graphics.Bitmap getBitmap();
}
class BucketHelper{
   @Source(SUSI_IMAGE)  java.lang.String getBucketName(  android.content.ContentResolver arg0, int arg1);
}
class BytesBufferPool{
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.BytesBufferPool$BytesBuffer get();
}
class CameraShortcutImage{
   @Source(SUSI_IMAGE)  int getSupportedOperations();
}
class Cluster{
   @Source(SUSI_IMAGE)  java.util.ArrayList getItems();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.SmallItem getLastItem();
}
class ClusterAlbum{
   @Source(SUSI_IMAGE)  java.util.ArrayList getMediaItems();
   @Source(SUSI_IMAGE)  java.util.ArrayList getMediaItem(  int arg0, int arg1);
   @Source(SUSI_IMAGE)  java.lang.String getName();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaItem getCoverMediaItem();
   @Source(SUSI_IMAGE)  java.util.ArrayList getMediaItemFromPath(  java.util.ArrayList arg0, int arg1, int arg2, com.android.gallery3d.data.DataManager arg3);
   @Source(SUSI_IMAGE)  int getMediaItemCount();
   @Source(SUSI_IMAGE)  int getSupportedOperations();
   @Source(SUSI_IMAGE)  int getTotalMediaItemCount();
}
class ClusterAlbumSet{
   @Source(SUSI_IMAGE)  int getSubMediaSetCount();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaSet getSubMediaSet(  int arg0);
   @Source(SUSI_IMAGE)  java.lang.String getName();
}
class Clustering{
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaItem getClusterCover(  int arg0);
}
class ComboAlbum{
   @Source(SUSI_IMAGE)  java.lang.String getName();
   @Source(SUSI_IMAGE)  int getMediaItemCount();
   @Source(SUSI_IMAGE)  java.util.ArrayList getMediaItem(  int arg0, int arg1);
}
class ComboAlbumSet{
   @Source(SUSI_IMAGE)  java.lang.String getName();
   @Source(SUSI_IMAGE)  int getSubMediaSetCount();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaSet getSubMediaSet(  int arg0);
}
class DataManager{
    void registerChangeNotifier(  @Sink(SUSI_NO_CATEGORY) android.net.Uri arg0, @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.data.ChangeNotifier arg1);
    void mapMediaItems(  @Sink(SUSI_NO_CATEGORY) java.util.ArrayList arg0, @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.data.MediaSet$ItemConsumer arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void addSource(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.data.MediaSource arg0);
   @Source(SUSI_IMAGE)  long getTotalUsedCacheSize();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaObject getMediaObject(  com.android.gallery3d.data.Path arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaSet getMediaSet(  java.lang.String arg0);
   @Source(SUSI_IMAGE)  int getMediaType(  com.android.gallery3d.data.Path arg0);
   @Source(SUSI_IMAGE)  java.lang.String getTopSetPath(  int arg0);
   @Source(SUSI_IMAGE)  long getTotalTargetCacheSize();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaSet[] getMediaSetsFromString(  java.lang.String arg0);
   @Source(SUSI_IMAGE)  android.net.Uri getContentUri(  com.android.gallery3d.data.Path arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaSet getMediaSet(  com.android.gallery3d.data.Path arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.Path findPathByUri(  android.net.Uri arg0, java.lang.String arg1);
   @Source(SUSI_IMAGE)  int getSupportedOperations(  com.android.gallery3d.data.Path arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaObject getMediaObject(  java.lang.String arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.Path getDefaultSetOf(  com.android.gallery3d.data.Path arg0);
}
class DataManager$NotifyBroker{
    void registerNotifier(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.data.ChangeNotifier arg0);
}
class DownloadCache{
   @Source(SUSI_NO_CATEGORY)  com.android.gallery3d.data.DownloadCache$Entry download(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.util.ThreadPool$JobContext arg0, @Sink(SUSI_NO_CATEGORY) java.net.URL arg1);
}
class DownloadCache$DownloadTask{
    void onFutureDone(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.util.Future arg0);
}
class DownloadCache$TaskProxy{
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.DownloadCache$Entry get(  com.android.gallery3d.util.ThreadPool$JobContext arg0);
}
class DownloadUtils{
    void dump(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.util.ThreadPool$JobContext arg0, @Sink(SUSI_NO_CATEGORY) java.io.InputStream arg1, @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg2);
}
class EmptyAlbumImage{
   @Source(SUSI_IMAGE)  int getSupportedOperations();
}
class Face{
   @Source(SUSI_IMAGE)  android.graphics.Rect getPosition();
   @Source(SUSI_IMAGE)  java.lang.String getName();
}
class FaceClustering{
   @Source(SUSI_IMAGE)  java.lang.String getClusterName(  int arg0);
   @Source(SUSI_IMAGE)  java.util.ArrayList getCluster(  int arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaItem getClusterCover(  int arg0);
   @Source(SUSI_IMAGE)  int getNumberOfClusters();
}
class FaceClustering$1{
    void consume(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.data.MediaItem arg1);
}
class FaceClustering$FaceCluster{
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaItem getCover();
}
class FilterDeleteSet{
    void addDeletion(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.data.Path arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_IMAGE)  java.lang.String getName();
   @Source(SUSI_IMAGE)  int getMediaItemCount();
   @Source(SUSI_IMAGE)  java.util.ArrayList getMediaItem(  int arg0, int arg1);
   @Source(SUSI_IMAGE)  int getNumberOfDeletions();
   @Source(SUSI_IMAGE)  long reload();
}
class FilterEmptyPromptSet{
   @Source(SUSI_IMAGE)  java.lang.String getName();
   @Source(SUSI_IMAGE)  java.util.ArrayList getMediaItem(  int arg0, int arg1);
   @Source(SUSI_IMAGE)  int getMediaItemCount();
}
class FilterTypeSet{
   @Source(SUSI_IMAGE)  int getSubMediaSetCount();
   @Source(SUSI_IMAGE)  java.lang.String getName();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaSet getSubMediaSet(  int arg0);
   @Source(SUSI_IMAGE)  java.util.ArrayList getMediaItem(  int arg0, int arg1);
   @Source(SUSI_IMAGE)  int getMediaItemCount();
   @Source(SUSI_IMAGE)  int getSupportedOperations();
}
class ImageCacheService{
    void putImageData(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.data.Path arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) byte[] arg2);
}
class LocalAlbum{
   @Source(SUSI_IMAGE)  int getMediaItemCount();
   @Source(SUSI_IMAGE)  android.database.Cursor getItemCursor(  android.content.ContentResolver arg0, android.net.Uri arg1, java.lang.String[] arg2, int arg3);
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaItem[] getMediaItemById(  com.android.gallery3d.app.GalleryApp arg0, boolean arg1, java.util.ArrayList arg2);
   @Source(SUSI_IMAGE)  java.lang.String getName();
   @Source(SUSI_IMAGE)  android.net.Uri getContentUri();
   @Source(SUSI_IMAGE)  java.lang.String getLocalizedName(  android.content.res.Resources arg0, int arg1, java.lang.String arg2);
   @Source(SUSI_IMAGE)  java.util.ArrayList getMediaItem(  int arg0, int arg1);
   @Source(SUSI_IMAGE)  int getSupportedOperations();
}
class LocalAlbumSet{
   @Source(SUSI_IMAGE)  int getSubMediaSetCount();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaSet getSubMediaSet(  int arg0);
   @Source(SUSI_IMAGE)  java.lang.String getName();
}
class LocalImage{
   @Source(SUSI_IMAGE)  int getRotation();
   @Source(SUSI_IMAGE)  android.net.Uri getContentUri();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaDetails getDetails();
   @Source(SUSI_IMAGE)  int getWidth();
   @Source(SUSI_IMAGE)  java.lang.String getFilePath();
   @Source(SUSI_IMAGE)  int getSupportedOperations();
   @Source(SUSI_IMAGE)  int getHeight();
   @Source(SUSI_IMAGE)  int getMediaType();
}
class LocalImage$LocalLargeImageRequest{
   @Source(SUSI_IMAGE)  android.graphics.BitmapRegionDecoder run(  com.android.gallery3d.util.ThreadPool$JobContext arg0);
}
class LocalMediaItem{
   @Source(SUSI_IMAGE)  java.lang.String getName();
   @Source(SUSI_IMAGE)  long getDateInMs();
    void getLatLong(  double[] arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaDetails getDetails();
   @Source(SUSI_IMAGE)  long getSize();
   @Source(SUSI_IMAGE)  int getBucketId();
   @Source(SUSI_IMAGE)  java.lang.String getMimeType();
}
class LocalMergeAlbum{
   @Source(SUSI_IMAGE)  int getTotalMediaItemCount();
   @Source(SUSI_IMAGE)  java.lang.String getName();
   @Source(SUSI_IMAGE)  int getMediaItemCount();
   @Source(SUSI_IMAGE)  int getSupportedOperations();
   @Source(SUSI_IMAGE)  android.net.Uri getContentUri();
   @Source(SUSI_IMAGE)  java.util.ArrayList getMediaItem(  int arg0, int arg1);
}
class LocalMergeAlbum$FetchCache{
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaItem getItem(  int arg0);
}
class LocalSource{
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.Path getDefaultSetOf(  com.android.gallery3d.data.Path arg0);
}
class LocalVideo{
   @Source(SUSI_IMAGE)  int getMediaType();
   @Source(SUSI_IMAGE)  java.lang.String getFilePath();
   @Source(SUSI_IMAGE)  int getHeight();
   @Source(SUSI_IMAGE)  int getSupportedOperations();
   @Source(SUSI_IMAGE)  android.net.Uri getPlayUri();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaDetails getDetails();
   @Source(SUSI_IMAGE)  android.net.Uri getContentUri();
   @Source(SUSI_IMAGE)  int getWidth();
}
class LocalVideo$LocalVideoRequest{
   @Source(SUSI_IMAGE)  android.graphics.Bitmap onDecodeOriginal(  com.android.gallery3d.util.ThreadPool$JobContext arg0, int arg1);
}
class LocationClustering{
   @Source(SUSI_IMAGE)  int getNumberOfClusters();
   @Source(SUSI_IMAGE)  java.util.ArrayList getCluster(  int arg0);
   @Source(SUSI_IMAGE)  java.lang.String getClusterName(  int arg0);
}
class MediaDetails{
    void setUnit(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void addDetail(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_IMAGE)  java.lang.Object getDetail(  int arg0);
   @Source(SUSI_IMAGE)  int getUnit(  int arg0);
}
class MediaItem{
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.BytesBufferPool getBytesBufferPool();
   @Source(SUSI_IMAGE)  java.lang.String getFilePath();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.BitmapPool getThumbPool();
   @Source(SUSI_IMAGE)  long getDateInMs();
   @Source(SUSI_IMAGE)  com.android.gallery3d.ui.ScreenNail getScreenNail();
   @Source(SUSI_IMAGE)  int getRotation();
   @Source(SUSI_IMAGE)  java.lang.String[] getTags();
   @Source(SUSI_IMAGE)  long getSize();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.BitmapPool getMicroThumbPool();
   @Source(SUSI_IMAGE)  int getTargetSize(  int arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.Face[] getFaces();
   @Source(SUSI_IMAGE)  int getFullImageRotation();
    void getLatLong(  double[] arg0);
   @Source(SUSI_IMAGE)  java.lang.String getName();
}
class MediaObject{
   @Source(SUSI_IMAGE)  int getCacheFlag();
   @Source(SUSI_IMAGE)  int getTypeFromString(  java.lang.String arg0);
   @Source(SUSI_IMAGE)  int getCacheStatus();
   @Source(SUSI_IMAGE)  long getCacheSize();
   @Source(SUSI_IMAGE)  long getDataVersion();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaDetails getDetails();
   @Source(SUSI_IMAGE)  int getSupportedOperations();
   @Source(SUSI_IMAGE)  android.net.Uri getPlayUri();
   @Source(SUSI_IMAGE)  int getMediaType();
   @Source(SUSI_IMAGE)  java.lang.String getTypeString(  int arg0);
   @Source(SUSI_IMAGE)  android.net.Uri getContentUri();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.Path getPath();
}
class MediaSet{
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaDetails getDetails();
   @Source(SUSI_IMAGE)  int getSubMediaSetCount();
   @Source(SUSI_IMAGE)  java.util.ArrayList getMediaItem(  int arg0, int arg1);
   @Source(SUSI_IMAGE)  int getIndexOfItem(  com.android.gallery3d.data.Path arg0, int arg1);
   @Source(SUSI_IMAGE)  int getMediaItemCount();
   @Source(SUSI_IMAGE)  int getTotalMediaItemCount();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaSet getSubMediaSet(  int arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.util.Future requestSyncOnMultipleSets(  com.android.gallery3d.data.MediaSet[] arg0, com.android.gallery3d.data.MediaSet$SyncListener arg1);
   @Source(SUSI_IMAGE)  int getIndexOf(  com.android.gallery3d.data.Path arg0, java.util.ArrayList arg1);
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaItem getCoverMediaItem();
}
class MediaSet$1{
   @Source(SUSI_IMAGE)  java.lang.Integer get();
}
class MediaSet$MultiSetSyncFuture{
   @Source(SUSI_IMAGE)  java.lang.Integer get();
}
class MediaSource{
   @Source(SUSI_IMAGE)  long getTotalUsedCacheSize();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.Path getDefaultSetOf(  com.android.gallery3d.data.Path arg0);
   @Source(SUSI_IMAGE)  java.lang.String getPrefix();
   @Source(SUSI_IMAGE)  long getTotalTargetCacheSize();
}
class MtpClient{
   @Source(SUSI_IMAGE)  android.mtp.MtpObjectInfo getObjectInfo(  java.lang.String arg0, int arg1);
   @Source(SUSI_IMAGE)  java.util.List getDeviceList();
   @Source(SUSI_IMAGE)  java.util.List getObjectList(  java.lang.String arg0, int arg1, int arg2);
   @Source(SUSI_IMAGE)  java.util.List getStorageList(  java.lang.String arg0);
   @Source(SUSI_IMAGE)  android.mtp.MtpDevice getDevice(  int arg0);
   @Source(SUSI_IMAGE)  byte[] getThumbnail(  java.lang.String arg0, int arg1);
   @Source(SUSI_IMAGE)  android.mtp.MtpDevice getDevice(  java.lang.String arg0);
   @Source(SUSI_IMAGE)  byte[] getObject(  java.lang.String arg0, int arg1, int arg2);
}
class MtpContext{
    boolean copyFile(  @Sink(SUSI_LOG) java.lang.String arg0, @Sink(SUSI_LOG) android.mtp.MtpObjectInfo arg1);
   @Source(SUSI_NO_CATEGORY)  boolean copyAlbum(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.util.List arg2);
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MtpClient getMtpClient();
}
class MtpDevice{
   @Source(SUSI_IMAGE)  int getSupportedOperations();
   @Source(SUSI_IMAGE)  java.lang.String getName();
   @Source(SUSI_IMAGE)  java.util.ArrayList getMediaItem(  int arg0, int arg1);
   @Source(SUSI_IMAGE)  android.mtp.MtpObjectInfo getObjectInfo(  com.android.gallery3d.data.MtpContext arg0, int arg1, int arg2);
   @Source(SUSI_IMAGE)  int getMediaItemCount();
}
class MtpDeviceSet{
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaSet getSubMediaSet(  int arg0);
   @Source(SUSI_IMAGE)  java.lang.String getName();
   @Source(SUSI_IMAGE)  int getSubMediaSetCount();
   @Source(SUSI_IMAGE)  java.lang.String getDeviceName(  com.android.gallery3d.data.MtpContext arg0, int arg1);
}
class MtpImage{
   @Source(SUSI_IMAGE)  int getMediaType();
   @Source(SUSI_IMAGE)  long getSize();
   @Source(SUSI_IMAGE)  byte[] getImageData();
   @Source(SUSI_IMAGE)  int getWidth();
   @Source(SUSI_IMAGE)  int getHeight();
   @Source(SUSI_IMAGE)  long getDateInMs();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaDetails getDetails();
   @Source(SUSI_IMAGE)  android.net.Uri getContentUri();
   @Source(SUSI_IMAGE)  int getSupportedOperations();
   @Source(SUSI_IMAGE)  java.lang.String getMimeType();
}
class Path{
    void setObject(  @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.data.MediaObject arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.Path getParent();
   @Source(SUSI_IMAGE)  java.lang.String getPrefix();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.Path getChild(  java.lang.String arg0);
   @Source(SUSI_IMAGE)  java.lang.String getSuffix();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.Path getPrefixPath();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaObject getObject();
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.Path getChild(  int arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.Path getChild(  long arg0);
}
class PathMatcher{
   @Source(SUSI_IMAGE)  java.lang.String getVar(  int arg0);
   @Source(SUSI_IMAGE)  int getIntVar(  int arg0);
   @Source(SUSI_IMAGE)  long getLongVar(  int arg0);
}
class PathMatcher$Node{
   @Source(SUSI_NO_CATEGORY)  com.android.gallery3d.data.PathMatcher$Node addChild(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.PathMatcher$Node getChild(  java.lang.String arg0);
   @Source(SUSI_IMAGE)  int getKind();
}
class SecureAlbum{
   @Source(SUSI_IMAGE)  int getMediaItemCount();
   @Source(SUSI_IMAGE)  java.util.ArrayList getMediaItem(  int arg0, int arg1);
   @Source(SUSI_IMAGE)  java.lang.String getName();
}
class SingleItemAlbum{
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaItem getItem();
   @Source(SUSI_IMAGE)  java.util.ArrayList getMediaItem(  int arg0, int arg1);
   @Source(SUSI_IMAGE)  java.lang.String getName();
   @Source(SUSI_IMAGE)  int getMediaItemCount();
}
class SizeClustering{
   @Source(SUSI_IMAGE)  long getMinSize(  int arg0);
   @Source(SUSI_IMAGE)  java.lang.String getClusterName(  int arg0);
   @Source(SUSI_IMAGE)  int getNumberOfClusters();
   @Source(SUSI_IMAGE)  java.util.ArrayList getCluster(  int arg0);
}
class SnailItem{
   @Source(SUSI_IMAGE)  java.lang.String getMimeType();
   @Source(SUSI_IMAGE)  int getWidth();
   @Source(SUSI_IMAGE)  com.android.gallery3d.ui.ScreenNail getScreenNail();
   @Source(SUSI_IMAGE)  int getHeight();
}
class SnailSource{
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.Path getSetPath(  int arg0);
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.Path getItemPath(  int arg0);
}
class TagClustering{
   @Source(SUSI_IMAGE)  java.lang.String getClusterName(  int arg0);
   @Source(SUSI_IMAGE)  java.util.ArrayList getCluster(  int arg0);
   @Source(SUSI_IMAGE)  int getNumberOfClusters();
}
class TagClustering$1{
    void consume(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) com.android.gallery3d.data.MediaItem arg1);
}
class TimeClustering{
   @Source(SUSI_IMAGE)  java.lang.String getClusterName(  int arg0);
   @Source(SUSI_IMAGE)  int getNumberOfClusters();
   @Source(SUSI_IMAGE)  java.util.ArrayList getCluster(  int arg0);
}
class UnlockImage{
   @Source(SUSI_IMAGE)  int getSupportedOperations();
}
class UriImage{
   @Source(SUSI_IMAGE)  com.android.gallery3d.data.MediaDetails getDetails();
   @Source(SUSI_IMAGE)  int getHeight();
   @Source(SUSI_IMAGE)  int getMediaType();
   @Source(SUSI_IMAGE)  int getWidth();
   @Source(SUSI_IMAGE)  int getRotation();
   @Source(SUSI_IMAGE)  android.net.Uri getContentUri();
   @Source(SUSI_IMAGE)  int getSupportedOperations();
   @Source(SUSI_IMAGE)  java.lang.String getMimeType();
}

package com.google.android.picasastore;

class FIFEUtil{
   @Source(SUSI_NO_CATEGORY)  android.net.Uri setImageUrlOptions(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  android.net.Uri setImageUriOptions(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) android.net.Uri arg1);
   @Source(SUSI_FILE_INFORMATION)  java.lang.String getImageUriOptions(  android.net.Uri arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getImageUrlOptions(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class HttpUtils{
   @Source(SUSI_NO_CATEGORY)  java.io.InputStream openInputStream(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.conn.ClientConnectionManager getConnectionManager();
}
class HttpUtils$MetricsTrackingConnectionManager$1{
   @Source(SUSI_NETWORK_INFORMATION)  org.apache.http.conn.ManagedClientConnection getConnection(  long arg0, java.util.concurrent.TimeUnit arg1);
}
class ImageProxyUtil{
   @Source(SUSI_NO_CATEGORY)  java.lang.String setImageUrlSize(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class PicasaStoreFacade{
    void broadcastOperationReport(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) long arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) long arg4, @Sink(SUSI_NO_CATEGORY) long arg5);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getAlbumCoverUri(  long arg0, java.lang.String arg1);
   @Source(SUSI_FILE_INFORMATION)  android.net.Uri getPhotoUri(  long arg0, java.lang.String arg1, java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlbumCoverKey(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAuthority();
   @Source(SUSI_NO_CATEGORY)  com.google.android.picasastore.PicasaStoreFacade get(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  java.io.File getCacheFile(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.io.File getCacheDirectory();
   @Source(SUSI_NO_CATEGORY)  java.io.File getAlbumCoverCacheFile(  @Sink(SUSI_NO_CATEGORY) long arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
}
class SystemProperties{
   @Source(SUSI_NO_CATEGORY)  long getLong(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
}
class VersionInfo{
    void setVersion(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}

package com.android.calendar.agenda;

class AgendaAdapter{
    void bindView(  @Sink(SUSI_CALENDAR_INFORMATION) android.view.View arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.content.Context arg1, @Sink(SUSI_CALENDAR_INFORMATION) android.database.Cursor arg2);
}
class AgendaByDayAdapter{
    void setAsFirstDayAfterYesterday(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  long getItemId(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getCount();
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.Object getItem(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  android.view.View getView(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.view.View arg1, @Sink(SUSI_CALENDAR_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  int getViewTypeCount();
   @Source(SUSI_CALENDAR_INFORMATION)  long getInstanceId(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getHeaderPosition(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  long getStartTime(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getCursorPosition(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getItemViewType(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getHeaderItemsCount(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
}
class AgendaFragment{
   @Source(SUSI_CALENDAR_INFORMATION)  android.view.View onCreateView(  @Sink(SUSI_CALENDAR_INFORMATION) android.view.LayoutInflater arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.view.ViewGroup arg1, @Sink(SUSI_CALENDAR_INFORMATION) android.os.Bundle arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  long getSupportedEventTypes();
   @Source(SUSI_CALENDAR_INFORMATION)  long getLastShowEventId();
}
class AgendaListView{
    void setSelectedInstanceId(  @Sink(SUSI_CALENDAR_INFORMATION) long arg0);
    void setHideDeclinedEvents(  @Sink(SUSI_CALENDAR_INFORMATION) boolean arg0);
    void onItemClick(  @Sink(SUSI_CALENDAR_INFORMATION) android.widget.AdapterView arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.view.View arg1, @Sink(SUSI_CALENDAR_INFORMATION) int arg2, @Sink(SUSI_CALENDAR_INFORMATION) long arg3);
   @Source(SUSI_CALENDAR_INFORMATION)  long getFirstVisibleTime(  @Sink(SUSI_CALENDAR_INFORMATION) com.android.calendar.agenda.AgendaWindowAdapter$EventInfo arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  com.android.calendar.agenda.AgendaAdapter$ViewHolder getSelectedViewHolder();
   @Source(SUSI_CALENDAR_INFORMATION)  com.android.calendar.agenda.AgendaWindowAdapter$EventInfo getFirstVisibleEvent();
   @Source(SUSI_CALENDAR_INFORMATION)  long getSelectedInstanceId();
   @Source(SUSI_CALENDAR_INFORMATION)  android.view.View getFirstVisibleView();
}
class AgendaWindowAdapter{
    void refresh(  @Sink(SUSI_CALENDAR_INFORMATION) android.text.format.Time arg0, @Sink(SUSI_CALENDAR_INFORMATION) long arg1, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg2, @Sink(SUSI_CALENDAR_INFORMATION) boolean arg3, @Sink(SUSI_CALENDAR_INFORMATION) boolean arg4);
    void setSelectedView(  @Sink(SUSI_CALENDAR_INFORMATION) android.view.View arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getHeaderPositionFromItemPosition(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  long getItemId(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  com.android.calendar.agenda.AgendaWindowAdapter$DayAdapterInfo getAdapterInfoByPosition(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  long getSelectedInstanceId();
   @Source(SUSI_CALENDAR_INFORMATION)  int getCount();
   @Source(SUSI_CALENDAR_INFORMATION)  int getItemViewType(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  com.android.calendar.agenda.AgendaWindowAdapter$EventInfo getEventByPosition(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  android.view.View getView(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.view.View arg1, @Sink(SUSI_CALENDAR_INFORMATION) android.view.ViewGroup arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  int getHeaderItemsNumber(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getStickyHeaderHeight();
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.Object getItem(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  com.android.calendar.agenda.AgendaWindowAdapter$EventInfo getEventByPosition(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0, @Sink(SUSI_CALENDAR_INFORMATION) boolean arg1);
   @Source(SUSI_CALENDAR_INFORMATION)  com.android.calendar.agenda.AgendaAdapter$ViewHolder getSelectedViewHolder();
   @Source(SUSI_CALENDAR_INFORMATION)  int getViewTypeCount();
}
class AgendaWindowAdapter$QueryHandler{
    void onQueryComplete(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.Object arg1, @Sink(SUSI_CALENDAR_INFORMATION) android.database.Cursor arg2);
}

package com.android.mms.dom.smil;

class ElementParallelTimeContainerImpl{
    void setEndSync(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
   @Source(SUSI_SYNCHRONIZATION_DATA)  java.lang.String getEndSync();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.NodeList getActiveChildrenAt(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  float getImplicitDuration();
   @Source(SUSI_NO_CATEGORY)  float getDur();
}
class ElementSequentialTimeContainerImpl{
   @Source(SUSI_NO_CATEGORY)  float getDur();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.NodeList getActiveChildrenAt(  @Sink(SUSI_NO_CATEGORY) float arg0);
}
class ElementTimeImpl{
    void setDur(  @Sink(SUSI_SMS_MMS) float arg0);
   @Source(SUSI_NO_CATEGORY)  int getEndConstraints();
   @Source(SUSI_NO_CATEGORY)  short getFill();
   @Source(SUSI_NO_CATEGORY)  short getFillDefault();
   @Source(SUSI_NO_CATEGORY)  float getDur();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.smil.TimeList getEnd();
   @Source(SUSI_NO_CATEGORY)  int getBeginConstraints();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.smil.TimeList getBegin();
}
class SmilDocumentImpl{
    void setDur(  @Sink(SUSI_SMS_MMS) float arg0);
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.NodeList getActiveChildrenAt(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  float getDur();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.smil.TimeList getEnd();
   @Source(SUSI_NO_CATEGORY)  short getFill();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.smil.TimeList getBegin();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.smil.SMILLayoutElement getLayout();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.smil.SMILElement getBody();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.smil.SMILElement getHead();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.Element getDocumentElement();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.NodeList getTimeChildren();
}
class SmilDocumentImpl$1{
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.smil.ElementTime getParentElementTime();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.NodeList getTimeChildren();
}
class SmilElementImpl{
    void setId(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getId();
}
class SmilLayoutElementImpl{
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.smil.SMILRootLayoutElement getRootLayout();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.NodeList getRegions();
}
class SmilMediaElementImpl{
    void setSrc(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
    void setDur(  @Sink(SUSI_SMS_MMS) float arg0);
   @Source(SUSI_NO_CATEGORY)  short getFill();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.smil.TimeList getBegin();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSrc();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.smil.TimeList getEnd();
   @Source(SUSI_NO_CATEGORY)  float getDur();
}
class SmilMediaElementImpl$1{
   @Source(SUSI_NO_CATEGORY)  float getDur();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.smil.ElementTime getParentElementTime();
}
class SmilParElementImpl{
    void setDur(  @Sink(SUSI_SMS_MMS) float arg0);
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.smil.TimeList getBegin();
   @Source(SUSI_NO_CATEGORY)  short getFill();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.NodeList getActiveChildrenAt(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.NodeList getTimeChildren();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.smil.TimeList getEnd();
   @Source(SUSI_NO_CATEGORY)  float getDur();
}
class SmilParElementImpl$1{
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.smil.ElementTime getParentElementTime();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.smil.TimeList getBegin();
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.NodeList getTimeChildren();
}
class SmilPlayer{
   @Source(SUSI_NO_CATEGORY)  int getCurrentPosition();
   @Source(SUSI_NO_CATEGORY)  int getDuration();
   @Source(SUSI_NO_CATEGORY)  com.android.mms.dom.smil.SmilPlayer getPlayer();
}
class SmilPlayer$TimelineEntry{
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.smil.ElementTime getElement();
   @Source(SUSI_NO_CATEGORY)  int getAction();
   @Source(SUSI_NO_CATEGORY)  double getOffsetTime();
}
class SmilRegionElementImpl{
    void setTop(  @Sink(SUSI_SMS_MMS) int arg0);
    void setHeight(  @Sink(SUSI_SMS_MMS) int arg0);
    void setBackgroundColor(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
    void setFit(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
    void setWidth(  @Sink(SUSI_SMS_MMS) int arg0);
    void setLeft(  @Sink(SUSI_SMS_MMS) int arg0);
    void setId(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFit();
   @Source(SUSI_NO_CATEGORY)  int getTop();
   @Source(SUSI_NO_CATEGORY)  int getLeft();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  int getHeight();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getBackgroundColor();
}
class SmilRegionMediaElementImpl{
   @Source(SUSI_NO_CATEGORY)  org.w3c.dom.smil.SMILRegionElement getRegion();
}
class SmilRootLayoutElementImpl{
    void setBackgroundColor(  @Sink(SUSI_SMS_MMS) java.lang.String arg0);
    void setWidth(  @Sink(SUSI_SMS_MMS) int arg0);
    void setHeight(  @Sink(SUSI_SMS_MMS) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getBackgroundColor();
   @Source(SUSI_NO_CATEGORY)  int getHeight();
}
class TimeImpl{
   @Source(SUSI_NO_CATEGORY)  double getOffset();
   @Source(SUSI_NO_CATEGORY)  boolean getResolved();
   @Source(SUSI_NO_CATEGORY)  short getTimeType();
   @Source(SUSI_NO_CATEGORY)  double getResolvedOffset();
}
class TimeListImpl{
   @Source(SUSI_NO_CATEGORY)  int getLength();
}

package com.android.org.bouncycastle.util;

class Strings{
    void toUTF8ByteArray(  @Sink(SUSI_NO_CATEGORY) char[] arg0, @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg1);
}

package com.android.vcard;

class VCardComposer{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String createOneEntry(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.reflect.Method arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getCount();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String createOneEntry();
}
class VCardConfig{
   @Source(SUSI_CONTACT_INFORMATION)  int getNameOrderType(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class VCardEntry{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getDisplayName();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.ArrayList constructInsertOperations(  @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentResolver arg0, @Sink(SUSI_CONTACT_INFORMATION) java.util.ArrayList arg1);
}
class VCardEntry$AndroidCustomData{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.vcard.VCardEntry$EntryLabel getEntryLabel();
}
class VCardEntry$AnniversaryData{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.vcard.VCardEntry$EntryLabel getEntryLabel();
}
class VCardEntry$BirthdayData{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.vcard.VCardEntry$EntryLabel getEntryLabel();
}
class VCardEntry$EmailData{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.vcard.VCardEntry$EntryLabel getEntryLabel();
}
class VCardEntry$ImData{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.vcard.VCardEntry$EntryLabel getEntryLabel();
}
class VCardEntry$NameData{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.vcard.VCardEntry$EntryLabel getEntryLabel();
}
class VCardEntry$NicknameData{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.vcard.VCardEntry$EntryLabel getEntryLabel();
}
class VCardEntry$NoteData{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.vcard.VCardEntry$EntryLabel getEntryLabel();
}
class VCardEntry$OrganizationData{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getFormattedString();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.vcard.VCardEntry$EntryLabel getEntryLabel();
}
class VCardEntry$PhoneData{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.vcard.VCardEntry$EntryLabel getEntryLabel();
}
class VCardEntry$PhotoData{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.vcard.VCardEntry$EntryLabel getEntryLabel();
}
class VCardEntry$PostalData{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.vcard.VCardEntry$EntryLabel getEntryLabel();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getFormattedAddress(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
}
class VCardEntry$SipData{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.vcard.VCardEntry$EntryLabel getEntryLabel();
}
class VCardEntry$WebsiteData{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.vcard.VCardEntry$EntryLabel getEntryLabel();
}
class VCardEntryCommitter{
   @Source(SUSI_CONTACT_INFORMATION)  java.util.ArrayList getCreatedUris();
}
class VCardEntryCounter{
   @Source(SUSI_CONTACT_INFORMATION)  int getCount();
}
class VCardParserImpl_V21{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getVersionString();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getBase64(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getNonEmptyLine();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.Set getKnownPropertyNameSet();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.Set getAvailableEncodingSet();
   @Source(SUSI_CONTACT_INFORMATION)  int getVersion();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getLine();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.Set getKnownValueSet();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.Set getKnownTypeSet();
}
class VCardParserImpl_V30{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getVersionString();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getBase64(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getNonEmptyLine();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.Set getKnownPropertyNameSet();
   @Source(SUSI_CONTACT_INFORMATION)  int getVersion();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getLine();
}
class VCardParserImpl_V40{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getVersionString();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.Set getKnownPropertyNameSet();
   @Source(SUSI_CONTACT_INFORMATION)  int getVersion();
}
class VCardProperty{
    void addParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setValues(  @Sink(SUSI_NO_CATEGORY) java.lang.String[] arg0);
   @Source(SUSI_CONTACT_INFORMATION)  byte[] getByteValue();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.Map getParameterMap();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getRawValue();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.List getValueList();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.Collection getParameters(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getName();
}
class VCardSourceDetector{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getEstimatedCharset();
   @Source(SUSI_CONTACT_INFORMATION)  int getEstimatedType();
}
class VCardUtils{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getPropertyNameForIm(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getPhoneTypeString(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.Integer arg0);
}
class VCardUtils$QuotedPrintableCodecPort{
   @Source(SUSI_NO_CATEGORY)  byte[] decodeQuotedPrintable(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
}

package com.android.gallery3d.anim;

class FloatAnimation{
   @Source(SUSI_IMAGE)  float get();
}

package java.util;

class AbstractCollection{
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object[] toArray();
}
class AbstractList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.ListIterator listIterator();
   @Source(SUSI_NO_CATEGORY)  java.util.List subList(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator iterator();
}
class AbstractList$FullListIterator{
    void set(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class AbstractList$SubAbstractList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class AbstractList$SubAbstractList$SubAbstractListIterator{
    void set(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class AbstractMap{
   @Source(SUSI_NO_CATEGORY)  java.util.Set keySet();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection values();
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
}
class AbstractMap$SimpleEntry{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getKey();
}
class AbstractMap$SimpleImmutableEntry{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getKey();
}
class AbstractQueue{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object remove();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object element();
}
class AbstractSequentialList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object remove(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator iterator();
}
class ArrayDeque{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getFirst();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getLast();
}
class ArrayList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Arrays$ArrayList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class BitSet{
    void set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
    void set(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
    void set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] toByteArray();
   @Source(SUSI_NO_CATEGORY)  java.util.BitSet get(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class Calendar{
    void set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
    void set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4);
    void set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
    void setTime(  @Sink(SUSI_NO_CATEGORY) java.util.Date arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getActualMinimum(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  java.util.Calendar getInstance();
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String getDisplayName(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0, @Sink(SUSI_CALENDAR_INFORMATION) int arg1, @Sink(SUSI_CALENDAR_INFORMATION) java.util.Locale arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  int getActualMaximum(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.String toString();
   @Source(SUSI_CALENDAR_INFORMATION)  int getMinimalDaysInFirstWeek();
   @Source(SUSI_CALENDAR_INFORMATION)  java.util.Locale[] getAvailableLocales();
   @Source(SUSI_CALENDAR_INFORMATION)  long getTimeInMillis();
   @Source(SUSI_CALENDAR_INFORMATION)  java.util.Date getTime();
   @Source(SUSI_CALENDAR_INFORMATION)  java.util.TimeZone getTimeZone();
   @Source(SUSI_CALENDAR_INFORMATION)  java.util.Calendar getInstance(  @Sink(SUSI_CALENDAR_INFORMATION) java.util.TimeZone arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.Object clone();
   @Source(SUSI_CALENDAR_INFORMATION)  int getFirstDayOfWeek();
   @Source(SUSI_CALENDAR_INFORMATION)  java.util.Calendar getInstance(  @Sink(SUSI_CALENDAR_INFORMATION) java.util.Locale arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  java.util.Map getDisplayNames(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0, @Sink(SUSI_CALENDAR_INFORMATION) int arg1, @Sink(SUSI_CALENDAR_INFORMATION) java.util.Locale arg2);
   @Source(SUSI_CALENDAR_INFORMATION)  int get(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  java.util.Calendar getInstance(  @Sink(SUSI_CALENDAR_INFORMATION) java.util.TimeZone arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.util.Locale arg1);
}
class Collections$CheckedList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Collections$CheckedListIterator{
    void set(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Collections$CheckedMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object put(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Collections$CheckedMap$CheckedEntry{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getKey();
}
class Collections$CopiesList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Collections$EmptyList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Collections$EmptyMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Collections$SetFromMap{
   @Source(SUSI_NO_CATEGORY)  boolean add(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Collections$SingletonList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Collections$SingletonMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Collections$SynchronizedList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Collections$SynchronizedMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object put(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Collections$UnmodifiableList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Collections$UnmodifiableMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableMapEntry{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getKey();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue();
}
class Currency{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCurrencyCode();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayName(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Currency getInstance(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Currency getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getDefaultFractionDigits();
   @Source(SUSI_NO_CATEGORY)  java.util.Set getAvailableCurrencies();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSymbol(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSymbol();
}
class Date{
    void setHours(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setMinutes(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setMonth(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDate(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setYear(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setSeconds(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getDay();
   @Source(SUSI_NO_CATEGORY)  int getHours();
   @Source(SUSI_NO_CATEGORY)  int getSeconds();
   @Source(SUSI_NO_CATEGORY)  int getYear();
   @Source(SUSI_NO_CATEGORY)  int getMinutes();
   @Source(SUSI_NO_CATEGORY)  int getMonth();
   @Source(SUSI_NO_CATEGORY)  long getTime();
   @Source(SUSI_NO_CATEGORY)  int getTimezoneOffset();
   @Source(SUSI_NO_CATEGORY)  int getDate();
}
class DuplicateFormatFlagsException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFlags();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
}
class EnumMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object put(  @Sink(SUSI_NO_CATEGORY) java.lang.Enum arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object put(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class EnumMap$Entry{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object setValue(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Enum getKey();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue();
}
class EnumMap$EnumMapKeySet$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Enum get(  @Sink(SUSI_NO_CATEGORY) java.util.MapEntry arg0);
}
class EnumMap$EnumMapValueCollection$1{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.util.MapEntry arg0);
}
class EnumSet{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
   @Source(SUSI_NO_CATEGORY)  java.util.EnumSet range(  @Sink(SUSI_NO_CATEGORY) java.lang.Enum arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Enum arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object writeReplace();
}
class EventListenerProxy{
   @Source(SUSI_NO_CATEGORY)  java.util.EventListener getListener();
}
class EventObject{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getSource();
}
class FormatFlagsConversionMismatchException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFlags();
   @Source(SUSI_NO_CATEGORY)  char getConversion();
}
class Formatter$CachedDecimalFormat{
   @Source(SUSI_NO_CATEGORY)  libcore.icu.NativeDecimalFormat update(  @Sink(SUSI_NO_CATEGORY) libcore.icu.LocaleData arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class Formatter$FormatSpecifierParser{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFormatSpecifierText();
}
class Formatter$FormatToken{
   @Source(SUSI_NO_CATEGORY)  boolean setFlag(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  char getDateSuffix();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getStrFlags();
   @Source(SUSI_NO_CATEGORY)  int getPrecision();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
   @Source(SUSI_NO_CATEGORY)  int getArgIndex();
   @Source(SUSI_NO_CATEGORY)  char getConversionType();
}
class GregorianCalendar{
    void setGregorianChange(  @Sink(SUSI_NO_CATEGORY) java.util.Date arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getLeastMaximum(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getGreatestMinimum(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  java.util.Date getGregorianChange();
   @Source(SUSI_CALENDAR_INFORMATION)  int getMaximum(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getActualMinimum(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getActualMaximum(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getMinimum(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
}
class HashMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object put(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator newEntryIterator();
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator newKeyIterator();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator newValueIterator();
}
class HashMap$HashIterator{
   @Source(SUSI_NO_CATEGORY)  java.util.HashMap$HashMapEntry nextEntry();
}
class HashMap$HashMapEntry{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getKey();
}
class HashSet{
   @Source(SUSI_NO_CATEGORY)  boolean add(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Hashtable{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class Hashtable$HashIterator{
   @Source(SUSI_NO_CATEGORY)  java.util.Hashtable$HashtableEntry nextEntry();
   @Source(SUSI_NO_CATEGORY)  java.util.Hashtable$HashtableEntry nextEntryNotFailFast();
}
class Hashtable$HashtableEntry{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getKey();
}
class HugeEnumSet{
    void setRange(  @Sink(SUSI_NO_CATEGORY) java.lang.Enum arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Enum arg1);
}
class IllegalFormatCodePointException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
   @Source(SUSI_NO_CATEGORY)  int getCodePoint();
}
class IllegalFormatConversionException{
   @Source(SUSI_NO_CATEGORY)  java.lang.Class getArgumentClass();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
   @Source(SUSI_NO_CATEGORY)  char getConversion();
}
class IllegalFormatFlagsException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFlags();
}
class IllegalFormatPrecisionException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
   @Source(SUSI_NO_CATEGORY)  int getPrecision();
}
class IllegalFormatWidthException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
   @Source(SUSI_NO_CATEGORY)  int getWidth();
}
class LinkedHashMap{
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator newEntryIterator();
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator newValueIterator();
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator newKeyIterator();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class LinkedList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getFirst();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getLast();
}
class Locale{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayName(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Locale[] getAvailableLocales();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getISOLanguages();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getISO3Language();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayVariant(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Locale getDefault();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLanguage();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getISOCountries();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayCountry();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getISO3Country();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayVariant();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayLanguage();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayLanguage(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCountry();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayCountry(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getVariant();
}
class MapEntry{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getKey();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue();
}
class MiniEnumSet{
    void setRange(  @Sink(SUSI_NO_CATEGORY) java.lang.Enum arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Enum arg1);
}
class MissingFormatArgumentException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFormatSpecifier();
}
class MissingFormatWidthException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getFormatSpecifier();
}
class MissingResourceException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getClassName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getKey();
}
class Properties{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object setProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void storeToXML(  @Sink(SUSI_NO_CATEGORY) java.io.OutputStream arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
    void store(  @Sink(SUSI_NO_CATEGORY) java.io.Writer arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class PropertyResourceBundle{
   @Source(SUSI_NO_CATEGORY)  java.util.Enumeration getKeys();
}
class Random{
    void setSeed(  @Sink(SUSI_NO_CATEGORY) long arg0);
}
class ResourceBundle{
   @Source(SUSI_NO_CATEGORY)  java.util.ResourceBundle getBundle(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.Locale arg1, @Sink(SUSI_NO_CATEGORY) java.lang.ClassLoader arg2, @Sink(SUSI_NO_CATEGORY) java.util.ResourceBundle$Control arg3);
   @Source(SUSI_NO_CATEGORY)  java.util.ResourceBundle getBundle(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.Locale arg1, @Sink(SUSI_NO_CATEGORY) java.lang.ClassLoader arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.Locale getLocale();
   @Source(SUSI_NO_CATEGORY)  java.util.Set handleKeySet();
   @Source(SUSI_NO_CATEGORY)  java.util.ResourceBundle getBundle(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getObject(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getStringArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.ResourceBundle getBundle(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.Locale arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.ResourceBundle getBundle(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.Locale arg1, @Sink(SUSI_NO_CATEGORY) java.util.ResourceBundle$Control arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.Set keySet();
   @Source(SUSI_NO_CATEGORY)  java.util.ResourceBundle getBundle(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.ResourceBundle$Control arg1);
}
class ResourceBundle$Control{
   @Source(SUSI_NO_CATEGORY)  java.util.Locale getFallbackLocale(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.Locale arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.ResourceBundle$Control getControl(  @Sink(SUSI_NO_CATEGORY) java.util.List arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getCandidateLocales(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.Locale arg1);
   @Source(SUSI_NO_CATEGORY)  long getTimeToLive(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.Locale arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.ResourceBundle$Control getNoFallbackControl(  @Sink(SUSI_NO_CATEGORY) java.util.List arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getFormats(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class ResourceBundle$MissingBundle{
   @Source(SUSI_NO_CATEGORY)  java.util.Enumeration getKeys();
}
class ResourceBundle$NoFallbackControl{
   @Source(SUSI_NO_CATEGORY)  java.util.Locale getFallbackLocale(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.util.Locale arg1);
}
class ServiceLoader{
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator iterator();
}
class SimpleTimeZone{
   @Source(SUSI_NO_CATEGORY)  int getDSTSavings();
   @Source(SUSI_NO_CATEGORY)  int getOffset(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3, @Sink(SUSI_NO_CATEGORY) int arg4, @Sink(SUSI_NO_CATEGORY) int arg5);
   @Source(SUSI_NO_CATEGORY)  int getOffset(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  int getRawOffset();
}
class TimeZone{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
   @Source(SUSI_NO_CATEGORY)  int getOffset(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.TimeZone getTimeZone(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayName(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getID();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayName();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getAvailableIDs();
   @Source(SUSI_NO_CATEGORY)  int getDSTSavings();
   @Source(SUSI_NO_CATEGORY)  java.util.TimeZone getDefault();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayName(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getAvailableIDs(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayName(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) java.util.Locale arg2);
}
class TimerTask{
   @Source(SUSI_NO_CATEGORY)  long scheduledExecutionTime();
   @Source(SUSI_NO_CATEGORY)  long getWhen();
}
class TreeMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object put(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.TreeMap$Node find(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.util.TreeMap$Relation arg1);
}
class TreeMap$BoundedMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object put(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class TreeMap$Node{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getKey();
}
class TreeSet{
   @Source(SUSI_NO_CATEGORY)  boolean add(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class UUID{
   @Source(SUSI_NO_CATEGORY)  long getLeastSignificantBits();
   @Source(SUSI_NO_CATEGORY)  long getMostSignificantBits();
}
class UnknownFormatConversionException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getConversion();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
}
class UnsafeArrayList{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Vector{
    void setElementAt(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class WeakHashMap{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.WeakHashMap$Entry getEntry(  @Sink(SUSI_NO_CATEGORY) java.lang.Object arg0);
}
class WeakHashMap$Entry{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getKey();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getValue();
}

package org.apache.james.mime4j.field.contenttype.parser;

class ContentTypeParser{
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getParamValues();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSubType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType();
   @Source(SUSI_NO_CATEGORY)  java.util.ArrayList getParamNames();
}
class ContentTypeParserTokenManager{
   @Source(SUSI_NO_CATEGORY)  org.apache.james.mime4j.field.contenttype.parser.Token jjFillToken();
   @Source(SUSI_NO_CATEGORY)  org.apache.james.mime4j.field.contenttype.parser.Token getNextToken();
}
class ParseException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
}
class SimpleCharStream{
   @Source(SUSI_NO_CATEGORY)  int getEndColumn();
   @Source(SUSI_NO_CATEGORY)  int getEndLine();
   @Source(SUSI_NO_CATEGORY)  int getBeginColumn();
   @Source(SUSI_NO_CATEGORY)  int getBeginLine();
}
class TokenMgrError{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
}

package com.android.systemui.statusbar.policy;

class CurrentUserTracker{
   @Source(SUSI_NO_CATEGORY)  int getCurrentUserId();
}
class DateView{
   @Source(SUSI_NO_CATEGORY)  int getSuggestedMinimumWidth();
}
class NetworkController{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
}
class NotificationRowLayout{
    void setLayoutTransitionsEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  boolean setUserLockedChild(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  boolean setUserExpandedChild(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.View getChildAtPosition(  @Sink(SUSI_NO_CATEGORY) android.view.MotionEvent arg0);
   @Source(SUSI_NO_CATEGORY)  android.view.View getChildAtRawPosition(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.View getChildAtPosition(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1);
   @Source(SUSI_NO_CATEGORY)  android.view.View getChildContentView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0);
}
class ToggleSlider{
    void setMax(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setValue(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setChecked(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
}

package com.android.common.widget;

class CompositeCursorAdapter{
   @Source(SUSI_NO_CATEGORY)  int getPartitionCount();
   @Source(SUSI_NO_CATEGORY)  android.database.Cursor getCursor(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.common.widget.CompositeCursorAdapter$Partition getPartition(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  android.content.Context getContext();
}

package org.apache.harmony.security.provider.cert;

class X509CertImpl{
   @Source(SUSI_NO_CATEGORY)  byte[] getSigAlgParams();
   @Source(SUSI_NO_CATEGORY)  java.security.Principal getSubjectDN();
   @Source(SUSI_NO_CATEGORY)  int getBasicConstraints();
   @Source(SUSI_NO_CATEGORY)  boolean[] getKeyUsage();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getSubjectAlternativeNames();
   @Source(SUSI_NO_CATEGORY)  byte[] getExtensionValue(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  boolean[] getSubjectUniqueID();
   @Source(SUSI_NO_CATEGORY)  javax.security.auth.x500.X500Principal getIssuerX500Principal();
   @Source(SUSI_NO_CATEGORY)  java.util.List getExtendedKeyUsage();
   @Source(SUSI_NO_CATEGORY)  byte[] getSignature();
   @Source(SUSI_NO_CATEGORY)  javax.security.auth.x500.X500Principal getSubjectX500Principal();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSigAlgOID();
   @Source(SUSI_NO_CATEGORY)  java.security.Principal getIssuerDN();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection getIssuerAlternativeNames();
   @Source(SUSI_NO_CATEGORY)  java.security.PublicKey getPublicKey();
   @Source(SUSI_NO_CATEGORY)  java.util.Set getNonCriticalExtensionOIDs();
   @Source(SUSI_NO_CATEGORY)  java.util.Date getNotBefore();
   @Source(SUSI_NO_CATEGORY)  byte[] getTBSCertificate();
   @Source(SUSI_NO_CATEGORY)  boolean[] getIssuerUniqueID();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  java.util.Set getCriticalExtensionOIDs();
   @Source(SUSI_NO_CATEGORY)  int getVersion();
   @Source(SUSI_NO_CATEGORY)  java.math.BigInteger getSerialNumber();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSigAlgName();
   @Source(SUSI_NO_CATEGORY)  java.util.Date getNotAfter();
}

package com.google.common.base;

class CharMatcher{
   @Source(SUSI_NO_CATEGORY)  java.lang.String trimFrom(  @Sink(SUSI_NO_CATEGORY) java.lang.CharSequence arg0);
   @Source(SUSI_NO_CATEGORY)  com.google.common.base.CharMatcher precomputedInternal();
   @Source(SUSI_NO_CATEGORY)  com.google.common.base.CharMatcher precomputed();
}
class CharMatcher$LookupTable{
    void set(  @Sink(SUSI_NO_CATEGORY) char arg0);
}
class CharMatcher$Or{
    void setBits(  @Sink(SUSI_NO_CATEGORY) com.google.common.base.CharMatcher$LookupTable arg0);
}
class Joiner$3{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class Optional$Absent{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get();
}
class Optional$Present{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get();
}
class Predicates$ObjectPredicate{
   @Source(SUSI_NO_CATEGORY)  com.google.common.base.Predicate withNarrowedType();
}

package dalvik.system;

class BaseDexClassLoader{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.Package getPackage(  java.lang.String arg0);
}
class BlockGuard{
   @Source(SUSI_NO_CATEGORY)  dalvik.system.BlockGuard$Policy getThreadPolicy();
}
class BlockGuard$BlockGuardPolicyException{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMessage();
   @Source(SUSI_NO_CATEGORY)  int getPolicy();
   @Source(SUSI_NO_CATEGORY)  int getPolicyViolation();
}
class CloseGuard{
   @Source(SUSI_NO_CATEGORY)  dalvik.system.CloseGuard get();
   @Source(SUSI_NO_CATEGORY)  dalvik.system.CloseGuard$Reporter getReporter();
}
class DexFile{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
}
class SocketTagger{
   @Source(SUSI_NO_CATEGORY)  dalvik.system.SocketTagger get();
}
class VMDebug{
    void startMethodTracing(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) java.io.FileDescriptor arg1, @Sink(SUSI_FILE) int arg2, @Sink(SUSI_FILE) int arg3);
    void startMethodTracing(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) int arg1, @Sink(SUSI_FILE) int arg2);
}
class VMRuntime{
   @Source(SUSI_NO_CATEGORY)  float setTargetHeapUtilization(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  long setMinimumHeapSize(  @Sink(SUSI_NO_CATEGORY) long arg0);
   @Source(SUSI_NO_CATEGORY)  long getExternalBytesAllocated();
   @Source(SUSI_NO_CATEGORY)  dalvik.system.VMRuntime getRuntime();
   @Source(SUSI_NO_CATEGORY)  long getMinimumHeapSize();
}

package com.android.wallpaper.galaxy;

class GalaxyRS{
    void setOffset(  @Sink(SUSI_NO_CATEGORY) float arg0, @Sink(SUSI_NO_CATEGORY) float arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
}
class ScriptC_galaxy{
    void bind_vpConstants(  @Sink(SUSI_NO_CATEGORY) com.android.wallpaper.galaxy.ScriptField_VpConsts arg0);
    void bind_Particles(  @Sink(SUSI_NO_CATEGORY) com.android.wallpaper.galaxy.ScriptField_Particle arg0);
}
class ScriptField_Particle{
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Element createElement(  @Sink(SUSI_NO_CATEGORY) android.renderscript.RenderScript arg0);
}
class ScriptField_VpConsts{
    void set(  @Sink(SUSI_NO_CATEGORY) com.android.wallpaper.galaxy.ScriptField_VpConsts$Item arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  android.renderscript.Element createElement(  @Sink(SUSI_NO_CATEGORY) android.renderscript.RenderScript arg0);
}

package android.media.effect;

class EffectContext{
   @Source(SUSI_NO_CATEGORY)  android.media.effect.EffectFactory getFactory();
}
class FilterEffect{
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.Frame frameFromTexture(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  android.filterfw.core.FilterContext getFilterContext();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
}
class FilterGraphEffect{
    void apply(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
    void setParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
}
class SingleFilterEffect{
    void setParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
}

package com.android.internal.content;

class PackageHelper{
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getSecureContainerList();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSdFilesystem(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getSdDir(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.storage.IMountService getMountService();
}
class PackageMonitor{
   @Source(SUSI_NO_CATEGORY)  int getChangingUserId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPackageName(  @Sink(SUSI_NO_CATEGORY) android.content.Intent arg0);
   @Source(SUSI_NO_CATEGORY)  android.os.Handler getRegisteredHandler();
}

package org.apache.http.cookie;

class CookieOrigin{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getHost();
   @Source(SUSI_NO_CATEGORY)  int getPort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPath();
}
class CookieSpecRegistry{
    void register(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.cookie.CookieSpecFactory arg1);
    void setItems(  @Sink(SUSI_NO_CATEGORY) java.util.Map arg0);
   @Source(SUSI_NO_CATEGORY)  org.apache.http.cookie.CookieSpec getCookieSpec(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getSpecNames();
   @Source(SUSI_NO_CATEGORY)  org.apache.http.cookie.CookieSpec getCookieSpec(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) org.apache.http.params.HttpParams arg1);
}

package android.support.v4.net;

class ConnectivityManagerCompat{
   @Source(SUSI_NETWORK_INFORMATION)  android.net.NetworkInfo getNetworkInfoFromBroadcast(  android.net.ConnectivityManager arg0, android.content.Intent arg1);
}
class TrafficStatsCompat{
    void setThreadStatsTag(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class TrafficStatsCompat$BaseTrafficStatsCompatImpl{
    void setThreadStatsTag(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class TrafficStatsCompat$IcsTrafficStatsCompatImpl{
    void setThreadStatsTag(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class TrafficStatsCompatIcs{
    void setThreadStatsTag(  @Sink(SUSI_NO_CATEGORY) int arg0);
}

package gov.nist.javax.sip.address;

class AddressImpl{
    void setUser(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_FILE_INFORMATION)  javax.sip.address.URI getURI();
   @Source(SUSI_NO_CATEGORY)  int getPort();
   @Source(SUSI_NO_CATEGORY)  int getAddressType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUserAtHostPort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHost();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDisplayName();
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.HostPort getHostPort();
}
class Authority{
    void setUser(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setPort(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setPassword(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setHost(  @Sink(SUSI_NO_CATEGORY) gov.nist.core.Host arg0);
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String getPassword();
   @Source(SUSI_NO_CATEGORY)  int getPort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUser();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.address.UserInfo getUserInfo();
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.Host getHost();
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.HostPort getHostPort();
}
class GenericURI{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getScheme();
}
class NetObject{
   @Source(SUSI_NO_CATEGORY)  java.lang.String debugDump();
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
}
class SipUri{
    void setUserParam(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setUriParameter(  @Sink(SUSI_NO_CATEGORY) gov.nist.core.NameValue arg0);
    void setUserPassword(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setUser(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setHost(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setQHeader(  @Sink(SUSI_NO_CATEGORY) gov.nist.core.NameValue arg0);
    void setTTLParam(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setDefaultParm(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void setMethodParam(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setMAddr(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setPort(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setIsdnSubAddress(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setScheme(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setMAddrParam(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setMethod(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setTransportParam(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setHeader(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setHostPort(  @Sink(SUSI_NO_CATEGORY) gov.nist.core.HostPort arg0);
    void setHost(  @Sink(SUSI_NO_CATEGORY) gov.nist.core.Host arg0);
    void setSecure(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setGrParam(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setUriParm(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String getUserPassword();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUserParam();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMethodParam();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHost();
   @Source(SUSI_NO_CATEGORY)  int getPort();
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.NameValueList getQheaders();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMethod();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUserAtHostPort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUser();
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator getParameterNames();
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator getHeaderNames();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.NameValueList getParameters();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLrParam();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getScheme();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUserType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMAddrParam();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.address.TelephoneNumber getTelephoneSubscriber();
   @Source(SUSI_NO_CATEGORY)  int getTTLParam();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getGrParam();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUserAtHost();
   @Source(SUSI_NO_CATEGORY)  gov.nist.javax.sip.address.Authority getAuthority();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHeader(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getParm(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.HostPort getHostPort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTransportParam();
}
class TelURLImpl{
    void setGlobal(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setPostDial(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setPhoneNumber(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setPhoneContext(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setIsdnSubAddress(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.NameValueList getParameters();
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator getParameterNames();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPhoneContext();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPostDial();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getIsdnSubAddress();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getScheme();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPhoneNumber();
}
class TelephoneNumber{
    void setIsdnSubaddress(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void setParm(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
    void setParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setPostDial(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPostDial();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getIsdnSubaddress();
   @Source(SUSI_NO_CATEGORY)  java.util.Iterator getParameterNames();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getPhoneNumber();
   @Source(SUSI_NO_CATEGORY)  gov.nist.core.NameValueList getParameters();
}
class UserInfo{
   @Source(SUSI_SYSTEM_SETTINGS)  java.lang.String getPassword();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUser();
   @Source(SUSI_NO_CATEGORY)  int getUserType();
}

package org.apache.harmony.security.fortress;

class Engine{
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.security.fortress.Engine$SpiAndProvider getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.security.Provider arg1, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg2);
}
class Services{
    void initServiceInfo(  @Sink(SUSI_NO_CATEGORY) java.security.Provider arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.security.Provider$Service getSecureRandomService();
   @Source(SUSI_NETWORK_INFORMATION)  int getCacheVersion();
   @Source(SUSI_NETWORK_INFORMATION)  java.security.Provider$Service getService(  java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.security.Provider[] getProviders();
   @Source(SUSI_NO_CATEGORY)  java.util.List getProvidersList();
   @Source(SUSI_NO_CATEGORY)  java.security.Provider getProvider(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}

package com.adobe.xmp.options;

class AliasOptions{
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.options.AliasOptions setArrayAltText(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.options.AliasOptions setArrayOrdered(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  int getValidOptions();
}
class Options{
    void setOption(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  boolean getOption(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getOptions();
}
class ParseOptions{
   @Source(SUSI_NO_CATEGORY)  boolean getFixControlChars();
   @Source(SUSI_NO_CATEGORY)  int getValidOptions();
   @Source(SUSI_NO_CATEGORY)  boolean getRequireXMPMeta();
   @Source(SUSI_NO_CATEGORY)  boolean getOmitNormalization();
   @Source(SUSI_NO_CATEGORY)  boolean getAcceptLatin1();
   @Source(SUSI_NO_CATEGORY)  boolean getStrictAliasing();
}
class PropertyOptions{
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.options.PropertyOptions setHasLanguage(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.options.PropertyOptions setArrayAltText(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.options.PropertyOptions setArrayAlternate(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.options.PropertyOptions setQualifier(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.options.PropertyOptions setArrayOrdered(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.options.PropertyOptions setStruct(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.options.PropertyOptions setURI(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.options.PropertyOptions setHasQualifiers(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.options.PropertyOptions setSchemaNode(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.options.PropertyOptions setArray(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.options.PropertyOptions setHasType(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getHasLanguage();
   @Source(SUSI_NO_CATEGORY)  int getValidOptions();
}
class SerializeOptions{
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.options.SerializeOptions setUseCompactFormat(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  com.adobe.xmp.options.SerializeOptions setOmitPacketWrapper(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  boolean getIncludeThumbnailPad();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getNewline();
   @Source(SUSI_NO_CATEGORY)  boolean getOmitPacketWrapper();
   @Source(SUSI_NO_CATEGORY)  int getValidOptions();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getEncoding();
   @Source(SUSI_NO_CATEGORY)  boolean getOmitVersionAttribute();
   @Source(SUSI_NO_CATEGORY)  int getBaseIndent();
   @Source(SUSI_NO_CATEGORY)  boolean getUseCompactFormat();
   @Source(SUSI_NO_CATEGORY)  boolean getReadOnlyPacket();
   @Source(SUSI_NO_CATEGORY)  boolean getEncodeUTF16BE();
   @Source(SUSI_NO_CATEGORY)  boolean getEncodeUTF16LE();
   @Source(SUSI_NO_CATEGORY)  boolean getSort();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getIndent();
   @Source(SUSI_NO_CATEGORY)  boolean getExactPacketLength();
   @Source(SUSI_NO_CATEGORY)  int getPadding();
}

package com.android.contacts.model.account;

class AccountType{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addKind(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.dataitem.DataKind arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getViewGroupActivity();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getResourceText(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) int arg2, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg3);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.account.AccountTypeWithDataSet getAccountTypeAndDataSet();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind getKindForMimetype(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getDisplayLabel(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getEditContactActivityClassName();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getViewGroupLabel(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  int getInviteContactActionResId();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getViewContactNotifyServicePackageName();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.ArrayList getSortedDataKinds();
   @Source(SUSI_CONTACT_INFORMATION)  android.graphics.drawable.Drawable getDisplayIcon(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getViewContactNotifyServiceClassName();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getViewStreamItemPhotoActivity();
   @Source(SUSI_CONTACT_INFORMATION)  int getViewGroupLabelResId();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getInviteContactActivityClassName();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.List getExtensionPackageNames();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getInviteContactActionLabel(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getViewStreamItemActivity();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getCreateContactActivityClassName();
}
class AccountTypeWithDataSet{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.account.AccountTypeWithDataSet get(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
}
class AccountWithDataSet{
    void writeToParcel(  @Sink(SUSI_CONTACT_INFORMATION) android.os.Parcel arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.account.AccountTypeWithDataSet getAccountTypeWithDataSet();
}
class BaseAccountType{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindStructuredName(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindWebsite(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindIm(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindPhone(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindPhoto(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindSipAddress(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindOrganization(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindPhoneticName(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindEmail(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindDisplayName(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindNote(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindGroupMembership(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindStructuredPostal(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindNickname(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
}
class BaseAccountType$CommonInflater{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String toString();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getTypeLabel(  @Sink(SUSI_CONTACT_INFORMATION) android.content.res.Resources arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.Integer arg1, @Sink(SUSI_CONTACT_INFORMATION) java.lang.CharSequence arg2);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getLabelColumn();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence inflateUsing(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg1);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getTypeColumn();
}
class BaseAccountType$EmailActionInflater{
   @Source(SUSI_CONTACT_INFORMATION)  int getTypeLabelResource(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.Integer arg0);
}
class BaseAccountType$EmailKindBuilder{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getTagName();
}
class BaseAccountType$EventActionInflater{
   @Source(SUSI_CONTACT_INFORMATION)  int getTypeLabelResource(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.Integer arg0);
}
class BaseAccountType$EventKindBuilder{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getTagName();
}
class BaseAccountType$GroupMembershipKindBuilder{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getTagName();
}
class BaseAccountType$ImActionInflater{
   @Source(SUSI_CONTACT_INFORMATION)  int getTypeLabelResource(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.Integer arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getTypeColumn();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getLabelColumn();
}
class BaseAccountType$ImKindBuilder{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getTagName();
}
class BaseAccountType$KindParser{
   @Source(SUSI_CONTACT_INFORMATION)  java.util.List parseDataKindTag(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) org.xmlpull.v1.XmlPullParser arg1, @Sink(SUSI_CONTACT_INFORMATION) android.util.AttributeSet arg2);
}
class BaseAccountType$NameKindBuilder{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getTagName();
}
class BaseAccountType$NicknameKindBuilder{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getTagName();
}
class BaseAccountType$NoteKindBuilder{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getTagName();
}
class BaseAccountType$OrganizationKindBuilder{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getTagName();
}
class BaseAccountType$PhoneActionAltInflater{
   @Source(SUSI_CONTACT_INFORMATION)  int getTypeLabelResource(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.Integer arg0);
}
class BaseAccountType$PhoneActionInflater{
   @Source(SUSI_CONTACT_INFORMATION)  int getTypeLabelResource(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.Integer arg0);
}
class BaseAccountType$PhoneKindBuilder{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getTagName();
}
class BaseAccountType$PhotoKindBuilder{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getTagName();
}
class BaseAccountType$PostalActionInflater{
   @Source(SUSI_CONTACT_INFORMATION)  int getTypeLabelResource(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.Integer arg0);
}
class BaseAccountType$RelationActionInflater{
   @Source(SUSI_CONTACT_INFORMATION)  int getTypeLabelResource(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.Integer arg0);
}
class BaseAccountType$SimpleInflater{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getColumnNameForTest();
}
class BaseAccountType$SipAddressKindBuilder{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getTagName();
}
class BaseAccountType$StructuredPostalKindBuilder{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getTagName();
}
class BaseAccountType$WebsiteKindBuilder{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getTagName();
}
class ExchangeAccountType{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindWebsite(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindStructuredName(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindStructuredPostal(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindNote(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindEvent(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindNickname(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindEmail(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindOrganization(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindIm(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindPhoto(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindPhone(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindDisplayName(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindPhoneticName(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
}
class ExternalAccountType{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getEditContactActivityClassName();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getViewStreamItemActivity();
   @Source(SUSI_CONTACT_INFORMATION)  int getInviteContactActionResId();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getViewGroupActivity();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getViewStreamItemPhotoActivity();
   @Source(SUSI_CONTACT_INFORMATION)  int getViewGroupLabelResId();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.List getExtensionPackageNames();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getInviteContactActivityClassName();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getViewContactNotifyServiceClassName();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getCreateContactActivityClassName();
}
class GoogleAccountType{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getViewContactNotifyServicePackageName();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindEmail(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.util.List getExtensionPackageNames();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getViewContactNotifyServiceClassName();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind addDataKindPhone(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0);
}

package com.android.systemui.usb;

class UsbResolverActivity{
    void onIntentSelected(  @Sink(SUSI_LOG) android.content.pm.ResolveInfo arg0, @Sink(SUSI_LOG) android.content.Intent arg1, @Sink(SUSI_LOG) boolean arg2);
}
class UsbStorageActivity{
   @Source(SUSI_NO_CATEGORY)  android.app.Dialog onCreateDialog(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg1);
}

package org.json;

class JSONArray{
   @Source(SUSI_NO_CATEGORY)  org.json.JSONObject toJSONObject(  @Sink(SUSI_NO_CATEGORY) org.json.JSONArray arg0);
   @Source(SUSI_NO_CATEGORY)  org.json.JSONArray put(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  org.json.JSONArray put(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  org.json.JSONArray put(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  org.json.JSONArray put(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) double arg1);
   @Source(SUSI_NO_CATEGORY)  org.json.JSONObject getJSONObject(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  org.json.JSONArray getJSONArray(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  org.json.JSONArray put(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  long getLong(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  double getDouble(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class JSONObject{
   @Source(SUSI_NO_CATEGORY)  org.json.JSONObject accumulate(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  org.json.JSONObject put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) long arg1);
   @Source(SUSI_NO_CATEGORY)  org.json.JSONObject put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  org.json.JSONObject put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  org.json.JSONObject put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  org.json.JSONObject putOpt(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  org.json.JSONObject put(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) double arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  org.json.JSONArray getJSONArray(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getString(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  long getLong(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  double getDouble(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  int getInt(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object get(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  org.json.JSONObject getJSONObject(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}

package org.apache.harmony.luni.util;

class DeleteOnExit{
   @Source(SUSI_NO_CATEGORY)  org.apache.harmony.luni.util.DeleteOnExit getInstance();
}

package android.speech.tts;

class AudioPlaybackHandler{
    void enqueue(  @Sink(SUSI_NO_CATEGORY) android.speech.tts.PlaybackQueueItem arg0);
}
class BlockingAudioTrack{
   @Source(SUSI_NO_CATEGORY)  int write(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  long getAudioLengthMs(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class FileSynthesisCallback{
    int audioAvailable(  @Sink(SUSI_LOG) byte[] arg0, @Sink(SUSI_LOG) int arg1, @Sink(SUSI_LOG) int arg2);
   @Source(SUSI_NO_CATEGORY)  int getMaxBufferSize();
}
class ITextToSpeechCallback$Stub{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder asBinder();
}
class ITextToSpeechCallback$Stub$Proxy{
    void onStart(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void onDone(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
    void onError(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInterfaceDescriptor();
}
class ITextToSpeechService$Stub{
   @Source(SUSI_NO_CATEGORY)  boolean onTransact(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg1, @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg2, @Sink(SUSI_NO_CATEGORY) int arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.os.IBinder asBinder();
}
class ITextToSpeechService$Stub$Proxy{
   @Source(SUSI_NO_CATEGORY)  int loadLanguage(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  int speak(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg3);
    void setCallback(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) android.speech.tts.ITextToSpeechCallback arg1);
   @Source(SUSI_NO_CATEGORY)  int synthesizeToFile(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg3);
   @Source(SUSI_NO_CATEGORY)  int stop(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0);
   @Source(SUSI_NO_CATEGORY)  int playSilence(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) long arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg3);
   @Source(SUSI_NETWORK_INFORMATION)  int isLanguageAvailable(  java.lang.String arg0, java.lang.String arg1, java.lang.String arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getLanguage();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getFeaturesForLanguage(  java.lang.String arg0, java.lang.String arg1, java.lang.String arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getInterfaceDescriptor();
}
class PlaybackQueueItem{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getCallerIdentity();
   @Source(SUSI_NO_CATEGORY)  android.speech.tts.TextToSpeechService$UtteranceProgressDispatcher getDispatcher();
}
class PlaybackSynthesisCallback{
   @Source(SUSI_NO_CATEGORY)  int getMaxBufferSize();
}
class SynthesisRequest{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLanguage();
   @Source(SUSI_NO_CATEGORY)  int getPitch();
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle getParams();
   @Source(SUSI_NO_CATEGORY)  int getSpeechRate();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCountry();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getVariant();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getText();
}
class TextToSpeech{
   @Source(SUSI_NO_CATEGORY)  int addSpeech(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int setLanguage(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  int setSpeechRate(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  int addSpeech(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  int addEarcon(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int setPitch(  @Sink(SUSI_NO_CATEGORY) float arg0);
   @Source(SUSI_NO_CATEGORY)  int addEarcon(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NO_CATEGORY)  java.util.Locale getLanguage();
   @Source(SUSI_NO_CATEGORY)  java.util.Set getFeatures(  @Sink(SUSI_NO_CATEGORY) java.util.Locale arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCurrentEngine();
   @Source(SUSI_NO_CATEGORY)  java.util.List getEngines();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDefaultEngine();
}
class TextToSpeech$Connection{
   @Source(SUSI_NO_CATEGORY)  android.os.IBinder getCallerIdentity();
}
class TextToSpeechService{
   @Source(SUSI_NETWORK_INFORMATION)  java.util.Set onGetFeaturesForLanguage(  java.lang.String arg0, java.lang.String arg1, java.lang.String arg2);
}
class TextToSpeechService$1{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getLanguage();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getFeaturesForLanguage(  java.lang.String arg0, java.lang.String arg1, java.lang.String arg2);
}
class TextToSpeechService$CallbackMap{
    void dispatchOnError(  @Sink(SUSI_LOG) java.lang.Object arg0, @Sink(SUSI_LOG) java.lang.String arg1);
    void dispatchOnDone(  @Sink(SUSI_LOG) java.lang.Object arg0, @Sink(SUSI_LOG) java.lang.String arg1);
    void dispatchOnStart(  @Sink(SUSI_LOG) java.lang.Object arg0, @Sink(SUSI_LOG) java.lang.String arg1);
    void setCallback(  @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg0, @Sink(SUSI_NO_CATEGORY) android.speech.tts.ITextToSpeechCallback arg1);
}
class TextToSpeechService$SpeechItem{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getStringParam(  java.lang.String arg0, java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getStreamType();
   @Source(SUSI_NETWORK_INFORMATION)  float getFloatParam(  java.lang.String arg0, float arg1);
   @Source(SUSI_NETWORK_INFORMATION)  float getPan();
   @Source(SUSI_NETWORK_INFORMATION)  int getIntParam(  java.lang.String arg0, int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  float getVolume();
   @Source(SUSI_NO_CATEGORY)  int getCallerUid();
   @Source(SUSI_NO_CATEGORY)  int getCallerPid();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getUtteranceId();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getCallerIdentity();
}
class TextToSpeechService$SynthesisSpeechItem{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getLanguage();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getText();
}
class TtsEngines{
    void updateLocalePrefForEngine(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLocalePrefForEngine(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.speech.tts.TextToSpeech$EngineInfo getEngineInfo(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  android.content.Intent getSettingsIntent(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.List getEngines();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDefaultEngine();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getHighestRankedEngineName();
}

package org.apache.james.mime4j;

class BodyDescriptor{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getTransferEncoding();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getBoundary();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getMimeType();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCharset();
}
class LogFactory{
   @Source(SUSI_NO_CATEGORY)  org.apache.james.mime4j.Log getLog(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0);
}
class RootInputStream{
   @Source(SUSI_NO_CATEGORY)  int getLineNumber();
}

package com.android.deskclock;

class Alarm{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getLabelOrDefault(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class Alarm$DaysOfWeek{
    void set(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
    void set(  @Sink(SUSI_NO_CATEGORY) com.android.deskclock.Alarm$DaysOfWeek arg0);
    void setDayOfWeek(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NO_CATEGORY)  int getCoded();
   @Source(SUSI_NO_CATEGORY)  java.util.HashSet getSetDays();
   @Source(SUSI_NO_CATEGORY)  int getNextAlarm(  @Sink(SUSI_NO_CATEGORY) java.util.Calendar arg0);
   @Source(SUSI_NO_CATEGORY)  boolean[] getBooleanArray();
}
class AlarmAlert{
   @Source(SUSI_NO_CATEGORY)  int getLayoutResId();
}
class AlarmAlertFullScreen{
   @Source(SUSI_NO_CATEGORY)  int getLayoutResId();
}
class AlarmClock{
    void onActivityResult(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) android.content.Intent arg2);
}
class AlarmClock$AlarmItemAdapter{
    void setNewAlarm(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void bindView(  @Sink(SUSI_NO_CATEGORY) android.view.View arg0, @Sink(SUSI_NO_CATEGORY) android.content.Context arg1, @Sink(SUSI_NO_CATEGORY) android.database.Cursor arg2);
   @Source(SUSI_NO_CATEGORY)  int[] getRepeatArray();
   @Source(SUSI_NO_CATEGORY)  int[] getSelectedAlarmsArray();
   @Source(SUSI_NO_CATEGORY)  int[] getExpandedArray();
   @Source(SUSI_NO_CATEGORY)  int getViewTypeCount();
   @Source(SUSI_NO_CATEGORY)  android.view.View getView(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.ViewGroup arg2);
   @Source(SUSI_NO_CATEGORY)  android.os.Bundle getPreviousDaysOfWeekMap();
   @Source(SUSI_NO_CATEGORY)  int getSelectedItemsNum();
}
class AlarmPreference{
   @Source(SUSI_NO_CATEGORY)  android.net.Uri getAlert();
}
class AlarmTimePickerDialogFragment{
   @Source(SUSI_NO_CATEGORY)  com.android.deskclock.AlarmTimePickerDialogFragment newInstance(  @Sink(SUSI_NO_CATEGORY) com.android.deskclock.Alarm arg0);
}
class Alarms{
    void enableAlarm(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) boolean arg2);
   @Source(SUSI_NO_CATEGORY)  long setAlarm(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) com.android.deskclock.Alarm arg1);
    void setNextAlert(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Calendar calculateAlarm(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) com.android.deskclock.Alarm$DaysOfWeek arg2);
   @Source(SUSI_NO_CATEGORY)  android.content.CursorLoader getAlarmsCursorLoader(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  boolean get24HourMode(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.deskclock.Alarm getAlarm(  @Sink(SUSI_NO_CATEGORY) android.content.ContentResolver arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class DeskClock$TabsAdapter{
    void onPageSelected(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void notifySelectedPage(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  int getCount();
   @Source(SUSI_NO_CATEGORY)  android.app.Fragment getItem(  @Sink(SUSI_NO_CATEGORY) int arg0);
}
class DeskClock$TabsAdapter$TabInfo{
   @Source(SUSI_NO_CATEGORY)  int getPosition();
}
class DigitalClock$AmPm{
    void setShowAmPm(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void setIsMorning(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence getAmPmText();
}
class HandleSetAlarm{
    void onCreate(  @Sink(SUSI_SYSTEM_SETTINGS) android.os.Bundle arg0);
}
class LabelDialogFragment{
   @Source(SUSI_NO_CATEGORY)  com.android.deskclock.LabelDialogFragment newInstance(  @Sink(SUSI_NO_CATEGORY) com.android.deskclock.timer.TimerObj arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1, @Sink(SUSI_NO_CATEGORY) java.lang.String arg2);
   @Source(SUSI_NO_CATEGORY)  com.android.deskclock.LabelDialogFragment newInstance(  @Sink(SUSI_NO_CATEGORY) com.android.deskclock.Alarm arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class RepeatPreference{
    void setDaysOfWeek(  @Sink(SUSI_NO_CATEGORY) com.android.deskclock.Alarm$DaysOfWeek arg0);
   @Source(SUSI_NO_CATEGORY)  com.android.deskclock.Alarm$DaysOfWeek getDaysOfWeek();
}
class SettingsActivity{
   @Source(SUSI_NO_CATEGORY)  boolean onPreferenceChange(  @Sink(SUSI_NO_CATEGORY) android.preference.Preference arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.CharSequence[][] getAllTimezones();
}
class TimePicker{
   @Source(SUSI_NO_CATEGORY)  int getHours();
   @Source(SUSI_NO_CATEGORY)  int getMinutes();
   @Source(SUSI_NO_CATEGORY)  int getLayoutId();
}
class TimePicker$SavedState{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}
class TimerSetupView{
    void saveEntryState(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void setLeftRightEnabled(  @Sink(SUSI_NO_CATEGORY) boolean arg0);
    void restoreEntryState(  @Sink(SUSI_NO_CATEGORY) android.os.Bundle arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  int getTime();
   @Source(SUSI_NO_CATEGORY)  int getLayoutId();
}
class Utils{
   @Source(SUSI_NO_CATEGORY)  android.view.View setClockStyle(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) android.view.View arg1, @Sink(SUSI_NO_CATEGORY) android.view.View arg2, @Sink(SUSI_NO_CATEGORY) java.lang.String arg3);
   @Source(SUSI_NO_CATEGORY)  long getTimeNow();
   @Source(SUSI_NO_CATEGORY)  int getPressedColorId();
   @Source(SUSI_NO_CATEGORY)  int getGrayColorId();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCityName(  @Sink(SUSI_NO_CATEGORY) com.android.deskclock.worldclock.CityObj arg0, @Sink(SUSI_NO_CATEGORY) com.android.deskclock.worldclock.CityObj arg1);
}
class Utils$ScreensaverMoveSaverRunnable$1{
   @Source(SUSI_NO_CATEGORY)  float getInterpolation(  @Sink(SUSI_NO_CATEGORY) float arg0);
}

package com.android.server.input;

class InputManagerService{
    void dump(  @Sink(SUSI_FILE) java.io.FileDescriptor arg0, @Sink(SUSI_FILE) java.io.PrintWriter arg1, @Sink(SUSI_FILE) java.lang.String[] arg2);
    void setDisplayViewports(  @Sink(SUSI_NO_CATEGORY) com.android.server.display.DisplayViewport arg0, @Sink(SUSI_NO_CATEGORY) com.android.server.display.DisplayViewport arg1);
    void setFocusedApplication(  @Sink(SUSI_NO_CATEGORY) com.android.server.input.InputApplicationHandle arg0);
    void setSystemUiVisibility(  @Sink(SUSI_NO_CATEGORY) int arg0);
    void setCurrentKeyboardLayoutForInputDevice(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
    void vibrate(  @Sink(SUSI_NO_CATEGORY) int arg0, @Sink(SUSI_NO_CATEGORY) long[] arg1, @Sink(SUSI_NO_CATEGORY) int arg2, @Sink(SUSI_NO_CATEGORY) android.os.IBinder arg3);
    void setInputWindows(  @Sink(SUSI_NO_CATEGORY) com.android.server.input.InputWindowHandle[] arg0);
    void setInputDispatchMode(  @Sink(SUSI_NO_CATEGORY) boolean arg0, @Sink(SUSI_NO_CATEGORY) boolean arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.view.InputDevice[] getInputDevices();
   @Source(SUSI_NETWORK_INFORMATION)  android.view.InputDevice getInputDevice(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.hardware.input.KeyboardLayout getKeyboardLayout(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getSwitchState(  int arg0, int arg1, int arg2);
   @Source(SUSI_NETWORK_INFORMATION)  int[] getInputDeviceIds();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getCurrentKeyboardLayoutForInputDevice(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getKeyCodeState(  int arg0, int arg1, int arg2);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getKeyboardLayoutsForInputDevice(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getScanCodeState(  int arg0, int arg1, int arg2);
   @Source(SUSI_NETWORK_INFORMATION)  android.hardware.input.KeyboardLayout[] getKeyboardLayouts();
}
class InputManagerService$InputDevicesChangedListenerRecord{
    void notifyInputDevicesChanged(  @Sink(SUSI_SYSTEM_SETTINGS) int[] arg0);
}
class PersistentDataStore{
   @Source(SUSI_NO_CATEGORY)  boolean setCurrentKeyboardLayout(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCurrentKeyboardLayout(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getKeyboardLayouts(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class PersistentDataStore$InputDeviceState{
   @Source(SUSI_NO_CATEGORY)  boolean removeKeyboardLayout(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCurrentKeyboardLayout();
   @Source(SUSI_NO_CATEGORY)  java.lang.String[] getKeyboardLayouts();
}

package java.security;

class AccessControlContext{
   @Source(SUSI_NO_CATEGORY)  java.security.DomainCombiner getDomainCombiner();
}
class AccessControlException{
   @Source(SUSI_NO_CATEGORY)  java.security.Permission getPermission();
}
class AccessController{
   @Source(SUSI_NO_CATEGORY)  java.security.AccessControlContext getContext();
}
class AlgorithmParameters{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlgorithm();
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded();
   @Source(SUSI_NO_CATEGORY)  java.security.AlgorithmParameters getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.security.Provider arg1);
   @Source(SUSI_NO_CATEGORY)  java.security.AlgorithmParameters getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.security.Provider getProvider();
   @Source(SUSI_NO_CATEGORY)  java.security.AlgorithmParameters getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.security.spec.AlgorithmParameterSpec getParameterSpec(  @Sink(SUSI_NO_CATEGORY) java.lang.Class arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getEncoded(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class AllPermission{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getActions();
}
class BasicPermission{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getActions();
}
class CodeSigner{
   @Source(SUSI_NO_CATEGORY)  java.security.Timestamp getTimestamp();
   @Source(SUSI_NO_CATEGORY)  java.security.cert.CertPath getSignerCertPath();
}
class CodeSource{
   @Source(SUSI_NO_CATEGORY)  java.security.cert.Certificate[] getCertificates();
   @Source(SUSI_NO_CATEGORY)  java.net.URL getLocation();
   @Source(SUSI_NO_CATEGORY)  java.security.CodeSigner[] getCodeSigners();
}
class DigestInputStream{
   @Source(SUSI_NO_CATEGORY)  java.security.MessageDigest getMessageDigest();
}
class KeyFactory{
   @Source(SUSI_NO_CATEGORY)  java.security.KeyFactory getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.security.spec.KeySpec getKeySpec(  @Sink(SUSI_NO_CATEGORY) java.security.Key arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Class arg1);
   @Source(SUSI_NO_CATEGORY)  java.security.KeyFactory getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.security.Provider arg1);
   @Source(SUSI_NO_CATEGORY)  java.security.Provider getProvider();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlgorithm();
   @Source(SUSI_NO_CATEGORY)  java.security.KeyFactory getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class KeyPair{
   @Source(SUSI_NO_CATEGORY)  java.security.PublicKey getPublic();
   @Source(SUSI_NO_CATEGORY)  java.security.PrivateKey getPrivate();
}
class KeyPairGenerator{
   @Source(SUSI_NO_CATEGORY)  java.security.Provider getProvider();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlgorithm();
   @Source(SUSI_NO_CATEGORY)  java.security.KeyPair genKeyPair();
   @Source(SUSI_NO_CATEGORY)  java.security.KeyPairGenerator getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.security.KeyPairGenerator getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.security.Provider arg1);
   @Source(SUSI_NO_CATEGORY)  java.security.KeyPairGenerator getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.security.KeyPair generateKeyPair();
}
class KeyStore{
    void setKeyEntry(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.security.Key arg1, @Sink(SUSI_NO_CATEGORY) char[] arg2, @Sink(SUSI_NO_CATEGORY) java.security.cert.Certificate[] arg3);
    void setEntry(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.security.KeyStore$Entry arg1, @Sink(SUSI_NO_CATEGORY) java.security.KeyStore$ProtectionParameter arg2);
    void setCertificateEntry(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.security.cert.Certificate arg1);
    void setKeyEntry(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) byte[] arg1, @Sink(SUSI_NO_CATEGORY) java.security.cert.Certificate[] arg2);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getDefaultType();
   @Source(SUSI_NO_CATEGORY)  java.security.KeyStore getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.security.Provider arg1);
   @Source(SUSI_NO_CATEGORY)  java.security.KeyStore$Entry getEntry(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.security.KeyStore$ProtectionParameter arg1);
   @Source(SUSI_NO_CATEGORY)  java.security.cert.Certificate[] getCertificateChain(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.security.KeyStore getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.security.Key getKey(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) char[] arg1);
   @Source(SUSI_NO_CATEGORY)  java.security.cert.Certificate getCertificate(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getCertificateAlias(  @Sink(SUSI_NO_CATEGORY) java.security.cert.Certificate arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Date getCreationDate(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.security.Provider getProvider();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getType();
   @Source(SUSI_NO_CATEGORY)  java.security.KeyStore getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class KeyStore$Builder$BuilderImpl{
   @Source(SUSI_NO_CATEGORY)  java.security.KeyStore getKeyStore();
   @Source(SUSI_NO_CATEGORY)  java.security.KeyStore$ProtectionParameter getProtectionParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class KeyStore$Builder$TmpLSParameter{
   @Source(SUSI_NO_CATEGORY)  java.security.KeyStore$ProtectionParameter getProtectionParameter();
}
class KeyStore$CallbackHandlerProtection{
   @Source(SUSI_NO_CATEGORY)  javax.security.auth.callback.CallbackHandler getCallbackHandler();
}
class KeyStore$PasswordProtection{
   @Source(SUSI_NO_CATEGORY)  char[] getPassword();
}
class KeyStore$PrivateKeyEntry{
   @Source(SUSI_NO_CATEGORY)  java.security.cert.Certificate[] getCertificateChain();
   @Source(SUSI_NO_CATEGORY)  java.security.cert.Certificate getCertificate();
   @Source(SUSI_NO_CATEGORY)  java.security.PrivateKey getPrivateKey();
}
class KeyStore$SecretKeyEntry{
   @Source(SUSI_NO_CATEGORY)  javax.crypto.SecretKey getSecretKey();
}
class KeyStore$TrustedCertificateEntry{
   @Source(SUSI_NO_CATEGORY)  java.security.cert.Certificate getTrustedCertificate();
}
class KeyStoreSpi{
   @Source(SUSI_NO_CATEGORY)  java.security.KeyStore$Entry engineGetEntry(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.security.KeyStore$ProtectionParameter arg1);
   @Source(SUSI_NO_CATEGORY)  char[] getPasswordFromCallBack(  @Sink(SUSI_NO_CATEGORY) java.security.KeyStore$ProtectionParameter arg0);
}
class MessageDigest{
   @Source(SUSI_NO_CATEGORY)  java.security.MessageDigest getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.security.Provider arg1);
   @Source(SUSI_NO_CATEGORY)  java.security.Provider getProvider();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
   @Source(SUSI_NO_CATEGORY)  java.security.MessageDigest getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlgorithm();
   @Source(SUSI_NO_CATEGORY)  int getDigestLength();
   @Source(SUSI_NO_CATEGORY)  byte[] digest();
   @Source(SUSI_NO_CATEGORY)  java.security.MessageDigest getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] digest(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
}
class MessageDigest$MessageDigestImpl{
   @Source(SUSI_NO_CATEGORY)  byte[] engineDigest();
}
class MessageDigestSpi{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
}
class Permission{
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.security.PermissionCollection newPermissionCollection();
}
class PrivilegedActionException{
   @Source(SUSI_NO_CATEGORY)  java.lang.Exception getException();
}
class ProtectionDomain{
   @Source(SUSI_NO_CATEGORY)  java.security.Principal[] getPrincipals();
   @Source(SUSI_NO_CATEGORY)  java.security.CodeSource getCodeSource();
   @Source(SUSI_NO_CATEGORY)  java.security.PermissionCollection getPermissions();
   @Source(SUSI_NO_CATEGORY)  java.lang.ClassLoader getClassLoader();
}
class Provider{
   @Source(SUSI_NO_CATEGORY)  double getVersion();
   @Source(SUSI_NO_CATEGORY)  java.util.Set entrySet();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getName();
   @Source(SUSI_NO_CATEGORY)  java.security.Provider$Service getService(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getInfo();
   @Source(SUSI_NO_CATEGORY)  java.util.Set getServices();
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  java.security.Provider$Service getService(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.util.Set keySet();
   @Source(SUSI_NO_CATEGORY)  int getProviderNumber();
   @Source(SUSI_NO_CATEGORY)  java.util.Collection values();
}
class Provider$Service{
    void putAttribute(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAttribute(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getAlgorithm();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getAliases();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getClassName();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getType();
   @Source(SUSI_NO_CATEGORY)  java.security.Provider getProvider();
}
class SecureRandom{
    void setSeed(  @Sink(SUSI_NO_CATEGORY) long arg0);
    void setSeed(  @Sink(SUSI_NO_CATEGORY) byte[] arg0);
   @Source(SUSI_NO_CATEGORY)  java.security.SecureRandom getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  byte[] getSeed(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.security.Provider getProvider();
   @Source(SUSI_NO_CATEGORY)  java.security.SecureRandom getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.security.Provider arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] generateSeed(  @Sink(SUSI_NO_CATEGORY) int arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlgorithm();
   @Source(SUSI_NO_CATEGORY)  java.security.SecureRandom getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
}
class Security{
    void setProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.security.Provider[] getProviders();
   @Source(SUSI_NO_CATEGORY)  java.util.Set getAlgorithms(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlgorithmProperty(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.security.Provider[] getProviders(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.security.Provider getProvider(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
}
class Security$SecurityDoor{
   @Source(SUSI_NO_CATEGORY)  java.security.Provider$Service getService(  @Sink(SUSI_NO_CATEGORY) java.security.Provider arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  java.util.List getAliases(  @Sink(SUSI_NO_CATEGORY) java.security.Provider$Service arg0);
}
class Signature{
    void setParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.Object arg1);
   @Source(SUSI_NO_CATEGORY)  java.security.AlgorithmParameters getParameters();
   @Source(SUSI_NO_CATEGORY)  java.lang.Object getParameter(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.security.Provider getProvider();
   @Source(SUSI_NO_CATEGORY)  java.security.Signature getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.security.Provider arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
   @Source(SUSI_NO_CATEGORY)  java.lang.String toString();
   @Source(SUSI_NO_CATEGORY)  java.security.Signature getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0);
   @Source(SUSI_NO_CATEGORY)  java.security.Signature getInstance(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) java.lang.String arg1);
   @Source(SUSI_NO_CATEGORY)  byte[] sign();
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAlgorithm();
}
class Signature$SignatureImpl{
   @Source(SUSI_NO_CATEGORY)  byte[] engineSign();
}
class SignatureSpi{
   @Source(SUSI_NO_CATEGORY)  java.lang.Object clone();
   @Source(SUSI_NO_CATEGORY)  java.security.AlgorithmParameters engineGetParameters();
}
class Timestamp{
   @Source(SUSI_NO_CATEGORY)  java.util.Date getTimestamp();
   @Source(SUSI_NO_CATEGORY)  java.security.cert.CertPath getSignerCertPath();
}

package android.ddm;

class DdmHandleAppName{
    void setAppName(  @Sink(SUSI_NO_CATEGORY) java.lang.String arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NO_CATEGORY)  java.lang.String getAppName();
}

package com.android.calendar.month;

class MonthByWeekAdapter{
    void setSelectedDay(  @Sink(SUSI_CALENDAR_INFORMATION) android.text.format.Time arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  android.view.View getView(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.view.View arg1, @Sink(SUSI_CALENDAR_INFORMATION) android.view.ViewGroup arg2);
}
class MonthByWeekFragment{
    void setMonthDisplayed(  @Sink(SUSI_CALENDAR_INFORMATION) android.text.format.Time arg0, @Sink(SUSI_CALENDAR_INFORMATION) boolean arg1);
   @Source(SUSI_CALENDAR_INFORMATION)  long getSupportedEventTypes();
}
class MonthWeekEventsView{
    void setWeekParams(  @Sink(SUSI_CALENDAR_INFORMATION) java.util.HashMap arg0, @Sink(SUSI_CALENDAR_INFORMATION) java.lang.String arg1);
    void setClickedDay(  @Sink(SUSI_CALENDAR_INFORMATION) float arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getDayIndexFromLocation(  @Sink(SUSI_CALENDAR_INFORMATION) float arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  android.text.format.Time getDayFromLocation(  @Sink(SUSI_CALENDAR_INFORMATION) float arg0);
}
class SimpleDayPickerFragment{
    void setMonthDisplayed(  @Sink(SUSI_CALENDAR_INFORMATION) android.text.format.Time arg0, @Sink(SUSI_CALENDAR_INFORMATION) boolean arg1);
}
class SimpleWeekView{
   @Source(SUSI_CALENDAR_INFORMATION)  int getFirstJulianDay();
   @Source(SUSI_CALENDAR_INFORMATION)  int getFirstMonth();
   @Source(SUSI_CALENDAR_INFORMATION)  android.text.format.Time getDayFromLocation(  @Sink(SUSI_CALENDAR_INFORMATION) float arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getLastMonth();
}
class SimpleWeeksAdapter{
    void setSelectedDay(  @Sink(SUSI_CALENDAR_INFORMATION) android.text.format.Time arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  android.text.format.Time getSelectedDay();
   @Source(SUSI_CALENDAR_INFORMATION)  long getItemId(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  int getCount();
   @Source(SUSI_CALENDAR_INFORMATION)  java.lang.Object getItem(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0);
   @Source(SUSI_CALENDAR_INFORMATION)  android.view.View getView(  @Sink(SUSI_CALENDAR_INFORMATION) int arg0, @Sink(SUSI_CALENDAR_INFORMATION) android.view.View arg1, @Sink(SUSI_CALENDAR_INFORMATION) android.view.ViewGroup arg2);
}

package com.google.android.apps.lightcycle.util;

class AnalyticsHelper{
   @Source(SUSI_NO_CATEGORY)  com.google.android.apps.lightcycle.util.AnalyticsHelper getInstance(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0);
}
class FileUtil{
    void storeFile(  @Sink(SUSI_LOG) java.io.InputStream arg0, @Sink(SUSI_LOG) java.io.File arg1);
}
class LocationProvider{
   @Source(SUSI_LOCATION_INFORMATION)  android.location.Location getCurrentLocation();
}
class MetadataUtils{
    void writeMetadataIntoJpegFile(  @Sink(SUSI_FILE) java.lang.String arg0, @Sink(SUSI_FILE) java.lang.String arg1, @Sink(SUSI_FILE) java.lang.String arg2, @Sink(SUSI_FILE) boolean arg3);
}
class Size{
    void set(  @Sink(SUSI_NO_CATEGORY) com.google.android.apps.lightcycle.util.Size arg0);
}
class UiUtil{
   @Source(SUSI_NO_CATEGORY)  com.google.android.apps.lightcycle.util.Size getDrawableDimensions(  @Sink(SUSI_NO_CATEGORY) android.content.Context arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
}

package com.android.contacts.model.dataitem;

class DataItem{
    void setRawContactId(  @Sink(SUSI_CONTACT_INFORMATION) long arg0);
    void setMimeType(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.AccountTypeManager getAccountTypeManager();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getMimeType();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getKindString();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.RawContact getRawContact();
   @Source(SUSI_CONTACT_INFORMATION)  int getKindTypeColumn();
   @Source(SUSI_CONTACT_INFORMATION)  long getId();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.dataitem.DataKind getDataKind();
   @Source(SUSI_CONTACT_INFORMATION)  android.content.ContentValues getContentValues();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.account.AccountType getAccountType();
}
class EmailDataItem{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getData();
}
class GroupMembershipDataItem{
   @Source(SUSI_CONTACT_INFORMATION)  long getGroupRowId();
}
class ImDataItem{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Integer getProtocol();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getData();
   @Source(SUSI_CONTACT_INFORMATION)  int getChatCapability();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getCustomProtocol();
}
class OrganizationDataItem{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getTitle();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getCompany();
}
class PhoneDataItem{
    void computeFormattedPhoneNumber(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getNumber();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getNormalizedNumber();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getFormattedPhoneNumber();
}
class PhotoDataItem{
   @Source(SUSI_CONTACT_INFORMATION)  byte[] getPhoto();
}
class SipAddressDataItem{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getSipAddress();
}
class StructuredNameDataItem{
    void setPhoneticFamilyName(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
    void setPhoneticGivenName(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
    void setPhoneticMiddleName(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
    void setDisplayName(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getPhoneticFamilyName();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getPhoneticGivenName();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getDisplayName();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getPhoneticMiddleName();
}
class StructuredPostalDataItem{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getFormattedAddress();
}
class WebsiteDataItem{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getUrl();
}

package android.telephony;

class CellIdentityCdma{
   @Source(SUSI_NETWORK_INFORMATION)  int getLatitude();
   @Source(SUSI_NETWORK_INFORMATION)  int getBasestationId();
   @Source(SUSI_NETWORK_INFORMATION)  int getLongitude();
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.CellIdentityCdma copy();
   @Source(SUSI_NETWORK_INFORMATION)  int getSystemId();
   @Source(SUSI_NETWORK_INFORMATION)  int getNetworkId();
}
class CellIdentityGsm{
   @Source(SUSI_NETWORK_INFORMATION)  int getMnc();
   @Source(SUSI_NETWORK_INFORMATION)  int getMcc();
   @Source(SUSI_NETWORK_INFORMATION)  int getLac();
   @Source(SUSI_NETWORK_INFORMATION)  int getCid();
   @Source(SUSI_NETWORK_INFORMATION)  int getPsc();
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.CellIdentityGsm copy();
}
class CellIdentityLte{
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.CellIdentityLte copy();
   @Source(SUSI_NETWORK_INFORMATION)  int getCi();
   @Source(SUSI_NETWORK_INFORMATION)  int getMcc();
   @Source(SUSI_NETWORK_INFORMATION)  int getMnc();
   @Source(SUSI_NETWORK_INFORMATION)  int getPci();
   @Source(SUSI_NETWORK_INFORMATION)  int getTac();
}
class CellInfo{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1, @Sink(SUSI_NO_CATEGORY) int arg2);
   @Source(SUSI_NETWORK_INFORMATION)  long getTimeStamp();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
   @Source(SUSI_NETWORK_INFORMATION)  int hashCode();
   @Source(SUSI_NETWORK_INFORMATION)  int getTimeStampType();
}
class CellInfo$1{
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.CellInfo createFromParcel(  android.os.Parcel arg0);
}
class CellInfoCdma{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.CellIdentityCdma getCellIdentity();
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.CellSignalStrengthCdma getCellSignalStrength();
}
class CellInfoCdma$1{
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.CellInfoCdma createFromParcel(  android.os.Parcel arg0);
}
class CellInfoGsm{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.CellSignalStrengthGsm getCellSignalStrength();
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.CellIdentityGsm getCellIdentity();
}
class CellInfoGsm$1{
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.CellInfoGsm createFromParcel(  android.os.Parcel arg0);
}
class CellInfoLte{
    void writeToParcel(  @Sink(SUSI_NO_CATEGORY) android.os.Parcel arg0, @Sink(SUSI_NO_CATEGORY) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.CellSignalStrengthLte getCellSignalStrength();
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.CellIdentityLte getCellIdentity();
}
class CellInfoLte$1{
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.CellInfoLte createFromParcel(  android.os.Parcel arg0);
}
class CellLocation{
   @Source(SUSI_LOCATION_INFORMATION)  android.telephony.CellLocation getEmpty();
}
class CellSignalStrengthCdma{
    void setDefaultValues();
   @Source(SUSI_NETWORK_INFORMATION)  int getAsuLevel();
   @Source(SUSI_NETWORK_INFORMATION)  int getEvdoSnr();
   @Source(SUSI_NETWORK_INFORMATION)  int getCdmaDbm();
   @Source(SUSI_NETWORK_INFORMATION)  int getCdmaEcio();
   @Source(SUSI_NETWORK_INFORMATION)  int getLevel();
   @Source(SUSI_NETWORK_INFORMATION)  int getEvdoDbm();
   @Source(SUSI_NETWORK_INFORMATION)  int getEvdoLevel();
   @Source(SUSI_NETWORK_INFORMATION)  int getEvdoEcio();
   @Source(SUSI_NETWORK_INFORMATION)  int getDbm();
   @Source(SUSI_NETWORK_INFORMATION)  int getCdmaLevel();
}
class CellSignalStrengthGsm{
    void setDefaultValues();
   @Source(SUSI_NETWORK_INFORMATION)  int getDbm();
   @Source(SUSI_NETWORK_INFORMATION)  int getLevel();
   @Source(SUSI_NETWORK_INFORMATION)  int getAsuLevel();
}
class CellSignalStrengthLte{
    void setDefaultValues();
   @Source(SUSI_NETWORK_INFORMATION)  int getLevel();
   @Source(SUSI_NETWORK_INFORMATION)  int getAsuLevel();
   @Source(SUSI_NETWORK_INFORMATION)  int getDbm();
   @Source(SUSI_NETWORK_INFORMATION)  int getTimingAdvance();
}
class NeighboringCellInfo{
   @Source(SUSI_NETWORK_INFORMATION)  int getNetworkType();
   @Source(SUSI_NETWORK_INFORMATION)  int getLac();
   @Source(SUSI_NETWORK_INFORMATION)  int getPsc();
   @Source(SUSI_NETWORK_INFORMATION)  int getRssi();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
   @Source(SUSI_NETWORK_INFORMATION)  int getCid();
}
class PhoneNumberUtils{
   @Source(SUSI_UNIQUE_IDENTIFIER)  byte[] numberToCalledPartyBCD(  java.lang.String arg0);
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getStrippedReversed(  java.lang.String arg0);
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getNumberFromIntent(  android.content.Intent arg0, android.content.Context arg1);
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getUsernameFromUriNumber(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getFormatTypeForLocale(  java.util.Locale arg0);
   @Source(SUSI_NETWORK_INFORMATION)  byte[] networkPortionToCalledPartyBCD(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  byte[] networkPortionToCalledPartyBCDWithLength(  java.lang.String arg0);
}
class ServiceState{
    void setStateOff();
    void setStateOutOfService();
    void setCssIndicator(  @Sink(SUSI_SYSTEM_SETTINGS) int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getRilRadioTechnology();
   @Source(SUSI_NETWORK_INFORMATION)  int getState();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getOperatorNumeric();
   @Source(SUSI_NETWORK_INFORMATION)  int getSystemId();
   @Source(SUSI_NETWORK_INFORMATION)  int getRadioTechnology();
   @Source(SUSI_NETWORK_INFORMATION)  int getCdmaDefaultRoamingIndicator();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getOperatorAlphaShort();
   @Source(SUSI_NETWORK_INFORMATION)  int getCssIndicator();
   @Source(SUSI_NETWORK_INFORMATION)  int getCdmaRoamingIndicator();
   @Source(SUSI_NETWORK_INFORMATION)  int getCdmaEriIconIndex();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getRoaming();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
   @Source(SUSI_NETWORK_INFORMATION)  boolean getIsManualSelection();
   @Source(SUSI_NETWORK_INFORMATION)  int getNetworkId();
   @Source(SUSI_NETWORK_INFORMATION)  int getNetworkType();
   @Source(SUSI_NETWORK_INFORMATION)  int getCdmaEriIconMode();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getOperatorAlphaLong();
}
class SignalStrength{
   @Source(SUSI_NETWORK_INFORMATION)  int getGsmLevel();
   @Source(SUSI_NETWORK_INFORMATION)  int getLteAsuLevel();
   @Source(SUSI_NETWORK_INFORMATION)  int getGsmDbm();
   @Source(SUSI_NETWORK_INFORMATION)  int getAsuLevel();
   @Source(SUSI_NETWORK_INFORMATION)  int getEvdoDbm();
   @Source(SUSI_NETWORK_INFORMATION)  int getLteDbm();
   @Source(SUSI_NETWORK_INFORMATION)  int getLteCqi();
   @Source(SUSI_NETWORK_INFORMATION)  int getGsmAsuLevel();
   @Source(SUSI_NETWORK_INFORMATION)  int getLteLevel();
   @Source(SUSI_NETWORK_INFORMATION)  int getGsmBitErrorRate();
   @Source(SUSI_NETWORK_INFORMATION)  int getCdmaDbm();
   @Source(SUSI_NETWORK_INFORMATION)  int getCdmaEcio();
   @Source(SUSI_NETWORK_INFORMATION)  int getEvdoSnr();
   @Source(SUSI_NETWORK_INFORMATION)  int getDbm();
   @Source(SUSI_NETWORK_INFORMATION)  int getLevel();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
   @Source(SUSI_NETWORK_INFORMATION)  int getCdmaLevel();
   @Source(SUSI_NETWORK_INFORMATION)  int getCdmaAsuLevel();
   @Source(SUSI_NETWORK_INFORMATION)  int getLteSignalStrenght();
   @Source(SUSI_NETWORK_INFORMATION)  int getGsmSignalStrength();
   @Source(SUSI_NETWORK_INFORMATION)  int getLteRssnr();
   @Source(SUSI_NETWORK_INFORMATION)  int getEvdoAsuLevel();
   @Source(SUSI_NETWORK_INFORMATION)  int getEvdoEcio();
   @Source(SUSI_NETWORK_INFORMATION)  int getLteRsrq();
   @Source(SUSI_NETWORK_INFORMATION)  int getLteRsrp();
   @Source(SUSI_NETWORK_INFORMATION)  int getEvdoLevel();
}
class SmsCbCmasInfo{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
   @Source(SUSI_NETWORK_INFORMATION)  int getCategory();
   @Source(SUSI_NETWORK_INFORMATION)  int getCertainty();
   @Source(SUSI_NETWORK_INFORMATION)  int getResponseType();
   @Source(SUSI_NETWORK_INFORMATION)  int getUrgency();
   @Source(SUSI_NETWORK_INFORMATION)  int getSeverity();
   @Source(SUSI_NETWORK_INFORMATION)  int getMessageClass();
}
class SmsCbEtwsInfo{
   @Source(SUSI_NETWORK_INFORMATION)  int getWarningType();
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getPrimaryNotificationSignature();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
   @Source(SUSI_NETWORK_INFORMATION)  long getPrimaryNotificationTimestamp();
}
class SmsCbLocation{
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getPlmn();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String toString();
   @Source(SUSI_LOCATION_INFORMATION)  int getLac();
   @Source(SUSI_LOCATION_INFORMATION)  int getCid();
}
class SmsCbMessage{
    void writeToParcel(  @Sink(SUSI_SMS_MMS) android.os.Parcel arg0, @Sink(SUSI_SMS_MMS) int arg1);
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.SmsCbEtwsInfo getEtwsWarningInfo();
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.SmsCbCmasInfo getCmasWarningInfo();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getLanguageCode();
   @Source(SUSI_NETWORK_INFORMATION)  int getSerialNumber();
   @Source(SUSI_NETWORK_INFORMATION)  int getMessagePriority();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getMessageBody();
   @Source(SUSI_NETWORK_INFORMATION)  int getMessageFormat();
   @Source(SUSI_NETWORK_INFORMATION)  int getGeographicalScope();
   @Source(SUSI_NETWORK_INFORMATION)  int getServiceCategory();
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.SmsCbLocation getLocation();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
}
class SmsManager{
   @Source(SUSI_SMS_MMS)  boolean disableCellBroadcast(  @Sink(SUSI_SMS_MMS) int arg0);
    void sendDataMessage(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) short arg2, @Sink(SUSI_SMS_MMS) byte[] arg3, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg4, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg5);
   @Source(SUSI_SMS_MMS)  boolean enableCellBroadcastRange(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) int arg1);
   @Source(SUSI_SMS_MMS)  boolean updateMessageOnIcc(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) int arg1, @Sink(SUSI_SMS_MMS) byte[] arg2);
    void sendMultipartTextMessage(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) java.util.ArrayList arg2, @Sink(SUSI_SMS_MMS) java.util.ArrayList arg3, @Sink(SUSI_SMS_MMS) java.util.ArrayList arg4);
   @Source(SUSI_SMS_MMS)  boolean copyMessageToIcc(  @Sink(SUSI_SMS_MMS) byte[] arg0, @Sink(SUSI_SMS_MMS) byte[] arg1, @Sink(SUSI_SMS_MMS) int arg2);
   @Source(SUSI_SMS_MMS)  boolean disableCellBroadcastRange(  @Sink(SUSI_SMS_MMS) int arg0, @Sink(SUSI_SMS_MMS) int arg1);
    void sendTextMessage(  @Sink(SUSI_SMS_MMS) java.lang.String arg0, @Sink(SUSI_SMS_MMS) java.lang.String arg1, @Sink(SUSI_SMS_MMS) java.lang.String arg2, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg3, @Sink(SUSI_SMS_MMS) android.app.PendingIntent arg4);
   @Source(SUSI_SMS_MMS)  boolean deleteMessageFromIcc(  @Sink(SUSI_SMS_MMS) int arg0);
   @Source(SUSI_SMS_MMS)  boolean enableCellBroadcast(  @Sink(SUSI_SMS_MMS) int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.SmsManager getDefault();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.ArrayList divideMessage(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.util.ArrayList getAllMessagesFromIcc();
}
class SmsMessage{
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getPdu();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getDisplayOriginatingAddress();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getPseudoSubject();
   @Source(SUSI_NETWORK_INFORMATION)  int getProtocolIdentifier();
   @Source(SUSI_NETWORK_INFORMATION)  int getIndexOnIcc();
   @Source(SUSI_NETWORK_INFORMATION)  int getIndexOnSim();
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.SmsMessage$MessageClass getMessageClass();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getServiceCenterAddress();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEmailFrom();
   @Source(SUSI_NETWORK_INFORMATION)  int getStatus();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getEmailBody();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getDisplayMessageBody();
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.SmsMessage$SubmitPdu getSubmitPdu(  java.lang.String arg0, java.lang.String arg1, java.lang.String arg2, boolean arg3);
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.SmsMessage createFromEfRecord(  int arg0, byte[] arg1);
   @Source(SUSI_NETWORK_INFORMATION)  long getTimestampMillis();
   @Source(SUSI_NETWORK_INFORMATION)  int getTPLayerLengthForPDU(  java.lang.String arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getMessageBody();
   @Source(SUSI_NETWORK_INFORMATION)  int getStatusOnSim();
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.SmsMessage createFromPdu(  byte[] arg0, java.lang.String arg1);
   @Source(SUSI_NETWORK_INFORMATION)  int getStatusOnIcc();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getOriginatingAddress();
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.SmsMessage$SubmitPdu getSubmitPdu(  java.lang.String arg0, java.lang.String arg1, short arg2, byte[] arg3, boolean arg4);
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.SmsMessage createFromPdu(  byte[] arg0);
   @Source(SUSI_NETWORK_INFORMATION)  byte[] getUserData();
}
class SmsMessage$SubmitPdu{
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String toString();
}
class TelephonyManager{
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getDeviceSoftwareVersion();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getLine1AlphaTag();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getMsisdn();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getCompleteVoiceMailNumber();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getDeviceId();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getVoiceMailNumber();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getLine1Number();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getIsimImpi();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getSimSerialNumber();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getIsimDomain();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getSubscriberId();
   @Source(SUSI_UNIQUE_IDENTIFIER)  java.lang.String getVoiceMailAlphaTag();
   @Source(SUSI_LOCATION_INFORMATION)  android.telephony.CellLocation getCellLocation();
   @Source(SUSI_NETWORK_INFORMATION)  int getCdmaEriIconIndex();
   @Source(SUSI_NETWORK_INFORMATION)  int getPhoneType();
   @Source(SUSI_NETWORK_INFORMATION)  int getLteOnCdmaModeStatic();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNetworkCountryIso();
   @Source(SUSI_NETWORK_INFORMATION)  int getNetworkType();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNetworkOperator();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNetworkTypeName();
   @Source(SUSI_NETWORK_INFORMATION)  int getPhoneType(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getDataActivity();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getNeighboringCellInfo();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNetworkOperatorName();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getSimOperator();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getCdmaEriText();
   @Source(SUSI_NETWORK_INFORMATION)  java.util.List getAllCellInfo();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getNetworkTypeName(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getSimCountryIso();
   @Source(SUSI_NETWORK_INFORMATION)  int getNetworkClass(  int arg0);
   @Source(SUSI_NETWORK_INFORMATION)  int getCurrentPhoneType();
   @Source(SUSI_NETWORK_INFORMATION)  int getVoiceMessageCount();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String[] getIsimImpu();
   @Source(SUSI_NETWORK_INFORMATION)  int getSimState();
   @Source(SUSI_NETWORK_INFORMATION)  int getCdmaEriIconMode();
   @Source(SUSI_NETWORK_INFORMATION)  int getDataState();
   @Source(SUSI_NETWORK_INFORMATION)  java.lang.String getSimOperatorName();
   @Source(SUSI_NETWORK_INFORMATION)  android.telephony.TelephonyManager getDefault();
   @Source(SUSI_NETWORK_INFORMATION)  int getCallState();
   @Source(SUSI_NETWORK_INFORMATION)  int getLteOnCdmaMode();
}

package com.android.contacts.util;

class AccountFilterUtil{
   @Source(SUSI_CONTACT_INFORMATION)  boolean updateAccountFilterTitleForPhone(  @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.list.ContactListFilter arg1, @Sink(SUSI_CONTACT_INFORMATION) boolean arg2);
    void startAccountFilterActivityForResult(  @Sink(SUSI_CONTACT_INFORMATION) android.app.Activity arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.list.ContactListFilter arg2);
   @Source(SUSI_CONTACT_INFORMATION)  boolean updateAccountFilterTitleForPeople(  @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.list.ContactListFilter arg1, @Sink(SUSI_CONTACT_INFORMATION) boolean arg2);
    void startAccountFilterActivityForResult(  @Sink(SUSI_CONTACT_INFORMATION) android.app.Fragment arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.list.ContactListFilter arg2);
}
class AccountPromptUtils{
    void launchAccountPrompt(  @Sink(SUSI_CONTACT_INFORMATION) android.app.Activity arg0);
}
class AccountSelectionUtil{
    void doImportFromSdCard(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.account.AccountWithDataSet arg1);
    void doImportFromSim(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.account.AccountWithDataSet arg1);
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Dialog getSelectAccountDialog(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1, @Sink(SUSI_CONTACT_INFORMATION) android.content.DialogInterface$OnClickListener arg2, @Sink(SUSI_CONTACT_INFORMATION) android.content.DialogInterface$OnCancelListener arg3);
}
class AccountSelectionUtil$1{
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
}
class AccountsListAdapter{
   @Source(SUSI_CONTACT_INFORMATION)  int getCount();
   @Source(SUSI_CONTACT_INFORMATION)  long getItemId(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.model.account.AccountWithDataSet getItem(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.view.View getView(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg1, @Sink(SUSI_CONTACT_INFORMATION) android.view.ViewGroup arg2);
}
class AsyncTaskExecutors{
   @Source(SUSI_SYNCHRONIZATION_DATA)  com.android.contacts.util.AsyncTaskExecutor createAsyncTaskExecutor();
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.util.AsyncTaskExecutor createThreadPoolExecutor();
}
class BitmapUtil{
   @Source(SUSI_CONTACT_INFORMATION)  int getSmallerExtentFromBytes(  @Sink(SUSI_CONTACT_INFORMATION) byte[] arg0);
}
class ContactBadgeUtil{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getSocialDate(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.util.StreamItemEntry arg0, @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg1);
}
class DataStatus{
   @Source(SUSI_CONTACT_INFORMATION)  int getPresence();
}
class DialogManager{
    void showDialogInView(  @Sink(SUSI_CONTACT_INFORMATION) android.view.View arg0, @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg1);
   @Source(SUSI_CONTACT_INFORMATION)  android.app.Dialog onCreateDialog(  @Sink(SUSI_CONTACT_INFORMATION) int arg0, @Sink(SUSI_CONTACT_INFORMATION) android.os.Bundle arg1);
}
class ExpirableCache{
    void put(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.Object arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.Object arg1);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.util.ExpirableCache$CachedValue getCachedValue(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.Object arg0);
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.util.ExpirableCache create(  @Sink(SUSI_CONTACT_INFORMATION) int arg0);
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Object getPossiblyExpired(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.Object arg0);
}
class ExpirableCache$GenerationalCachedValue{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Object getValue();
}
class HtmlUtils$StreamItemQuoteSpan{
   @Source(SUSI_CONTACT_INFORMATION)  int getLeadingMargin(  @Sink(SUSI_CONTACT_INFORMATION) boolean arg0);
}
class ImageViewDrawableSetter{
    void setupContactPhoto(  @Sink(SUSI_CONTACT_INFORMATION) com.android.contacts.model.Contact arg0, @Sink(SUSI_CONTACT_INFORMATION) android.widget.ImageView arg1);
   @Source(SUSI_CONTACT_INFORMATION)  byte[] getCompressedImage();
   @Source(SUSI_CONTACT_INFORMATION)  android.widget.ImageView getTarget();
}
class LocalizedNameResolver{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getAllContactsName(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
}
class MemoryUtils{
   @Source(SUSI_CONTACT_INFORMATION)  long getTotalMemorySize();
}
class NameConverter{
   @Source(SUSI_CONTACT_INFORMATION)  android.content.ContentValues displayNameToStructuredName(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1, @Sink(SUSI_CONTACT_INFORMATION) android.content.ContentValues arg2);
   @Source(SUSI_CONTACT_INFORMATION)  java.util.Map displayNameToStructuredName(  @Sink(SUSI_CONTACT_INFORMATION) android.content.Context arg0, @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg1);
}
class StopWatch{
   @Source(SUSI_CONTACT_INFORMATION)  com.android.contacts.util.StopWatch getNullStopWatch();
}
class StreamItemEntry{
   @Source(SUSI_CONTACT_INFORMATION)  long getId();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getDataSet();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getDecodedText();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getLabelRes();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.CharSequence getDecodedComments();
   @Source(SUSI_CONTACT_INFORMATION)  java.util.List getPhotos();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getText();
   @Source(SUSI_CONTACT_INFORMATION)  long getTimestamp();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getResPackage();
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getAccountType();
}
class StreamItemPhotoEntry{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.String getPhotoUri();
   @Source(SUSI_CONTACT_INFORMATION)  long getId();
}
class StructuredPostalUtils{
   @Source(SUSI_CONTACT_INFORMATION)  android.net.Uri getPostalAddressUri(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
   @Source(SUSI_CONTACT_INFORMATION)  android.content.Intent getViewPostalAddressIntent(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.String arg0);
}
class ThemeUtils{
   @Source(SUSI_CONTACT_INFORMATION)  int getAttribute(  @Sink(SUSI_CONTACT_INFORMATION) android.content.res.Resources$Theme arg0, @Sink(SUSI_CONTACT_INFORMATION) int arg1);
}
class WeakAsyncTask{
   @Source(SUSI_CONTACT_INFORMATION)  java.lang.Object doInBackground(  @Sink(SUSI_CONTACT_INFORMATION) java.lang.Object[] arg0);
}
